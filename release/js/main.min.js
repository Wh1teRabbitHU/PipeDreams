!function(){return function t(e,i,n){function a(s,o){if(!i[s]){if(!e[s]){var h="function"==typeof require&&require;if(!o&&h)return h(s,!0);if(r)return r(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var l=i[s]={exports:{}};e[s][0].call(l.exports,function(t){return a(e[s][1][t]||t)},l,l.exports,t,e,i,n)}return i[s].exports}for(var r="function"==typeof require&&require,s=0;s<n.length;s++)a(n[s]);return a}}()({1:[function(t,e,i){},{}],2:[function(t,e,i){(function(n){var a,r,s,o,h,c,l,d,u,f,g,p,m,v,y={};a=this,r=Math.PI/180,(y={version:"5.2.0",stages:[],idCounter:0,ids:{},names:{},shapes:{},listenClickTap:!1,inDblClickWindow:!1,enableTrace:!1,traceArrMax:100,dblClickWindow:400,pixelRatio:void 0,dragDistance:0,angleDeg:!0,showWarnings:!0,Filters:{},Node:function(t){this._init(t)},Shape:function(t){this.__init(t)},Container:function(t){this.__init(t)},Stage:function(t){this.___init(t)},BaseLayer:function(t){this.___init(t)},Layer:function(t){this.____init(t)},FastLayer:function(t){this.____init(t)},Group:function(t){this.___init(t)},isDragging:function(){var t=y.DD;return!!t&&t.isDragging},isDragReady:function(){var t=y.DD;return!!t&&!!t.node},_addId:function(t,e){void 0!==e&&(this.ids[e]=t)},_removeId:function(t){void 0!==t&&delete this.ids[t]},_addName:function(t,e){if(void 0!==e)for(var i=e.split(/\s/g),n=0;n<i.length;n++){var a=i[n];a&&(void 0===this.names[a]&&(this.names[a]=[]),this.names[a].push(t))}},_removeName:function(t,e){if(void 0!==t){var i=this.names[t];if(void 0!==i){for(var n=0;n<i.length;n++)i[n]._id===e&&i.splice(n,1);0===i.length&&delete this.names[t]}}},getAngle:function(t){return this.angleDeg?t*r:t},_parseUA:function(t){var e=t.toLowerCase(),i=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||e.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[],n=!!t.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i),a=!!t.match(/IEMobile/i);return{browser:i[1]||"",version:i[2]||"0",mobile:n,ieMobile:a}},UA:void 0}).UA=y._parseUA(a.navigator&&a.navigator.userAgent||""),function(a,r){if("object"==typeof i){var s=r();if(n.window===n)y.document=n.document,y.window=n;else{var o=t("canvas"),h=t("jsdom").jsdom;y.document=h("<!DOCTYPE html><html><head></head><body></body></html>"),y.window=y.document.createWindow(),y.window.Image=o.Image,y._nodeCanvas=o}return y.root=a,void(e.exports=s)}"function"==typeof define&&define.amd&&define(r),y.document=document,y.window=window,y.root=a}(this,function(){return y}),function(){y.Collection=function(){var t=[].slice.call(arguments),e=t.length,i=0;for(this.length=e;i<e;i++)this[i]=t[i];return this},y.Collection.prototype=[],y.Collection.prototype.each=function(t){for(var e=0;e<this.length;e++)t(this[e],e)},y.Collection.prototype.toArray=function(){var t,e=[],i=this.length;for(t=0;t<i;t++)e.push(this[t]);return e},y.Collection.toCollection=function(t){var e,i=new y.Collection,n=t.length;for(e=0;e<n;e++)i.push(t[e]);return i},y.Collection._mapMethod=function(t){y.Collection.prototype[t]=function(){var e,i=this.length,n=[].slice.call(arguments);for(e=0;e<i;e++)this[e][t].apply(this[e],n);return this}},y.Collection.mapMethods=function(t){var e=t.prototype;for(var i in e)y.Collection._mapMethod(i)},y.Transform=function(t){this.m=t&&t.slice()||[1,0,0,1,0,0]},y.Transform.prototype={copy:function(){return new y.Transform(this.m)},point:function(t){var e=this.m;return{x:e[0]*t.x+e[2]*t.y+e[4],y:e[1]*t.x+e[3]*t.y+e[5]}},translate:function(t,e){return this.m[4]+=this.m[0]*t+this.m[2]*e,this.m[5]+=this.m[1]*t+this.m[3]*e,this},scale:function(t,e){return this.m[0]*=t,this.m[1]*=t,this.m[2]*=e,this.m[3]*=e,this},rotate:function(t){var e=Math.cos(t),i=Math.sin(t),n=this.m[0]*e+this.m[2]*i,a=this.m[1]*e+this.m[3]*i,r=this.m[0]*-i+this.m[2]*e,s=this.m[1]*-i+this.m[3]*e;return this.m[0]=n,this.m[1]=a,this.m[2]=r,this.m[3]=s,this},getTranslation:function(){return{x:this.m[4],y:this.m[5]}},skew:function(t,e){var i=this.m[0]+this.m[2]*e,n=this.m[1]+this.m[3]*e,a=this.m[2]+this.m[0]*t,r=this.m[3]+this.m[1]*t;return this.m[0]=i,this.m[1]=n,this.m[2]=a,this.m[3]=r,this},multiply:function(t){var e=this.m[0]*t.m[0]+this.m[2]*t.m[1],i=this.m[1]*t.m[0]+this.m[3]*t.m[1],n=this.m[0]*t.m[2]+this.m[2]*t.m[3],a=this.m[1]*t.m[2]+this.m[3]*t.m[3],r=this.m[0]*t.m[4]+this.m[2]*t.m[5]+this.m[4],s=this.m[1]*t.m[4]+this.m[3]*t.m[5]+this.m[5];return this.m[0]=e,this.m[1]=i,this.m[2]=n,this.m[3]=a,this.m[4]=r,this.m[5]=s,this},invert:function(){var t=1/(this.m[0]*this.m[3]-this.m[1]*this.m[2]),e=this.m[3]*t,i=-this.m[1]*t,n=-this.m[2]*t,a=this.m[0]*t,r=t*(this.m[2]*this.m[5]-this.m[3]*this.m[4]),s=t*(this.m[1]*this.m[4]-this.m[0]*this.m[5]);return this.m[0]=e,this.m[1]=i,this.m[2]=n,this.m[3]=a,this.m[4]=r,this.m[5]=s,this},getMatrix:function(){return this.m},setAbsolutePosition:function(t,e){var i=this.m[0],n=this.m[1],a=this.m[2],r=this.m[3],s=this.m[4],o=(i*(e-this.m[5])-n*(t-s))/(i*r-n*a),h=(t-s-a*o)/i;return this.translate(h,o)}};var t=Math.PI/180,e=180/Math.PI,n={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},a=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/;y.Util={_isElement:function(t){return!(!t||1!=t.nodeType)},_isFunction:function(t){return!!(t&&t.constructor&&t.call&&t.apply)},_isObject:function(t){return!!t&&t.constructor==Object},_isArray:function(t){return"[object Array]"==Object.prototype.toString.call(t)},_isNumber:function(t){return"[object Number]"==Object.prototype.toString.call(t)},_isString:function(t){return"[object String]"==Object.prototype.toString.call(t)},_throttle:function(t,e,i){var n,a,r,s=null,o=0,h=i||{},c=function(){o=!1===h.leading?0:(new Date).getTime(),s=null,r=t.apply(n,a),n=a=null};return function(){var i=(new Date).getTime();o||!1!==h.leading||(o=i);var l=e-(i-o);return n=this,a=arguments,l<=0?(clearTimeout(s),s=null,o=i,r=t.apply(n,a),n=a=null):s||!1===h.trailing||(s=setTimeout(c,l)),r}},_hasMethods:function(t){var e,i=[];for(e in t)this._isFunction(t[e])&&i.push(e);return i.length>0},createCanvasElement:function(){var t=y.document.createElement("canvas");try{t.style=t.style||{}}catch(t){}return t},isBrowser:function(){return"object"!=typeof i},_isInDocument:function(t){for(;t=t.parentNode;)if(t==y.document)return!0;return!1},_simplifyArray:function(t){var e,i,n=[],a=t.length,r=y.Util;for(e=0;e<a;e++)i=t[e],r._isNumber(i)?i=Math.round(1e3*i)/1e3:r._isString(i)||(i=i.toString()),n.push(i);return n},_getImage:function(t,e){var i,n;if(t)if(this._isElement(t))e(t);else if(this._isString(t))(i=new y.window.Image).onload=function(){e(i)},i.src=t;else if(t.data){(n=y.Util.createCanvasElement()).width=t.width,n.height=t.height,n.getContext("2d").putImageData(t,0,0),this._getImage(n.toDataURL(),e)}else e(null);else e(null)},_getRGBAString:function(t){return["rgba(",t.red||0,",",t.green||0,",",t.blue||0,",",t.alpha||1,")"].join("")},_rgbToHex:function(t,e,i){return((1<<24)+(t<<16)+(e<<8)+i).toString(16).slice(1)},_hexToRgb:function(t){t=t.replace("#","");var e=parseInt(t,16);return{r:e>>16&255,g:e>>8&255,b:255&e}},getRandomColor:function(){for(var t=(16777215*Math.random()<<0).toString(16);t.length<6;)t="0"+t;return"#"+t},get:function(t,e){return void 0===t?e:t},getRGB:function(t){var e;return t in n?{r:(e=n[t])[0],g:e[1],b:e[2]}:"#"===t[0]?this._hexToRgb(t.substring(1)):"rgb("===t.substr(0,4)?(e=a.exec(t.replace(/ /g,"")),{r:parseInt(e[1],10),g:parseInt(e[2],10),b:parseInt(e[3],10)}):{r:0,g:0,b:0}},_merge:function(t,e){var i=this._clone(e);for(var n in t)this._isObject(t[n])?i[n]=this._merge(t[n],i[n]):i[n]=t[n];return i},cloneObject:function(t){var e={};for(var i in t)this._isObject(t[i])?e[i]=this.cloneObject(t[i]):this._isArray(t[i])?e[i]=this.cloneArray(t[i]):e[i]=t[i];return e},cloneArray:function(t){return t.slice(0)},_degToRad:function(e){return e*t},_radToDeg:function(t){return t*e},_capitalize:function(t){return t.charAt(0).toUpperCase()+t.slice(1)},error:function(t){throw new Error("Kinetic error: "+t)},warn:function(t){y.root.console&&console.warn&&y.showWarnings&&console.warn("Kinetic warning: "+t)},extend:function(t,e){function i(){this.constructor=t}i.prototype=e.prototype;var n=t.prototype;for(var a in t.prototype=new i,n)n.hasOwnProperty(a)&&(t.prototype[a]=n[a]);t.__super__=e.prototype},addMethods:function(t,e){var i;for(i in e)t.prototype[i]=e[i]},_getControlPoints:function(t,e,i,n,a,r,s){var o=Math.sqrt(Math.pow(i-t,2)+Math.pow(n-e,2)),h=Math.sqrt(Math.pow(a-i,2)+Math.pow(r-n,2)),c=s*o/(o+h),l=s*h/(o+h);return[i-c*(a-t),n-c*(r-e),i+l*(a-t),n+l*(r-e)]},_expandPoints:function(t,e){var i,n,a=t.length,r=[];for(i=2;i<a-2;i+=2)n=y.Util._getControlPoints(t[i-2],t[i-1],t[i],t[i+1],t[i+2],t[i+3],e),r.push(n[0]),r.push(n[1]),r.push(t[i]),r.push(t[i+1]),r.push(n[2]),r.push(n[3]);return r},_removeLastLetter:function(t){return t.substring(0,t.length-1)}}}(),s=y.Util.createCanvasElement().getContext("2d"),o=y.UA.mobile?(window.devicePixelRatio||1)/(s.webkitBackingStorePixelRatio||s.mozBackingStorePixelRatio||s.msBackingStorePixelRatio||s.oBackingStorePixelRatio||s.backingStorePixelRatio||1):1,y.Canvas=function(t){this.init(t)},y.Canvas.prototype={init:function(t){var e=(t||{}).pixelRatio||y.pixelRatio||o;this.pixelRatio=e,this._canvas=y.Util.createCanvasElement(),this._canvas.style.padding=0,this._canvas.style.margin=0,this._canvas.style.border=0,this._canvas.style.background="transparent",this._canvas.style.position="absolute",this._canvas.style.top=0,this._canvas.style.left=0},getContext:function(){return this.context},getPixelRatio:function(){return this.pixelRatio},setPixelRatio:function(t){this.pixelRatio=t,this.setSize(this.getWidth(),this.getHeight())},setWidth:function(t){this.width=this._canvas.width=t*this.pixelRatio,this._canvas.style.width=t+"px"},setHeight:function(t){this.height=this._canvas.height=t*this.pixelRatio,this._canvas.style.height=t+"px"},getWidth:function(){return this.width},getHeight:function(){return this.height},setSize:function(t,e){this.setWidth(t),this.setHeight(e)},toDataURL:function(t,e){try{return this._canvas.toDataURL(t,e)}catch(t){try{return this._canvas.toDataURL()}catch(t){return y.Util.warn("Unable to get data URL. "+t.message),""}}}},y.SceneCanvas=function(t){var e=t||{},i=e.width||0,n=e.height||0;y.Canvas.call(this,e),this.context=new y.SceneContext(this),this.setSize(i,n)},y.SceneCanvas.prototype={setWidth:function(t){var e=this.pixelRatio,i=this.getContext()._context;y.Canvas.prototype.setWidth.call(this,t),i.scale(e,e)},setHeight:function(t){var e=this.pixelRatio,i=this.getContext()._context;y.Canvas.prototype.setHeight.call(this,t),i.scale(e,e)}},y.Util.extend(y.SceneCanvas,y.Canvas),y.HitCanvas=function(t){var e=t||{},i=e.width||0,n=e.height||0;y.Canvas.call(this,e),this.context=new y.HitContext(this),this.setSize(i,n),this.hitCanvas=!0},y.Util.extend(y.HitCanvas,y.Canvas),h=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","createLinearGradient","createPattern","createRadialGradient","drawImage","fill","fillText","getImageData","createImageData","lineTo","moveTo","putImageData","quadraticCurveTo","rect","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeText","transform","translate"],y.Context=function(t){this.init(t)},y.Context.prototype={init:function(t){this.canvas=t,this._context=t._canvas.getContext("2d"),y.enableTrace&&(this.traceArr=[],this._enableTrace())},fillShape:function(t){t.getFillEnabled()&&this._fill(t)},strokeShape:function(t){t.getStrokeEnabled()&&this._stroke(t)},fillStrokeShape:function(t){t.getFillEnabled()&&this._fill(t),t.getStrokeEnabled()&&this._stroke(t)},getTrace:function(t){var e,i,n,a,r=this.traceArr,s=r.length,o="";for(e=0;e<s;e++)(n=(i=r[e]).method)?(a=i.args,o+=n,t?o+="()":y.Util._isArray(a[0])?o+="(["+a.join(",")+"])":o+="("+a.join(",")+")"):(o+=i.property,t||(o+="="+i.val)),o+=";";return o},clearTrace:function(){this.traceArr=[]},_trace:function(t){var e=this.traceArr;e.push(t),e.length>=y.traceArrMax&&e.shift()},reset:function(){var t=this.getCanvas().getPixelRatio();this.setTransform(1*t,0,0,1*t,0,0)},getCanvas:function(){return this.canvas},clear:function(t){var e=this.getCanvas();t?this.clearRect(t.x||0,t.y||0,t.width||0,t.height||0):this.clearRect(0,0,e.getWidth(),e.getHeight())},_applyLineCap:function(t){var e=t.getLineCap();e&&this.setAttr("lineCap",e)},_applyOpacity:function(t){var e=t.getAbsoluteOpacity();1!==e&&this.setAttr("globalAlpha",e)},_applyLineJoin:function(t){var e=t.getLineJoin();e&&this.setAttr("lineJoin",e)},setAttr:function(t,e){this._context[t]=e},arc:function(){var t=arguments;this._context.arc(t[0],t[1],t[2],t[3],t[4],t[5])},beginPath:function(){this._context.beginPath()},bezierCurveTo:function(){var t=arguments;this._context.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5])},clearRect:function(){var t=arguments;this._context.clearRect(t[0],t[1],t[2],t[3])},clip:function(){this._context.clip()},closePath:function(){this._context.closePath()},createImageData:function(){var t=arguments;return 2===t.length?this._context.createImageData(t[0],t[1]):1===t.length?this._context.createImageData(t[0]):void 0},createLinearGradient:function(){var t=arguments;return this._context.createLinearGradient(t[0],t[1],t[2],t[3])},createPattern:function(){var t=arguments;return this._context.createPattern(t[0],t[1])},createRadialGradient:function(){var t=arguments;return this._context.createRadialGradient(t[0],t[1],t[2],t[3],t[4],t[5])},drawImage:function(){var t=arguments,e=this._context;3===t.length?e.drawImage(t[0],t[1],t[2]):5===t.length?e.drawImage(t[0],t[1],t[2],t[3],t[4]):9===t.length&&e.drawImage(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},fill:function(){this._context.fill()},fillText:function(){var t=arguments;this._context.fillText(t[0],t[1],t[2])},getImageData:function(){var t=arguments;return this._context.getImageData(t[0],t[1],t[2],t[3])},lineTo:function(){var t=arguments;this._context.lineTo(t[0],t[1])},moveTo:function(){var t=arguments;this._context.moveTo(t[0],t[1])},rect:function(){var t=arguments;this._context.rect(t[0],t[1],t[2],t[3])},putImageData:function(){var t=arguments;this._context.putImageData(t[0],t[1],t[2])},quadraticCurveTo:function(){var t=arguments;this._context.quadraticCurveTo(t[0],t[1],t[2],t[3])},restore:function(){this._context.restore()},rotate:function(){var t=arguments;this._context.rotate(t[0])},save:function(){this._context.save()},scale:function(){var t=arguments;this._context.scale(t[0],t[1])},setLineDash:function(){var t=arguments,e=this._context;this._context.setLineDash?e.setLineDash(t[0]):"mozDash"in e?e.mozDash=t[0]:"webkitLineDash"in e&&(e.webkitLineDash=t[0])},setTransform:function(){var t=arguments;this._context.setTransform(t[0],t[1],t[2],t[3],t[4],t[5])},stroke:function(){this._context.stroke()},strokeText:function(){var t=arguments;this._context.strokeText(t[0],t[1],t[2])},transform:function(){var t=arguments;this._context.transform(t[0],t[1],t[2],t[3],t[4],t[5])},translate:function(){var t=arguments;this._context.translate(t[0],t[1])},_enableTrace:function(){var t,e,i=this,n=h.length,a=y.Util._simplifyArray,r=this.setAttr,s=function(t){var n,r=i[t];i[t]=function(){return e=a(Array.prototype.slice.call(arguments,0)),n=r.apply(i,arguments),i._trace({method:t,args:e}),n}};for(t=0;t<n;t++)s(h[t]);i.setAttr=function(){r.apply(i,arguments),i._trace({property:arguments[0],val:arguments[1]})}}},y.SceneContext=function(t){y.Context.call(this,t)},y.SceneContext.prototype={_fillColor:function(t){var e=t.fill()||y.Util._getRGBAString({red:t.fillRed(),green:t.fillGreen(),blue:t.fillBlue(),alpha:t.fillAlpha()});this.setAttr("fillStyle",e),t._fillFunc(this)},_fillPattern:function(t){var e=t.getFillPatternImage(),i=t.getFillPatternX(),n=t.getFillPatternY(),a=t.getFillPatternScale(),r=y.getAngle(t.getFillPatternRotation()),s=t.getFillPatternOffset(),o=t.getFillPatternRepeat();(i||n)&&this.translate(i||0,n||0),r&&this.rotate(r),a&&this.scale(a.x,a.y),s&&this.translate(-1*s.x,-1*s.y),this.setAttr("fillStyle",this.createPattern(e,o||"repeat")),this.fill()},_fillLinearGradient:function(t){var e=t.getFillLinearGradientStartPoint(),i=t.getFillLinearGradientEndPoint(),n=t.getFillLinearGradientColorStops(),a=this.createLinearGradient(e.x,e.y,i.x,i.y);if(n){for(var r=0;r<n.length;r+=2)a.addColorStop(n[r],n[r+1]);this.setAttr("fillStyle",a),this.fill()}},_fillRadialGradient:function(t){for(var e=t.getFillRadialGradientStartPoint(),i=t.getFillRadialGradientEndPoint(),n=t.getFillRadialGradientStartRadius(),a=t.getFillRadialGradientEndRadius(),r=t.getFillRadialGradientColorStops(),s=this.createRadialGradient(e.x,e.y,n,i.x,i.y,a),o=0;o<r.length;o+=2)s.addColorStop(r[o],r[o+1]);this.setAttr("fillStyle",s),this.fill()},_fill:function(t){var e=t.fill()||t.fillRed()||t.fillGreen()||t.fillBlue(),i=t.getFillPatternImage(),n=t.getFillLinearGradientColorStops(),a=t.getFillRadialGradientColorStops(),r=t.getFillPriority();e&&"color"===r?this._fillColor(t):i&&"pattern"===r?this._fillPattern(t):n&&"linear-gradient"===r?this._fillLinearGradient(t):a&&"radial-gradient"===r?this._fillRadialGradient(t):e?this._fillColor(t):i?this._fillPattern(t):n?this._fillLinearGradient(t):a&&this._fillRadialGradient(t)},_stroke:function(t){var e=t.dash(),i=t.getStrokeScaleEnabled();t.hasStroke()&&(i||(this.save(),this.setTransform(1,0,0,1,0,0)),this._applyLineCap(t),e&&t.dashEnabled()&&this.setLineDash(e),this.setAttr("lineWidth",t.strokeWidth()),this.setAttr("strokeStyle",t.stroke()||y.Util._getRGBAString({red:t.strokeRed(),green:t.strokeGreen(),blue:t.strokeBlue(),alpha:t.strokeAlpha()})),t._strokeFunc(this),i||this.restore())},_applyShadow:function(t){var e=y.Util,i=t.getAbsoluteOpacity(),n=e.get(t.getShadowColor(),"black"),a=e.get(t.getShadowBlur(),5),r=e.get(t.getShadowOpacity(),1),s=e.get(t.getShadowOffset(),{x:0,y:0});r&&this.setAttr("globalAlpha",r*i),this.setAttr("shadowColor",n),this.setAttr("shadowBlur",a),this.setAttr("shadowOffsetX",s.x),this.setAttr("shadowOffsetY",s.y)}},y.Util.extend(y.SceneContext,y.Context),y.HitContext=function(t){y.Context.call(this,t)},y.HitContext.prototype={_fill:function(t){this.save(),this.setAttr("fillStyle",t.colorKey),t._fillFuncHit(this),this.restore()},_stroke:function(t){t.hasStroke()&&(this._applyLineCap(t),this.setAttr("lineWidth",t.strokeWidth()),this.setAttr("strokeStyle",t.colorKey),t._strokeFuncHit(this))}},y.Util.extend(y.HitContext,y.Context),y.Factory={addGetterSetter:function(t,e,i,n,a){this.addGetter(t,e,i),this.addSetter(t,e,n,a),this.addOverloadedGetterSetter(t,e)},addGetter:function(t,e,i){var n="get"+y.Util._capitalize(e);t.prototype[n]=function(){var t=this.attrs[e];return void 0===t?i:t}},addSetter:function(t,e,i,n){var a="set"+y.Util._capitalize(e);t.prototype[a]=function(t){return i&&(t=i.call(this,t)),this._setAttr(e,t),n&&n.call(this),this}},addComponentsGetterSetter:function(t,e,i,n,a){var r,s,o=i.length,h=y.Util._capitalize,c="get"+h(e),l="set"+h(e);t.prototype[c]=function(){var t={};for(r=0;r<o;r++)t[s=i[r]]=this.getAttr(e+h(s));return t},t.prototype[l]=function(t){var i,r=this.attrs[e];for(i in n&&(t=n.call(this,t)),t)this._setAttr(e+h(i),t[i]);return this._fireChangeEvent(e,r,t),a&&a.call(this),this},this.addOverloadedGetterSetter(t,e)},addOverloadedGetterSetter:function(t,e){var i=y.Util._capitalize(e),n="set"+i,a="get"+i;t.prototype[e]=function(){return arguments.length?(this[n](arguments[0]),this):this[a]()}},backCompat:function(t,e){var i;for(i in e)t.prototype[i]=t.prototype[e[i]]},afterSetFilter:function(){this._filterUpToDate=!1}},y.Validators={RGBComponent:function(t){return t>255?255:t<0?0:Math.round(t)},alphaComponent:function(t){return t>1?1:t<1e-4?1e-4:t}},c="Shape",l=["id"],d=["xChange.kinetic","yChange.kinetic","scaleXChange.kinetic","scaleYChange.kinetic","skewXChange.kinetic","skewYChange.kinetic","rotationChange.kinetic","offsetXChange.kinetic","offsetYChange.kinetic","transformsEnabledChange.kinetic"].join(" "),y.Util.addMethods(y.Node,{_init:function(t){var e=this;this._id=y.idCounter++,this.eventListeners={},this.attrs={},this._cache={},this._filterUpToDate=!1,this.setAttrs(t),this.on(d,function(){this._clearCache("transform"),e._clearSelfAndDescendantCache("absoluteTransform")}),this.on("visibleChange.kinetic",function(){e._clearSelfAndDescendantCache("visible")}),this.on("listeningChange.kinetic",function(){e._clearSelfAndDescendantCache("listening")}),this.on("opacityChange.kinetic",function(){e._clearSelfAndDescendantCache("absoluteOpacity")})},_clearCache:function(t){t?delete this._cache[t]:this._cache={}},_getCache:function(t,e){return void 0===this._cache[t]&&(this._cache[t]=e.call(this)),this._cache[t]},_clearSelfAndDescendantCache:function(t){this._clearCache(t),this.children&&this.getChildren().each(function(e){e._clearSelfAndDescendantCache(t)})},clearCache:function(){return delete this._cache.canvas,this._filterUpToDate=!1,this},cache:function(t){var e=t||{},i=e.x||0,n=e.y||0,a=e.width||this.width(),r=e.height||this.height(),s=e.drawBorder||!1;if(0!==a&&0!==r){var o=new y.SceneCanvas({pixelRatio:1,width:a,height:r}),h=new y.SceneCanvas({pixelRatio:1,width:a,height:r}),c=new y.HitCanvas({width:a,height:r}),l=o.getContext(),d=c.getContext();return c.isCache=!0,this.clearCache(),l.save(),d.save(),s&&(l.save(),l.beginPath(),l.rect(0,0,a,r),l.closePath(),l.setAttr("strokeStyle","red"),l.setAttr("lineWidth",5),l.stroke(),l.restore()),l.translate(-1*i,-1*n),d.translate(-1*i,-1*n),"Shape"===this.nodeType&&(l.translate(-1*this.x(),-1*this.y()),d.translate(-1*this.x(),-1*this.y())),this.drawScene(o,this),this.drawHit(c,this),l.restore(),d.restore(),this._cache.canvas={scene:o,filter:h,hit:c},this}y.Util.warn("Width or height of caching configuration equals 0. Cache is ignored.")},_drawCachedSceneCanvas:function(t){t.save(),this.getLayer()._applyTransform(this,t),t._applyOpacity(this),t.drawImage(this._getCachedSceneCanvas()._canvas,0,0),t.restore()},_getCachedSceneCanvas:function(){var t,e,i,n=this.filters(),a=this._cache.canvas,r=a.scene,s=a.filter,o=s.getContext();if(n){if(!this._filterUpToDate){try{for(t=n.length,o.clear(),o.drawImage(r._canvas,0,0),e=o.getImageData(0,0,s.getWidth(),s.getHeight()),i=0;i<t;i++)n[i].call(this,e),o.putImageData(e,0,0)}catch(t){y.Util.warn("Unable to apply filter. "+t.message)}this._filterUpToDate=!0}return s}return r},_drawCachedHitCanvas:function(t){var e=this._cache.canvas.hit;t.save(),this.getLayer()._applyTransform(this,t),t.drawImage(e._canvas,0,0),t.restore()},on:function(t,e){var i,n,a,r,s=t.split(" "),o=s.length;for(i=0;i<o;i++)a=(n=s[i].split("."))[0],r=n[1]||"",this.eventListeners[a]||(this.eventListeners[a]=[]),this.eventListeners[a].push({name:r,handler:e});return this},off:function(t){var e,i,n,a,r,s=(t||"").split(" "),o=s.length;if(!t)for(i in this.eventListeners)this._off(i);for(e=0;e<o;e++)if(a=(n=s[e].split("."))[0],r=n[1],a)this.eventListeners[a]&&this._off(a,r);else for(i in this.eventListeners)this._off(i,r);return this},dispatchEvent:function(t){var e={target:this,type:t.type,evt:t};this.fire(t.type,e)},addEventListener:function(t,e){this.on(t,function(t){e.call(this,t.evt)})},removeEventListener:function(t){this.off(t)},remove:function(){var t=this.getParent();return t&&t.children&&(t.children.splice(this.index,1),t._setChildrenIndices(),delete this.parent),this._clearSelfAndDescendantCache("stage"),this._clearSelfAndDescendantCache("absoluteTransform"),this._clearSelfAndDescendantCache("visible"),this._clearSelfAndDescendantCache("listening"),this._clearSelfAndDescendantCache("absoluteOpacity"),this},destroy:function(){y._removeId(this.getId()),y._removeName(this.getName(),this._id),this.remove()},getAttr:function(t){var e="get"+y.Util._capitalize(t);return y.Util._isFunction(this[e])?this[e]():this.attrs[t]},getAncestors:function(){for(var t=this.getParent(),e=new y.Collection;t;)e.push(t),t=t.getParent();return e},getAttrs:function(){return this.attrs||{}},setAttrs:function(t){var e,i;if(t)for(e in t)"children"===e||t[e]instanceof y.Node||(i="set"+y.Util._capitalize(e),y.Util._isFunction(this[i])?this[i](t[e]):this._setAttr(e,t[e]));return this},isListening:function(){return this._getCache("listening",this._isListening)},_isListening:function(){var t=this.getListening(),e=this.getParent();return"inherit"===t?!e||e.isListening():t},isVisible:function(){return this._getCache("visible",this._isVisible)},_isVisible:function(){var t=this.getVisible(),e=this.getParent();return"inherit"===t?!e||e.isVisible():t},shouldDrawHit:function(t){var e=this.getLayer();return t&&t.isCache||e&&e.hitGraphEnabled()&&this.isListening()&&this.isVisible()},show:function(){return this.setVisible(!0),this},hide:function(){return this.setVisible(!1),this},getZIndex:function(){return this.index||0},getAbsoluteZIndex:function(){var t,e,i,n,a=this.getDepth(),r=this,s=0;return"Stage"!==r.nodeType&&function o(h){for(t=[],e=h.length,i=0;i<e;i++)n=h[i],s++,n.nodeType!==c&&(t=t.concat(n.getChildren().toArray())),n._id===r._id&&(i=e);t.length>0&&t[0].getDepth()<=a&&o(t)}(r.getStage().getChildren()),s},getDepth:function(){for(var t=0,e=this.parent;e;)t++,e=e.parent;return t},setPosition:function(t){return this.setX(t.x),this.setY(t.y),this},getPosition:function(){return{x:this.getX(),y:this.getY()}},getAbsolutePosition:function(){var t=this.getAbsoluteTransform().getMatrix(),e=new y.Transform,i=this.offset();return e.m=t.slice(),e.translate(i.x,i.y),e.getTranslation()},setAbsolutePosition:function(t){var e,i=this._clearTransform();return this.attrs.x=i.x,this.attrs.y=i.y,delete i.x,delete i.y,(e=this.getAbsoluteTransform()).invert(),e.translate(t.x,t.y),t={x:this.attrs.x+e.getTranslation().x,y:this.attrs.y+e.getTranslation().y},this.setPosition({x:t.x,y:t.y}),this._setTransform(i),this},_setTransform:function(t){var e;for(e in t)this.attrs[e]=t[e];this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")},_clearTransform:function(){var t={x:this.getX(),y:this.getY(),rotation:this.getRotation(),scaleX:this.getScaleX(),scaleY:this.getScaleY(),offsetX:this.getOffsetX(),offsetY:this.getOffsetY(),skewX:this.getSkewX(),skewY:this.getSkewY()};return this.attrs.x=0,this.attrs.y=0,this.attrs.rotation=0,this.attrs.scaleX=1,this.attrs.scaleY=1,this.attrs.offsetX=0,this.attrs.offsetY=0,this.attrs.skewX=0,this.attrs.skewY=0,this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform"),t},move:function(t){var e=t.x,i=t.y,n=this.getX(),a=this.getY();return void 0!==e&&(n+=e),void 0!==i&&(a+=i),this.setPosition({x:n,y:a}),this},_eachAncestorReverse:function(t,e){var i,n,a=[],r=this.getParent();if(e&&e._id===this._id)return t(this),!0;for(a.unshift(this);r&&(!e||r._id!==e._id);)a.unshift(r),r=r.parent;for(i=a.length,n=0;n<i;n++)t(a[n])},rotate:function(t){return this.setRotation(this.getRotation()+t),this},moveToTop:function(){if(this.parent){var t=this.index;return this.parent.children.splice(t,1),this.parent.children.push(this),this.parent._setChildrenIndices(),!0}y.Util.warn("Node has no parent. moveToTop function is ignored.")},moveUp:function(){if(this.parent){var t=this.index;return t<this.parent.getChildren().length-1&&(this.parent.children.splice(t,1),this.parent.children.splice(t+1,0,this),this.parent._setChildrenIndices(),!0)}y.Util.warn("Node has no parent. moveUp function is ignored.")},moveDown:function(){if(this.parent){var t=this.index;return t>0&&(this.parent.children.splice(t,1),this.parent.children.splice(t-1,0,this),this.parent._setChildrenIndices(),!0)}y.Util.warn("Node has no parent. moveDown function is ignored.")},moveToBottom:function(){if(this.parent){var t=this.index;return t>0&&(this.parent.children.splice(t,1),this.parent.children.unshift(this),this.parent._setChildrenIndices(),!0)}y.Util.warn("Node has no parent. moveToBottom function is ignored.")},setZIndex:function(t){if(this.parent){var e=this.index;return this.parent.children.splice(e,1),this.parent.children.splice(t,0,this),this.parent._setChildrenIndices(),this}y.Util.warn("Node has no parent. zIndex parameter is ignored.")},getAbsoluteOpacity:function(){return this._getCache("absoluteOpacity",this._getAbsoluteOpacity)},_getAbsoluteOpacity:function(){var t=this.getOpacity();return this.getParent()&&(t*=this.getParent().getAbsoluteOpacity()),t},moveTo:function(t){return this.getParent()!==t&&(this.remove(),t.add(this)),this},toObject:function(){var t,e,i,n,a=y.Util,r={},s=this.getAttrs();for(t in r.attrs={},s)e=s[t],a._isFunction(e)||a._isElement(e)||a._isObject(e)&&a._hasMethods(e)||(i=this[t],delete s[t],n=i?i.call(this):null,s[t]=e,n!==e&&(r.attrs[t]=e));return r.className=this.getClassName(),r},toJSON:function(){return JSON.stringify(this.toObject())},getParent:function(){return this.parent},getLayer:function(){var t=this.getParent();return t?t.getLayer():null},getStage:function(){return this._getCache("stage",this._getStage)},_getStage:function(){var t=this.getParent();return t?t.getStage():void 0},fire:function(t,e,i){return i?this._fireAndBubble(t,e||{}):this._fire(t,e||{}),this},getAbsoluteTransform:function(t){return t?this._getAbsoluteTransform(t):this._getCache("absoluteTransform",this._getAbsoluteTransform)},_getAbsoluteTransform:function(t){var e,i,n=new y.Transform;return this._eachAncestorReverse(function(t){e=t.transformsEnabled(),i=t.getTransform(),"all"===e?n.multiply(i):"position"===e&&n.translate(t.x(),t.y())},t),n},getTransform:function(){return this._getCache("transform",this._getTransform)},_getTransform:function(){var t=new y.Transform,e=this.getX(),i=this.getY(),n=y.getAngle(this.getRotation()),a=this.getScaleX(),r=this.getScaleY(),s=this.getSkewX(),o=this.getSkewY(),h=this.getOffsetX(),c=this.getOffsetY();return 0===e&&0===i||t.translate(e,i),0!==n&&t.rotate(n),0===s&&0===o||t.skew(s,o),1===a&&1===r||t.scale(a,r),0===h&&0===c||t.translate(-1*h,-1*c),t},clone:function(t){var e,i,n,a,r,s=this.getClassName(),o=y.Util.cloneObject(this.attrs);for(var h in l)delete o[l[h]];for(e in t)o[e]=t[e];var c=new y[s](o);for(e in this.eventListeners)for(n=(i=this.eventListeners[e]).length,a=0;a<n;a++)(r=i[a]).name.indexOf("kinetic")<0&&(c.eventListeners[e]||(c.eventListeners[e]=[]),c.eventListeners[e].push(r));return c},toDataURL:function(t){var e=(t=t||{}).mimeType||null,i=t.quality||null,n=this.getStage(),a=t.x||0,r=t.y||0,s=new y.SceneCanvas({width:t.width||this.getWidth()||(n?n.getWidth():0),height:t.height||this.getHeight()||(n?n.getHeight():0),pixelRatio:1}),o=s.getContext();return o.save(),(a||r)&&o.translate(-1*a,-1*r),this.drawScene(s),o.restore(),s.toDataURL(e,i)},toImage:function(t){y.Util._getImage(this.toDataURL(t),function(e){t.callback(e)})},setSize:function(t){return this.setWidth(t.width),this.setHeight(t.height),this},getSize:function(){return{width:this.getWidth(),height:this.getHeight()}},getWidth:function(){return this.attrs.width||0},getHeight:function(){return this.attrs.height||0},getClassName:function(){return this.className||this.nodeType},getType:function(){return this.nodeType},getDragDistance:function(){return void 0!==this.attrs.dragDistance?this.attrs.dragDistance:this.parent?this.parent.getDragDistance():y.dragDistance},_get:function(t){return this.className===t||this.nodeType===t?[this]:[]},_off:function(t,e){var i,n,a=this.eventListeners[t];for(i=0;i<a.length;i++)if(!("kinetic"===(n=a[i].name)&&"kinetic"!==e||e&&n!==e)){if(a.splice(i,1),0===a.length){delete this.eventListeners[t];break}i--}},_fireChangeEvent:function(t,e,i){this._fire(t+"Change",{oldVal:e,newVal:i})},setId:function(t){var e=this.getId();return y._removeId(e),y._addId(this,t),this._setAttr("id",t),this},setName:function(t){var e=this.getName();return y._removeName(e,this._id),y._addName(this,t),this._setAttr("name",t),this},setAttr:function(t,e){var i=this["set"+y.Util._capitalize(t)];return y.Util._isFunction(i)?i.call(this,e):this._setAttr(t,e),this},_setAttr:function(t,e){var i;void 0!==e&&(i=this.attrs[t],this.attrs[t]=e,this._fireChangeEvent(t,i,e))},_setComponentAttr:function(t,e,i){var n;void 0!==i&&((n=this.attrs[t])||(this.attrs[t]=this.getAttr(t)),this.attrs[t][e]=i,this._fireChangeEvent(t,n,i))},_fireAndBubble:function(t,e,i){var n=!0;if(e&&this.nodeType===c&&(e.target=this),"mouseenter"===t&&i&&(this._id===i._id||this.isAncestorOf&&this.isAncestorOf(i))?n=!1:"mouseleave"===t&&i&&(this._id===i._id||this.isAncestorOf&&this.isAncestorOf(i))&&(n=!1),n){this._fire(t,e);var a=("mouseenter"===t||"mouseleave"===t)&&(i&&i.isAncestorOf&&i.isAncestorOf(this)||!(!i||!i.isAncestorOf));e&&!e.cancelBubble&&this.parent&&this.parent.isListening()&&!a&&(i&&i.parent?this._fireAndBubble.call(this.parent,t,e,i.parent):this._fireAndBubble.call(this.parent,t,e))}},_fire:function(t,e){var i,n=this.eventListeners[t];if(e.type=t,n)for(i=0;i<n.length;i++)n[i].handler.call(this,e)},draw:function(){return this.drawScene(),this.drawHit(),this}}),y.Node.create=function(t,e){return this._createNode(JSON.parse(t),e)},y.Node._createNode=function(t,e){var i,n,a,r=y.Node.prototype.getClassName.call(t),s=t.children;if(e&&(t.attrs.container=e),i=new y[r](t.attrs),s)for(n=s.length,a=0;a<n;a++)i.add(this._createNode(s[a]));return i},y.Factory.addOverloadedGetterSetter(y.Node,"position"),y.Factory.addGetterSetter(y.Node,"x",0),y.Factory.addGetterSetter(y.Node,"y",0),y.Factory.addGetterSetter(y.Node,"opacity",1),y.Factory.addGetter(y.Node,"name"),y.Factory.addOverloadedGetterSetter(y.Node,"name"),y.Factory.addGetter(y.Node,"id"),y.Factory.addOverloadedGetterSetter(y.Node,"id"),y.Factory.addGetterSetter(y.Node,"rotation",0),y.Factory.addComponentsGetterSetter(y.Node,"scale",["x","y"]),y.Factory.addGetterSetter(y.Node,"scaleX",1),y.Factory.addGetterSetter(y.Node,"scaleY",1),y.Factory.addComponentsGetterSetter(y.Node,"skew",["x","y"]),y.Factory.addGetterSetter(y.Node,"skewX",0),y.Factory.addGetterSetter(y.Node,"skewY",0),y.Factory.addComponentsGetterSetter(y.Node,"offset",["x","y"]),y.Factory.addGetterSetter(y.Node,"offsetX",0),y.Factory.addGetterSetter(y.Node,"offsetY",0),y.Factory.addSetter(y.Node,"dragDistance"),y.Factory.addOverloadedGetterSetter(y.Node,"dragDistance"),y.Factory.addSetter(y.Node,"width",0),y.Factory.addOverloadedGetterSetter(y.Node,"width"),y.Factory.addSetter(y.Node,"height",0),y.Factory.addOverloadedGetterSetter(y.Node,"height"),y.Factory.addGetterSetter(y.Node,"listening","inherit"),y.Factory.addGetterSetter(y.Node,"filters",void 0,function(t){return this._filterUpToDate=!1,t}),y.Factory.addGetterSetter(y.Node,"visible","inherit"),y.Factory.addGetterSetter(y.Node,"transformsEnabled","all"),y.Factory.addOverloadedGetterSetter(y.Node,"size"),y.Factory.backCompat(y.Node,{rotateDeg:"rotate",setRotationDeg:"setRotation",getRotationDeg:"getRotation"}),y.Collection.mapMethods(y.Node),y.Filters.Grayscale=function(t){var e,i,n=t.data,a=n.length;for(e=0;e<a;e+=4)i=.34*n[e]+.5*n[e+1]+.16*n[e+2],n[e]=i,n[e+1]=i,n[e+2]=i},y.Filters.Brighten=function(t){var e,i=255*this.brightness(),n=t.data,a=n.length;for(e=0;e<a;e+=4)n[e]+=i,n[e+1]+=i,n[e+2]+=i},y.Factory.addGetterSetter(y.Node,"brightness",0,null,y.Factory.afterSetFilter),y.Filters.Invert=function(t){var e,i=t.data,n=i.length;for(e=0;e<n;e+=4)i[e]=255-i[e],i[e+1]=255-i[e+1],i[e+2]=255-i[e+2]},function(){function t(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}var e=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],i=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];y.Filters.Blur=function(n){var a=Math.round(this.blurRadius());a>0&&function(n,a){var r,s,o,h,c,l,d,u,f,g,p,m,v,y,_,S,x,C,w,b,F,k,T,P,A=n.data,M=n.width,D=n.height,G=a+a+1,L=M-1,R=D-1,I=a+1,N=I*(I+1)/2,O=new t,U=null,B=O,z=null,H=null,E=e[a],W=i[a];for(o=1;o<G;o++)B=B.next=new t,o==I&&(U=B);for(B.next=O,d=l=0,s=0;s<D;s++){for(S=x=C=w=u=f=g=p=0,m=I*(b=A[l]),v=I*(F=A[l+1]),y=I*(k=A[l+2]),_=I*(T=A[l+3]),u+=N*b,f+=N*F,g+=N*k,p+=N*T,B=O,o=0;o<I;o++)B.r=b,B.g=F,B.b=k,B.a=T,B=B.next;for(o=1;o<I;o++)h=l+((L<o?L:o)<<2),u+=(B.r=b=A[h])*(P=I-o),f+=(B.g=F=A[h+1])*P,g+=(B.b=k=A[h+2])*P,p+=(B.a=T=A[h+3])*P,S+=b,x+=F,C+=k,w+=T,B=B.next;for(z=O,H=U,r=0;r<M;r++)A[l+3]=T=p*E>>W,0!==T?(T=255/T,A[l]=(u*E>>W)*T,A[l+1]=(f*E>>W)*T,A[l+2]=(g*E>>W)*T):A[l]=A[l+1]=A[l+2]=0,u-=m,f-=v,g-=y,p-=_,m-=z.r,v-=z.g,y-=z.b,_-=z.a,h=d+((h=r+a+1)<L?h:L)<<2,u+=S+=z.r=A[h],f+=x+=z.g=A[h+1],g+=C+=z.b=A[h+2],p+=w+=z.a=A[h+3],z=z.next,m+=b=H.r,v+=F=H.g,y+=k=H.b,_+=T=H.a,S-=b,x-=F,C-=k,w-=T,H=H.next,l+=4;d+=M}for(r=0;r<M;r++){for(x=C=w=S=f=g=p=u=0,m=I*(b=A[l=r<<2]),v=I*(F=A[l+1]),y=I*(k=A[l+2]),_=I*(T=A[l+3]),u+=N*b,f+=N*F,g+=N*k,p+=N*T,B=O,o=0;o<I;o++)B.r=b,B.g=F,B.b=k,B.a=T,B=B.next;for(c=M,o=1;o<=a;o++)l=c+r<<2,u+=(B.r=b=A[l])*(P=I-o),f+=(B.g=F=A[l+1])*P,g+=(B.b=k=A[l+2])*P,p+=(B.a=T=A[l+3])*P,S+=b,x+=F,C+=k,w+=T,B=B.next,o<R&&(c+=M);for(l=r,z=O,H=U,s=0;s<D;s++)A[3+(h=l<<2)]=T=p*E>>W,T>0?(T=255/T,A[h]=(u*E>>W)*T,A[h+1]=(f*E>>W)*T,A[h+2]=(g*E>>W)*T):A[h]=A[h+1]=A[h+2]=0,u-=m,f-=v,g-=y,p-=_,m-=z.r,v-=z.g,y-=z.b,_-=z.a,h=r+((h=s+I)<R?h:R)*M<<2,u+=S+=z.r=A[h],f+=x+=z.g=A[h+1],g+=C+=z.b=A[h+2],p+=w+=z.a=A[h+3],z=z.next,m+=b=H.r,v+=F=H.g,y+=k=H.b,_+=T=H.a,S-=b,x-=F,C-=k,w-=T,H=H.next,l+=M}}(n,a)},y.Factory.addGetterSetter(y.Node,"blurRadius",0,null,y.Factory.afterSetFilter)}(),function(){function t(t,e,i){var n=4*(i*t.width+e),a=[];return a.push(t.data[n++],t.data[n++],t.data[n++],t.data[n++]),a}function e(t,e){return Math.sqrt(Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)+Math.pow(t[2]-e[2],2))}y.Filters.Mask=function(i){var n=function(i,n){var a=t(i,0,0),r=t(i,i.width-1,0),s=t(i,0,i.height-1),o=t(i,i.width-1,i.height-1),h=n||10;if(e(a,r)<h&&e(r,o)<h&&e(o,s)<h&&e(s,a)<h){for(var c=function(t){for(var e=[0,0,0],i=0;i<t.length;i++)e[0]+=t[i][0],e[1]+=t[i][1],e[2]+=t[i][2];return e[0]/=t.length,e[1]/=t.length,e[2]/=t.length,e}([r,a,o,s]),l=[],d=0;d<i.width*i.height;d++){var u=e(c,[i.data[4*d],i.data[4*d+1],i.data[4*d+2]]);l[d]=u<h?0:255}return l}}(i,this.threshold());return n&&function(t,e){for(var i=0;i<t.width*t.height;i++)t.data[4*i+3]=e[i]}(i,n=function(t,e,i){for(var n=[1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9],a=Math.round(Math.sqrt(n.length)),r=Math.floor(a/2),s=[],o=0;o<i;o++)for(var h=0;h<e;h++){for(var c=o*e+h,l=0,d=0;d<a;d++)for(var u=0;u<a;u++){var f=o+d-r,g=h+u-r;if(f>=0&&f<i&&g>=0&&g<e){var p=n[d*a+u];l+=t[f*e+g]*p}}s[c]=l}return s}(n=function(t,e,i){for(var n=[1,1,1,1,1,1,1,1,1],a=Math.round(Math.sqrt(n.length)),r=Math.floor(a/2),s=[],o=0;o<i;o++)for(var h=0;h<e;h++){for(var c=o*e+h,l=0,d=0;d<a;d++)for(var u=0;u<a;u++){var f=o+d-r,g=h+u-r;if(f>=0&&f<i&&g>=0&&g<e){var p=n[d*a+u];l+=t[f*e+g]*p}}s[c]=l>=1020?255:0}return s}(n=function(t,e,i){for(var n=[1,1,1,1,0,1,1,1,1],a=Math.round(Math.sqrt(n.length)),r=Math.floor(a/2),s=[],o=0;o<i;o++)for(var h=0;h<e;h++){for(var c=o*e+h,l=0,d=0;d<a;d++)for(var u=0;u<a;u++){var f=o+d-r,g=h+u-r;if(f>=0&&f<i&&g>=0&&g<e){var p=n[d*a+u];l+=t[f*e+g]*p}}s[c]=2040===l?255:0}return s}(n,i.width,i.height),i.width,i.height),i.width,i.height)),i},y.Factory.addGetterSetter(y.Node,"threshold",0,null,y.Factory.afterSetFilter)}(),y.Filters.RGB=function(t){var e,i,n=t.data,a=n.length,r=this.red(),s=this.green(),o=this.blue();for(e=0;e<a;e+=4)i=(.34*n[e]+.5*n[e+1]+.16*n[e+2])/255,n[e]=i*r,n[e+1]=i*s,n[e+2]=i*o,n[e+3]=n[e+3]},y.Factory.addGetterSetter(y.Node,"red",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),y.Factory.addGetterSetter(y.Node,"green",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),y.Factory.addGetterSetter(y.Node,"blue",0,y.Validators.RGBComponent,y.Factory.afterSetFilter),y.Filters.HSV=function(t){var e,i,n,a,r,s=t.data,o=s.length,h=Math.pow(2,this.value()),c=Math.pow(2,this.saturation()),l=Math.abs(this.hue()+360)%360,d=h*c*Math.cos(l*Math.PI/180),u=h*c*Math.sin(l*Math.PI/180),f=.299*h+.701*d+.167*u,g=.587*h-.587*d+.33*u,p=.114*h-.114*d-.497*u,m=.299*h-.299*d-.328*u,v=.587*h+.413*d+.035*u,y=.114*h-.114*d+.293*u,_=.299*h-.3*d+1.25*u,S=.587*h-.586*d-1.05*u,x=.114*h+.886*d-.2*u;for(e=0;e<o;e+=4)i=s[e+0],n=s[e+1],a=s[e+2],r=s[e+3],s[e+0]=f*i+g*n+p*a,s[e+1]=m*i+v*n+y*a,s[e+2]=_*i+S*n+x*a,s[e+3]=r},y.Factory.addGetterSetter(y.Node,"hue",0,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"saturation",0,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"value",0,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"hue",0,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"saturation",0,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"luminance",0,null,y.Factory.afterSetFilter),y.Filters.HSL=function(t){var e,i,n,a,r,s=t.data,o=s.length,h=Math.pow(2,this.saturation()),c=Math.abs(this.hue()+360)%360,l=127*this.luminance(),d=1*h*Math.cos(c*Math.PI/180),u=1*h*Math.sin(c*Math.PI/180),f=.299+.701*d+.167*u,g=.587-.587*d+.33*u,p=.114-.114*d-.497*u,m=.299-.299*d-.328*u,v=.587+.413*d+.035*u,y=.114-.114*d+.293*u,_=.299-.3*d+1.25*u,S=.587-.586*d-1.05*u,x=.114+.886*d-.2*u;for(e=0;e<o;e+=4)i=s[e+0],n=s[e+1],a=s[e+2],r=s[e+3],s[e+0]=f*i+g*n+p*a+l,s[e+1]=m*i+v*n+y*a+l,s[e+2]=_*i+S*n+x*a+l,s[e+3]=r},y.Filters.Emboss=function(t){var e=10*this.embossStrength(),i=255*this.embossWhiteLevel(),n=this.embossDirection(),a=this.embossBlend(),r=0,s=0,o=t.data,h=t.width,c=t.height,l=4*h,d=c;switch(n){case"top-left":r=-1,s=-1;break;case"top":r=-1,s=0;break;case"top-right":r=-1,s=1;break;case"right":r=0,s=1;break;case"bottom-right":r=1,s=1;break;case"bottom":r=1,s=0;break;case"bottom-left":r=1,s=-1;break;case"left":r=0,s=-1}do{var u=(d-1)*l,f=r;d+f<1&&(f=0),d+f>c&&(f=0);var g=(d-1+f)*h*4,p=h;do{var m=u+4*(p-1),v=s;p+v<1&&(v=0),p+v>h&&(v=0);var y=g+4*(p-1+v),_=o[m]-o[y],S=o[m+1]-o[y+1],x=o[m+2]-o[y+2],C=_,w=C>0?C:-C;if((S>0?S:-S)>w&&(C=S),(x>0?x:-x)>w&&(C=x),C*=e,a){var b=o[m]+C,F=o[m+1]+C,k=o[m+2]+C;o[m]=b>255?255:b<0?0:b,o[m+1]=F>255?255:F<0?0:F,o[m+2]=k>255?255:k<0?0:k}else{var T=i-C;T<0?T=0:T>255&&(T=255),o[m]=o[m+1]=o[m+2]=T}}while(--p)}while(--d)},y.Factory.addGetterSetter(y.Node,"embossStrength",.5,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"embossWhiteLevel",.5,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"embossDirection","top-left",null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"embossBlend",!1,null,y.Factory.afterSetFilter),function(){function t(t,e,i,n,a){var r=i-e,s=a-n;return 0===r?n+s/2:0===s?n:s*((t-e)/r)+n}y.Filters.Enhance=function(e){var i,n,a,r,s=e.data,o=s.length,h=s[0],c=h,l=s[1],d=l,u=s[2],f=u,g=this.enhance();if(0!==g){for(r=0;r<o;r+=4)(i=s[r+0])<h?h=i:i>c&&(c=i),(n=s[r+1])<l?l=n:n>d&&(d=n),(a=s[r+2])<u?u=a:a>f&&(f=a);var p,m,v,y,_,S,x,C,w;for(c===h&&(c=255,h=0),d===l&&(d=255,l=0),f===u&&(f=255,u=0),g>0?(m=c+g*(255-c),v=h-g*(h-0),_=d+g*(255-d),S=l-g*(l-0),C=f+g*(255-f),w=u-g*(u-0)):(m=c+g*(c-(p=.5*(c+h))),v=h+g*(h-p),_=d+g*(d-(y=.5*(d+l))),S=l+g*(l-y),C=f+g*(f-(x=.5*(f+u))),w=u+g*(u-x)),r=0;r<o;r+=4)s[r+0]=t(s[r+0],h,c,v,m),s[r+1]=t(s[r+1],l,d,S,_),s[r+2]=t(s[r+2],u,f,w,C)}},y.Factory.addGetterSetter(y.Node,"enhance",0,null,y.Factory.afterSetFilter)}(),y.Filters.Posterize=function(t){var e,i=Math.round(254*this.levels())+1,n=t.data,a=n.length,r=255/i;for(e=0;e<a;e+=1)n[e]=Math.floor(n[e]/r)*r},y.Factory.addGetterSetter(y.Node,"levels",.5,null,y.Factory.afterSetFilter),y.Filters.Noise=function(t){var e,i=255*this.noise(),n=t.data,a=n.length,r=i/2;for(e=0;e<a;e+=4)n[e+0]+=r-2*r*Math.random(),n[e+1]+=r-2*r*Math.random(),n[e+2]+=r-2*r*Math.random()},y.Factory.addGetterSetter(y.Node,"noise",.2,null,y.Factory.afterSetFilter),y.Filters.Pixelate=function(t){var e,i,n,a,r,s,o,h,c,l,d,u,f,g,p=Math.ceil(this.pixelSize()),m=t.width,v=t.height,y=Math.ceil(m/p),_=Math.ceil(v/p);for(t=t.data,u=0;u<y;u+=1)for(f=0;f<_;f+=1){for(a=0,r=0,s=0,o=0,c=(h=u*p)+p,d=(l=f*p)+p,g=0,e=h;e<c;e+=1)if(!(e>=m))for(i=l;i<d;i+=1)i>=v||(a+=t[0+(n=4*(m*i+e))],r+=t[n+1],s+=t[n+2],o+=t[n+3],g+=1);for(a/=g,r/=g,s/=g,e=h;e<c;e+=1)if(!(e>=m))for(i=l;i<d;i+=1)i>=v||(t[0+(n=4*(m*i+e))]=a,t[n+1]=r,t[n+2]=s,t[n+3]=o)}},y.Factory.addGetterSetter(y.Node,"pixelSize",8,null,y.Factory.afterSetFilter),y.Filters.Threshold=function(t){var e,i=255*this.threshold(),n=t.data,a=n.length;for(e=0;e<a;e+=1)n[e]=n[e]<i?0:255},y.Factory.addGetterSetter(y.Node,"threshold",.5,null,y.Factory.afterSetFilter),y.Filters.Sepia=function(t){var e,i,n,a,r,s,o,h,c,l=t.data,d=t.width,u=t.height,f=4*d;do{e=(u-1)*f,i=d;do{o=.393*(a=l[n=e+4*(i-1)])+.769*(r=l[n+1])+.189*(s=l[n+2]),h=.349*a+.686*r+.168*s,c=.272*a+.534*r+.131*s,l[n]=o>255?255:o,l[n+1]=h>255?255:h,l[n+2]=c>255?255:c,l[n+3]=l[n+3]}while(--i)}while(--u)},y.Filters.Solarize=function(t){var e=t.data,i=t.width,n=4*i,a=t.height;do{var r=(a-1)*n,s=i;do{var o=r+4*(s-1),h=e[o],c=e[o+1],l=e[o+2];h>127&&(h=255-h),c>127&&(c=255-c),l>127&&(l=255-l),e[o]=h,e[o+1]=c,e[o+2]=l}while(--s)}while(--a)},u=y.Util.createCanvasElement(),y.Filters.Kaleidoscope=function(t){var e,i,n,a,r,s,o,h,c,l=t.width,d=t.height,f=Math.round(this.kaleidoscopePower()),g=Math.round(this.kaleidoscopeAngle()),p=Math.floor(l*(g%360)/360);if(!(f<1)){u.width=l,u.height=d;var m=u.getContext("2d").getImageData(0,0,l,d);!function(t,e,i){var n,a,r,s,o=t.data,h=e.data,c=t.width,l=t.height,d=i.polarCenterX||c/2,u=i.polarCenterY||l/2,f=0,g=0,p=0,m=0,v=Math.sqrt(d*d+u*u);a=c-d,r=l-u,v=(s=Math.sqrt(a*a+r*r))>v?s:v;var y,_,S,x,C=l,w=c,b=360/w*Math.PI/180;for(_=0;_<w;_+=1)for(S=Math.sin(_*b),x=Math.cos(_*b),y=0;y<C;y+=1)a=Math.floor(d+v*y/C*x),f=o[0+(n=4*((r=Math.floor(u+v*y/C*S))*c+a))],g=o[n+1],p=o[n+2],m=o[n+3],h[0+(n=4*(_+y*c))]=f,h[n+1]=g,h[n+2]=p,h[n+3]=m}(t,m,{polarCenterX:l/2,polarCenterY:d/2});for(var v=l/Math.pow(2,f);v<=8;)v*=2,f-=1;var y=v=Math.ceil(v),_=0,S=y,x=1;for(p+v>l&&(_=y,S=0,x=-1),i=0;i<d;i+=1)for(e=_;e!==S;e+=x)h=4*(l*i+Math.round(e+p)%l),a=m.data[h+0],r=m.data[h+1],s=m.data[h+2],o=m.data[h+3],c=4*(l*i+e),m.data[c+0]=a,m.data[c+1]=r,m.data[c+2]=s,m.data[c+3]=o;for(i=0;i<d;i+=1)for(y=Math.floor(v),n=0;n<f;n+=1){for(e=0;e<y+1;e+=1)h=4*(l*i+e),a=m.data[h+0],r=m.data[h+1],s=m.data[h+2],o=m.data[h+3],c=4*(l*i+2*y-e-1),m.data[c+0]=a,m.data[c+1]=r,m.data[c+2]=s,m.data[c+3]=o;y*=2}!function(t,e,i){var n,a,r,s,o,h,c=t.data,l=e.data,d=t.width,u=t.height,f=i.polarCenterX||d/2,g=i.polarCenterY||u/2,p=0,m=0,v=0,y=0,_=Math.sqrt(f*f+g*g);a=d-f,r=u-g,_=(h=Math.sqrt(a*a+r*r))>_?h:_;var S,x,C,w=u,b=d,F=i.polarRotation||0;for(a=0;a<d;a+=1)for(r=0;r<u;r+=1)s=a-f,o=r-g,S=Math.sqrt(s*s+o*o)*w/_,x=(x=(180*Math.atan2(o,s)/Math.PI+360+F)%360)*b/360,C=Math.floor(x),p=c[0+(n=4*(Math.floor(S)*d+C))],m=c[n+1],v=c[n+2],y=c[n+3],l[0+(n=4*(r*d+a))]=p,l[n+1]=m,l[n+2]=v,l[n+3]=y}(m,t,{polarRotation:0})}},y.Factory.addGetterSetter(y.Node,"kaleidoscopePower",2,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"kaleidoscopeAngle",0,null,y.Factory.afterSetFilter),function(){var t=y.root.performance&&y.root.performance.now?function(){return y.root.performance.now()}:function(){return(new Date).getTime()},e=y.root.requestAnimationFrame||y.root.webkitRequestAnimationFrame||y.root.mozRequestAnimationFrame||y.root.oRequestAnimationFrame||y.root.msRequestAnimationFrame||i;function i(t){setTimeout(t,1e3/60)}y.Animation=function(e,i){var n=y.Animation;this.func=e,this.setLayers(i),this.id=n.animIdCounter++,this.frame={time:0,timeDiff:0,lastTime:t()}},y.Animation.prototype={setLayers:function(t){var e=[];e=t?t.length>0?t:[t]:[],this.layers=e},getLayers:function(){return this.layers},addLayer:function(t){var e,i,n=this.layers;if(n){for(e=n.length,i=0;i<e;i++)if(n[i]._id===t._id)return!1}else this.layers=[];return this.layers.push(t),!0},isRunning:function(){var t,e=y.Animation.animations,i=e.length;for(t=0;t<i;t++)if(e[t].id===this.id)return!0;return!1},start:function(){var e=y.Animation;this.stop(),this.frame.timeDiff=0,this.frame.lastTime=t(),e._addAnimation(this)},stop:function(){y.Animation._removeAnimation(this)},_updateFrameObject:function(t){this.frame.timeDiff=t-this.frame.lastTime,this.frame.lastTime=t,this.frame.time+=this.frame.timeDiff,this.frame.frameRate=1e3/this.frame.timeDiff}},y.Animation.animations=[],y.Animation.animIdCounter=0,y.Animation.animRunning=!1,y.Animation._addAnimation=function(t){this.animations.push(t),this._handleAnimation()},y.Animation._removeAnimation=function(t){var e,i=t.id,n=this.animations,a=n.length;for(e=0;e<a;e++)if(n[e].id===i){this.animations.splice(e,1);break}},y.Animation._runFrames=function(){var e,i,n,a,r,s,o,h,c={},l=this.animations;for(a=0;a<l.length;a++)if(i=(e=l[a]).layers,n=e.func,e._updateFrameObject(t()),s=i.length,!n||!1!==n.call(e,e.frame))for(r=0;r<s;r++)void 0!==(o=i[r])._id&&(c[o._id]=o);for(h in c)c[h].draw()},y.Animation._animationLoop=function(){var t=y.Animation;t.animations.length?(!function(){e.apply(y.root,arguments)}(t._animationLoop),t._runFrames()):t.animRunning=!1},y.Animation._handleAnimation=function(){this.animRunning||(this.animRunning=!0,this._animationLoop())};var n=y.Node.prototype.moveTo;y.Node.prototype.moveTo=function(t){n.call(this,t)},y.BaseLayer.prototype.batchDraw=function(){var e=this,i=y.Animation;this.batchAnim||(this.batchAnim=new i(function(){e.lastBatchDrawTime&&t()-e.lastBatchDrawTime>500&&e.batchAnim.stop()},this)),this.lastBatchDrawTime=t(),this.batchAnim.isRunning()||(this.draw(),this.batchAnim.start())},y.Stage.prototype.batchDraw=function(){this.getChildren().each(function(t){t.batchDraw()})}}(),function(){var t={node:1,duration:1,easing:1,onFinish:1,yoyo:1},e=0;y.Tween=function(n){var a,r,s=this,o=n.node,h=o._id,c=n.easing||y.Easings.Linear,l=!!n.yoyo;for(r in a=void 0===n.duration?1:0===n.duration?.001:n.duration,this.node=o,this._id=e++,this.anim=new y.Animation(function(){s.tween.onEnterFrame()},o.getLayer()||(o instanceof y.Stage?o.getLayers():null)),this.tween=new i(r,function(t){s._tweenFunc(t)},c,0,1,1e3*a,l),this._addListeners(),y.Tween.attrs[h]||(y.Tween.attrs[h]={}),y.Tween.attrs[h][this._id]||(y.Tween.attrs[h][this._id]={}),y.Tween.tweens[h]||(y.Tween.tweens[h]={}),n)void 0===t[r]&&this._addAttr(r,n[r]);this.reset(),this.onFinish=n.onFinish,this.onReset=n.onReset},y.Tween.attrs={},y.Tween.tweens={},y.Tween.prototype={_addAttr:function(t,e){var i,n,a,r,s,o=this.node,h=o._id;if((a=y.Tween.tweens[h][t])&&delete y.Tween.attrs[h][a][t],i=o.getAttr(t),y.Util._isArray(e))for(n=[],s=e.length,r=0;r<s;r++)n.push(e[r]-i[r]);else n=e-i;y.Tween.attrs[h][this._id][t]={start:i,diff:n},y.Tween.tweens[h][t]=this._id},_tweenFunc:function(t){var e,i,n,a,r,s,o,h=this.node,c=y.Tween.attrs[h._id][this._id];for(e in c){if(n=(i=c[e]).start,a=i.diff,y.Util._isArray(n))for(r=[],o=n.length,s=0;s<o;s++)r.push(n[s]+a[s]*t);else r=n+a*t;h.setAttr(e,r)}},_addListeners:function(){var t=this;this.tween.onPlay=function(){t.anim.start()},this.tween.onReverse=function(){t.anim.start()},this.tween.onPause=function(){t.anim.stop()},this.tween.onFinish=function(){t.onFinish&&t.onFinish()},this.tween.onReset=function(){t.onReset&&t.onReset()}},play:function(){return this.tween.play(),this},reverse:function(){return this.tween.reverse(),this},reset:function(){return this.tween.reset(),this},seek:function(t){return this.tween.seek(1e3*t),this},pause:function(){return this.tween.pause(),this},finish:function(){return this.tween.finish(),this},destroy:function(){var t,e=this.node._id,i=this._id,n=y.Tween.tweens[e];for(t in this.pause(),n)delete y.Tween.tweens[e][t];delete y.Tween.attrs[e][i]}};var i=function(t,e,i,n,a,r,s){this.prop=t,this.propFunc=e,this.begin=n,this._pos=n,this.duration=r,this._change=0,this.prevPos=0,this.yoyo=s,this._time=0,this._position=0,this._startTime=0,this._finish=0,this.func=i,this._change=a-this.begin,this.pause()};i.prototype={fire:function(t){var e=this[t];e&&e()},setTime:function(t){t>this.duration?this.yoyo?(this._time=this.duration,this.reverse()):this.finish():t<0?this.yoyo?(this._time=0,this.play()):this.reset():(this._time=t,this.update())},getTime:function(){return this._time},setPosition:function(t){this.prevPos=this._pos,this.propFunc(t),this._pos=t},getPosition:function(t){return void 0===t&&(t=this._time),this.func(t,this.begin,this._change,this.duration)},play:function(){this.state=2,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onPlay")},reverse:function(){this.state=3,this._time=this.duration-this._time,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onReverse")},seek:function(t){this.pause(),this._time=t,this.update(),this.fire("onSeek")},reset:function(){this.pause(),this._time=0,this.update(),this.fire("onReset")},finish:function(){this.pause(),this._time=this.duration,this.update(),this.fire("onFinish")},update:function(){this.setPosition(this.getPosition(this._time))},onEnterFrame:function(){var t=this.getTimer()-this._startTime;2===this.state?this.setTime(t):3===this.state&&this.setTime(this.duration-t)},pause:function(){this.state=1,this.fire("onPause")},getTimer:function(){return(new Date).getTime()}},y.Easings={BackEaseIn:function(t,e,i,n){var a=1.70158;return i*(t/=n)*t*((a+1)*t-a)+e},BackEaseOut:function(t,e,i,n){var a=1.70158;return i*((t=t/n-1)*t*((a+1)*t+a)+1)+e},BackEaseInOut:function(t,e,i,n){var a=1.70158;return(t/=n/2)<1?i/2*(t*t*((1+(a*=1.525))*t-a))+e:i/2*((t-=2)*t*((1+(a*=1.525))*t+a)+2)+e},ElasticEaseIn:function(t,e,i,n,a,r){var s=0;return 0===t?e:1==(t/=n)?e+i:(r||(r=.3*n),!a||a<Math.abs(i)?(a=i,s=r/4):s=r/(2*Math.PI)*Math.asin(i/a),-a*Math.pow(2,10*(t-=1))*Math.sin((t*n-s)*(2*Math.PI)/r)+e)},ElasticEaseOut:function(t,e,i,n,a,r){var s=0;return 0===t?e:1==(t/=n)?e+i:(r||(r=.3*n),!a||a<Math.abs(i)?(a=i,s=r/4):s=r/(2*Math.PI)*Math.asin(i/a),a*Math.pow(2,-10*t)*Math.sin((t*n-s)*(2*Math.PI)/r)+i+e)},ElasticEaseInOut:function(t,e,i,n,a,r){var s=0;return 0===t?e:2==(t/=n/2)?e+i:(r||(r=n*(.3*1.5)),!a||a<Math.abs(i)?(a=i,s=r/4):s=r/(2*Math.PI)*Math.asin(i/a),t<1?a*Math.pow(2,10*(t-=1))*Math.sin((t*n-s)*(2*Math.PI)/r)*-.5+e:a*Math.pow(2,-10*(t-=1))*Math.sin((t*n-s)*(2*Math.PI)/r)*.5+i+e)},BounceEaseOut:function(t,e,i,n){return(t/=n)<1/2.75?i*(7.5625*t*t)+e:t<2/2.75?i*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?i*(7.5625*(t-=2.25/2.75)*t+.9375)+e:i*(7.5625*(t-=2.625/2.75)*t+.984375)+e},BounceEaseIn:function(t,e,i,n){return i-y.Easings.BounceEaseOut(n-t,0,i,n)+e},BounceEaseInOut:function(t,e,i,n){return t<n/2?.5*y.Easings.BounceEaseIn(2*t,0,i,n)+e:.5*y.Easings.BounceEaseOut(2*t-n,0,i,n)+.5*i+e},EaseIn:function(t,e,i,n){return i*(t/=n)*t+e},EaseOut:function(t,e,i,n){return-i*(t/=n)*(t-2)+e},EaseInOut:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e},StrongEaseIn:function(t,e,i,n){return i*(t/=n)*t*t*t*t+e},StrongEaseOut:function(t,e,i,n){return i*((t=t/n-1)*t*t*t*t+1)+e},StrongEaseInOut:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t*t*t*t+e:i/2*((t-=2)*t*t*t*t+2)+e},Linear:function(t,e,i,n){return i*t/n+e}}}(),function(){y.DD={anim:new y.Animation(function(){var t=this.dirty;return this.dirty=!1,t}),isDragging:!1,justDragged:!1,offset:{x:0,y:0},node:null,_drag:function(t){var e=y.DD,i=e.node;if(i){if(!e.isDragging){var n=i.getStage().getPointerPosition(),a=i.dragDistance();if(Math.max(Math.abs(n.x-e.startPointerPos.x),Math.abs(n.y-e.startPointerPos.y))<a)return}i._setDragPosition(t),e.isDragging||(e.isDragging=!0,i.fire("dragstart",{type:"dragstart",target:i,evt:t},!0)),i.fire("dragmove",{type:"dragmove",target:i,evt:t},!0)}},_endDragBefore:function(t){var e,i=y.DD,n=i.node;n&&(n.nodeType,e=n.getLayer(),i.anim.stop(),i.isDragging&&(i.isDragging=!1,i.justDragged=!0,y.listenClickTap=!1,t&&(t.dragEndNode=n)),delete i.node,(e||n).draw())},_endDragAfter:function(t){var e=(t=t||{}).dragEndNode;t&&e&&e.fire("dragend",{type:"dragend",target:e,evt:t},!0)}},y.Node.prototype.startDrag=function(){var t=y.DD,e=this.getStage(),i=this.getLayer(),n=e.getPointerPosition(),a=this.getAbsolutePosition();n&&(t.node&&t.node.stopDrag(),t.node=this,t.startPointerPos=n,t.offset.x=n.x-a.x,t.offset.y=n.y-a.y,t.anim.setLayers(i||this.getLayers()),t.anim.start(),this._setDragPosition())},y.Node.prototype._setDragPosition=function(t){var e=y.DD,i=this.getStage().getPointerPosition(),n=this.getDragBoundFunc();if(i){var a={x:i.x-e.offset.x,y:i.y-e.offset.y};void 0!==n&&(a=n.call(this,a,t)),this.setAbsolutePosition(a),this._lastPos&&this._lastPos.x===a.x&&this._lastPos.y===a.y||(e.anim.dirty=!0),this._lastPos=a}},y.Node.prototype.stopDrag=function(){var t=y.DD,e={};t._endDragBefore(e),t._endDragAfter(e)},y.Node.prototype.setDraggable=function(t){this._setAttr("draggable",t),this._dragChange()};var t=y.Node.prototype.destroy;y.Node.prototype.destroy=function(){var e=y.DD;e.node&&e.node._id===this._id&&this.stopDrag(),t.call(this)},y.Node.prototype.isDragging=function(){var t=y.DD;return!(!t.node||t.node._id!==this._id||!t.isDragging)},y.Node.prototype._listenDrag=function(){var t=this;this._dragCleanup(),"Stage"===this.getClassName()?this.on("contentMousedown.kinetic contentTouchstart.kinetic",function(e){y.DD.node||t.startDrag(e)}):this.on("mousedown.kinetic touchstart.kinetic",function(e){1!==e.evt.button&&2!==e.evt.button&&(y.DD.node||t.startDrag(e))})},y.Node.prototype._dragChange=function(){if(this.attrs.draggable)this._listenDrag();else{this._dragCleanup();var t=this.getStage(),e=y.DD;t&&e.node&&e.node._id===this._id&&e.node.stopDrag()}},y.Node.prototype._dragCleanup=function(){"Stage"===this.getClassName()?(this.off("contentMousedown.kinetic"),this.off("contentTouchstart.kinetic")):(this.off("mousedown.kinetic"),this.off("touchstart.kinetic"))},y.Factory.addGetterSetter(y.Node,"dragBoundFunc"),y.Factory.addGetter(y.Node,"draggable",!1),y.Factory.addOverloadedGetterSetter(y.Node,"draggable");var e=y.document.documentElement;e.addEventListener("mouseup",y.DD._endDragBefore,!0),e.addEventListener("touchend",y.DD._endDragBefore,!0),e.addEventListener("mouseup",y.DD._endDragAfter,!1),e.addEventListener("touchend",y.DD._endDragAfter,!1)}(),y.Util.addMethods(y.Container,{__init:function(t){this.children=new y.Collection,y.Node.call(this,t)},getChildren:function(t){if(t){var e=new y.Collection;return this.children.each(function(i){t(i)&&e.push(i)}),e}return this.children},hasChildren:function(){return this.getChildren().length>0},removeChildren:function(){for(var t,e=y.Collection.toCollection(this.children),i=0;i<e.length;i++)delete(t=e[i]).parent,t.index=0,t.hasChildren()&&t.removeChildren(),t.remove();return e=null,this.children=new y.Collection,this},destroyChildren:function(){for(var t,e=y.Collection.toCollection(this.children),i=0;i<e.length;i++)delete(t=e[i]).parent,t.index=0,t.destroy();return e=null,this.children=new y.Collection,this},add:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}if(t.getParent())return t.moveTo(this),this;var i=this.children;return this._validateAdd(t),t.index=i.length,t.parent=this,i.push(t),this._fire("add",{child:t}),t.isDragging()&&y.DD.anim.setLayers(t.getLayer()),this},destroy:function(){this.hasChildren()&&this.destroyChildren(),y.Node.prototype.destroy.call(this)},find:function(t){var e,i,n,a,r,s,o,h=[],c=t.replace(/ /g,"").split(","),l=c.length;for(e=0;e<l;e++)if("#"===(n=c[e]).charAt(0))(r=this._getNodeById(n.slice(1)))&&h.push(r);else if("."===n.charAt(0))a=this._getNodesByName(n.slice(1)),h=h.concat(a);else for(o=(s=this.getChildren()).length,i=0;i<o;i++)h=h.concat(s[i]._get(n));return y.Collection.toCollection(h)},_getNodeById:function(t){var e=y.ids[t];return void 0!==e&&this.isAncestorOf(e)?e:null},_getNodesByName:function(t){var e=y.names[t]||[];return this._getDescendants(e)},_get:function(t){for(var e=y.Node.prototype._get.call(this,t),i=this.getChildren(),n=i.length,a=0;a<n;a++)e=e.concat(i[a]._get(t));return e},toObject:function(){var t=y.Node.prototype.toObject.call(this);t.children=[];for(var e=this.getChildren(),i=e.length,n=0;n<i;n++){var a=e[n];t.children.push(a.toObject())}return t},_getDescendants:function(t){for(var e=[],i=t.length,n=0;n<i;n++){var a=t[n];this.isAncestorOf(a)&&e.push(a)}return e},isAncestorOf:function(t){for(var e=t.getParent();e;){if(e._id===this._id)return!0;e=e.getParent()}return!1},clone:function(t){var e=y.Node.prototype.clone.call(this,t);return this.getChildren().each(function(t){e.add(t.clone())}),e},getAllIntersections:function(t){var e=[];return this.find("Shape").each(function(i){i.isVisible()&&i.intersects(t)&&e.push(i)}),e},_setChildrenIndices:function(){this.children.each(function(t,e){t.index=e})},drawScene:function(t,e){var i=this.getLayer(),n=t||i&&i.getCanvas(),a=n&&n.getContext(),r=this._cache.canvas,s=r&&r.scene;return this.isVisible()&&(s?this._drawCachedSceneCanvas(a):this._drawChildren(n,"drawScene",e)),this},drawHit:function(t,e){var i=this.getLayer(),n=t||i&&i.hitCanvas,a=n&&n.getContext(),r=this._cache.canvas,s=r&&r.hit;return this.shouldDrawHit(n)&&(i&&i.clearHitCache(),s?this._drawCachedHitCanvas(a):this._drawChildren(n,"drawHit",e)),this},_drawChildren:function(t,e,i){var n,a,r=this.getLayer(),s=t&&t.getContext(),o=this.getClipWidth(),h=this.getClipHeight(),c=o&&h;c&&r&&(n=this.getClipX(),a=this.getClipY(),s.save(),r._applyTransform(this,s),s.beginPath(),s.rect(n,a,o,h),s.clip(),s.reset()),this.children.each(function(n){n[e](t,i)}),c&&s.restore()},shouldDrawHit:function(t){var e=this.getLayer(),i=y.DD&&y.isDragging()&&-1!==y.DD.anim.getLayers().indexOf(e);return t&&t.isCache||e&&e.hitGraphEnabled()&&this.isVisible()&&!i}}),y.Util.extend(y.Container,y.Node),y.Container.prototype.get=y.Container.prototype.find,y.Factory.addComponentsGetterSetter(y.Container,"clip",["x","y","width","height"]),y.Factory.addGetterSetter(y.Container,"clipX"),y.Factory.addGetterSetter(y.Container,"clipY"),y.Factory.addGetterSetter(y.Container,"clipWidth"),y.Factory.addGetterSetter(y.Container,"clipHeight"),y.Collection.mapMethods(y.Container),function(){var t="hasShadow";function e(t){t.fill()}function i(t){t.stroke()}function n(t){t.fill()}function a(t){t.stroke()}function r(){this._clearCache(t)}y.Util.addMethods(y.Shape,{__init:function(t){this.nodeType="Shape",this._fillFunc=e,this._strokeFunc=i,this._fillFuncHit=n,this._strokeFuncHit=a;for(var s,o=y.shapes;!(s=y.Util.getRandomColor())||s in o;);this.colorKey=s,o[s]=this,y.Node.call(this,t),this.on("shadowColorChange.kinetic shadowBlurChange.kinetic shadowOffsetChange.kinetic shadowOpacityChange.kinetic shadowEnabledChange.kinetic",r)},hasChildren:function(){return!1},getChildren:function(){return[]},getContext:function(){return this.getLayer().getContext()},getCanvas:function(){return this.getLayer().getCanvas()},hasShadow:function(){return this._getCache(t,this._hasShadow)},_hasShadow:function(){return this.getShadowEnabled()&&0!==this.getShadowOpacity()&&!!(this.getShadowColor()||this.getShadowBlur()||this.getShadowOffsetX()||this.getShadowOffsetY())},hasFill:function(){return!!(this.getFill()||this.getFillPatternImage()||this.getFillLinearGradientColorStops()||this.getFillRadialGradientColorStops())},hasStroke:function(){return!!(this.stroke()||this.strokeRed()||this.strokeGreen()||this.strokeBlue())},intersects:function(t){var e=this.getStage().bufferHitCanvas;return e.getContext().clear(),this.drawScene(e),e.context.getImageData(Math.round(t.x),Math.round(t.y),1,1).data[3]>0},destroy:function(){y.Node.prototype.destroy.call(this),delete y.shapes[this.colorKey]},_useBufferCanvas:function(){return(this.hasShadow()||1!==this.getAbsoluteOpacity())&&this.hasFill()&&this.hasStroke()&&this.getStage()},drawScene:function(t,e){var i,n,a=this.getLayer(),r=t||a.getCanvas(),s=r.getContext(),o=this._cache.canvas,h=this.sceneFunc(),c=this.hasShadow();if(this.isVisible())if(o)this._drawCachedSceneCanvas(s);else if(h){if(s.save(),this._useBufferCanvas()){if((n=(i=this.getStage().bufferCanvas).getContext()).clear(),n.save(),n._applyLineJoin(this),a)a._applyTransform(this,n,e);else{var l=this.getAbsoluteTransform(e).getMatrix();s.transform(l[0],l[1],l[2],l[3],l[4],l[5])}h.call(this,n),n.restore(),c&&!r.hitCanvas&&(s.save(),s._applyShadow(this),s.drawImage(i._canvas,0,0),s.restore()),s._applyOpacity(this),s.drawImage(i._canvas,0,0)}else{if(s._applyLineJoin(this),a)a._applyTransform(this,s,e);else{var d=this.getAbsoluteTransform(e).getMatrix();s.transform(d[0],d[1],d[2],d[3],d[4],d[5])}c&&!r.hitCanvas&&(s.save(),s._applyShadow(this),h.call(this,s),s.restore()),s._applyOpacity(this),h.call(this,s)}s.restore()}return this},drawHit:function(t,e){var i=this.getLayer(),n=t||i.hitCanvas,a=n.getContext(),r=this.hitFunc()||this.sceneFunc(),s=this._cache.canvas,o=s&&s.hit;if(this.shouldDrawHit(n))if(i&&i.clearHitCache(),o)this._drawCachedHitCanvas(a);else if(r){if(a.save(),a._applyLineJoin(this),i)i._applyTransform(this,a,e);else{var h=this.getAbsoluteTransform(e).getMatrix();a.transform(h[0],h[1],h[2],h[3],h[4],h[5])}r.call(this,a),a.restore()}return this},drawHitFromCache:function(t){var e,i,n,a,r,s,o=t||0,h=this._cache.canvas,c=this._getCachedSceneCanvas(),l=c.getContext(),d=h.hit.getContext(),u=c.getWidth(),f=c.getHeight();d.clear();try{for(e=l.getImageData(0,0,u,f).data,n=(i=d.getImageData(0,0,u,f)).data,a=e.length,r=y.Util._hexToRgb(this.colorKey),s=0;s<a;s+=4)e[s+3]>o&&(n[s]=r.r,n[s+1]=r.g,n[s+2]=r.b,n[s+3]=255);d.putImageData(i,0,0)}catch(t){y.Util.warn("Unable to draw hit graph from cached scene canvas. "+t.message)}return this}}),y.Util.extend(y.Shape,y.Node),y.Factory.addGetterSetter(y.Shape,"stroke"),y.Factory.addGetterSetter(y.Shape,"strokeRed",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"strokeGreen",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"strokeBlue",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"strokeAlpha",1,y.Validators.alphaComponent),y.Factory.addGetterSetter(y.Shape,"strokeWidth",2),y.Factory.addGetterSetter(y.Shape,"lineJoin"),y.Factory.addGetterSetter(y.Shape,"lineCap"),y.Factory.addGetterSetter(y.Shape,"sceneFunc"),y.Factory.addGetterSetter(y.Shape,"hitFunc"),y.Factory.addGetterSetter(y.Shape,"dash"),y.Factory.addGetterSetter(y.Shape,"shadowColor"),y.Factory.addGetterSetter(y.Shape,"shadowRed",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"shadowGreen",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"shadowBlue",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"shadowAlpha",1,y.Validators.alphaComponent),y.Factory.addGetterSetter(y.Shape,"shadowBlur"),y.Factory.addGetterSetter(y.Shape,"shadowOpacity"),y.Factory.addComponentsGetterSetter(y.Shape,"shadowOffset",["x","y"]),y.Factory.addGetterSetter(y.Shape,"shadowOffsetX",0),y.Factory.addGetterSetter(y.Shape,"shadowOffsetY",0),y.Factory.addGetterSetter(y.Shape,"fillPatternImage"),y.Factory.addGetterSetter(y.Shape,"fill"),y.Factory.addGetterSetter(y.Shape,"fillRed",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"fillGreen",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"fillBlue",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"fillAlpha",1,y.Validators.alphaComponent),y.Factory.addGetterSetter(y.Shape,"fillPatternX",0),y.Factory.addGetterSetter(y.Shape,"fillPatternY",0),y.Factory.addGetterSetter(y.Shape,"fillLinearGradientColorStops"),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientStartRadius",0),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientEndRadius",0),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientColorStops"),y.Factory.addGetterSetter(y.Shape,"fillPatternRepeat","repeat"),y.Factory.addGetterSetter(y.Shape,"fillEnabled",!0),y.Factory.addGetterSetter(y.Shape,"strokeEnabled",!0),y.Factory.addGetterSetter(y.Shape,"shadowEnabled",!0),y.Factory.addGetterSetter(y.Shape,"dashEnabled",!0),y.Factory.addGetterSetter(y.Shape,"strokeScaleEnabled",!0),y.Factory.addGetterSetter(y.Shape,"fillPriority","color"),y.Factory.addComponentsGetterSetter(y.Shape,"fillPatternOffset",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillPatternOffsetX",0),y.Factory.addGetterSetter(y.Shape,"fillPatternOffsetY",0),y.Factory.addComponentsGetterSetter(y.Shape,"fillPatternScale",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillPatternScaleX",1),y.Factory.addGetterSetter(y.Shape,"fillPatternScaleY",1),y.Factory.addComponentsGetterSetter(y.Shape,"fillLinearGradientStartPoint",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillLinearGradientStartPointX",0),y.Factory.addGetterSetter(y.Shape,"fillLinearGradientStartPointY",0),y.Factory.addComponentsGetterSetter(y.Shape,"fillLinearGradientEndPoint",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillLinearGradientEndPointX",0),y.Factory.addGetterSetter(y.Shape,"fillLinearGradientEndPointY",0),y.Factory.addComponentsGetterSetter(y.Shape,"fillRadialGradientStartPoint",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientStartPointX",0),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientStartPointY",0),y.Factory.addComponentsGetterSetter(y.Shape,"fillRadialGradientEndPoint",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientEndPointX",0),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientEndPointY",0),y.Factory.addGetterSetter(y.Shape,"fillPatternRotation",0),y.Factory.backCompat(y.Shape,{dashArray:"dash",getDashArray:"getDash",setDashArray:"getDash",drawFunc:"sceneFunc",getDrawFunc:"getSceneFunc",setDrawFunc:"setSceneFunc",drawHitFunc:"hitFunc",getDrawHitFunc:"getHitFunc",setDrawHitFunc:"setHitFunc"}),y.Collection.mapMethods(y.Shape)}(),function(){var t="_",e=["mousedown","mousemove","mouseup","mouseout","touchstart","touchmove","touchend","mouseover","DOMMouseScroll","mousewheel","wheel"],i=e.length;function n(e,i){e.content.addEventListener(i,function(n){e[t+i](n)},!1)}y.Util.addMethods(y.Stage,{___init:function(t){this.nodeType="Stage",y.Container.call(this,t),this._id=y.idCounter++,this._buildDOM(),this._bindContentEvents(),this._enableNestedTransforms=!1,y.stages.push(this)},_validateAdd:function(t){"Layer"!==t.getType()&&y.Util.error("You may only add layers to the stage.")},setContainer:function(t){if("string"==typeof t){var e=t;if(!(t=y.document.getElementById(t)))throw"Can not find container in document with id "+e}return this._setAttr("container",t),this},shouldDrawHit:function(){return!0},draw:function(){return y.Node.prototype.draw.call(this),this},setHeight:function(t){return y.Node.prototype.setHeight.call(this,t),this._resizeDOM(),this},setWidth:function(t){return y.Node.prototype.setWidth.call(this,t),this._resizeDOM(),this},clear:function(){var t,e=this.children,i=e.length;for(t=0;t<i;t++)e[t].clear();return this},clone:function(t){return t||(t={}),t.container=y.document.createElement("div"),y.Container.prototype.clone.call(this,t)},destroy:function(){var t=this.content;y.Container.prototype.destroy.call(this),t&&y.Util._isInDocument(t)&&this.getContainer().removeChild(t);var e=y.stages.indexOf(this);e>-1&&y.stages.splice(e,1)},getPointerPosition:function(){return this.pointerPos},getStage:function(){return this},getContent:function(){return this.content},toDataURL:function(t){var e=(t=t||{}).mimeType||null,i=t.quality||null,n=t.x||0,a=t.y||0,r=new y.SceneCanvas({width:t.width||this.getWidth(),height:t.height||this.getHeight(),pixelRatio:1}),s=r.getContext()._context,o=this.children;(n||a)&&s.translate(-1*n,-1*a),function n(a){var h=o[a].toDataURL(),c=new y.window.Image;c.onload=function(){s.drawImage(c,0,0),a<o.length-1?n(a+1):t.callback(r.toDataURL(e,i))},c.src=h}(0)},toImage:function(t){var e=t.callback;t.callback=function(t){y.Util._getImage(t,function(t){e(t)})},this.toDataURL(t)},getIntersection:function(t){var e,i,n=this.getChildren();for(e=n.length-1;e>=0;e--)if(i=n[e].getIntersection(t))return i;return null},_resizeDOM:function(){if(this.content){var t,e,i=this.getWidth(),n=this.getHeight(),a=this.getChildren(),r=a.length;for(this.content.style.width=i+"px",this.content.style.height=n+"px",this.bufferCanvas.setSize(i,n),this.bufferHitCanvas.setSize(i,n),t=0;t<r;t++)(e=a[t]).setSize(i,n),e.draw()}},add:function(t){if(!(arguments.length>1))return y.Container.prototype.add.call(this,t),t._setCanvasSize(this.width(),this.height()),t.draw(),this.content.appendChild(t.canvas._canvas),this;for(var e=0;e<arguments.length;e++)this.add(arguments[e])},getParent:function(){return null},getLayer:function(){return null},getLayers:function(){return this.getChildren()},_bindContentEvents:function(){for(var t=0;t<i;t++)n(this,e[t])},_mouseover:function(t){y.UA.mobile||(this._setPointerPosition(t),this._fire("contentMouseover",{evt:t}))},_mouseout:function(t){if(!y.UA.mobile){this._setPointerPosition(t);var e=this.targetShape;e&&!y.isDragging()&&(e._fireAndBubble("mouseout",{evt:t}),e._fireAndBubble("mouseleave",{evt:t}),this.targetShape=null),this.pointerPos=void 0,this._fire("contentMouseout",{evt:t})}},_mousemove:function(t){if(y.UA.ieMobile)return this._touchmove(t);if((void 0===t.webkitMovementX&&void 0===t.webkitMovementY||0!==t.webkitMovementY||0!==t.webkitMovementX)&&!y.UA.mobile){this._setPointerPosition(t);var e,i=y.DD;y.isDragging()||((e=this.getIntersection(this.getPointerPosition()))&&e.isListening()?y.isDragging()||this.targetShape&&this.targetShape._id===e._id?e._fireAndBubble("mousemove",{evt:t}):(this.targetShape&&(this.targetShape._fireAndBubble("mouseout",{evt:t},e),this.targetShape._fireAndBubble("mouseleave",{evt:t},e)),e._fireAndBubble("mouseover",{evt:t},this.targetShape),e._fireAndBubble("mouseenter",{evt:t},this.targetShape),this.targetShape=e):this.targetShape&&!y.isDragging()&&(this.targetShape._fireAndBubble("mouseout",{evt:t}),this.targetShape._fireAndBubble("mouseleave",{evt:t}),this.targetShape=null),this._fire("contentMousemove",{evt:t})),i&&i._drag(t),t.preventDefault&&t.preventDefault()}},_mousedown:function(t){if(y.UA.ieMobile)return this._touchstart(t);if(!y.UA.mobile){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());y.listenClickTap=!0,e&&e.isListening()&&(this.clickStartShape=e,e._fireAndBubble("mousedown",{evt:t})),this._fire("contentMousedown",{evt:t})}t.preventDefault&&t.preventDefault()},_mouseup:function(t){if(y.UA.ieMobile)return this._touchend(t);if(!y.UA.mobile){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition()),i=this.clickStartShape,n=!1,a=y.DD;y.inDblClickWindow?(n=!0,y.inDblClickWindow=!1):a&&a.justDragged?a&&(a.justDragged=!1):y.inDblClickWindow=!0,setTimeout(function(){y.inDblClickWindow=!1},y.dblClickWindow),e&&e.isListening()&&(e._fireAndBubble("mouseup",{evt:t}),y.listenClickTap&&i&&i._id===e._id&&(e._fireAndBubble("click",{evt:t}),n&&e._fireAndBubble("dblclick",{evt:t}))),this._fire("contentMouseup",{evt:t}),y.listenClickTap&&(this._fire("contentClick",{evt:t}),n&&this._fire("contentDblclick",{evt:t})),y.listenClickTap=!1}t.preventDefault&&t.preventDefault()},_touchstart:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());y.listenClickTap=!0,e&&e.isListening()&&(this.tapStartShape=e,e._fireAndBubble("touchstart",{evt:t}),e.isListening()&&t.preventDefault&&t.preventDefault()),this._fire("contentTouchstart",{evt:t})},_touchend:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition()),i=!1;y.inDblClickWindow?(i=!0,y.inDblClickWindow=!1):y.inDblClickWindow=!0,setTimeout(function(){y.inDblClickWindow=!1},y.dblClickWindow),e&&e.isListening()&&(e._fireAndBubble("touchend",{evt:t}),y.listenClickTap&&e._id===this.tapStartShape._id&&(e._fireAndBubble("tap",{evt:t}),i&&e._fireAndBubble("dbltap",{evt:t})),e.isListening()&&t.preventDefault&&t.preventDefault()),y.listenClickTap&&(this._fire("contentTouchend",{evt:t}),i&&this._fire("contentDbltap",{evt:t})),y.listenClickTap=!1},_touchmove:function(t){this._setPointerPosition(t);var e,i=y.DD;y.isDragging()||((e=this.getIntersection(this.getPointerPosition()))&&e.isListening()&&(e._fireAndBubble("touchmove",{evt:t}),e.isListening()&&t.preventDefault&&t.preventDefault()),this._fire("contentTouchmove",{evt:t})),i&&(i._drag(t),y.isDragging()&&t.preventDefault())},_DOMMouseScroll:function(t){this._mousewheel(t)},_mousewheel:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()&&e._fireAndBubble("mousewheel",{evt:t})},_wheel:function(t){this._mousewheel(t)},_setPointerPosition:function(t){var e,i=this._getContentPosition(),n=t.offsetX,a=t.clientX,r=null,s=null;void 0!==(t=t||window.event).touches?t.touches.length>0&&(r=(e=t.touches[0]).clientX-i.left,s=e.clientY-i.top):void 0!==n?(r=n,s=t.offsetY):"mozilla"===y.UA.browser?(r=t.layerX,s=t.layerY):void 0!==a&&i&&(r=a-i.left,s=t.clientY-i.top),null!==r&&null!==s&&(this.pointerPos={x:r,y:s})},_getContentPosition:function(){var t=this.content.getBoundingClientRect?this.content.getBoundingClientRect():{top:0,left:0};return{top:t.top,left:t.left}},_buildDOM:function(){var t=this.getContainer();if(!t){if(y.Util.isBrowser())throw"Stage has no container. A container is required.";t=y.document.createElement("div")}t.innerHTML="",this.content=y.document.createElement("div"),this.content.style.position="relative",this.content.style.display="inline-block",this.content.className="kineticjs-content",this.content.setAttribute("role","presentation"),t.appendChild(this.content),this.bufferCanvas=new y.SceneCanvas({pixelRatio:1}),this.bufferHitCanvas=new y.HitCanvas,this._resizeDOM()},_onContent:function(t,e){var i,n,a=t.split(" "),r=a.length;for(i=0;i<r;i++)n=a[i],this.content.addEventListener(n,e,!1)},cache:function(){y.Util.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes.")},clearCache:function(){}}),y.Util.extend(y.Stage,y.Container),y.Factory.addGetter(y.Stage,"container"),y.Factory.addOverloadedGetterSetter(y.Stage,"container")}(),y.Util.addMethods(y.BaseLayer,{___init:function(t){this.nodeType="Layer",y.Container.call(this,t)},createPNGStream:function(){return this.canvas._canvas.createPNGStream()},getCanvas:function(){return this.canvas},getHitCanvas:function(){return this.hitCanvas},getContext:function(){return this.getCanvas().getContext()},clear:function(t){return this.getContext().clear(t),this.getHitCanvas().getContext().clear(t),this},clearHitCache:function(){this._hitImageData=void 0},setZIndex:function(t){y.Node.prototype.setZIndex.call(this,t);var e=this.getStage();return e&&(e.content.removeChild(this.getCanvas()._canvas),t<e.getChildren().length-1?e.content.insertBefore(this.getCanvas()._canvas,e.getChildren()[t+1].getCanvas()._canvas):e.content.appendChild(this.getCanvas()._canvas)),this},moveToTop:function(){y.Node.prototype.moveToTop.call(this);var t=this.getStage();t&&(t.content.removeChild(this.getCanvas()._canvas),t.content.appendChild(this.getCanvas()._canvas))},moveUp:function(){if(y.Node.prototype.moveUp.call(this)){var t=this.getStage();t&&(t.content.removeChild(this.getCanvas()._canvas),this.index<t.getChildren().length-1?t.content.insertBefore(this.getCanvas()._canvas,t.getChildren()[this.index+1].getCanvas()._canvas):t.content.appendChild(this.getCanvas()._canvas))}},moveDown:function(){if(y.Node.prototype.moveDown.call(this)){var t=this.getStage();if(t){var e=t.getChildren();t.content.removeChild(this.getCanvas()._canvas),t.content.insertBefore(this.getCanvas()._canvas,e[this.index+1].getCanvas()._canvas)}}},moveToBottom:function(){if(y.Node.prototype.moveToBottom.call(this)){var t=this.getStage();if(t){var e=t.getChildren();t.content.removeChild(this.getCanvas()._canvas),t.content.insertBefore(this.getCanvas()._canvas,e[1].getCanvas()._canvas)}}},getLayer:function(){return this},remove:function(){var t=this.getCanvas()._canvas;return y.Node.prototype.remove.call(this),t&&t.parentNode&&y.Util._isInDocument(t)&&t.parentNode.removeChild(t),this},getStage:function(){return this.parent},setSize:function(t,e){this.canvas.setSize(t,e)},getWidth:function(){if(this.parent)return this.parent.getWidth()},setWidth:function(){y.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.')},getHeight:function(){if(this.parent)return this.parent.getHeight()},setHeight:function(){y.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.')}}),y.Util.extend(y.BaseLayer,y.Container),y.Factory.addGetterSetter(y.BaseLayer,"clearBeforeDraw",!0),y.Collection.mapMethods(y.BaseLayer),g=(f=[{x:0,y:0},{x:-1,y:0},{x:-1,y:-1},{x:0,y:-1},{x:1,y:-1},{x:1,y:0},{x:1,y:1},{x:0,y:1},{x:-1,y:1}]).length,y.Util.addMethods(y.Layer,{____init:function(t){this.nodeType="Layer",this.canvas=new y.SceneCanvas,this.hitCanvas=new y.HitCanvas,y.BaseLayer.call(this,t)},_setCanvasSize:function(t,e){this.canvas.setSize(t,e),this.hitCanvas.setSize(t,e)},_validateAdd:function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&y.Util.error("You may only add groups and shapes to a layer.")},getIntersection:function(t){var e,i,n,a;if(!this.hitGraphEnabled()||!this.isVisible())return null;for(var r=1,s=!1;;){for(i=0;i<g;i++){if(n=f[i],a=(e=this._getIntersection({x:t.x+n.x*r,y:t.y+n.y*r})).shape)return a;e.antialiased&&(s=!0)}if(!s)return;r+=1}},_getImageData:function(t,e){var i=this.hitCanvas.width||1,n=this.hitCanvas.height||1,a=Math.round(e)*i+Math.round(t);return this._hitImageData||(this._hitImageData=this.hitCanvas.context.getImageData(0,0,i,n)),[this._hitImageData.data[4*a+0],this._hitImageData.data[4*a+1],this._hitImageData.data[4*a+2],this._hitImageData.data[4*a+3]]},_getIntersection:function(t){var e,i=this.hitCanvas.context.getImageData(t.x,t.y,1,1).data,n=i[3];return 255===n?(e=y.Util._rgbToHex(i[0],i[1],i[2]),{shape:y.shapes["#"+e]}):n>0?{antialiased:!0}:{}},drawScene:function(t,e){var i=this.getLayer(),n=t||i&&i.getCanvas();return this._fire("beforeDraw",{node:this}),this.getClearBeforeDraw()&&n.getContext().clear(),y.Container.prototype.drawScene.call(this,n,e),this._fire("draw",{node:this}),this},_applyTransform:function(t,e,i){var n=t.getAbsoluteTransform(i).getMatrix();e.transform(n[0],n[1],n[2],n[3],n[4],n[5])},drawHit:function(t,e){var i=this.getLayer(),n=t||i&&i.hitCanvas;return i&&i.getClearBeforeDraw()&&i.getHitCanvas().getContext().clear(),y.Container.prototype.drawHit.call(this,n,e),this.imageData=null,this},clear:function(t){return this.getContext().clear(t),this.getHitCanvas().getContext().clear(t),this.imageData=null,this},setVisible:function(t){return y.Node.prototype.setVisible.call(this,t),t?(this.getCanvas()._canvas.style.display="block",this.hitCanvas._canvas.style.display="block"):(this.getCanvas()._canvas.style.display="none",this.hitCanvas._canvas.style.display="none"),this},enableHitGraph:function(){return this.setHitGraphEnabled(!0),this},disableHitGraph:function(){return this.setHitGraphEnabled(!1),this},setSize:function(t,e){y.BaseLayer.prototype.setSize.call(this,t,e),this.hitCanvas.setSize(t,e)}}),y.Util.extend(y.Layer,y.BaseLayer),y.Factory.addGetterSetter(y.Layer,"hitGraphEnabled",!0),y.Collection.mapMethods(y.Layer),y.Util.addMethods(y.FastLayer,{____init:function(t){this.nodeType="Layer",this.canvas=new y.SceneCanvas,y.BaseLayer.call(this,t)},_validateAdd:function(t){"Shape"!==t.getType()&&y.Util.error("You may only add shapes to a fast layer.")},_setCanvasSize:function(t,e){this.canvas.setSize(t,e)},hitGraphEnabled:function(){return!1},getIntersection:function(){return null},drawScene:function(t){var e=this.getLayer(),i=t||e&&e.getCanvas();return this.getClearBeforeDraw()&&i.getContext().clear(),y.Container.prototype.drawScene.call(this,i),this},_applyTransform:function(t,e,i){if(!i||i._id!==this._id){var n=t.getTransform().getMatrix();e.transform(n[0],n[1],n[2],n[3],n[4],n[5])}},draw:function(){return this.drawScene(),this},clear:function(t){return this.getContext().clear(t),this},setVisible:function(t){return y.Node.prototype.setVisible.call(this,t),this.getCanvas()._canvas.style.display=t?"block":"none",this}}),y.Util.extend(y.FastLayer,y.BaseLayer),y.Collection.mapMethods(y.FastLayer),y.Util.addMethods(y.Group,{___init:function(t){this.nodeType="Group",y.Container.call(this,t)},_validateAdd:function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&y.Util.error("You may only add groups and shapes to groups.")}}),y.Util.extend(y.Group,y.Container),y.Collection.mapMethods(y.Group),y.Rect=function(t){this.___init(t)},y.Rect.prototype={___init:function(t){y.Shape.call(this,t),this.className="Rect",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.getCornerRadius(),i=this.getWidth(),n=this.getHeight();t.beginPath(),e?(t.moveTo(e,0),t.lineTo(i-e,0),t.arc(i-e,e,e,3*Math.PI/2,0,!1),t.lineTo(i,n-e),t.arc(i-e,n-e,e,0,Math.PI/2,!1),t.lineTo(e,n),t.arc(e,n-e,e,Math.PI/2,Math.PI,!1),t.lineTo(0,e),t.arc(e,e,e,Math.PI,3*Math.PI/2,!1)):t.rect(0,0,i,n),t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.Rect,y.Shape),y.Factory.addGetterSetter(y.Rect,"cornerRadius",0),y.Collection.mapMethods(y.Rect),p=2*Math.PI-1e-4,y.Circle=function(t){this.___init(t)},y.Circle.prototype={___init:function(t){y.Shape.call(this,t),this.className="Circle",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){t.beginPath(),t.arc(0,0,this.getRadius(),0,p,!1),t.closePath(),t.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadius()},getHeight:function(){return 2*this.getRadius()},setWidth:function(t){y.Node.prototype.setWidth.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)},setHeight:function(t){y.Node.prototype.setHeight.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)},setRadius:function(t){this._setAttr("radius",t),this.setWidth(2*t),this.setHeight(2*t)}},y.Util.extend(y.Circle,y.Shape),y.Factory.addGetter(y.Circle,"radius",0),y.Factory.addOverloadedGetterSetter(y.Circle,"radius"),y.Collection.mapMethods(y.Circle),function(){var t=2*Math.PI-1e-4;y.Ellipse=function(t){this.___init(t)},y.Ellipse.prototype={___init:function(t){y.Shape.call(this,t),this.className="Ellipse",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(e){var i=this.getRadiusX(),n=this.getRadiusY();e.beginPath(),e.save(),i!==n&&e.scale(1,n/i),e.arc(0,0,i,0,t,!1),e.restore(),e.closePath(),e.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadiusX()},getHeight:function(){return 2*this.getRadiusY()},setWidth:function(t){y.Node.prototype.setWidth.call(this,t),this.setRadius({x:t/2})},setHeight:function(t){y.Node.prototype.setHeight.call(this,t),this.setRadius({y:t/2})}},y.Util.extend(y.Ellipse,y.Shape),y.Factory.addComponentsGetterSetter(y.Ellipse,"radius",["x","y"]),y.Factory.addGetterSetter(y.Ellipse,"radiusX",0),y.Factory.addGetterSetter(y.Ellipse,"radiusY",0),y.Collection.mapMethods(y.Ellipse)}(),function(){var t=2*Math.PI-1e-4;y.Ring=function(t){this.___init(t)},y.Ring.prototype={___init:function(t){y.Shape.call(this,t),this.className="Ring",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(e){e.beginPath(),e.arc(0,0,this.getInnerRadius(),0,t,!1),e.moveTo(this.getOuterRadius(),0),e.arc(0,0,this.getOuterRadius(),t,0,!0),e.closePath(),e.fillStrokeShape(this)},getWidth:function(){return 2*this.getOuterRadius()},getHeight:function(){return 2*this.getOuterRadius()},setWidth:function(t){y.Node.prototype.setWidth.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)},setHeight:function(t){y.Node.prototype.setHeight.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)},setOuterRadius:function(t){this._setAttr("outerRadius",t),this.setWidth(2*t),this.setHeight(2*t)}},y.Util.extend(y.Ring,y.Shape),y.Factory.addGetterSetter(y.Ring,"innerRadius",0),y.Factory.addGetter(y.Ring,"outerRadius",0),y.Factory.addOverloadedGetterSetter(y.Ring,"outerRadius"),y.Collection.mapMethods(y.Ring)}(),y.Wedge=function(t){this.___init(t)},y.Wedge.prototype={___init:function(t){y.Shape.call(this,t),this.className="Wedge",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){t.beginPath(),t.arc(0,0,this.getRadius(),0,y.getAngle(this.getAngle()),this.getClockwise()),t.lineTo(0,0),t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.Wedge,y.Shape),y.Factory.addGetterSetter(y.Wedge,"radius",0),y.Factory.addGetterSetter(y.Wedge,"angle",0),y.Factory.addGetterSetter(y.Wedge,"clockwise",!1),y.Factory.backCompat(y.Wedge,{angleDeg:"angle",getAngleDeg:"getAngle",setAngleDeg:"setAngle"}),y.Collection.mapMethods(y.Wedge),y.Arc=function(t){this.___init(t)},y.Arc.prototype={___init:function(t){y.Shape.call(this,t),this.className="Arc",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=y.getAngle(this.angle()),i=this.clockwise();t.beginPath(),t.arc(0,0,this.getOuterRadius(),0,e,i),t.arc(0,0,this.getInnerRadius(),e,0,!i),t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.Arc,y.Shape),y.Factory.addGetterSetter(y.Arc,"innerRadius",0),y.Factory.addGetterSetter(y.Arc,"outerRadius",0),y.Factory.addGetterSetter(y.Arc,"angle",0),y.Factory.addGetterSetter(y.Arc,"clockwise",!1),y.Collection.mapMethods(y.Arc),y.Image=function(t){this.___init(t)},y.Image.prototype={___init:function(t){y.Shape.call(this,t),this.className="Image",this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_useBufferCanvas:function(){return(this.hasShadow()||1!==this.getAbsoluteOpacity())&&this.hasStroke()&&this.getStage()},_sceneFunc:function(t){var e,i,n,a=this.getWidth(),r=this.getHeight(),s=this.getImage();s&&(e=this.getCropWidth(),i=this.getCropHeight(),n=e&&i?[s,this.getCropX(),this.getCropY(),e,i,0,0,a,r]:[s,0,0,a,r]),(this.hasFill()||this.hasStroke()||this.hasShadow())&&(t.beginPath(),t.rect(0,0,a,r),t.closePath(),t.fillStrokeShape(this)),s&&t.drawImage.apply(t,n)},_hitFunc:function(t){var e=this.getWidth(),i=this.getHeight();t.beginPath(),t.rect(0,0,e,i),t.closePath(),t.fillStrokeShape(this)},getWidth:function(){var t=this.getImage();return this.attrs.width||(t?t.width:0)},getHeight:function(){var t=this.getImage();return this.attrs.height||(t?t.height:0)}},y.Util.extend(y.Image,y.Shape),y.Factory.addGetterSetter(y.Image,"image"),y.Factory.addComponentsGetterSetter(y.Image,"crop",["x","y","width","height"]),y.Factory.addGetterSetter(y.Image,"cropX",0),y.Factory.addGetterSetter(y.Image,"cropY",0),y.Factory.addGetterSetter(y.Image,"cropWidth",0),y.Factory.addGetterSetter(y.Image,"cropHeight",0),y.Collection.mapMethods(y.Image),function(){var t=["fontFamily","fontSize","fontStyle","fontVariant","padding","align","lineHeight","text","width","height","wrap"],e=t.length,i=y.Util.createCanvasElement().getContext("2d");function n(t){t.fillText(this.partialText,0,0)}function a(t){t.strokeText(this.partialText,0,0)}y.Text=function(t){this.___init(t)},y.Text.prototype={___init:function(i){(i=i||{}).fill=i.fill||"black",void 0===i.width&&(i.width="auto"),void 0===i.height&&(i.height="auto"),y.Shape.call(this,i),this._fillFunc=n,this._strokeFunc=a,this.className="Text";for(var r=0;r<e;r++)this.on(t[r]+"Change.kinetic",this._setTextData);this._setTextData(),this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_sceneFunc:function(t){var e,i=this.getPadding(),n=this.getTextHeight(),a=this.getLineHeight()*n,r=this.textArr,s=r.length,o=this.getWidth();for(t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline","middle"),t.setAttr("textAlign","left"),t.save(),t.translate(i,0),t.translate(0,i+n/2),e=0;e<s;e++){var h=r[e],c=h.text,l=h.width;t.save(),"right"===this.getAlign()?t.translate(o-l-2*i,0):"center"===this.getAlign()&&t.translate((o-l-2*i)/2,0),this.partialText=c,t.fillStrokeShape(this),t.restore(),t.translate(0,a)}t.restore()},_hitFunc:function(t){var e=this.getWidth(),i=this.getHeight();t.beginPath(),t.rect(0,0,e,i),t.closePath(),t.fillStrokeShape(this)},setText:function(t){var e=y.Util._isString(t)?t:t.toString();return this._setAttr("text",e),this},getWidth:function(){return"auto"===this.attrs.width?this.getTextWidth()+2*this.getPadding():this.attrs.width},getHeight:function(){return"auto"===this.attrs.height?this.getTextHeight()*this.textArr.length*this.getLineHeight()+2*this.getPadding():this.attrs.height},getTextWidth:function(){return this.textWidth},getTextHeight:function(){return this.textHeight},_getTextSize:function(t){var e,n=i,a=this.getFontSize();return n.save(),n.font=this._getContextFont(),e=n.measureText(t),n.restore(),{width:e.width,height:parseInt(a,10)}},_getContextFont:function(){return this.getFontStyle()+" "+this.getFontVariant()+" "+this.getFontSize()+"px "+this.getFontFamily()},_addTextLine:function(t,e){return this.textArr.push({text:t,width:e})},_getTextWidth:function(t){return i.measureText(t).width},_setTextData:function(){var t=this.getText().split("\n"),e=+this.getFontSize(),n=0,a=this.getLineHeight()*e,r=this.attrs.width,s=this.attrs.height,o="auto"!==r,h="auto"!==s,c=this.getPadding(),l=r-2*c,d=s-2*c,u=0,f=this.getWrap(),g="none"!==f,p="char"!==f&&g;this.textArr=[],i.save(),i.font=this._getContextFont();for(var m=0,v=t.length;m<v;++m){var y=t[m],_=this._getTextWidth(y);if(o&&_>l)for(;y.length>0;){for(var S=0,x=y.length,C="",w=0;S<x;){var b=S+x>>>1,F=y.slice(0,b+1),k=this._getTextWidth(F);k<=l?(S=b+1,C=F,w=k):x=b}if(!C)break;if(p){var T=Math.max(C.lastIndexOf(" "),C.lastIndexOf("-"))+1;T>0&&(S=T,C=C.slice(0,S),w=this._getTextWidth(C))}if(this._addTextLine(C,w),n=Math.max(n,w),u+=a,!g||h&&u+a>d)break;if((y=y.slice(S)).length>0&&(_=this._getTextWidth(y))<=l){this._addTextLine(y,_),u+=a,n=Math.max(n,_);break}}else this._addTextLine(y,_),u+=a,n=Math.max(n,_);if(h&&u+a>d)break}i.restore(),this.textHeight=e,this.textWidth=n}},y.Util.extend(y.Text,y.Shape),y.Factory.addGetterSetter(y.Text,"fontFamily","Arial"),y.Factory.addGetterSetter(y.Text,"fontSize",12),y.Factory.addGetterSetter(y.Text,"fontStyle","normal"),y.Factory.addGetterSetter(y.Text,"fontVariant","normal"),y.Factory.addGetterSetter(y.Text,"padding",0),y.Factory.addGetterSetter(y.Text,"align","left"),y.Factory.addGetterSetter(y.Text,"lineHeight",1),y.Factory.addGetterSetter(y.Text,"wrap","word"),y.Factory.addGetter(y.Text,"text",""),y.Factory.addOverloadedGetterSetter(y.Text,"text"),y.Collection.mapMethods(y.Text)}(),y.Line=function(t){this.___init(t)},y.Line.prototype={___init:function(t){y.Shape.call(this,t),this.className="Line",this.on("pointsChange.kinetic tensionChange.kinetic closedChange.kinetic",function(){this._clearCache("tensionPoints")}),this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e,i,n,a=this.getPoints(),r=a.length,s=this.getTension(),o=this.getClosed();if(r){if(t.beginPath(),t.moveTo(a[0],a[1]),0!==s&&r>4){for(i=(e=this.getTensionPoints()).length,n=o?0:4,o||t.quadraticCurveTo(e[0],e[1],e[2],e[3]);n<i-2;)t.bezierCurveTo(e[n++],e[n++],e[n++],e[n++],e[n++],e[n++]);o||t.quadraticCurveTo(e[i-2],e[i-1],a[r-2],a[r-1])}else for(n=2;n<r;n+=2)t.lineTo(a[n],a[n+1]);o?(t.closePath(),t.fillStrokeShape(this)):t.strokeShape(this)}},getTensionPoints:function(){return this._getCache("tensionPoints",this._getTensionPoints)},_getTensionPoints:function(){return this.getClosed()?this._getTensionPointsClosed():y.Util._expandPoints(this.getPoints(),this.getTension())},_getTensionPointsClosed:function(){var t=this.getPoints(),e=t.length,i=this.getTension(),n=y.Util,a=n._getControlPoints(t[e-2],t[e-1],t[0],t[1],t[2],t[3],i),r=n._getControlPoints(t[e-4],t[e-3],t[e-2],t[e-1],t[0],t[1],i),s=y.Util._expandPoints(t,i);return[a[2],a[3]].concat(s).concat([r[0],r[1],t[e-2],t[e-1],r[2],r[3],a[0],a[1],t[0],t[1]])}},y.Util.extend(y.Line,y.Shape),y.Factory.addGetterSetter(y.Line,"closed",!1),y.Factory.addGetterSetter(y.Line,"tension",0),y.Factory.addGetterSetter(y.Line,"points",[]),y.Collection.mapMethods(y.Line),y.Sprite=function(t){this.___init(t)},y.Sprite.prototype={___init:function(t){y.Shape.call(this,t),this.className="Sprite",this._updated=!0;var e=this;this.anim=new y.Animation(function(){var t=e._updated;return e._updated=!1,t}),this.on("animationChange.kinetic",function(){this.frameIndex(0)}),this.on("frameIndexChange.kinetic",function(){this._updated=!0}),this.on("frameRateChange.kinetic",function(){this.anim.isRunning()&&(clearInterval(this.interval),this._setInterval())}),this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_sceneFunc:function(t){var e=this.getAnimation(),i=this.frameIndex(),n=4*i,a=this.getAnimations()[e],r=this.frameOffsets(),s=a[n+0],o=a[n+1],h=a[n+2],c=a[n+3],l=this.getImage();if(l)if(r){var d=r[e],u=2*i;t.drawImage(l,s,o,h,c,d[u+0],d[u+1],h,c)}else t.drawImage(l,s,o,h,c,0,0,h,c)},_hitFunc:function(t){var e=this.getAnimation(),i=this.frameIndex(),n=4*i,a=this.getAnimations()[e],r=this.frameOffsets(),s=a[n+2],o=a[n+3];if(t.beginPath(),r){var h=r[e],c=2*i;t.rect(h[c+0],h[c+1],s,o)}else t.rect(0,0,s,o);t.closePath(),t.fillShape(this)},_useBufferCanvas:function(){return(this.hasShadow()||1!==this.getAbsoluteOpacity())&&this.hasStroke()},_setInterval:function(){var t=this;this.interval=setInterval(function(){t._updateIndex()},1e3/this.getFrameRate())},start:function(){var t=this.getLayer();this.anim.setLayers(t),this._setInterval(),this.anim.start()},stop:function(){this.anim.stop(),clearInterval(this.interval)},isRunning:function(){return this.anim.isRunning()},_updateIndex:function(){var t=this.frameIndex(),e=this.getAnimation();t<this.getAnimations()[e].length/4-1?this.frameIndex(t+1):this.frameIndex(0)}},y.Util.extend(y.Sprite,y.Shape),y.Factory.addGetterSetter(y.Sprite,"animation"),y.Factory.addGetterSetter(y.Sprite,"animations"),y.Factory.addGetterSetter(y.Sprite,"frameOffsets"),y.Factory.addGetterSetter(y.Sprite,"image"),y.Factory.addGetterSetter(y.Sprite,"frameIndex",0),y.Factory.addGetterSetter(y.Sprite,"frameRate",17),y.Factory.backCompat(y.Sprite,{index:"frameIndex",getIndex:"getFrameIndex",setIndex:"setFrameIndex"}),y.Collection.mapMethods(y.Sprite),y.Path=function(t){this.___init(t)},y.Path.prototype={___init:function(t){this.dataArray=[];var e=this;y.Shape.call(this,t),this.className="Path",this.dataArray=y.Path.parsePathData(this.getData()),this.on("dataChange.kinetic",function(){e.dataArray=y.Path.parsePathData(this.getData())}),this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.dataArray,i=!1;t.beginPath();for(var n=0;n<e.length;n++){var a=e[n].command,r=e[n].points;switch(a){case"L":t.lineTo(r[0],r[1]);break;case"M":t.moveTo(r[0],r[1]);break;case"C":t.bezierCurveTo(r[0],r[1],r[2],r[3],r[4],r[5]);break;case"Q":t.quadraticCurveTo(r[0],r[1],r[2],r[3]);break;case"A":var s=r[0],o=r[1],h=r[2],c=r[3],l=r[4],d=r[5],u=r[6],f=r[7],g=h>c?h:c,p=h>c?1:h/c,m=h>c?c/h:1;t.translate(s,o),t.rotate(u),t.scale(p,m),t.arc(0,0,g,l,l+d,1-f),t.scale(1/p,1/m),t.rotate(-u),t.translate(-s,-o);break;case"z":t.closePath(),i=!0}}i?t.fillStrokeShape(this):t.strokeShape(this)}},y.Util.extend(y.Path,y.Shape),y.Path.getLineLength=function(t,e,i,n){return Math.sqrt((i-t)*(i-t)+(n-e)*(n-e))},y.Path.getPointOnLine=function(t,e,i,n,a,r,s){void 0===r&&(r=e),void 0===s&&(s=i);var o=(a-i)/(n-e+1e-8),h=Math.sqrt(t*t/(1+o*o));n<e&&(h*=-1);var c,l=o*h;if(n===e)c={x:r,y:s+l};else if((s-i)/(r-e+1e-8)===o)c={x:r+h,y:s+l};else{var d,u,f=this.getLineLength(e,i,n,a);if(f<1e-8)return;var g=(r-e)*(n-e)+(s-i)*(a-i);d=e+(g/=f*f)*(n-e),u=i+g*(a-i);var p=this.getLineLength(r,s,d,u),m=Math.sqrt(t*t-p*p);h=Math.sqrt(m*m/(1+o*o)),n<e&&(h*=-1),c={x:d+h,y:u+(l=o*h)}}return c},y.Path.getPointOnCubicBezier=function(t,e,i,n,a,r,s,o,h){function c(t){return t*t*t}function l(t){return 3*t*t*(1-t)}function d(t){return 3*t*(1-t)*(1-t)}function u(t){return(1-t)*(1-t)*(1-t)}return{x:o*c(t)+r*l(t)+n*d(t)+e*u(t),y:h*c(t)+s*l(t)+a*d(t)+i*u(t)}},y.Path.getPointOnQuadraticBezier=function(t,e,i,n,a,r,s){function o(t){return t*t}function h(t){return 2*t*(1-t)}function c(t){return(1-t)*(1-t)}return{x:r*o(t)+n*h(t)+e*c(t),y:s*o(t)+a*h(t)+i*c(t)}},y.Path.getPointOnEllipticalArc=function(t,e,i,n,a,r){var s=Math.cos(r),o=Math.sin(r),h=i*Math.cos(a),c=n*Math.sin(a);return{x:t+(h*s-c*o),y:e+(h*o+c*s)}},y.Path.parsePathData=function(t){if(!t)return[];var e=t,i=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];e=e.replace(new RegExp(" ","g"),",");for(var n=0;n<i.length;n++)e=e.replace(new RegExp(i[n],"g"),"|"+i[n]);var a=e.split("|"),r=[],s=0,o=0;for(n=1;n<a.length;n++){var h=a[n],c=h.charAt(0),l=(h=(h=(h=(h=h.slice(1)).replace(new RegExp(",-","g"),"-")).replace(new RegExp("-","g"),",-")).replace(new RegExp("e,-","g"),"e-")).split(",");l.length>0&&""===l[0]&&l.shift();for(var d=0;d<l.length;d++)l[d]=parseFloat(l[d]);for(;l.length>0&&!isNaN(l[0]);){var u,f,g,p,m,v,y,_,S,x,C=null,w=[],b=s,F=o;switch(c){case"l":s+=l.shift(),o+=l.shift(),C="L",w.push(s,o);break;case"L":s=l.shift(),o=l.shift(),w.push(s,o);break;case"m":var k=l.shift(),T=l.shift();if(s+=k,o+=T,C="M",r.length>2&&"z"===r[r.length-1].command)for(var P=r.length-2;P>=0;P--)if("M"===r[P].command){s=r[P].points[0]+k,o=r[P].points[1]+T;break}w.push(s,o),c="l";break;case"M":s=l.shift(),o=l.shift(),C="M",w.push(s,o),c="L";break;case"h":s+=l.shift(),C="L",w.push(s,o);break;case"H":s=l.shift(),C="L",w.push(s,o);break;case"v":o+=l.shift(),C="L",w.push(s,o);break;case"V":o=l.shift(),C="L",w.push(s,o);break;case"C":w.push(l.shift(),l.shift(),l.shift(),l.shift()),s=l.shift(),o=l.shift(),w.push(s,o);break;case"c":w.push(s+l.shift(),o+l.shift(),s+l.shift(),o+l.shift()),s+=l.shift(),o+=l.shift(),C="C",w.push(s,o);break;case"S":f=s,g=o,"C"===(u=r[r.length-1]).command&&(f=s+(s-u.points[2]),g=o+(o-u.points[3])),w.push(f,g,l.shift(),l.shift()),s=l.shift(),o=l.shift(),C="C",w.push(s,o);break;case"s":f=s,g=o,"C"===(u=r[r.length-1]).command&&(f=s+(s-u.points[2]),g=o+(o-u.points[3])),w.push(f,g,s+l.shift(),o+l.shift()),s+=l.shift(),o+=l.shift(),C="C",w.push(s,o);break;case"Q":w.push(l.shift(),l.shift()),s=l.shift(),o=l.shift(),w.push(s,o);break;case"q":w.push(s+l.shift(),o+l.shift()),s+=l.shift(),o+=l.shift(),C="Q",w.push(s,o);break;case"T":f=s,g=o,"Q"===(u=r[r.length-1]).command&&(f=s+(s-u.points[0]),g=o+(o-u.points[1])),s=l.shift(),o=l.shift(),C="Q",w.push(f,g,s,o);break;case"t":f=s,g=o,"Q"===(u=r[r.length-1]).command&&(f=s+(s-u.points[0]),g=o+(o-u.points[1])),s+=l.shift(),o+=l.shift(),C="Q",w.push(f,g,s,o);break;case"A":p=l.shift(),m=l.shift(),v=l.shift(),y=l.shift(),_=l.shift(),S=s,x=o,s=l.shift(),o=l.shift(),C="A",w=this.convertEndpointToCenterParameterization(S,x,s,o,y,_,p,m,v);break;case"a":p=l.shift(),m=l.shift(),v=l.shift(),y=l.shift(),_=l.shift(),S=s,x=o,s+=l.shift(),o+=l.shift(),C="A",w=this.convertEndpointToCenterParameterization(S,x,s,o,y,_,p,m,v)}r.push({command:C||c,points:w,start:{x:b,y:F},pathLength:this.calcLength(b,F,C||c,w)})}"z"!==c&&"Z"!==c||r.push({command:"z",points:[],start:void 0,pathLength:0})}return r},y.Path.calcLength=function(t,e,i,n){var a,r,s,o,h=y.Path;switch(i){case"L":return h.getLineLength(t,e,n[0],n[1]);case"C":for(a=0,r=h.getPointOnCubicBezier(0,t,e,n[0],n[1],n[2],n[3],n[4],n[5]),o=.01;o<=1;o+=.01)s=h.getPointOnCubicBezier(o,t,e,n[0],n[1],n[2],n[3],n[4],n[5]),a+=h.getLineLength(r.x,r.y,s.x,s.y),r=s;return a;case"Q":for(a=0,r=h.getPointOnQuadraticBezier(0,t,e,n[0],n[1],n[2],n[3]),o=.01;o<=1;o+=.01)s=h.getPointOnQuadraticBezier(o,t,e,n[0],n[1],n[2],n[3]),a+=h.getLineLength(r.x,r.y,s.x,s.y),r=s;return a;case"A":a=0;var c=n[4],l=n[5],d=n[4]+l,u=Math.PI/180;if(Math.abs(c-d)<u&&(u=Math.abs(c-d)),r=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],c,0),l<0)for(o=c-u;o>d;o-=u)s=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],o,0),a+=h.getLineLength(r.x,r.y,s.x,s.y),r=s;else for(o=c+u;o<d;o+=u)s=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],o,0),a+=h.getLineLength(r.x,r.y,s.x,s.y),r=s;return s=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],d,0),a+=h.getLineLength(r.x,r.y,s.x,s.y)}return 0},y.Path.convertEndpointToCenterParameterization=function(t,e,i,n,a,r,s,o,h){var c=h*(Math.PI/180),l=Math.cos(c)*(t-i)/2+Math.sin(c)*(e-n)/2,d=-1*Math.sin(c)*(t-i)/2+Math.cos(c)*(e-n)/2,u=l*l/(s*s)+d*d/(o*o);u>1&&(s*=Math.sqrt(u),o*=Math.sqrt(u));var f=Math.sqrt((s*s*(o*o)-s*s*(d*d)-o*o*(l*l))/(s*s*(d*d)+o*o*(l*l)));a===r&&(f*=-1),isNaN(f)&&(f=0);var g=f*s*d/o,p=f*-o*l/s,m=(t+i)/2+Math.cos(c)*g-Math.sin(c)*p,v=(e+n)/2+Math.sin(c)*g+Math.cos(c)*p,y=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},_=function(t,e){return(t[0]*e[0]+t[1]*e[1])/(y(t)*y(e))},S=function(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(_(t,e))},x=S([1,0],[(l-g)/s,(d-p)/o]),C=[(l-g)/s,(d-p)/o],w=[(-1*l-g)/s,(-1*d-p)/o],b=S(C,w);return _(C,w)<=-1&&(b=Math.PI),_(C,w)>=1&&(b=0),0===r&&b>0&&(b-=2*Math.PI),1===r&&b<0&&(b+=2*Math.PI),[m,v,s,o,x,b,c,r]},y.Factory.addGetterSetter(y.Path,"data"),y.Collection.mapMethods(y.Path),function(){function t(t){t.fillText(this.partialText,0,0)}function e(t){t.strokeText(this.partialText,0,0)}y.TextPath=function(t){this.___init(t)},y.TextPath.prototype={___init:function(i){var n=this;this.dummyCanvas=y.Util.createCanvasElement(),this.dataArray=[],y.Shape.call(this,i),this._fillFunc=t,this._strokeFunc=e,this._fillFuncHit=t,this._strokeFuncHit=e,this.className="TextPath",this.dataArray=y.Path.parsePathData(this.attrs.data),this.on("dataChange.kinetic",function(){n.dataArray=y.Path.parsePathData(this.attrs.data)}),this.on("textChange.kinetic textStroke.kinetic textStrokeWidth.kinetic",n._setTextData),n._setTextData(),this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline","middle"),t.setAttr("textAlign","left"),t.save();for(var e=this.glyphInfo,i=0;i<e.length;i++){t.save();var n=e[i].p0;t.translate(n.x,n.y),t.rotate(e[i].rotation),this.partialText=e[i].text,t.fillStrokeShape(this),t.restore()}t.restore()},getTextWidth:function(){return this.textWidth},getTextHeight:function(){return this.textHeight},setText:function(t){y.Text.prototype.setText.call(this,t)},_getTextSize:function(t){var e=this.dummyCanvas.getContext("2d");e.save(),e.font=this._getContextFont();var i=e.measureText(t);return e.restore(),{width:i.width,height:parseInt(this.attrs.fontSize,10)}},_setTextData:function(){var t=this,e=this._getTextSize(this.attrs.text);this.textWidth=e.width,this.textHeight=e.height,this.glyphInfo=[];for(var i,n,a,r=this.attrs.text.split(""),s=-1,o=0,h=function(){o=0;for(var e=t.dataArray,n=s+1;n<e.length;n++){if(e[n].pathLength>0)return s=n,e[n];"M"==e[n].command&&(i={x:e[n].points[0],y:e[n].points[1]})}return{}},c=function(e){var r=t._getTextSize(e).width,s=0,c=0;for(n=void 0;Math.abs(r-s)/r>.01&&c<25;){c++;for(var l=s;void 0===a;)(a=h())&&l+a.pathLength<r&&(l+=a.pathLength,a=void 0);if(a==={}||void 0===i)return;var d=!1;switch(a.command){case"L":y.Path.getLineLength(i.x,i.y,a.points[0],a.points[1])>r?n=y.Path.getPointOnLine(r,i.x,i.y,a.points[0],a.points[1],i.x,i.y):a=void 0;break;case"A":var u=a.points[4],f=a.points[5],g=a.points[4]+f;0===o?o=u+1e-8:r>s?o+=Math.PI/180*f/Math.abs(f):o-=Math.PI/360*f/Math.abs(f),(f<0&&o<g||f>=0&&o>g)&&(o=g,d=!0),n=y.Path.getPointOnEllipticalArc(a.points[0],a.points[1],a.points[2],a.points[3],o,a.points[6]);break;case"C":0===o?o=r>a.pathLength?1e-8:r/a.pathLength:r>s?o+=(r-s)/a.pathLength:o-=(s-r)/a.pathLength,o>1&&(o=1,d=!0),n=y.Path.getPointOnCubicBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3],a.points[4],a.points[5]);break;case"Q":0===o?o=r/a.pathLength:r>s?o+=(r-s)/a.pathLength:o-=(s-r)/a.pathLength,o>1&&(o=1,d=!0),n=y.Path.getPointOnQuadraticBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3])}void 0!==n&&(s=y.Path.getLineLength(i.x,i.y,n.x,n.y)),d&&(d=!1,a=void 0)}},l=0;l<r.length&&(c(r[l]),void 0!==i&&void 0!==n);l++){var d=y.Path.getLineLength(i.x,i.y,n.x,n.y),u=y.Path.getPointOnLine(0+d/2,i.x,i.y,n.x,n.y),f=Math.atan2(n.y-i.y,n.x-i.x);this.glyphInfo.push({transposeX:u.x,transposeY:u.y,text:r[l],rotation:f,p0:i,p1:n}),i=n}}},y.TextPath.prototype._getContextFont=y.Text.prototype._getContextFont,y.Util.extend(y.TextPath,y.Shape),y.Factory.addGetterSetter(y.TextPath,"fontFamily","Arial"),y.Factory.addGetterSetter(y.TextPath,"fontSize",12),y.Factory.addGetterSetter(y.TextPath,"fontStyle","normal"),y.Factory.addGetterSetter(y.TextPath,"fontVariant","normal"),y.Factory.addGetter(y.TextPath,"text",""),y.Collection.mapMethods(y.TextPath)}(),y.RegularPolygon=function(t){this.___init(t)},y.RegularPolygon.prototype={___init:function(t){y.Shape.call(this,t),this.className="RegularPolygon",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e,i,n,a=this.attrs.sides,r=this.attrs.radius;for(t.beginPath(),t.moveTo(0,0-r),e=1;e<a;e++)i=r*Math.sin(2*e*Math.PI/a),n=-1*r*Math.cos(2*e*Math.PI/a),t.lineTo(i,n);t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.RegularPolygon,y.Shape),y.Factory.addGetterSetter(y.RegularPolygon,"radius",0),y.Factory.addGetterSetter(y.RegularPolygon,"sides",0),y.Collection.mapMethods(y.RegularPolygon),y.Star=function(t){this.___init(t)},y.Star.prototype={___init:function(t){y.Shape.call(this,t),this.className="Star",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.innerRadius(),i=this.outerRadius(),n=this.numPoints();t.beginPath(),t.moveTo(0,0-i);for(var a=1;a<2*n;a++){var r=a%2==0?i:e,s=r*Math.sin(a*Math.PI/n),o=-1*r*Math.cos(a*Math.PI/n);t.lineTo(s,o)}t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.Star,y.Shape),y.Factory.addGetterSetter(y.Star,"numPoints",5),y.Factory.addGetterSetter(y.Star,"innerRadius",0),y.Factory.addGetterSetter(y.Star,"outerRadius",0),y.Collection.mapMethods(y.Star),v=(m=["fontFamily","fontSize","fontStyle","padding","lineHeight","text"]).length,y.Label=function(t){this.____init(t)},y.Label.prototype={____init:function(t){var e=this;y.Group.call(this,t),this.className="Label",this.on("add.kinetic",function(t){e._addListeners(t.child),e._sync()})},getText:function(){return this.find("Text")[0]},getTag:function(){return this.find("Tag")[0]},_addListeners:function(t){var e,i=this,n=function(){i._sync()};for(e=0;e<v;e++)t.on(m[e]+"Change.kinetic",n)},getWidth:function(){return this.getText().getWidth()},getHeight:function(){return this.getText().getHeight()},_sync:function(){var t,e,i,n,a,r,s,o=this.getText(),h=this.getTag();if(o&&h){switch(t=o.getWidth(),e=o.getHeight(),i=h.getPointerDirection(),n=h.getPointerWidth(),s=h.getPointerHeight(),a=0,r=0,i){case"up":a=t/2,r=-1*s;break;case"right":a=t+n,r=e/2;break;case"down":a=t/2,r=e+s;break;case"left":a=-1*n,r=e/2}h.setAttrs({x:-1*a,y:-1*r,width:t,height:e}),o.setAttrs({x:-1*a,y:-1*r})}}},y.Util.extend(y.Label,y.Group),y.Collection.mapMethods(y.Label),y.Tag=function(t){this.___init(t)},y.Tag.prototype={___init:function(t){y.Shape.call(this,t),this.className="Tag",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.getWidth(),i=this.getHeight(),n=this.getPointerDirection(),a=this.getPointerWidth(),r=this.getPointerHeight(),s=this.getCornerRadius();t.beginPath(),t.moveTo(0,0),"up"===n&&(t.lineTo((e-a)/2,0),t.lineTo(e/2,-1*r),t.lineTo((e+a)/2,0)),s?(t.lineTo(e-s,0),t.arc(e-s,s,s,3*Math.PI/2,0,!1)):t.lineTo(e,0),"right"===n&&(t.lineTo(e,(i-r)/2),t.lineTo(e+a,i/2),t.lineTo(e,(i+r)/2)),s?(t.lineTo(e,i-s),t.arc(e-s,i-s,s,0,Math.PI/2,!1)):t.lineTo(e,i),"down"===n&&(t.lineTo((e+a)/2,i),t.lineTo(e/2,i+r),t.lineTo((e-a)/2,i)),s?(t.lineTo(s,i),t.arc(s,i-s,s,Math.PI/2,Math.PI,!1)):t.lineTo(0,i),"left"===n&&(t.lineTo(0,(i+r)/2),t.lineTo(-1*a,i/2),t.lineTo(0,(i-r)/2)),s&&(t.lineTo(0,s),t.arc(s,s,s,Math.PI,3*Math.PI/2,!1)),t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.Tag,y.Shape),y.Factory.addGetterSetter(y.Tag,"pointerDirection","none"),y.Factory.addGetterSetter(y.Tag,"pointerWidth",0),y.Factory.addGetterSetter(y.Tag,"pointerHeight",0),y.Factory.addGetterSetter(y.Tag,"cornerRadius",0),y.Collection.mapMethods(y.Tag),y.Arrow=function(t){this.____init(t)},y.Arrow.prototype={____init:function(t){y.Line.call(this,t),this.className="Arrow"},_sceneFunc:function(t){var e=2*Math.PI,i=this.points(),n=i.length,a=i[n-2]-i[n-4],r=i[n-1]-i[n-3],s=(Math.atan2(r,a)+e)%e,o=this.pointerLength(),h=this.pointerWidth();t.save(),t.beginPath(),t.translate(i[n-2],i[n-1]),t.rotate(s),t.moveTo(0,0),t.lineTo(-o,h/2),t.lineTo(-o,-h/2),t.closePath(),t.restore(),this.pointerAtBeginning()&&(t.save(),t.translate(i[0],i[1]),a=i[2]-i[0],r=i[3]-i[1],t.rotate((Math.atan2(-r,-a)+e)%e),t.moveTo(0,0),t.lineTo(-10,6),t.lineTo(-10,-6),t.closePath(),t.restore()),t.fillStrokeShape(this),y.Line.prototype._sceneFunc.apply(this,arguments)}},y.Util.extend(y.Arrow,y.Line),y.Factory.addGetterSetter(y.Arrow,"pointerLength",10),y.Factory.addGetterSetter(y.Arrow,"pointerWidth",10),y.Factory.addGetterSetter(y.Arrow,"pointerAtBeginning",!1),y.Collection.mapMethods(y.Arrow)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{canvas:1,jsdom:1}],3:[function(t,e,i){"use strict";const n=t("kinetic");e.exports=class{constructor(t,e,i,n,a){this.row=t,this.column=e,this.generateKey=i,this.space=n,this.blockSize=a,this.x=this.row*(2*this.space+this.blockSize)+this.space,this.y=this.column*(2*this.space+this.blockSize)+this.space,this.up=!1,this.left=!1,this.down=!1,this.right=!1,this.key=this.generateKey,this.connected=!1,this.rotation=0,this.animationIsRunning=!1}init(t,e,i,a){this.box=new n.Group({x:this.x+this.blockSize/2+(i-this.blockSize*a)/2-this.blockSize/2,y:this.y+this.blockSize/2,width:this.blockSize,height:this.blockSize,offset:{x:this.blockSize/2,y:this.blockSize/2}}),this.pipes=new n.Group({x:0,y:0}),this.shape=new n.Rect({x:0,y:0,width:this.blockSize,height:this.blockSize,name:this.x+"-"+this.y,fill:"grey",stroke:"black",strokeWidth:this.space});var r=new n.Line({points:[this.blockSize/2,0,this.blockSize/2,this.blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeUp"}),s=new n.Line({points:[0,this.blockSize/2,this.blockSize/2,this.blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeLeft"}),o=new n.Line({points:[this.blockSize/2,this.blockSize,this.blockSize/2,this.blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeDown"}),h=new n.Line({points:[this.blockSize,this.blockSize/2,this.blockSize/2,this.blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeRight"});this.up&&this.pipes.add(r),this.left&&this.pipes.add(s),this.down&&this.pipes.add(o),this.right&&this.pipes.add(h),this.box.on("click",()=>t(this)),this.mouseClick=e(this),this.box.add(this.shape),this.box.add(this.pipes)}connectionHandler(t){t?(this.pipes.find(".pipeUp").stroke("green"),this.pipes.find(".pipeLeft").stroke("green"),this.pipes.find(".pipeDown").stroke("green"),this.pipes.find(".pipeRight").stroke("green")):(this.pipes.find(".pipeUp").stroke("red"),this.pipes.find(".pipeLeft").stroke("red"),this.pipes.find(".pipeDown").stroke("red"),this.pipes.find(".pipeRight").stroke("red"))}shuffleIt(){for(var t=0;t<Math.floor(3*Math.random());t++)Math.random()<.5?this.rotateRight():this.rotateLeft()}rotateRight(){let t=this.up;this.up=this.left,this.left=this.down,this.down=this.right,this.right=t}rotateLeft(){let t=this.up;this.up=this.right,this.right=this.down,this.down=this.left,this.left=t}}},{kinetic:2}],4:[function(t,e,i){"use strict";e.exports=class{constructor(t=!0){this.forward=t,this.time=0,this.timerObj=null,this.onTimesUp=(()=>{})}get minutes(){let t=Math.floor(this.time/60);return t<10?"0"+t:t}get seconds(){let t=this.time%60;return t<10?"0"+t:t}start(t){this.forward?this.timerObj=setInterval(()=>{this.time++,this.updateTimer(t)},1e3):this.timerObj=setInterval(()=>{this.time--,this.updateTimer(t),0===this.time&&"function"==typeof this.onTimesUp&&this.onTimesUp()},1e3)}stop(){null!==this.timerObj&&clearInterval(this.timerObj)}reset(){this.stop(),this.time=0}updateTimer(t){t.updateTimer(this.minutes+":"+this.seconds)}}},{}],5:[function(t,e,i){"use strict";const n=";",a="=",r="expires",s="path";e.exports={get:function(t,e=null){let i=t+a,n=decodeURIComponent(document.cookie).split(";");for(let t of n)if(0===(t=t.trim()).indexOf(i))return t.substring(i.length,t.length);return e},set:function(t,e,i=365,o="/"){let h=new Date;h.setTime(h.getTime()+24*i*60*60*1e3);let c=t+a+e,l=r+a+h.toUTCString(),d=s+a+o;document.cookie=c+n+l+n+d}}},{}],6:[function(t,e,i){"use strict";const n=t("kinetic"),a=t("./module/cookie"),r=t("./model/block"),s=t("./model/game-timer");let o,h,c,l,d,u,f,g,p,m,v,y,_,S,x,C=1280,w=720,b=10,F=10,k=5,T=5,P=0,A=Math.min(C,w)/Math.max(b,F)-2*k,M=Math.floor(b/2),D=Math.floor(F/2);function G(){switch(o.hasChildren()&&o.destroyChildren(),h="classic",c){case"easy":b=5,F=5;break;case"medium":b=10,F=10;break;case"hard":b=15,F=15}M=Math.floor(b/2),D=Math.floor(F/2),l=Math.floor(b/T)+1,d=Math.floor(F/T)+1,A=Math.min(C,w)/Math.max(b,F)-2*k,(u=new R).generateFields(),u.shuffle(),u.drawGame(),z(!0),g=new I,f.start(g),g.initPanel(),g.updateScore(a.get("classic_high_score_"+c,"--/--")),g.hideLevel()}function L(){o.hasChildren()&&o.destroyChildren();var t=new n.Text({x:C/2,y:w/3-100,text:"Classic game",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var e=new n.Text({x:C/2,y:w/3,text:"Time trial",fontSize:32,fontFamily:"Calibri",fill:"grey"});e.setOffset({x:e.getWidth()/2});var i=new n.Text({x:C/2,y:w/3+100,text:"Scoreboard",fontSize:32,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2});var r=new n.Text({x:C/2,y:w/3+200,text:"Information",fontSize:32,fontFamily:"Calibri",fill:"grey"});r.setOffset({x:r.getWidth()/2}),(p=new n.Layer).name="gameMenu",p.add(t),p.add(e),p.add(i),p.add(r),o.add(p);var s=new n.Animation(function(){t.fill("black"),this.stop()},p),S=new n.Animation(function(){t.fill("grey"),this.stop()},p);t.on("mouseover",function(){s.start()}),t.on("mouseout",function(){S.start()}),t.on("click",function(){!function(){o.hasChildren()&&o.destroyChildren();var t=new n.Text({x:C/2,y:w/3-100,text:"Easy (5x5)",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var e=new n.Text({x:C/2,y:w/3,text:"Medium (10x10)",fontSize:32,fontFamily:"Calibri",fill:"grey"});e.setOffset({x:e.getWidth()/2});var i=new n.Text({x:C/2,y:w/3+100,text:"Hard (15x15)",fontSize:32,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2});var a=new n.Text({x:C/2,y:w/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});a.setOffset({x:a.getWidth()/2}),(m=new n.Layer).name="difficultySelectMenu",m.add(t),m.add(e),m.add(i),m.add(a),o.add(m);var r=new n.Animation(function(){t.fill("black"),this.stop()},m),s=new n.Animation(function(){t.fill("grey"),this.stop()},m);t.on("mouseover",function(){r.start()}),t.on("mouseout",function(){s.start()}),t.on("click",function(){c="easy",G()});var h=new n.Animation(function(){e.fill("black"),this.stop()},m),l=new n.Animation(function(){e.fill("grey"),this.stop()},m);e.on("mouseover",function(){h.start()}),e.on("mouseout",function(){l.start()}),e.on("click",function(){c="medium",G()});var d=new n.Animation(function(){i.fill("black"),this.stop()},m),u=new n.Animation(function(){i.fill("grey"),this.stop()},m);i.on("mouseover",function(){d.start()}),i.on("mouseout",function(){u.start()}),i.on("click",function(){c="hard",G()});var f=new n.Animation(function(){a.fill("black"),this.stop()},m),g=new n.Animation(function(){a.fill("grey"),this.stop()},m);a.on("mouseover",function(){f.start()}),a.on("mouseout",function(){g.start()}),a.on("click",function(){L()})}()});var x=new n.Animation(function(){e.fill("black"),this.stop()},p),N=new n.Animation(function(){e.fill("grey"),this.stop()},p);e.on("mouseover",function(){x.start()}),e.on("mouseout",function(){N.start()}),e.on("click",function(){!function(){o.hasChildren()&&o.destroyChildren();var t=new n.Text({x:C/2,y:w/3,text:"Starting time trial",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var e=new n.Text({x:C/2,y:w/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});e.setOffset({x:e.getWidth()/2}),(v=new n.Layer).name="timeTrialGameLayer",v.add(t),v.add(e),o.add(v);var i=new n.Animation(function(){t.fill("black"),this.stop()},v),r=new n.Animation(function(){t.fill("grey"),this.stop()},v);t.on("mouseover",function(){i.start()}),t.on("mouseout",function(){r.start()}),t.on("click",function(){o.hasChildren()&&o.destroyChildren(),h="time-trial",b=4+(P=1),F=4+P,M=Math.floor(b/2),D=Math.floor(F/2),l=Math.floor(b/T)+1,d=Math.floor(F/T)+1,A=Math.min(C,w)/Math.max(b,F)-2*k,(u=new R).generateFields(),u.shuffle(),u.drawGame(),(g=new I).initPanel(),z(!1),f.start(g),f.time=120,g.updateScore(a.get("time_trial_score","-")),g.updateTimer(f.minutes+":"+f.seconds),g.updateLevel(P)});var s=new n.Animation(function(){e.fill("black"),this.stop()},v),c=new n.Animation(function(){e.fill("grey"),this.stop()},v);e.on("mouseover",function(){s.start()}),e.on("mouseout",function(){c.start()}),e.on("click",function(){L()})}()});var O=new n.Animation(function(){i.fill("black"),this.stop()},p),U=new n.Animation(function(){i.fill("grey"),this.stop()},p);i.on("mouseover",function(){O.start()}),i.on("mouseout",function(){U.start()}),i.on("click",function(){!function(){o.hasChildren()&&o.destroyChildren();var t=new n.Text({x:C/2,y:w/3-100,text:"Classic game",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var e=new n.Text({x:C/2-120,y:w/3-40,text:"Easy\n"+a.get("classic_high_score_easy","99:99"),fontSize:18,fontFamily:"Calibri",fill:"grey"});e.setOffset({x:e.getWidth()/2});var i=new n.Text({x:C/2,y:w/3-40,text:"Medium\n"+a.get("classic_high_score_medium","99:99"),fontSize:18,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2});var r=new n.Text({x:C/2+120,y:w/3-40,text:"Hard\n"+a.get("classic_high_score_hard","99:99"),fontSize:18,fontFamily:"Calibri",fill:"grey"});r.setOffset({x:r.getWidth()/2});var s=new n.Text({x:C/2,y:w/3+40,text:"Time trial",fontSize:32,fontFamily:"Calibri",fill:"grey"});s.setOffset({x:s.getWidth()/2});var h=new n.Text({x:C/2,y:w/3+100,text:a.get("time_trial_score","0")+". level",fontSize:18,fontFamily:"Calibri",fill:"grey"});h.setOffset({x:h.getWidth()/2});var c=new n.Text({x:C/2,y:w/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});c.setOffset({x:c.getWidth()/2}),(y=new n.Layer).name="scoreBoardMenuLayer",y.add(t),y.add(e),y.add(i),y.add(r),y.add(s),y.add(h),y.add(c),o.add(y);var l=new n.Animation(function(){c.fill("black"),this.stop()},y),d=new n.Animation(function(){c.fill("grey"),this.stop()},y);c.on("mouseover",function(){l.start()}),c.on("mouseout",function(){d.start()}),c.on("click",function(){L()})}()});var B=new n.Animation(function(){r.fill("black"),this.stop()},p),H=new n.Animation(function(){r.fill("grey"),this.stop()},p);r.on("mouseover",function(){B.start()}),r.on("mouseout",function(){H.start()}),r.on("click",function(){!function(){o.hasChildren()&&o.destroyChildren();var t=new n.Text({x:C/2,y:w/3-100,text:"",fontSize:18,fontFamily:"Calibri",fill:"grey"});let e="Game goal:\nTurn all the pipes into the correct position, so every pipe connected to each other!\n";e+="In classic game you can choose between three different difficulty, while in time trial the difficulty is incrementaly increasing.\n",e+="Time is key, so don't hesitate too much!\n",e+="You can check your rank at the scoreboard!\n\nMade by: White Rabbit (Tamás Ruszka) (C) 2014,\nMail: ruszka dot tamas at gmail dot com",t.setText(e),t.setOffset({x:t.getWidth()/2>0?t.getWidth()/2:0});var i=new n.Text({x:C/2,y:w/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2}),(_=new n.Layer).name="informationMenuLayer",_.add(t),_.add(i),o.add(_);var a=new n.Animation(function(){i.fill("black"),this.stop()},_),r=new n.Animation(function(){i.fill("grey"),this.stop()},_);i.on("mouseover",function(){a.start()}),i.on("mouseout",function(){r.start()}),i.on("click",function(){L()})}()})}function R(){S=[];for(let t=0;t<l;t++){S[t]=new Array(d);for(let e=0;e<d;e++)S[t][e]=new n.Layer}x=[],this.generateFields=function(){var t=0,e=0,i=!0;for(let t=0;t<b;t++){x[t]=new Array(F);for(let e=0;e<F;e++)x[t][e]=new r(t,e,t*F+e,k,A)}for(;i;){let n=Math.floor(Math.random()*b),a=Math.floor(Math.random()*F),r=x[n][a];if(i=!1,0!==r.key)switch(Math.floor(4*Math.random()+0)){case 0:if(0!==n){let i=x[n-1][a];if(void 0!==i&&r.key!==i.key){r.left=!0,i.right=!0,t=r.key>i.key?r.key:i.key,e=r.key<i.key?r.key:i.key;for(let i=0;i<b;i++)for(let i=0;i<F;i++)r.key===t&&(r.key=e)}}break;case 1:if(0!==a){let i=x[n][a-1];if(void 0!==i&&r.key!==i.key){r.up=!0,i.down=!0,t=r.key>i.key?r.key:i.key,e=r.key<i.key?r.key:i.key;for(let i=0;i<b;i++)for(let n=0;n<F;n++)x[i][n].key===t&&(x[i][n].key=e)}}break;case 2:if(n!==F-1){let i=x[n+1][a];if(void 0!==i&&r.key!==i.key){r.right=!0,i.left=!0,t=r.key>i.key?r.key:i.key,e=r.key<i.key?r.key:i.key;for(let i=0;i<b;i++)for(let n=0;n<F;n++)x[i][n].key===t&&(x[i][n].key=e)}}break;case 3:if(a!==b-1){let i=x[n][a+1];if(void 0!==i&&r.key!==i.key){r.down=!0,i.up=!0,t=r.key>i.key?r.key:i.key,e=r.key<i.key?r.key:i.key;for(let i=0;i<b;i++)for(let n=0;n<F;n++)x[i][n].key===t&&(x[i][n].key=e)}}}for(let t=0;t<b;t++)for(let e=0;e<F;e++)x[t][e].key>0&&(i=!0)}},this.shuffle=function(){for(var t=0;t<b;t++)for(var e=0;e<F;e++)x[t][e].shuffleIt()},this.drawGame=function(){for(let t=0;t<b;t++)for(let e=0;e<F;e++)x[t][e].init(U,B,C,b),S[Math.floor(t/T)][Math.floor(e/T)].add(x[t][e].box);x[M][D].connected=!0,x[M][D].connectionHandler(!0),this.checkPipeConnections();for(let t=0;t<l;t++)for(let e=0;e<d;e++)o.add(S[t][e])},this.checkPipeConnections=function(){var t=0,e=0;for(t=0;t<b;t++)for(e=0;e<F;e++)x[t][e].connected=!1,x[t][e].connectionHandler(!1);for(x[M][D].connected=!0,x[M][D].connectionHandler(!0),t=0;t<b;t++)for(e=0;e<F;e++)if(x[t][e].connected){var i=!1;0===t||i||x[t][e].left&&x[t-1][e].right&&(x[t-1][e].connected||(x[t-1][e].connected=!0,x[t-1][e].connectionHandler(!0),t=0,e=-1,i=!0)),t===b-1||i||x[t][e].right&&x[t+1][e].left&&(x[t+1][e].connected||(x[t+1][e].connected=!0,x[t+1][e].connectionHandler(!0),t=0,e=-1,i=!0)),0===e||i||x[t][e].up&&x[t][e-1].down&&(x[t][e-1].connected||(x[t][e-1].connected=!0,x[t][e-1].connectionHandler(!0),t=0,e=-1,i=!0)),e===F-1||i||x[t][e].down&&x[t][e+1].up&&(x[t][e+1].connected||(x[t][e+1].connected=!0,x[t][e+1].connectionHandler(!0),t=0,e=-1,i=!0))}}}function I(){var t=C/2+b*A/2+b*(2*k),e=C-(t+b*k*2),i=w,a=new n.Layer,r=new n.Group({x:t,y:0,width:e,height:i}),s=new n.Group({x:0,y:0,width:t-C,height:w}),h=new n.Group({x:0,y:0,width:t-C,height:w}),c=new n.Group({x:0,y:0,width:t-C,height:w}),l=new n.Text({x:200,y:200,text:"Back",fontSize:48,fontFamily:"Calibri",fill:"grey"}),d=new n.Text({x:30,y:50,text:"Time:",fontSize:32,fontFamily:"Calibri",fill:"grey"}),u=new n.Text({x:30,y:100,text:"00:00",fontSize:48,fontFamily:"Calibri",fill:"grey"}),f=new n.Text({x:200,y:50,text:"Previous record:",fontSize:32,fontFamily:"Calibri",fill:"grey"}),g=new n.Text({x:200,y:100,text:"00:00",fontSize:48,fontFamily:"Calibri",fill:"grey"}),p=new n.Text({x:30,y:200,text:"Actual level:",fontSize:32,fontFamily:"Calibri",fill:"grey"}),m=new n.Text({x:30,y:250,text:"1",fontSize:64,fontFamily:"Calibri",fill:"grey"});this.initPanel=function(){s.add(d),s.add(u),h.add(f),h.add(g),h.add(l),c.add(p),c.add(m),r.add(s),r.add(h),r.add(c),a.add(r),o.add(a)},this.showTimer=function(){s.show(),a.draw()},this.hideTimer=function(){s.hide(),a.draw()},this.showScore=function(){h.show(),a.draw()},this.scoreTimer=function(){h.hide(),a.draw()},this.showLevel=function(){c.show(),a.draw()},this.hideLevel=function(){c.hide(),a.draw()},this.updateTimer=function(t){u.setText(t),a.draw()},this.updateScore=function(t){g.setText(t),a.draw()},this.updateLevel=function(t){m.setText(t),a.draw()};var v=new n.Animation(function(){l.fill("black"),this.stop()},a),y=new n.Animation(function(){l.fill("grey"),this.stop()},a);l.on("mouseover",function(){v.start()}),l.on("mouseout",function(){y.start()}),l.on("click",function(){L()})}function N(){f.stop(),setTimeout(function(){var t=!1;null===a.get("classic_high_score_"+c)?t=!0:a.get("classic_high_score_"+c)>f.minutes+" : "+f.seconds&&(t=!0),alert("Congratulation, you solved the level! \nYour time: "+f.minutes+" : "+f.seconds+(t?"\nNew record!":"")),t&&a.set("classic_high_score_"+c,f.minutes+" : "+f.seconds),L()},300)}function O(){f.stop(),o.hasChildren()&&o.destroyChildren(),h="time-trial",b=++P+4,F=4+P,M=Math.floor(b/2),D=Math.floor(F/2),l=Math.floor(b/T)+1,d=Math.floor(F/T)+1,A=Math.min(C,w)/Math.max(b,F)-2*k,(u=new R).generateFields(),u.shuffle(),u.drawGame(),(g=new I).initPanel(),f.time=f.time+30+10*P,f.start(g),g.updateScore(a.get("time_trial_score","-")),g.updateTimer(f.minutes+":"+f.seconds),g.updateLevel(P)}function U(t){t.mouseClick.isRunning()||t.animationIsRunning||(t.rotateRight(),t.mouseClick.start(),setTimeout(function(){u.checkPipeConnections(),function(){var t=!0;for(let e=0;e<b;e++)for(let i=0;i<F;i++)x[e][i].connected||(t=!1);if(t)"classic"===h?N():"time-trial"===h&&O();else for(let t=0;t<l;t++)for(let e=0;e<d;e++)S[t][e].draw()}()},100))}function B(t){return new n.Animation(function(){if(t.animationIsRunning=!0,t.box.rotate(5),t.box.rotation()>=t.rotation+90){t.box.rotation(t.rotation+90),t.rotation=t.box.rotation();var e=!0;for(let t=0;t<b;t++)for(let i=0;i<F;i++)x[t][i].connected||(e=!1);if(this.stop(),t.animationIsRunning=!1,e)"classic"===h?N():"time-trial"===h&&O();else for(let t=0;t<l;t++)for(let e=0;e<d;e++)S[t][e].draw()}},S[Math.floor(t.row/T)][Math.floor(t.column/T)])}function z(t){void 0===f?(f=new s(t)).onTimesUp=(()=>{f.stop(),setTimeout(function(){var t=!1;null===a.get("time_trial_score")?t=!0:a.get("time_trial_score")<P&&(t=!0),alert("Congratulation! \nYour level: "+P+(t?"\nNew record!":"")),t&&a.set("time_trial_score",P),L()},300)}):f.reset()}e.exports={loadApplication:function(){C=window.innerWidth,w=window.innerHeight-200,o=new n.Stage({container:"table",width:C,height:w}),L()}}},{"./model/block":3,"./model/game-timer":4,"./module/cookie":5,kinetic:2}],7:[function(t,e,i){"use strict";var n=t("./js/pipe");window.onload=function(){n.loadApplication()}},{"./js/pipe":6}]},{},[7]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMva2luZXRpYy9raW5ldGljLmpzIiwic3JjL2pzL21vZGVsL2Jsb2NrLmpzIiwic3JjL2pzL21vZGVsL2dhbWUtdGltZXIuanMiLCJzcmMvanMvbW9kdWxlL2Nvb2tpZS5qcyIsInNyYy9qcy9waXBlLmpzIiwic3JjL21haW4uanMiXSwibmFtZXMiOlsiciIsImUiLCJuIiwidCIsIm8iLCJpIiwiZiIsImMiLCJyZXF1aXJlIiwidSIsImEiLCJFcnJvciIsImNvZGUiLCJwIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwicm9vdCIsIlBJX09WRVJfMTgwIiwiY29udGV4dCIsIl9waXhlbFJhdGlvIiwiQ09OVEVYVF9NRVRIT0RTIiwiU0hBUEUiLCJDTE9ORV9CTEFDS19MSVNUIiwiVFJBTlNGT1JNX0NIQU5HRV9TVFIiLCJ0ZW1wQ2FudmFzIiwiSU5URVJTRUNUSU9OX09GRlNFVFMiLCJJTlRFUlNFQ1RJT05fT0ZGU0VUU19MRU4iLCJQSXgyIiwiQVRUUl9DSEFOR0VfTElTVCIsImF0dHJDaGFuZ2VMaXN0TGVuIiwiS2luZXRpYyIsInRoaXMiLCJNYXRoIiwiUEkiLCJ2ZXJzaW9uIiwic3RhZ2VzIiwiaWRDb3VudGVyIiwiaWRzIiwibmFtZXMiLCJzaGFwZXMiLCJsaXN0ZW5DbGlja1RhcCIsImluRGJsQ2xpY2tXaW5kb3ciLCJlbmFibGVUcmFjZSIsInRyYWNlQXJyTWF4IiwiZGJsQ2xpY2tXaW5kb3ciLCJwaXhlbFJhdGlvIiwidW5kZWZpbmVkIiwiZHJhZ0Rpc3RhbmNlIiwiYW5nbGVEZWciLCJzaG93V2FybmluZ3MiLCJGaWx0ZXJzIiwiTm9kZSIsImNvbmZpZyIsIl9pbml0IiwiU2hhcGUiLCJfX2luaXQiLCJDb250YWluZXIiLCJTdGFnZSIsIl9fX2luaXQiLCJCYXNlTGF5ZXIiLCJMYXllciIsIl9fX19pbml0IiwiRmFzdExheWVyIiwiR3JvdXAiLCJpc0RyYWdnaW5nIiwiZGQiLCJERCIsImlzRHJhZ1JlYWR5Iiwibm9kZSIsIl9hZGRJZCIsImlkIiwiX3JlbW92ZUlkIiwiX2FkZE5hbWUiLCJuYW1lIiwic3BsaXQiLCJzdWJuYW1lIiwicHVzaCIsIl9yZW1vdmVOYW1lIiwiX2lkIiwibm9kZXMiLCJzcGxpY2UiLCJnZXRBbmdsZSIsImFuZ2xlIiwiX3BhcnNlVUEiLCJ1c2VyQWdlbnQiLCJ1YSIsInRvTG93ZXJDYXNlIiwibWF0Y2giLCJleGVjIiwiaW5kZXhPZiIsIm1vYmlsZSIsImllTW9iaWxlIiwiYnJvd3NlciIsIlVBIiwibmF2aWdhdG9yIiwiZmFjdG9yeSIsIktpbmV0aWNKUyIsImdsb2JhbCIsIndpbmRvdyIsImRvY3VtZW50IiwiQ2FudmFzIiwianNkb20iLCJjcmVhdGVXaW5kb3ciLCJJbWFnZSIsIl9ub2RlQ2FudmFzIiwiZGVmaW5lIiwiYW1kIiwiQ29sbGVjdGlvbiIsImFyZ3MiLCJzbGljZSIsImFyZ3VtZW50cyIsInByb3RvdHlwZSIsImVhY2giLCJmdW5jIiwidG9BcnJheSIsImFyciIsImxlbiIsInRvQ29sbGVjdGlvbiIsImNvbGxlY3Rpb24iLCJfbWFwTWV0aG9kIiwibWV0aG9kTmFtZSIsImFwcGx5IiwibWFwTWV0aG9kcyIsImNvbnN0cnVjdG9yIiwicHJvdCIsIlRyYW5zZm9ybSIsIm0iLCJjb3B5IiwicG9pbnQiLCJ4IiwieSIsInRyYW5zbGF0ZSIsInNjYWxlIiwic3giLCJzeSIsInJvdGF0ZSIsInJhZCIsImNvcyIsInMiLCJzaW4iLCJtMTEiLCJtMTIiLCJtMjEiLCJtMjIiLCJnZXRUcmFuc2xhdGlvbiIsInNrZXciLCJtdWx0aXBseSIsIm1hdHJpeCIsImR4IiwiZHkiLCJpbnZlcnQiLCJkIiwibTAiLCJtMSIsIm0yIiwibTMiLCJtNCIsIm01IiwiZ2V0TWF0cml4Iiwic2V0QWJzb2x1dGVQb3NpdGlvbiIsInl0IiwieHQiLCJQSV9PVkVSX0RFRzE4MCIsIkRFRzE4MF9PVkVSX1BJIiwiQ09MT1JTIiwiYXF1YSIsImxpbWUiLCJzaWx2ZXIiLCJibGFjayIsIm1hcm9vbiIsInRlYWwiLCJibHVlIiwibmF2eSIsIndoaXRlIiwiZnVjaHNpYSIsIm9saXZlIiwieWVsbG93Iiwib3JhbmdlIiwiZ3JheSIsInB1cnBsZSIsImdyZWVuIiwicmVkIiwicGluayIsImN5YW4iLCJ0cmFuc3BhcmVudCIsIlJHQl9SRUdFWCIsIlV0aWwiLCJfaXNFbGVtZW50Iiwib2JqIiwibm9kZVR5cGUiLCJfaXNGdW5jdGlvbiIsIl9pc09iamVjdCIsIk9iamVjdCIsIl9pc0FycmF5IiwidG9TdHJpbmciLCJfaXNOdW1iZXIiLCJfaXNTdHJpbmciLCJfdGhyb3R0bGUiLCJ3YWl0Iiwib3B0cyIsInJlc3VsdCIsInRpbWVvdXQiLCJwcmV2aW91cyIsIm9wdGlvbnMiLCJsYXRlciIsImxlYWRpbmciLCJEYXRlIiwiZ2V0VGltZSIsIm5vdyIsInJlbWFpbmluZyIsImNsZWFyVGltZW91dCIsInRyYWlsaW5nIiwic2V0VGltZW91dCIsIl9oYXNNZXRob2RzIiwia2V5IiwiY3JlYXRlQ2FudmFzRWxlbWVudCIsImNhbnZhcyIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsImlzQnJvd3NlciIsIl9pc0luRG9jdW1lbnQiLCJlbCIsInBhcmVudE5vZGUiLCJfc2ltcGxpZnlBcnJheSIsInZhbCIsInJldEFyciIsInV0aWwiLCJyb3VuZCIsIl9nZXRJbWFnZSIsImFyZyIsImNhbGxiYWNrIiwiaW1hZ2VPYmoiLCJvbmxvYWQiLCJzcmMiLCJkYXRhIiwid2lkdGgiLCJoZWlnaHQiLCJnZXRDb250ZXh0IiwicHV0SW1hZ2VEYXRhIiwidG9EYXRhVVJMIiwiX2dldFJHQkFTdHJpbmciLCJhbHBoYSIsImpvaW4iLCJfcmdiVG9IZXgiLCJnIiwiYiIsIl9oZXhUb1JnYiIsImhleCIsInJlcGxhY2UiLCJiaWdpbnQiLCJwYXJzZUludCIsImdldFJhbmRvbUNvbG9yIiwicmFuZENvbG9yIiwicmFuZG9tIiwiZ2V0IiwiZGVmIiwiZ2V0UkdCIiwiY29sb3IiLCJyZ2IiLCJzdWJzdHJpbmciLCJzdWJzdHIiLCJfbWVyZ2UiLCJvMSIsIm8yIiwicmV0T2JqIiwiX2Nsb25lIiwiY2xvbmVPYmplY3QiLCJjbG9uZUFycmF5IiwiX2RlZ1RvUmFkIiwiZGVnIiwiX3JhZFRvRGVnIiwiX2NhcGl0YWxpemUiLCJzdHIiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsImVycm9yIiwid2FybiIsImNvbnNvbGUiLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImN0b3IiLCJvbGRfcHJvdG8iLCJoYXNPd25Qcm9wZXJ0eSIsIl9fc3VwZXJfXyIsImFkZE1ldGhvZHMiLCJtZXRob2RzIiwiX2dldENvbnRyb2xQb2ludHMiLCJ4MCIsInkwIiwieDEiLCJ5MSIsIngyIiwieTIiLCJkMDEiLCJzcXJ0IiwicG93IiwiZDEyIiwiZmEiLCJmYiIsIl9leHBhbmRQb2ludHMiLCJ0ZW5zaW9uIiwiY3AiLCJhbGxQb2ludHMiLCJfcmVtb3ZlTGFzdExldHRlciIsImRldmljZVBpeGVsUmF0aW8iLCJ3ZWJraXRCYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwibW96QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsIm1zQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsIm9CYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwiYmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsImluaXQiLCJfY2FudmFzIiwicGFkZGluZyIsIm1hcmdpbiIsImJvcmRlciIsImJhY2tncm91bmQiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJnZXRQaXhlbFJhdGlvIiwic2V0UGl4ZWxSYXRpbyIsInNldFNpemUiLCJnZXRXaWR0aCIsImdldEhlaWdodCIsInNldFdpZHRoIiwic2V0SGVpZ2h0IiwibWltZVR5cGUiLCJxdWFsaXR5IiwiZXJyIiwibWVzc2FnZSIsIlNjZW5lQ2FudmFzIiwiY29uZiIsIlNjZW5lQ29udGV4dCIsIl9jb250ZXh0IiwiSGl0Q2FudmFzIiwiSGl0Q29udGV4dCIsImhpdENhbnZhcyIsIkNvbnRleHQiLCJ0cmFjZUFyciIsIl9lbmFibGVUcmFjZSIsImZpbGxTaGFwZSIsInNoYXBlIiwiZ2V0RmlsbEVuYWJsZWQiLCJfZmlsbCIsInN0cm9rZVNoYXBlIiwiZ2V0U3Ryb2tlRW5hYmxlZCIsIl9zdHJva2UiLCJmaWxsU3Ryb2tlU2hhcGUiLCJnZXRUcmFjZSIsInJlbGF4ZWQiLCJ0cmFjZSIsIm1ldGhvZCIsInByb3BlcnR5IiwiY2xlYXJUcmFjZSIsIl90cmFjZSIsInNoaWZ0IiwicmVzZXQiLCJnZXRDYW52YXMiLCJzZXRUcmFuc2Zvcm0iLCJjbGVhciIsImJvdW5kcyIsImNsZWFyUmVjdCIsIl9hcHBseUxpbmVDYXAiLCJsaW5lQ2FwIiwiZ2V0TGluZUNhcCIsInNldEF0dHIiLCJfYXBwbHlPcGFjaXR5IiwiYWJzT3BhY2l0eSIsImdldEFic29sdXRlT3BhY2l0eSIsIl9hcHBseUxpbmVKb2luIiwibGluZUpvaW4iLCJnZXRMaW5lSm9pbiIsImF0dHIiLCJhcmMiLCJiZWdpblBhdGgiLCJiZXppZXJDdXJ2ZVRvIiwiY2xpcCIsImNsb3NlUGF0aCIsImNyZWF0ZUltYWdlRGF0YSIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiY3JlYXRlUGF0dGVybiIsImNyZWF0ZVJhZGlhbEdyYWRpZW50IiwiZHJhd0ltYWdlIiwiZmlsbCIsImZpbGxUZXh0IiwiZ2V0SW1hZ2VEYXRhIiwibGluZVRvIiwibW92ZVRvIiwicmVjdCIsInF1YWRyYXRpY0N1cnZlVG8iLCJyZXN0b3JlIiwic2F2ZSIsInNldExpbmVEYXNoIiwibW96RGFzaCIsIndlYmtpdExpbmVEYXNoIiwic3Ryb2tlIiwic3Ryb2tlVGV4dCIsInRyYW5zZm9ybSIsInRoYXQiLCJvcmlnU2V0dGVyIiwicmV0Iiwib3JpZ01ldGhvZCIsIkFycmF5IiwiX2ZpbGxDb2xvciIsImZpbGxSZWQiLCJmaWxsR3JlZW4iLCJmaWxsQmx1ZSIsImZpbGxBbHBoYSIsIl9maWxsRnVuYyIsIl9maWxsUGF0dGVybiIsImZpbGxQYXR0ZXJuSW1hZ2UiLCJnZXRGaWxsUGF0dGVybkltYWdlIiwiZmlsbFBhdHRlcm5YIiwiZ2V0RmlsbFBhdHRlcm5YIiwiZmlsbFBhdHRlcm5ZIiwiZ2V0RmlsbFBhdHRlcm5ZIiwiZmlsbFBhdHRlcm5TY2FsZSIsImdldEZpbGxQYXR0ZXJuU2NhbGUiLCJmaWxsUGF0dGVyblJvdGF0aW9uIiwiZ2V0RmlsbFBhdHRlcm5Sb3RhdGlvbiIsImZpbGxQYXR0ZXJuT2Zmc2V0IiwiZ2V0RmlsbFBhdHRlcm5PZmZzZXQiLCJmaWxsUGF0dGVyblJlcGVhdCIsImdldEZpbGxQYXR0ZXJuUmVwZWF0IiwiX2ZpbGxMaW5lYXJHcmFkaWVudCIsInN0YXJ0IiwiZ2V0RmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludCIsImVuZCIsImdldEZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50IiwiY29sb3JTdG9wcyIsImdldEZpbGxMaW5lYXJHcmFkaWVudENvbG9yU3RvcHMiLCJncmQiLCJhZGRDb2xvclN0b3AiLCJfZmlsbFJhZGlhbEdyYWRpZW50IiwiZ2V0RmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludCIsImdldEZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50Iiwic3RhcnRSYWRpdXMiLCJnZXRGaWxsUmFkaWFsR3JhZGllbnRTdGFydFJhZGl1cyIsImVuZFJhZGl1cyIsImdldEZpbGxSYWRpYWxHcmFkaWVudEVuZFJhZGl1cyIsImdldEZpbGxSYWRpYWxHcmFkaWVudENvbG9yU3RvcHMiLCJoYXNDb2xvciIsImhhc1BhdHRlcm4iLCJoYXNMaW5lYXJHcmFkaWVudCIsImhhc1JhZGlhbEdyYWRpZW50IiwiZmlsbFByaW9yaXR5IiwiZ2V0RmlsbFByaW9yaXR5IiwiZGFzaCIsInN0cm9rZVNjYWxlRW5hYmxlZCIsImdldFN0cm9rZVNjYWxlRW5hYmxlZCIsImhhc1N0cm9rZSIsImRhc2hFbmFibGVkIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VSZWQiLCJzdHJva2VHcmVlbiIsInN0cm9rZUJsdWUiLCJzdHJva2VBbHBoYSIsIl9zdHJva2VGdW5jIiwiX2FwcGx5U2hhZG93IiwiZ2V0U2hhZG93Q29sb3IiLCJibHVyIiwiZ2V0U2hhZG93Qmx1ciIsInNoYWRvd09wYWNpdHkiLCJnZXRTaGFkb3dPcGFjaXR5Iiwib2Zmc2V0IiwiZ2V0U2hhZG93T2Zmc2V0IiwiY29sb3JLZXkiLCJfZmlsbEZ1bmNIaXQiLCJfc3Ryb2tlRnVuY0hpdCIsIkZhY3RvcnkiLCJhZGRHZXR0ZXJTZXR0ZXIiLCJ2YWxpZGF0b3IiLCJhZnRlciIsImFkZEdldHRlciIsImFkZFNldHRlciIsImFkZE92ZXJsb2FkZWRHZXR0ZXJTZXR0ZXIiLCJhdHRycyIsIl9zZXRBdHRyIiwiYWRkQ29tcG9uZW50c0dldHRlclNldHRlciIsImNvbXBvbmVudHMiLCJjb21wb25lbnQiLCJjYXBpdGFsaXplIiwiZ2V0dGVyIiwic2V0dGVyIiwiZ2V0QXR0ciIsIm9sZFZhbCIsIl9maXJlQ2hhbmdlRXZlbnQiLCJjYXBpdGFsaXplZEF0dHIiLCJiYWNrQ29tcGF0IiwiYWZ0ZXJTZXRGaWx0ZXIiLCJfZmlsdGVyVXBUb0RhdGUiLCJWYWxpZGF0b3JzIiwiUkdCQ29tcG9uZW50IiwiYWxwaGFDb21wb25lbnQiLCJldmVudExpc3RlbmVycyIsIl9jYWNoZSIsInNldEF0dHJzIiwib24iLCJfY2xlYXJDYWNoZSIsIl9jbGVhclNlbGZBbmREZXNjZW5kYW50Q2FjaGUiLCJfZ2V0Q2FjaGUiLCJwcml2YXRlR2V0dGVyIiwiY2hpbGRyZW4iLCJnZXRDaGlsZHJlbiIsImNsZWFyQ2FjaGUiLCJjYWNoZSIsImRyYXdCb3JkZXIiLCJjYWNoZWRTY2VuZUNhbnZhcyIsImNhY2hlZEZpbHRlckNhbnZhcyIsImNhY2hlZEhpdENhbnZhcyIsInNjZW5lQ29udGV4dCIsImhpdENvbnRleHQiLCJpc0NhY2hlIiwiZHJhd1NjZW5lIiwiZHJhd0hpdCIsInNjZW5lIiwiZmlsdGVyIiwiaGl0IiwiX2RyYXdDYWNoZWRTY2VuZUNhbnZhcyIsImdldExheWVyIiwiX2FwcGx5VHJhbnNmb3JtIiwiX2dldENhY2hlZFNjZW5lQ2FudmFzIiwiaW1hZ2VEYXRhIiwiZmlsdGVycyIsImNhY2hlZENhbnZhcyIsInNjZW5lQ2FudmFzIiwiZmlsdGVyQ2FudmFzIiwiZmlsdGVyQ29udGV4dCIsIl9kcmF3Q2FjaGVkSGl0Q2FudmFzIiwiZXZ0U3RyIiwiaGFuZGxlciIsInBhcnRzIiwiYmFzZUV2ZW50IiwiZXZlbnRzIiwib2ZmIiwiX29mZiIsImRpc3BhdGNoRXZlbnQiLCJldnQiLCJ0YXJnZXQiLCJ0eXBlIiwiZmlyZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlIiwiZ2V0UGFyZW50IiwiaW5kZXgiLCJfc2V0Q2hpbGRyZW5JbmRpY2VzIiwiZGVzdHJveSIsImdldElkIiwiZ2V0TmFtZSIsImdldEFuY2VzdG9ycyIsImFuY2VzdG9ycyIsImdldEF0dHJzIiwiaXNMaXN0ZW5pbmciLCJfaXNMaXN0ZW5pbmciLCJsaXN0ZW5pbmciLCJnZXRMaXN0ZW5pbmciLCJpc1Zpc2libGUiLCJfaXNWaXNpYmxlIiwidmlzaWJsZSIsImdldFZpc2libGUiLCJzaG91bGREcmF3SGl0IiwibGF5ZXIiLCJoaXRHcmFwaEVuYWJsZWQiLCJzaG93Iiwic2V0VmlzaWJsZSIsImhpZGUiLCJnZXRaSW5kZXgiLCJnZXRBYnNvbHV0ZVpJbmRleCIsImRlcHRoIiwiZ2V0RGVwdGgiLCJhZGRDaGlsZHJlbiIsImNvbmNhdCIsImdldFN0YWdlIiwic2V0UG9zaXRpb24iLCJwb3MiLCJzZXRYIiwic2V0WSIsImdldFBvc2l0aW9uIiwiZ2V0WCIsImdldFkiLCJnZXRBYnNvbHV0ZVBvc2l0aW9uIiwiYWJzb2x1dGVNYXRyaXgiLCJnZXRBYnNvbHV0ZVRyYW5zZm9ybSIsImFic29sdXRlVHJhbnNmb3JtIiwiaXQiLCJvcmlnVHJhbnMiLCJfY2xlYXJUcmFuc2Zvcm0iLCJfc2V0VHJhbnNmb3JtIiwidHJhbnMiLCJyb3RhdGlvbiIsImdldFJvdGF0aW9uIiwic2NhbGVYIiwiZ2V0U2NhbGVYIiwic2NhbGVZIiwiZ2V0U2NhbGVZIiwib2Zmc2V0WCIsImdldE9mZnNldFgiLCJvZmZzZXRZIiwiZ2V0T2Zmc2V0WSIsInNrZXdYIiwiZ2V0U2tld1giLCJza2V3WSIsImdldFNrZXdZIiwibW92ZSIsImNoYW5nZSIsImNoYW5nZVgiLCJjaGFuZ2VZIiwiX2VhY2hBbmNlc3RvclJldmVyc2UiLCJmYW1pbHkiLCJ1bnNoaWZ0IiwidGhldGEiLCJzZXRSb3RhdGlvbiIsIm1vdmVUb1RvcCIsIm1vdmVVcCIsIm1vdmVEb3duIiwibW92ZVRvQm90dG9tIiwic2V0WkluZGV4IiwiekluZGV4IiwiX2dldEFic29sdXRlT3BhY2l0eSIsImdldE9wYWNpdHkiLCJuZXdDb250YWluZXIiLCJhZGQiLCJ0b09iamVjdCIsImRlZmF1bHRWYWx1ZSIsImNsYXNzTmFtZSIsImdldENsYXNzTmFtZSIsInRvSlNPTiIsIkpTT04iLCJzdHJpbmdpZnkiLCJfZ2V0U3RhZ2UiLCJldmVudFR5cGUiLCJidWJibGUiLCJfZmlyZUFuZEJ1YmJsZSIsIl9maXJlIiwiX2dldEFic29sdXRlVHJhbnNmb3JtIiwidHJhbnNmb3Jtc0VuYWJsZWQiLCJhdCIsImdldFRyYW5zZm9ybSIsIl9nZXRUcmFuc2Zvcm0iLCJjbG9uZSIsImFsbExpc3RlbmVycyIsImxpc3RlbmVyIiwic3RhZ2UiLCJ0b0ltYWdlIiwiaW1nIiwic2l6ZSIsImdldFNpemUiLCJnZXRUeXBlIiwiZ2V0RHJhZ0Rpc3RhbmNlIiwiX2dldCIsInNlbGVjdG9yIiwiZXZ0TmFtZSIsImV2dExpc3RlbmVycyIsIm5ld1ZhbCIsInNldElkIiwib2xkSWQiLCJzZXROYW1lIiwib2xkTmFtZSIsIl9zZXRDb21wb25lbnRBdHRyIiwiY29tcGFyZVNoYXBlIiwib2theVRvUnVuIiwiaXNBbmNlc3Rvck9mIiwic3RvcEJ1YmJsZSIsImNhbmNlbEJ1YmJsZSIsImRyYXciLCJjcmVhdGUiLCJqc29uIiwiY29udGFpbmVyIiwiX2NyZWF0ZU5vZGUiLCJwYXJzZSIsIm5vIiwicm90YXRlRGVnIiwic2V0Um90YXRpb25EZWciLCJnZXRSb3RhdGlvbkRlZyIsIkdyYXlzY2FsZSIsImJyaWdodG5lc3MiLCJCcmlnaHRlbiIsIkludmVydCIsIkJsdXJTdGFjayIsIm5leHQiLCJtdWxfdGFibGUiLCJzaGdfdGFibGUiLCJCbHVyIiwicmFkaXVzIiwiYmx1clJhZGl1cyIsInlwIiwieWkiLCJ5dyIsInJfc3VtIiwiZ19zdW0iLCJiX3N1bSIsImFfc3VtIiwicl9vdXRfc3VtIiwiZ19vdXRfc3VtIiwiYl9vdXRfc3VtIiwiYV9vdXRfc3VtIiwicl9pbl9zdW0iLCJnX2luX3N1bSIsImJfaW5fc3VtIiwiYV9pbl9zdW0iLCJwciIsInBnIiwicGIiLCJwYSIsInJicyIsInBpeGVscyIsImRpdiIsIndpZHRoTWludXMxIiwiaGVpZ2h0TWludXMxIiwicmFkaXVzUGx1czEiLCJzdW1GYWN0b3IiLCJzdGFja1N0YXJ0Iiwic3RhY2tFbmQiLCJzdGFjayIsInN0YWNrSW4iLCJzdGFja091dCIsIm11bF9zdW0iLCJzaGdfc3VtIiwiZmlsdGVyR2F1c3NCbHVyUkdCQSIsInBpeGVsQXQiLCJpZGF0YSIsImlkeCIsInJnYkRpc3RhbmNlIiwicDEiLCJwMiIsIk1hc2siLCJtYXNrIiwidGhyZXNob2xkIiwicmdidl9ubyIsInJnYnZfbmUiLCJyZ2J2X3NvIiwicmdidl9zZSIsInRocmVzIiwibWVhbiIsInBUYWIiLCJyZ2JNZWFuIiwiYmFja2dyb3VuZE1hc2siLCJhcHBseU1hc2siLCJzdyIsInNoIiwid2VpZ2h0cyIsInNpZGUiLCJoYWxmU2lkZSIsImZsb29yIiwibWFza1Jlc3VsdCIsInNvIiwiY3kiLCJjeCIsInNjeSIsInNjeCIsInd0Iiwic21vb3RoRWRnZU1hc2siLCJkaWxhdGVNYXNrIiwiZXJvZGVNYXNrIiwiUkdCIiwiblBpeGVscyIsIkhTViIsInYiLCJ2YWx1ZSIsInNhdHVyYXRpb24iLCJoIiwiYWJzIiwiaHVlIiwidnN1IiwidnN3IiwicnIiLCJyZyIsInJiIiwiZ3IiLCJnZyIsImdiIiwiYnIiLCJiZyIsImJiIiwiSFNMIiwibCIsImx1bWluYW5jZSIsIkVtYm9zcyIsInN0cmVuZ3RoIiwiZW1ib3NzU3RyZW5ndGgiLCJncmV5TGV2ZWwiLCJlbWJvc3NXaGl0ZUxldmVsIiwiZGlyZWN0aW9uIiwiZW1ib3NzRGlyZWN0aW9uIiwiYmxlbmQiLCJlbWJvc3NCbGVuZCIsImRpclkiLCJkaXJYIiwidyIsInc0Iiwib3RoZXJZIiwib2Zmc2V0WU90aGVyIiwib3RoZXJYIiwib2Zmc2V0T3RoZXIiLCJkUiIsImRHIiwiZEIiLCJkaWYiLCJhYnNEaWYiLCJncmV5IiwicmVtYXAiLCJmcm9tVmFsdWUiLCJmcm9tTWluIiwiZnJvbU1heCIsInRvTWluIiwidG9NYXgiLCJmcm9tUmFuZ2UiLCJ0b1JhbmdlIiwiRW5oYW5jZSIsIm5TdWJQaXhlbHMiLCJyTWluIiwick1heCIsImdNaW4iLCJnTWF4IiwiYk1pbiIsImJNYXgiLCJlbmhhbmNlQW1vdW50IiwiZW5oYW5jZSIsInJNaWQiLCJyR29hbE1heCIsInJHb2FsTWluIiwiZ01pZCIsImdHb2FsTWF4IiwiZ0dvYWxNaW4iLCJiTWlkIiwiYkdvYWxNYXgiLCJiR29hbE1pbiIsIlBvc3Rlcml6ZSIsImxldmVscyIsIk5vaXNlIiwiYW1vdW50Iiwibm9pc2UiLCJoYWxmIiwiUGl4ZWxhdGUiLCJ4QmluU3RhcnQiLCJ4QmluRW5kIiwieUJpblN0YXJ0IiwieUJpbkVuZCIsInhCaW4iLCJ5QmluIiwicGl4ZWxzSW5CaW4iLCJwaXhlbFNpemUiLCJjZWlsIiwibkJpbnNYIiwibkJpbnNZIiwiVGhyZXNob2xkIiwibGV2ZWwiLCJTZXBpYSIsIm9yIiwib2ciLCJvYiIsIlNvbGFyaXplIiwiS2FsZWlkb3Njb3BlIiwic3JjUG9zIiwiZHN0UG9zIiwieFNpemUiLCJ5U2l6ZSIsInBvd2VyIiwia2FsZWlkb3Njb3BlUG93ZXIiLCJrYWxlaWRvc2NvcGVBbmdsZSIsInNjcmF0Y2hEYXRhIiwiZHN0Iiwib3B0Iiwic3JjUGl4ZWxzIiwiZHN0UGl4ZWxzIiwieE1pZCIsInBvbGFyQ2VudGVyWCIsInlNaWQiLCJwb2xhckNlbnRlclkiLCJyU2l6ZSIsInRTaXplIiwiY29udmVyc2lvbiIsIlRvUG9sYXIiLCJtaW5TZWN0aW9uU2l6ZSIsInNlY3Rpb25TaXplIiwieFN0YXJ0IiwieEVuZCIsInhEZWx0YSIsInBoYXNlU2hpZnQiLCJwb2xhclJvdGF0aW9uIiwiYXRhbjIiLCJGcm9tUG9sYXIiLCJwZXJmb3JtYW5jZSIsIlJBRiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsIkZSQUYiLCJBbmltYXRpb24iLCJsYXllcnMiLCJBbmltIiwic2V0TGF5ZXJzIiwiYW5pbUlkQ291bnRlciIsImZyYW1lIiwidGltZSIsInRpbWVEaWZmIiwibGFzdFRpbWUiLCJsYXlzIiwiZ2V0TGF5ZXJzIiwiYWRkTGF5ZXIiLCJpc1J1bm5pbmciLCJhbmltYXRpb25zIiwic3RvcCIsIl9hZGRBbmltYXRpb24iLCJfcmVtb3ZlQW5pbWF0aW9uIiwiX3VwZGF0ZUZyYW1lT2JqZWN0IiwiZnJhbWVSYXRlIiwiYW5pbVJ1bm5pbmciLCJhbmltIiwiX2hhbmRsZUFuaW1hdGlvbiIsIl9ydW5GcmFtZXMiLCJsYXllcnNMZW4iLCJsYXllckhhc2giLCJfYW5pbWF0aW9uTG9vcCIsInJlcXVlc3RBbmltRnJhbWUiLCJiYXRjaERyYXciLCJiYXRjaEFuaW0iLCJsYXN0QmF0Y2hEcmF3VGltZSIsImJsYWNrbGlzdCIsImR1cmF0aW9uIiwiZWFzaW5nIiwib25GaW5pc2giLCJ5b3lvIiwiVHdlZW4iLCJub2RlSWQiLCJFYXNpbmdzIiwiTGluZWFyIiwidHdlZW4iLCJvbkVudGVyRnJhbWUiLCJfdHdlZW5GdW5jIiwiX2FkZExpc3RlbmVycyIsInR3ZWVucyIsIl9hZGRBdHRyIiwib25SZXNldCIsImRpZmYiLCJ0d2VlbklkIiwib25QbGF5Iiwib25SZXZlcnNlIiwib25QYXVzZSIsInBsYXkiLCJyZXZlcnNlIiwic2VlayIsInBhdXNlIiwiZmluaXNoIiwidGhpc0lkIiwicHJvcCIsInByb3BGdW5jIiwiYmVnaW4iLCJfcG9zIiwiX2NoYW5nZSIsInByZXZQb3MiLCJfdGltZSIsIl9wb3NpdGlvbiIsIl9zdGFydFRpbWUiLCJfZmluaXNoIiwic2V0VGltZSIsInVwZGF0ZSIsInN0YXRlIiwiZ2V0VGltZXIiLCJCYWNrRWFzZUluIiwiQmFja0Vhc2VPdXQiLCJCYWNrRWFzZUluT3V0IiwiRWxhc3RpY0Vhc2VJbiIsImFzaW4iLCJFbGFzdGljRWFzZU91dCIsIkVsYXN0aWNFYXNlSW5PdXQiLCJCb3VuY2VFYXNlT3V0IiwiQm91bmNlRWFzZUluIiwiQm91bmNlRWFzZUluT3V0IiwiRWFzZUluIiwiRWFzZU91dCIsIkVhc2VJbk91dCIsIlN0cm9uZ0Vhc2VJbiIsIlN0cm9uZ0Vhc2VPdXQiLCJTdHJvbmdFYXNlSW5PdXQiLCJkaXJ0eSIsImp1c3REcmFnZ2VkIiwiX2RyYWciLCJnZXRQb2ludGVyUG9zaXRpb24iLCJtYXgiLCJzdGFydFBvaW50ZXJQb3MiLCJfc2V0RHJhZ1Bvc2l0aW9uIiwiX2VuZERyYWdCZWZvcmUiLCJkcmFnRW5kTm9kZSIsIl9lbmREcmFnQWZ0ZXIiLCJzdGFydERyYWciLCJhcCIsInN0b3BEcmFnIiwiZGJmIiwiZ2V0RHJhZ0JvdW5kRnVuYyIsIm5ld05vZGVQb3MiLCJfbGFzdFBvcyIsInNldERyYWdnYWJsZSIsImRyYWdnYWJsZSIsIl9kcmFnQ2hhbmdlIiwib3JpZ0Rlc3Ryb3kiLCJfbGlzdGVuRHJhZyIsIl9kcmFnQ2xlYW51cCIsImJ1dHRvbiIsImh0bWwiLCJkb2N1bWVudEVsZW1lbnQiLCJmaWx0ZXJGdW5jIiwicmVzdWx0cyIsImhhc0NoaWxkcmVuIiwicmVtb3ZlQ2hpbGRyZW4iLCJkZXN0cm95Q2hpbGRyZW4iLCJfdmFsaWRhdGVBZGQiLCJmaW5kIiwic2VsIiwiY2xlbiIsInNlbGVjdG9yQXJyIiwiX2dldE5vZGVCeUlkIiwiX2dldE5vZGVzQnlOYW1lIiwiX2dldERlc2NlbmRhbnRzIiwiZ2V0QWxsSW50ZXJzZWN0aW9ucyIsImludGVyc2VjdHMiLCJjYW4iLCJfZHJhd0NoaWxkcmVuIiwiY2xlYXJIaXRDYWNoZSIsImRyYXdNZXRob2QiLCJjbGlwWCIsImNsaXBZIiwiY2xpcFdpZHRoIiwiZ2V0Q2xpcFdpZHRoIiwiY2xpcEhlaWdodCIsImdldENsaXBIZWlnaHQiLCJoYXNDbGlwIiwiZ2V0Q2xpcFgiLCJnZXRDbGlwWSIsImxheWVyVW5kZXJEcmFnIiwiSEFTX1NIQURPVyIsIl9jbGVhckhhc1NoYWRvd0NhY2hlIiwiaGFzU2hhZG93IiwiX2hhc1NoYWRvdyIsImdldFNoYWRvd0VuYWJsZWQiLCJnZXRTaGFkb3dPZmZzZXRYIiwiZ2V0U2hhZG93T2Zmc2V0WSIsImhhc0ZpbGwiLCJnZXRGaWxsIiwiYnVmZmVySGl0Q2FudmFzIiwiX3VzZUJ1ZmZlckNhbnZhcyIsImJ1ZmZlckNhbnZhcyIsImJ1ZmZlckNvbnRleHQiLCJkcmF3RnVuYyIsInNjZW5lRnVuYyIsImhpdEZ1bmMiLCJkcmF3SGl0RnJvbUNhY2hlIiwiYWxwaGFUaHJlc2hvbGQiLCJzY2VuZURhdGEiLCJoaXRJbWFnZURhdGEiLCJoaXREYXRhIiwicmdiQ29sb3JLZXkiLCJkYXNoQXJyYXkiLCJnZXREYXNoQXJyYXkiLCJzZXREYXNoQXJyYXkiLCJnZXREcmF3RnVuYyIsInNldERyYXdGdW5jIiwiZHJhd0hpdEZ1bmMiLCJnZXREcmF3SGl0RnVuYyIsInNldERyYXdIaXRGdW5jIiwiVU5ERVJTQ09SRSIsIkVWRU5UUyIsImV2ZW50c0xlbmd0aCIsImFkZEV2ZW50IiwiY3R4IiwiZXZlbnROYW1lIiwiY29udGVudCIsIl9idWlsZERPTSIsIl9iaW5kQ29udGVudEV2ZW50cyIsIl9lbmFibGVOZXN0ZWRUcmFuc2Zvcm1zIiwic2V0Q29udGFpbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJfcmVzaXplRE9NIiwiZ2V0Q29udGFpbmVyIiwicmVtb3ZlQ2hpbGQiLCJwb2ludGVyUG9zIiwiZ2V0Q29udGVudCIsImRyYXdMYXllciIsImxheWVyVXJsIiwiY2IiLCJkYXRhVXJsIiwiZ2V0SW50ZXJzZWN0aW9uIiwiX3NldENhbnZhc1NpemUiLCJhcHBlbmRDaGlsZCIsIl9tb3VzZW92ZXIiLCJfc2V0UG9pbnRlclBvc2l0aW9uIiwiX21vdXNlb3V0IiwidGFyZ2V0U2hhcGUiLCJfbW91c2Vtb3ZlIiwiX3RvdWNobW92ZSIsIndlYmtpdE1vdmVtZW50WCIsIndlYmtpdE1vdmVtZW50WSIsInByZXZlbnREZWZhdWx0IiwiX21vdXNlZG93biIsIl90b3VjaHN0YXJ0IiwiY2xpY2tTdGFydFNoYXBlIiwiX21vdXNldXAiLCJfdG91Y2hlbmQiLCJmaXJlRGJsQ2xpY2siLCJ0YXBTdGFydFNoYXBlIiwiX0RPTU1vdXNlU2Nyb2xsIiwiX21vdXNld2hlZWwiLCJfd2hlZWwiLCJ0b3VjaCIsImNvbnRlbnRQb3NpdGlvbiIsIl9nZXRDb250ZW50UG9zaXRpb24iLCJjbGllbnRYIiwiZXZlbnQiLCJ0b3VjaGVzIiwiY2xpZW50WSIsImxheWVyWCIsImxheWVyWSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImlubmVySFRNTCIsImRpc3BsYXkiLCJzZXRBdHRyaWJ1dGUiLCJfb25Db250ZW50IiwidHlwZXNTdHIiLCJ0eXBlcyIsImNyZWF0ZVBOR1N0cmVhbSIsImdldEhpdENhbnZhcyIsIl9oaXRJbWFnZURhdGEiLCJpbnNlcnRCZWZvcmUiLCJpbnRlcnNlY3Rpb25PZmZzZXQiLCJzcGlyYWxTZWFyY2hEaXN0YW5jZSIsImNvbnRpbnVlU2VhcmNoIiwiX2dldEludGVyc2VjdGlvbiIsImFudGlhbGlhc2VkIiwiX2dldEltYWdlRGF0YSIsInAzIiwiZ2V0Q2xlYXJCZWZvcmVEcmF3IiwiZW5hYmxlSGl0R3JhcGgiLCJzZXRIaXRHcmFwaEVuYWJsZWQiLCJkaXNhYmxlSGl0R3JhcGgiLCJSZWN0IiwiX3NjZW5lRnVuYyIsImNvcm5lclJhZGl1cyIsImdldENvcm5lclJhZGl1cyIsIkNpcmNsZSIsImdldFJhZGl1cyIsInNldFJhZGl1cyIsIkVsbGlwc2UiLCJyeCIsImdldFJhZGl1c1giLCJyeSIsImdldFJhZGl1c1kiLCJSaW5nIiwiZ2V0SW5uZXJSYWRpdXMiLCJnZXRPdXRlclJhZGl1cyIsIm91dGVyUmFkaXVzIiwic2V0T3V0ZXJSYWRpdXMiLCJXZWRnZSIsImdldENsb2Nrd2lzZSIsImdldEFuZ2xlRGVnIiwic2V0QW5nbGVEZWciLCJBcmMiLCJjbG9ja3dpc2UiLCJfaGl0RnVuYyIsImNyb3BXaWR0aCIsImNyb3BIZWlnaHQiLCJwYXJhbXMiLCJpbWFnZSIsImdldEltYWdlIiwiZ2V0Q3JvcFdpZHRoIiwiZ2V0Q3JvcEhlaWdodCIsImdldENyb3BYIiwiZ2V0Q3JvcFkiLCJkdW1teUNvbnRleHQiLCJwYXJ0aWFsVGV4dCIsIlRleHQiLCJfc2V0VGV4dERhdGEiLCJnZXRQYWRkaW5nIiwidGV4dEhlaWdodCIsImdldFRleHRIZWlnaHQiLCJsaW5lSGVpZ2h0UHgiLCJnZXRMaW5lSGVpZ2h0IiwidGV4dEFyciIsInRleHRBcnJMZW4iLCJ0b3RhbFdpZHRoIiwiX2dldENvbnRleHRGb250IiwidGV4dCIsImdldEFsaWduIiwic2V0VGV4dCIsImdldFRleHRXaWR0aCIsInRleHRXaWR0aCIsIl9nZXRUZXh0U2l6ZSIsIm1ldHJpY3MiLCJmb250U2l6ZSIsImdldEZvbnRTaXplIiwiZm9udCIsIm1lYXN1cmVUZXh0IiwiZ2V0Rm9udFN0eWxlIiwiZ2V0Rm9udFZhcmlhbnQiLCJnZXRGb250RmFtaWx5IiwiX2FkZFRleHRMaW5lIiwibGluZSIsIl9nZXRUZXh0V2lkdGgiLCJsaW5lcyIsImdldFRleHQiLCJmaXhlZFdpZHRoIiwiZml4ZWRIZWlnaHQiLCJtYXhXaWR0aCIsIm1heEhlaWdodFB4IiwiY3VycmVudEhlaWdodFB4Iiwid3JhcCIsImdldFdyYXAiLCJzaG91bGRXcmFwIiwid3JhcEF0V29yZCIsImxpbmVXaWR0aCIsImxvdyIsImhpZ2giLCJtYXRjaFdpZHRoIiwibWlkIiwic3Vic3RyV2lkdGgiLCJ3cmFwSW5kZXgiLCJsYXN0SW5kZXhPZiIsIkxpbmUiLCJ0cCIsInBvaW50cyIsImdldFBvaW50cyIsImdldFRlbnNpb24iLCJjbG9zZWQiLCJnZXRDbG9zZWQiLCJnZXRUZW5zaW9uUG9pbnRzIiwiX2dldFRlbnNpb25Qb2ludHMiLCJfZ2V0VGVuc2lvblBvaW50c0Nsb3NlZCIsImZpcnN0Q29udHJvbFBvaW50cyIsImxhc3RDb250cm9sUG9pbnRzIiwibWlkZGxlIiwiU3ByaXRlIiwiX3VwZGF0ZWQiLCJ1cGRhdGVkIiwiZnJhbWVJbmRleCIsImNsZWFySW50ZXJ2YWwiLCJpbnRlcnZhbCIsIl9zZXRJbnRlcnZhbCIsImdldEFuaW1hdGlvbiIsIml4NCIsInNldCIsImdldEFuaW1hdGlvbnMiLCJvZmZzZXRzIiwiZnJhbWVPZmZzZXRzIiwiaXgyIiwic2V0SW50ZXJ2YWwiLCJfdXBkYXRlSW5kZXgiLCJnZXRGcmFtZVJhdGUiLCJhbmltYXRpb24iLCJnZXRJbmRleCIsInNldEluZGV4IiwiUGF0aCIsImRhdGFBcnJheSIsInBhcnNlUGF0aERhdGEiLCJnZXREYXRhIiwiY2EiLCJjbG9zZWRQYXRoIiwiY29tbWFuZCIsImRUaGV0YSIsInBzaSIsImZzIiwiZ2V0TGluZUxlbmd0aCIsImdldFBvaW50T25MaW5lIiwiZGlzdCIsIlAxeCIsIlAxeSIsIlAyeCIsIlAyeSIsImZyb21YIiwiZnJvbVkiLCJydW4iLCJwdCIsInJpc2UiLCJpeCIsIml5IiwicFJpc2UiLCJwUnVuIiwiZ2V0UG9pbnRPbkN1YmljQmV6aWVyIiwicGN0IiwiUDN4IiwiUDN5IiwiUDR4IiwiUDR5IiwiQ0IxIiwiQ0IyIiwiQ0IzIiwiQ0I0IiwiZ2V0UG9pbnRPblF1YWRyYXRpY0JlemllciIsIlFCMSIsIlFCMiIsIlFCMyIsImdldFBvaW50T25FbGxpcHRpY2FsQXJjIiwiY29zUHNpIiwic2luUHNpIiwiY3MiLCJjYyIsIlJlZ0V4cCIsImNweCIsImNweSIsInBhcnNlRmxvYXQiLCJpc05hTiIsInByZXZDbWQiLCJjdGxQdHgiLCJjdGxQdHkiLCJjbWQiLCJzdGFydFgiLCJzdGFydFkiLCJjb252ZXJ0RW5kcG9pbnRUb0NlbnRlclBhcmFtZXRlcml6YXRpb24iLCJwYXRoTGVuZ3RoIiwiY2FsY0xlbmd0aCIsInBhdGgiLCJpbmMiLCJwc2lEZWciLCJ4cCIsImxhbWJkYSIsImN4cCIsImN5cCIsInZNYWciLCJ2UmF0aW8iLCJ2QW5nbGUiLCJhY29zIiwiVGV4dFBhdGgiLCJkdW1teUNhbnZhcyIsImdseXBoSW5mbyIsInAwIiwicGF0aENtZCIsImNoYXJBcnIiLCJwSW5kZXgiLCJjdXJyZW50VCIsImdldE5leHRQYXRoU2VnbWVudCIsInBhdGhEYXRhIiwiZmluZFNlZ21lbnRUb0ZpdENoYXJhY3RlciIsImdseXBoV2lkdGgiLCJjdXJyTGVuIiwiYXR0ZW1wdHMiLCJjdW11bGF0aXZlUGF0aExlbmd0aCIsIm5lZWROZXdTZWdtZW50IiwibWlkcG9pbnQiLCJ0cmFuc3Bvc2VYIiwidHJhbnNwb3NlWSIsIlJlZ3VsYXJQb2x5Z29uIiwic2lkZXMiLCJTdGFyIiwiaW5uZXJSYWRpdXMiLCJudW1Qb2ludHMiLCJMYWJlbCIsIl9zeW5jIiwiZ2V0VGFnIiwicG9pbnRlckRpcmVjdGlvbiIsInBvaW50ZXJXaWR0aCIsInBvaW50ZXJIZWlnaHQiLCJ0YWciLCJnZXRQb2ludGVyRGlyZWN0aW9uIiwiZ2V0UG9pbnRlcldpZHRoIiwiZ2V0UG9pbnRlckhlaWdodCIsIlRhZyIsIkFycm93IiwiUEkyIiwicmFkaWFucyIsInBvaW50ZXJMZW5ndGgiLCJwb2ludGVyQXRCZWdpbm5pbmciLCJraW5ldGljIiwiW29iamVjdCBPYmplY3RdIiwicm93IiwiY29sdW1uIiwiZ2VuZXJhdGVLZXkiLCJzcGFjZSIsImJsb2NrU2l6ZSIsInVwIiwiZG93biIsInJpZ2h0IiwiY29ubmVjdGVkIiwiYW5pbWF0aW9uSXNSdW5uaW5nIiwib25DbGlja0V2ZW50IiwiYm94QW5pbWF0aW9uIiwicm93cyIsImJveCIsInBpcGVzIiwicGlwZVVwIiwicGlwZUxlZnQiLCJwaXBlRG93biIsInBpcGVSaWdodCIsIm1vdXNlQ2xpY2siLCJrIiwicm90YXRlUmlnaHQiLCJyb3RhdGVMZWZ0IiwidGVtcCIsImZvcndhcmQiLCJ0aW1lck9iaiIsIm9uVGltZXNVcCIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwiaW5mb1BhbmVsIiwidXBkYXRlVGltZXIiLCJhdHRyU2VwYXJhdG9yIiwia2V5VmFsdWVTZXBhcmF0b3IiLCJleHBpcmVzS2V5IiwicGF0aEtleSIsImNvb2tpZXMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJjb29raWUiLCJ0cmltIiwiZXhwaXJlcyIsImNvb2tpZUF0dHIiLCJleHBpcmVzQXR0ciIsInRvVVRDU3RyaW5nIiwicGF0aEF0dHIiLCJCbG9jayIsIkdhbWVUaW1lciIsImdhbWVUeXBlIiwiZ2FtZURpZmZpY3VsdHkiLCJsYXllclJvd3MiLCJsYXllckNvbHVtbnMiLCJ0YWJsZSIsInRpbWVyIiwiaW5mb3JtYXRpb24iLCJtZW51TGF5ZXIiLCJkaWZmaWN1bHR5TGF5ZXIiLCJ0aW1lVHJpYWxHYW1lTGF5ZXIiLCJzY29yZUJvYXJkTWVudUxheWVyIiwiaW5mb3JtYXRpb25NZW51TGF5ZXIiLCJnYW1lTGF5ZXJzIiwiYmxvY2tzIiwiY29sdW1ucyIsImxheWVyU2l6ZSIsIm1pbiIsInN0YXJ0aW5nUG9pbnRYIiwic3RhcnRpbmdQb2ludFkiLCJzdGFydE5ld0NsYXNzaWNHYW1lIiwiR2FtZVRhYmxlIiwiZ2VuZXJhdGVGaWVsZHMiLCJzaHVmZmxlIiwiZHJhd0dhbWUiLCJjcmVhdGVUaW1lciIsIkluZm9ybWF0aW9uUGFuZWwiLCJpbml0UGFuZWwiLCJ1cGRhdGVTY29yZSIsImhpZGVMZXZlbCIsIm1haW5NZW51IiwiY2xhc3NpY0dhbWVUZXh0IiwiZm9udEZhbWlseSIsInNldE9mZnNldCIsInRpbWVUcmlhbEdhbWVUZXh0Iiwic2NvcmVCb2FyZFRleHQiLCJpbmZvcm1hdGlvblRleHQiLCJjbGFzc2ljR2FtZVRleHRNb3VzZU92ZXIiLCJjbGFzc2ljR2FtZVRleHRNb3VzZU91dCIsImVhc3lUZXh0IiwibWVkaXVtVGV4dCIsImhhcmRUZXh0IiwiYmFja1RleHQiLCJlYXN5VGV4dE1vdXNlT3ZlciIsImVhc3lUZXh0TW91c2VPdXQiLCJtZWRpdW1UZXh0TW91c2VPdmVyIiwibWVkaXVtVGV4dE1vdXNlT3V0IiwiaGFyZFRleHRNb3VzZU92ZXIiLCJoYXJkVGV4dE1vdXNlT3V0IiwiYmFja1RleHRNb3VzZU92ZXIiLCJiYWNrVGV4dE1vdXNlT3V0IiwiY2xhc3NpY0RpZmZpY3VsdHlTZWxlY3RNZW51IiwidGltZVRyaWFsR2FtZVRleHRNb3VzZU92ZXIiLCJ0aW1lVHJpYWxHYW1lVGV4dE1vdXNlT3V0IiwidGltZVRyaWFsVGV4dCIsInRpbWVUcmlhbFRleHRNb3VzZU92ZXIiLCJ0aW1lVHJpYWxUZXh0TW91c2VPdXQiLCJ1cGRhdGVMZXZlbCIsInRpbWVUcmlhbEdhbWVNZW51Iiwic2NvcmVCb2FyZFRleHRNb3VzZU92ZXIiLCJzY29yZUJvYXJkVGV4dE1vdXNlT3V0IiwiY2xhc3NpY1RleHQiLCJsZXZlbFRleHQiLCJzY29yZUJvYXJkTWVudSIsImluZm9ybWF0aW9uVGV4dE1vdXNlT3ZlciIsImluZm9ybWF0aW9uVGV4dE1vdXNlT3V0IiwiaW5mb1RleHQiLCJpbmZvcm1hdGlvbk1lbnUiLCJqIiwiZ3JlYXRlciIsInNtYWxsZXIiLCJnZW5lcmF0ZUl0IiwiY3VycmVudEJsb2NrIiwibGVmdEJsb2NrIiwidXBCbG9jayIsInJpZ2h0QmxvY2siLCJkb3duQmxvY2siLCJzaHVmZmxlSXQiLCJvbkNsaWNrQmxvY2siLCJjb25uZWN0aW9uSGFuZGxlciIsImNoZWNrUGlwZUNvbm5lY3Rpb25zIiwicGFuZWxXaWR0aCIsInBhbmVsSGVpZ2h0IiwiaW5mb3JtYXRpb25MYXllciIsInBhbmVsIiwidGltZXJHcm91cCIsInNjb3JlIiwibGV2ZWxHcm91cCIsInRpbWVyVGl0bGVUZXh0IiwidGltZXJUZXh0Iiwic2NvcmVUaXRsZVRleHQiLCJzY29yZVRleHQiLCJsZXZlbFRpdGxlVGV4dCIsInNob3dUaW1lciIsImhpZGVUaW1lciIsInNob3dTY29yZSIsInNjb3JlVGltZXIiLCJzaG93TGV2ZWwiLCJjbGFzc2ljR2FtZUZpbmlzaGVkIiwibmV3UmVjb3JkIiwiYWxlcnQiLCJ0aW1lVHJpYWxHYW1lRmluaXNoZWQiLCJpbnN0YW5jZSIsImZpbmlzaGVkIiwiY2hlY2tHYW1lU3RhdHVzIiwibG9hZEFwcGxpY2F0aW9uIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwicGlwZSJdLCJtYXBwaW5ncyI6IkNBQUEsV0FBQSxPQUFBLFNBQUFBLEVBQUFDLEVBQUFDLEVBQUFDLEdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FBQSxJQUFBSixFQUFBRyxHQUFBLENBQUEsSUFBQUosRUFBQUksR0FBQSxDQUFBLElBQUFFLEVBQUEsbUJBQUFDLFNBQUFBLFFBQUEsSUFBQUYsR0FBQUMsRUFBQSxPQUFBQSxFQUFBRixHQUFBLEdBQUEsR0FBQUksRUFBQSxPQUFBQSxFQUFBSixHQUFBLEdBQUEsSUFBQUssRUFBQSxJQUFBQyxNQUFBLHVCQUFBTixFQUFBLEtBQUEsTUFBQUssRUFBQUUsS0FBQSxtQkFBQUYsRUFBQSxJQUFBRyxFQUFBWCxFQUFBRyxJQUFBUyxZQUFBYixFQUFBSSxHQUFBLEdBQUFVLEtBQUFGLEVBQUFDLFFBQUEsU0FBQWQsR0FBQSxPQUFBSSxFQUFBSCxFQUFBSSxHQUFBLEdBQUFMLElBQUFBLElBQUFhLEVBQUFBLEVBQUFDLFFBQUFkLEVBQUFDLEVBQUFDLEVBQUFDLEdBQUEsT0FBQUQsRUFBQUcsR0FBQVMsUUFBQSxJQUFBLElBQUFMLEVBQUEsbUJBQUFELFNBQUFBLFFBQUFILEVBQUEsRUFBQUEsRUFBQUYsRUFBQWEsT0FBQVgsSUFBQUQsRUFBQUQsRUFBQUUsSUFBQSxPQUFBRCxHQUFBLEVBQUEsRUFBQWEsR0FBQSxTQUFBVCxFQUFBVSxFQUFBSix5Q0NnQ0EsSUFDQUssRUFDQUMsRUFpeENBQyxFQU1BQyxFQW9OQUMsRUE0dEJBQyxFQU1BQyxFQUVB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QUFBLElBQUEsSUFBQSxJQUNBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQ0EsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUNBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQ0EsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUNBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQ0EsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUNBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQ0EsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUNBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQ0EsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLEtBR0FDLEdBQ0EsRUFBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FDQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUNBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQ0EsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FDQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUNBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQ0EsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FDQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUNBLEdBQUEsR0FBQSxHQUFBLEdBQUEs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QXN3QyxFQUFBSCIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJcbi8qXG4gKiBLaW5ldGljSlMgSmF2YVNjcmlwdCBGcmFtZXdvcmsgdjUuMi4wXG4gKiBodHRwOi8vbGF2cnRvbi5naXRodWIuaW8vS2luZXRpY0pTL1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBvciBHUEwgVmVyc2lvbiAyIGxpY2Vuc2VzLlxuICogRGF0ZTogMjAxNS0wMS0yMlxuICpcbiAqIE9yaWdpbmFsIHdvcmsgQ29weXJpZ2h0IChDKSAyMDExIC0gMjAxMyBieSBFcmljIFJvd2VsbFxuICogTW9kaWZpZWQgd29yayBDb3B5cmlnaHQgKEMpIDIwMTQgLSAyMDE1IGJ5IEFudG9uIExhdnJlbm92XG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuLyoqXG4gKiBAbmFtZXNwYWNlIEtpbmV0aWNcbiAqL1xuLypqc2hpbnQgLVcwNzksIC1XMDIwKi9cbnZhciBLaW5ldGljID0ge307XG4oZnVuY3Rpb24ocm9vdCkge1xuICAgIHZhciBQSV9PVkVSXzE4MCA9IE1hdGguUEkgLyAxODA7XG5cbiAgICBLaW5ldGljID0ge1xuICAgICAgICAvLyBwdWJsaWNcbiAgICAgICAgdmVyc2lvbjogJzUuMi4wJyxcblxuICAgICAgICAvLyBwcml2YXRlXG4gICAgICAgIHN0YWdlczogW10sXG4gICAgICAgIGlkQ291bnRlcjogMCxcbiAgICAgICAgaWRzOiB7fSxcbiAgICAgICAgbmFtZXM6IHt9LFxuICAgICAgICBzaGFwZXM6IHt9LFxuICAgICAgICBsaXN0ZW5DbGlja1RhcDogZmFsc2UsXG4gICAgICAgIGluRGJsQ2xpY2tXaW5kb3c6IGZhbHNlLFxuXG4gICAgICAgIC8vIGNvbmZpZ3VyYXRpb25zXG4gICAgICAgIGVuYWJsZVRyYWNlOiBmYWxzZSxcbiAgICAgICAgdHJhY2VBcnJNYXg6IDEwMCxcbiAgICAgICAgZGJsQ2xpY2tXaW5kb3c6IDQwMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdsb2JhbCBwaXhlbCByYXRpbyBjb25maWd1cmF0aW9uLiBLaW5ldGljSlMgYXV0b21hdGljYWxseSBkZXRlY3QgcGl4ZWwgcmF0aW8gb2YgY3VycmVudCBkZXZpY2UuXG4gICAgICAgICAqIEJ1dCB5b3UgbWF5IG92ZXJyaWRlIHN1Y2ggcHJvcGVydHksIGlmIHlvdSB3YW50IHRvIHVzZSB5b3VyIHZhbHVlLlxuICAgICAgICAgKiBAcHJvcGVydHkgcGl4ZWxSYXRpb1xuICAgICAgICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogS2luZXRpYy5waXhlbFJhdGlvID0gMTtcbiAgICAgICAgICovXG4gICAgICAgIHBpeGVsUmF0aW86IHVuZGVmaW5lZCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERyYWcgZGlzdGFuY2UgcHJvcGVydHkuIElmIHlvdSBzdGFydCB0byBkcmFnIGEgbm9kZSB5b3UgbWF5IHdhbnQgdG8gd2FpdCB1bnRpbCBwb2ludGVyIGlzIG1vdmVkIHRvIHNvbWUgZGlzdGFuY2UgZnJvbSBzdGFydCBwb2ludCxcbiAgICAgICAgICogb25seSB0aGVuIHN0YXJ0IGRyYWdnaW5nLlxuICAgICAgICAgKiBAcHJvcGVydHkgZHJhZ0Rpc3RhbmNlXG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogS2luZXRpYy5kcmFnRGlzdGFuY2UgPSAxMDtcbiAgICAgICAgICovXG4gICAgICAgIGRyYWdEaXN0YW5jZSA6IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2UgZGVncmVlIHZhbHVlcyBmb3IgYW5nbGUgcHJvcGVydGllcy4gWW91IG1heSBzZXQgdGhpcyBwcm9wZXJ0eSB0byBmYWxzZSBpZiB5b3Ugd2FudCB0byB1c2UgcmFkaWFudCB2YWx1ZXMuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBhbmdsZURlZ1xuICAgICAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIG5vZGUucm90YXRpb24oNDUpOyAvLyA0NSBkZWdyZWVzXG4gICAgICAgICAqIEtpbmV0aWMuYW5nbGVEZWcgPSBmYWxzZTtcbiAgICAgICAgICogbm9kZS5yb3RhdGlvbihNYXRoLlBJIC8gMik7IC8vIFBJLzIgcmFkaWFuXG4gICAgICAgICAqL1xuICAgICAgICBhbmdsZURlZzogdHJ1ZSxcbiAgICAgICAgIC8qKlxuICAgICAgICAgKiBTaG93IGRpZmZlcmVudCB3YXJuaW5ncyBhYm91dCBlcnJvcnMgb3Igd3JvbmcgQVBJIHVzYWdlXG4gICAgICAgICAqIEBwcm9wZXJ0eSBzaG93V2FybmluZ3NcbiAgICAgICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBLaW5ldGljLnNob3dXYXJuaW5ncyA9IGZhbHNlO1xuICAgICAgICAgKi9cbiAgICAgICAgc2hvd1dhcm5pbmdzIDogdHJ1ZSxcblxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lc3BhY2UgRmlsdGVyc1xuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAgICAgKi9cbiAgICAgICAgRmlsdGVyczoge30sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5vZGUgY29uc3RydWN0b3IuIE5vZGVzIGFyZSBlbnRpdGllcyB0aGF0IGNhbiBiZSB0cmFuc2Zvcm1lZCwgbGF5ZXJlZCxcbiAgICAgICAgICogYW5kIGhhdmUgYm91bmQgZXZlbnRzLiBUaGUgc3RhZ2UsIGxheWVycywgZ3JvdXBzLCBhbmQgc2hhcGVzIGFsbCBleHRlbmQgTm9kZS5cbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICAgICAqIEBhYnN0cmFjdFxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcudmlzaWJsZV1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5saXN0ZW5pbmddIHdoZXRoZXIgb3Igbm90IHRoZSBub2RlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5pZF0gdW5pcXVlIGlkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5uYW1lXSBub24tdW5pcXVlIG5hbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9wYWNpdHldIGRldGVybWluZXMgbm9kZSBvcGFjaXR5LiAgQ2FuIGJlIGFueSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zY2FsZV0gc2V0IHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVhdIHNldCBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVldIHNldCBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5yb3RhdGlvbl0gcm90YXRpb24gaW4gZGVncmVlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcub2Zmc2V0XSBvZmZzZXQgZnJvbSBjZW50ZXIgcG9pbnQgYW5kIHJvdGF0aW9uIHBvaW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRYXSBzZXQgb2Zmc2V0IHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFldIHNldCBvZmZzZXQgeVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRyYWdnYWJsZV0gbWFrZXMgdGhlIG5vZGUgZHJhZ2dhYmxlLiAgV2hlbiBzdGFnZXMgYXJlIGRyYWdnYWJsZSwgeW91IGNhbiBkcmFnIGFuZCBkcm9wXHJcbiAgICAgKiAgdGhlIGVudGlyZSBzdGFnZSBieSBkcmFnZ2luZyBhbnkgcG9ydGlvbiBvZiB0aGUgc3RhZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmRyYWdEaXN0YW5jZV1cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb25maWcuZHJhZ0JvdW5kRnVuY11cbiAgICAgICAgICovXG4gICAgICAgIE5vZGU6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5faW5pdChjb25maWcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaGFwZSBjb25zdHJ1Y3Rvci4gIFNoYXBlcyBhcmUgcHJpbWl0aXZlIG9iamVjdHMgc3VjaCBhcyByZWN0YW5nbGVzLFxuICAgICAgICAgKiAgY2lyY2xlcywgdGV4dCwgbGluZXMsIGV0Yy5cbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICAgICAqIEBhdWdtZW50cyBLaW5ldGljLk5vZGVcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsXSBmaWxsIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbFJlZF0gc2V0IGZpbGwgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxHcmVlbl0gc2V0IGZpbGwgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEJsdWVdIHNldCBmaWxsIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEFscGhhXSBzZXQgZmlsbCBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW1hZ2V9IFtjb25maWcuZmlsbFBhdHRlcm5JbWFnZV0gZmlsbCBwYXR0ZXJuIGltYWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFldIFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZV0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblJvdGF0aW9uXVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFBhdHRlcm5SZXBlYXRdIGNhbiBiZSBcInJlcGVhdFwiLCBcInJlcGVhdC14XCIsIFwicmVwZWF0LXlcIiwgb3IgXCJuby1yZXBlYXRcIi4gIFRoZSBkZWZhdWx0IGlzIFwibm8tcmVwZWF0XCJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WV0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5maWxsRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBmaWxsLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFByaW9yaXR5XSBjYW4gYmUgY29sb3IsIGxpbmVhci1ncmFkaWVudCwgcmFkaWFsLWdyYWlkZW50LCBvciBwYXR0ZXJuLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgY29sb3IuICBUaGUgZmlsbFByaW9yaXR5IHByb3BlcnR5IG1ha2VzIGl0IHJlYWxseSBlYXN5IHRvIHRvZ2dsZSBiZXR3ZWVuIGRpZmZlcmVudCBmaWxsIHR5cGVzLiAgRm9yIGV4YW1wbGUsIGlmIHlvdSB3YW50IHRvIHRvZ2dsZSBiZXR3ZWVuIGEgZmlsbCBjb2xvciBzdHlsZSBhbmQgYSBmaWxsIHBhdHRlcm4gc3R5bGUsIHNpbXBseSBzZXQgdGhlIGZpbGwgcHJvcGVydHkgYW5kIHRoZSBmaWxsUGF0dGVybiBwcm9wZXJ0aWVzLCBhbmQgdGhlbiB1c2Ugc2V0RmlsbFByaW9yaXR5KCdjb2xvcicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCBhIGNvbG9yIGZpbGwsIG9yIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ3BhdHRlcm4nKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggdGhlIHBhdHRlcm4gZmlsbCBjb25maWd1cmF0aW9uXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zdHJva2VdIHN0cm9rZSBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZVJlZF0gc2V0IHN0cm9rZSByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlR3JlZW5dIHNldCBzdHJva2UgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQmx1ZV0gc2V0IHN0cm9rZSBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUFscGhhXSBzZXQgc3Ryb2tlIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc3Ryb2tlV2lkdGhdIHN0cm9rZSB3aWR0aFxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZVNjYWxlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHN0cm9rZSBzY2FsZS4gIFRoZSBkZWZhdWx0IGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHN0cm9rZS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVKb2luXSBjYW4gYmUgbWl0ZXIsIHJvdW5kLCBvciBiZXZlbC4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgbWl0ZXJcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVDYXBdIGNhbiBiZSBidXR0LCByb3VuZCwgb3Igc3FhcmUuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIGJ1dHRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnNoYWRvd0NvbG9yXVxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd1JlZF0gc2V0IHNoYWRvdyBjb2xvciByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93R3JlZW5dIHNldCBzaGFkb3cgY29sb3IgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93Qmx1ZV0gc2V0IHNoYWRvdyBjb2xvciBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0FscGhhXSBzZXQgc2hhZG93IGNvbG9yIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93Qmx1cl1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNoYWRvd09mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T3BhY2l0eV0gc2hhZG93IG9wYWNpdHkuICBDYW4gYmUgYW55IHJlYWwgbnVtYmVyXHJcbiAgICAgKiAgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc2hhZG93RW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzaGFkb3cuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmRhc2hdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZGFzaEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZGFzaEFycmF5LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcubGlzdGVuaW5nXSB3aGV0aGVyIG9yIG5vdCB0aGUgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuaWRdIHVuaXF1ZSBpZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2NhbGVdIHNldCBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVYXSBzZXQgc2NhbGUgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVZXSBzZXQgc2NhbGUgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucm90YXRpb25dIHJvdGF0aW9uIGluIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLm9mZnNldF0gb2Zmc2V0IGZyb20gY2VudGVyIHBvaW50IGFuZCByb3RhdGlvbiBwb2ludFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WF0gc2V0IG9mZnNldCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRZXSBzZXQgb2Zmc2V0IHlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmFnZ2FibGVdIG1ha2VzIHRoZSBub2RlIGRyYWdnYWJsZS4gIFdoZW4gc3RhZ2VzIGFyZSBkcmFnZ2FibGUsIHlvdSBjYW4gZHJhZyBhbmQgZHJvcFxyXG4gICAgICogIHRoZSBlbnRpcmUgc3RhZ2UgYnkgZHJhZ2dpbmcgYW55IHBvcnRpb24gb2YgdGhlIHN0YWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5kcmFnRGlzdGFuY2VdXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29uZmlnLmRyYWdCb3VuZEZ1bmNdXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIHZhciBjdXN0b21TaGFwZSA9IG5ldyBLaW5ldGljLlNoYXBlKHtcbiAgICAgICAgICogICB4OiA1LFxuICAgICAgICAgKiAgIHk6IDEwLFxuICAgICAgICAgKiAgIGZpbGw6ICdyZWQnLFxuICAgICAgICAgKiAgIC8vIGEgS2luZXRpYy5DYW52YXMgcmVuZGVyZXIgaXMgcGFzc2VkIGludG8gdGhlIGRyYXdGdW5jIGZ1bmN0aW9uXG4gICAgICAgICAqICAgZHJhd0Z1bmM6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICogICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAqICAgICBjb250ZXh0Lm1vdmVUbygyMDAsIDUwKTtcbiAgICAgICAgICogICAgIGNvbnRleHQubGluZVRvKDQyMCwgODApO1xuICAgICAgICAgKiAgICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKDMwMCwgMTAwLCAyNjAsIDE3MCk7XG4gICAgICAgICAqICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgKiAgICAgY29udGV4dC5maWxsU3Ryb2tlU2hhcGUodGhpcyk7XG4gICAgICAgICAqICAgfVxuICAgICAgICAgKn0pO1xuICAgICAgICAgKi9cbiAgICAgICAgU2hhcGU6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5fX2luaXQoY29uZmlnKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udGFpbmVyIGNvbnN0cnVjdG9yLiZuYnNwOyBDb250YWluZXJzIGFyZSB1c2VkIHRvIGNvbnRhaW4gbm9kZXMgb3Igb3RoZXIgY29udGFpbmVyc1xuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgICAgICogQGF1Z21lbnRzIEtpbmV0aWMuTm9kZVxuICAgICAgICAgKiBAYWJzdHJhY3RcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcubGlzdGVuaW5nXSB3aGV0aGVyIG9yIG5vdCB0aGUgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuaWRdIHVuaXF1ZSBpZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2NhbGVdIHNldCBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVYXSBzZXQgc2NhbGUgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVZXSBzZXQgc2NhbGUgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucm90YXRpb25dIHJvdGF0aW9uIGluIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLm9mZnNldF0gb2Zmc2V0IGZyb20gY2VudGVyIHBvaW50IGFuZCByb3RhdGlvbiBwb2ludFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WF0gc2V0IG9mZnNldCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRZXSBzZXQgb2Zmc2V0IHlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmFnZ2FibGVdIG1ha2VzIHRoZSBub2RlIGRyYWdnYWJsZS4gIFdoZW4gc3RhZ2VzIGFyZSBkcmFnZ2FibGUsIHlvdSBjYW4gZHJhZyBhbmQgZHJvcFxyXG4gICAgICogIHRoZSBlbnRpcmUgc3RhZ2UgYnkgZHJhZ2dpbmcgYW55IHBvcnRpb24gb2YgdGhlIHN0YWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5kcmFnRGlzdGFuY2VdXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29uZmlnLmRyYWdCb3VuZEZ1bmNdXG4gICAgICAgICAqICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuY2xpcF0gc2V0IGNsaXBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmNsaXBYXSBzZXQgY2xpcCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5jbGlwWV0gc2V0IGNsaXAgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY2xpcFdpZHRoXSBzZXQgY2xpcCB3aWR0aFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY2xpcEhlaWdodF0gc2V0IGNsaXAgaGVpZ2h0XHJcblxuICAgICAgICAgKi9cbiAgICAgICAgQ29udGFpbmVyOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMuX19pbml0KGNvbmZpZyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0YWdlIGNvbnN0cnVjdG9yLiAgQSBzdGFnZSBpcyB1c2VkIHRvIGNvbnRhaW4gbXVsdGlwbGUgbGF5ZXJzXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAgICAgKiBAYXVnbWVudHMgS2luZXRpYy5Db250YWluZXJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3xFbGVtZW50fSBjb25maWcuY29udGFpbmVyIENvbnRhaW5lciBpZCBvciBET00gZWxlbWVudFxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcubGlzdGVuaW5nXSB3aGV0aGVyIG9yIG5vdCB0aGUgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuaWRdIHVuaXF1ZSBpZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2NhbGVdIHNldCBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVYXSBzZXQgc2NhbGUgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVZXSBzZXQgc2NhbGUgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucm90YXRpb25dIHJvdGF0aW9uIGluIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLm9mZnNldF0gb2Zmc2V0IGZyb20gY2VudGVyIHBvaW50IGFuZCByb3RhdGlvbiBwb2ludFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WF0gc2V0IG9mZnNldCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRZXSBzZXQgb2Zmc2V0IHlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmFnZ2FibGVdIG1ha2VzIHRoZSBub2RlIGRyYWdnYWJsZS4gIFdoZW4gc3RhZ2VzIGFyZSBkcmFnZ2FibGUsIHlvdSBjYW4gZHJhZyBhbmQgZHJvcFxyXG4gICAgICogIHRoZSBlbnRpcmUgc3RhZ2UgYnkgZHJhZ2dpbmcgYW55IHBvcnRpb24gb2YgdGhlIHN0YWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5kcmFnRGlzdGFuY2VdXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29uZmlnLmRyYWdCb3VuZEZ1bmNdXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIHZhciBzdGFnZSA9IG5ldyBLaW5ldGljLlN0YWdlKHtcbiAgICAgICAgICogICB3aWR0aDogNTAwLFxuICAgICAgICAgKiAgIGhlaWdodDogODAwLFxuICAgICAgICAgKiAgIGNvbnRhaW5lcjogJ2NvbnRhaW5lcklkJ1xuICAgICAgICAgKiB9KTtcbiAgICAgICAgICovXG4gICAgICAgIFN0YWdlOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMuX19faW5pdChjb25maWcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCYXNlTGF5ZXIgY29uc3RydWN0b3IuIFxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgICAgICogQGF1Z21lbnRzIEtpbmV0aWMuQ29udGFpbmVyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmNsZWFyQmVmb3JlRHJhd10gc2V0IHRoaXMgcHJvcGVydHkgdG8gZmFsc2UgaWYgeW91IGRvbid0IHdhbnRcbiAgICAgICAgICogdG8gY2xlYXIgdGhlIGNhbnZhcyBiZWZvcmUgZWFjaCBsYXllciBkcmF3LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmxpc3RlbmluZ10gd2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub3BhY2l0eV0gZGV0ZXJtaW5lcyBub2RlIG9wYWNpdHkuICBDYW4gYmUgYW55IG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNjYWxlXSBzZXQgc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWF0gc2V0IHNjYWxlIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWV0gc2V0IHNjYWxlIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnJvdGF0aW9uXSByb3RhdGlvbiBpbiBkZWdyZWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5vZmZzZXRdIG9mZnNldCBmcm9tIGNlbnRlciBwb2ludCBhbmQgcm90YXRpb24gcG9pbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFhdIHNldCBvZmZzZXQgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WV0gc2V0IG9mZnNldCB5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZHJhZ2dhYmxlXSBtYWtlcyB0aGUgbm9kZSBkcmFnZ2FibGUuICBXaGVuIHN0YWdlcyBhcmUgZHJhZ2dhYmxlLCB5b3UgY2FuIGRyYWcgYW5kIGRyb3BcclxuICAgICAqICB0aGUgZW50aXJlIHN0YWdlIGJ5IGRyYWdnaW5nIGFueSBwb3J0aW9uIG9mIHRoZSBzdGFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZHJhZ0Rpc3RhbmNlXVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbmZpZy5kcmFnQm91bmRGdW5jXVxuICAgICAgICAgKiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmNsaXBdIHNldCBjbGlwXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5jbGlwWF0gc2V0IGNsaXAgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY2xpcFldIHNldCBjbGlwIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmNsaXBXaWR0aF0gc2V0IGNsaXAgd2lkdGhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmNsaXBIZWlnaHRdIHNldCBjbGlwIGhlaWdodFxyXG5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogdmFyIGxheWVyID0gbmV3IEtpbmV0aWMuTGF5ZXIoKTtcbiAgICAgICAgICovXG4gICAgICAgIEJhc2VMYXllcjogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLl9fX2luaXQoY29uZmlnKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogTGF5ZXIgY29uc3RydWN0b3IuICBMYXllcnMgYXJlIHRpZWQgdG8gdGhlaXIgb3duIGNhbnZhcyBlbGVtZW50IGFuZCBhcmUgdXNlZFxuICAgICAgICAgKiB0byBjb250YWluIGdyb3VwcyBvciBzaGFwZXMuXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAgICAgKiBAYXVnbWVudHMgS2luZXRpYy5CYXNlTGF5ZXJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuY2xlYXJCZWZvcmVEcmF3XSBzZXQgdGhpcyBwcm9wZXJ0eSB0byBmYWxzZSBpZiB5b3UgZG9uJ3Qgd2FudFxuICAgICAgICAgKiB0byBjbGVhciB0aGUgY2FudmFzIGJlZm9yZSBlYWNoIGxheWVyIGRyYXcuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcubGlzdGVuaW5nXSB3aGV0aGVyIG9yIG5vdCB0aGUgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuaWRdIHVuaXF1ZSBpZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2NhbGVdIHNldCBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVYXSBzZXQgc2NhbGUgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVZXSBzZXQgc2NhbGUgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucm90YXRpb25dIHJvdGF0aW9uIGluIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLm9mZnNldF0gb2Zmc2V0IGZyb20gY2VudGVyIHBvaW50IGFuZCByb3RhdGlvbiBwb2ludFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WF0gc2V0IG9mZnNldCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRZXSBzZXQgb2Zmc2V0IHlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmFnZ2FibGVdIG1ha2VzIHRoZSBub2RlIGRyYWdnYWJsZS4gIFdoZW4gc3RhZ2VzIGFyZSBkcmFnZ2FibGUsIHlvdSBjYW4gZHJhZyBhbmQgZHJvcFxyXG4gICAgICogIHRoZSBlbnRpcmUgc3RhZ2UgYnkgZHJhZ2dpbmcgYW55IHBvcnRpb24gb2YgdGhlIHN0YWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5kcmFnRGlzdGFuY2VdXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29uZmlnLmRyYWdCb3VuZEZ1bmNdXG4gICAgICAgICAqICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuY2xpcF0gc2V0IGNsaXBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmNsaXBYXSBzZXQgY2xpcCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5jbGlwWV0gc2V0IGNsaXAgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY2xpcFdpZHRoXSBzZXQgY2xpcCB3aWR0aFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY2xpcEhlaWdodF0gc2V0IGNsaXAgaGVpZ2h0XHJcblxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiB2YXIgbGF5ZXIgPSBuZXcgS2luZXRpYy5MYXllcigpO1xuICAgICAgICAgKi9cbiAgICAgICAgTGF5ZXI6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5fX19faW5pdChjb25maWcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGYXN0TGF5ZXIgY29uc3RydWN0b3IuIExheWVycyBhcmUgdGllZCB0byB0aGVpciBvd24gY2FudmFzIGVsZW1lbnQgYW5kIGFyZSB1c2VkXG4gICAgICAgICAqIHRvIGNvbnRhaW4gc2hhcGVzIG9ubHkuICBJZiB5b3UgZG9uJ3QgbmVlZCBub2RlIG5lc3RpbmcsIG1vdXNlIGFuZCB0b3VjaCBpbnRlcmFjdGlvbnMsXG4gICAgICAgICAqIG9yIGV2ZW50IHB1Yi9zdWIsIHlvdSBzaG91bGQgdXNlIEZhc3RMYXllciBpbnN0ZWFkIG9mIExheWVyIHRvIGNyZWF0ZSB5b3VyIGxheWVycy5cbiAgICAgICAgICogSXQgcmVuZGVycyBhYm91dCAyeCBmYXN0ZXIgdGhhbiBub3JtYWwgbGF5ZXJzLlxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgICAgICogQGF1Z21lbnRzIEtpbmV0aWMuQmFzZUxheWVyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmNsZWFyQmVmb3JlRHJhd10gc2V0IHRoaXMgcHJvcGVydHkgdG8gZmFsc2UgaWYgeW91IGRvbid0IHdhbnRcbiAgICAgICAgICogdG8gY2xlYXIgdGhlIGNhbnZhcyBiZWZvcmUgZWFjaCBsYXllciBkcmF3LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9wYWNpdHldIGRldGVybWluZXMgbm9kZSBvcGFjaXR5LiAgQ2FuIGJlIGFueSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXG4gICAgICAgICAqICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuY2xpcF0gc2V0IGNsaXBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmNsaXBYXSBzZXQgY2xpcCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5jbGlwWV0gc2V0IGNsaXAgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY2xpcFdpZHRoXSBzZXQgY2xpcCB3aWR0aFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY2xpcEhlaWdodF0gc2V0IGNsaXAgaGVpZ2h0XHJcblxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiB2YXIgbGF5ZXIgPSBuZXcgS2luZXRpYy5GYXN0TGF5ZXIoKTtcbiAgICAgICAgICovXG4gICAgICAgIEZhc3RMYXllcjogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLl9fX19pbml0KGNvbmZpZyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdyb3VwIGNvbnN0cnVjdG9yLiAgR3JvdXBzIGFyZSB1c2VkIHRvIGNvbnRhaW4gc2hhcGVzIG9yIG90aGVyIGdyb3Vwcy5cbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICAgICAqIEBhdWdtZW50cyBLaW5ldGljLkNvbnRhaW5lclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcudmlzaWJsZV1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5saXN0ZW5pbmddIHdoZXRoZXIgb3Igbm90IHRoZSBub2RlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5pZF0gdW5pcXVlIGlkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5uYW1lXSBub24tdW5pcXVlIG5hbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9wYWNpdHldIGRldGVybWluZXMgbm9kZSBvcGFjaXR5LiAgQ2FuIGJlIGFueSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zY2FsZV0gc2V0IHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVhdIHNldCBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVldIHNldCBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5yb3RhdGlvbl0gcm90YXRpb24gaW4gZGVncmVlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcub2Zmc2V0XSBvZmZzZXQgZnJvbSBjZW50ZXIgcG9pbnQgYW5kIHJvdGF0aW9uIHBvaW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRYXSBzZXQgb2Zmc2V0IHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFldIHNldCBvZmZzZXQgeVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRyYWdnYWJsZV0gbWFrZXMgdGhlIG5vZGUgZHJhZ2dhYmxlLiAgV2hlbiBzdGFnZXMgYXJlIGRyYWdnYWJsZSwgeW91IGNhbiBkcmFnIGFuZCBkcm9wXHJcbiAgICAgKiAgdGhlIGVudGlyZSBzdGFnZSBieSBkcmFnZ2luZyBhbnkgcG9ydGlvbiBvZiB0aGUgc3RhZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmRyYWdEaXN0YW5jZV1cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb25maWcuZHJhZ0JvdW5kRnVuY11cbiAgICAgICAgICogKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5jbGlwXSBzZXQgY2xpcFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY2xpcFhdIHNldCBjbGlwIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmNsaXBZXSBzZXQgY2xpcCB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5jbGlwV2lkdGhdIHNldCBjbGlwIHdpZHRoXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5jbGlwSGVpZ2h0XSBzZXQgY2xpcCBoZWlnaHRcclxuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIHZhciBncm91cCA9IG5ldyBLaW5ldGljLkdyb3VwKCk7XG4gICAgICAgICAqL1xuICAgICAgICBHcm91cDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLl9fX2luaXQoY29uZmlnKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcmV0dXJucyB3aGV0aGVyIG9yIG5vdCBkcmFnIGFuZCBkcm9wIGlzIGN1cnJlbnRseSBhY3RpdmVcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAgICAgKi9cbiAgICAgICAgaXNEcmFnZ2luZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZGQgPSBLaW5ldGljLkREO1xuXG4gICAgICAgICAgICAvLyBpZiBERCBpcyBub3QgaW5jbHVkZWQgd2l0aCB0aGUgYnVpbGQsIHRoZW5cbiAgICAgICAgICAgIC8vIGRyYWcgYW5kIGRyb3AgaXMgbm90IGV2ZW4gcG9zc2libGVcbiAgICAgICAgICAgIGlmIChkZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZC5pc0RyYWdnaW5nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAqIHJldHVybnMgd2hldGhlciBvciBub3QgYSBkcmFnIGFuZCBkcm9wIG9wZXJhdGlvbiBpcyByZWFkeSwgYnV0IG1heVxuICAgICAgICAqICBub3QgbmVjZXNzYXJpbHkgaGF2ZSBzdGFydGVkXG4gICAgICAgICogQG1ldGhvZFxuICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICAgICovXG4gICAgICAgIGlzRHJhZ1JlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkZCA9IEtpbmV0aWMuREQ7XG5cbiAgICAgICAgICAgIC8vIGlmIEREIGlzIG5vdCBpbmNsdWRlZCB3aXRoIHRoZSBidWlsZCwgdGhlblxuICAgICAgICAgICAgLy8gZHJhZyBhbmQgZHJvcCBpcyBub3QgZXZlbiBwb3NzaWJsZVxuICAgICAgICAgICAgaWYgKGRkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhZGQubm9kZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfYWRkSWQ6IGZ1bmN0aW9uKG5vZGUsIGlkKSB7XG4gICAgICAgICAgICBpZihpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pZHNbaWRdID0gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX3JlbW92ZUlkOiBmdW5jdGlvbihpZCkge1xuICAgICAgICAgICAgaWYoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmlkc1tpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9hZGROYW1lOiBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gICAgICAgICAgICBpZihuYW1lICE9PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgIHZhciBuYW1lcyA9IG5hbWUuc3BsaXQoL1xccy9nKTtcbiAgICAgICAgICAgICAgICBmb3IodmFyIG4gPSAwOyBuIDwgbmFtZXMubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1Ym5hbWUgPSBuYW1lc1tuXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1Ym5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMubmFtZXNbc3VibmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZXNbc3VibmFtZV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZXNbc3VibmFtZV0ucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX3JlbW92ZU5hbWU6IGZ1bmN0aW9uKG5hbWUsIF9pZCkge1xuICAgICAgICAgICAgaWYobmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gdGhpcy5uYW1lc1tuYW1lXTtcbiAgICAgICAgICAgICAgICBpZihub2RlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgbiA9IDA7IG4gPCBub2Rlcy5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vID0gbm9kZXNbbl07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihuby5faWQgPT09IF9pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzLnNwbGljZShuLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZihub2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm5hbWVzW25hbWVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZXRBbmdsZTogZnVuY3Rpb24oYW5nbGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFuZ2xlRGVnID8gYW5nbGUgKiBQSV9PVkVSXzE4MCA6IGFuZ2xlO1xuICAgICAgICB9LFxuICAgICAgICBfcGFyc2VVQTogZnVuY3Rpb24odXNlckFnZW50KSB7XG4gICAgICAgICAgICB2YXIgdWEgPSB1c2VyQWdlbnQudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAvLyBqUXVlcnkgVUEgcmVnZXhcbiAgICAgICAgICAgICAgICBtYXRjaCA9IC8oY2hyb21lKVsgXFwvXShbXFx3Ll0rKS8uZXhlYyggdWEgKSB8fFxuICAgICAgICAgICAgICAgIC8od2Via2l0KVsgXFwvXShbXFx3Ll0rKS8uZXhlYyggdWEgKSB8fFxuICAgICAgICAgICAgICAgIC8ob3BlcmEpKD86Lip2ZXJzaW9ufClbIFxcL10oW1xcdy5dKykvLmV4ZWMoIHVhICkgfHxcbiAgICAgICAgICAgICAgICAvKG1zaWUpIChbXFx3Ll0rKS8uZXhlYyggdWEgKSB8fFxuICAgICAgICAgICAgICAgIHVhLmluZGV4T2YoJ2NvbXBhdGlibGUnKSA8IDAgJiYgLyhtb3ppbGxhKSg/Oi4qPyBydjooW1xcdy5dKyl8KS8uZXhlYyggdWEgKSB8fFxuICAgICAgICAgICAgICAgIFtdLFxuXG4gICAgICAgICAgICAgICAgLy8gYWRkaW5nIG1vYmlsZSBmbGFnIGFzIHdlbGxcbiAgICAgICAgICAgICAgICBtb2JpbGUgPSAhISh1c2VyQWdlbnQubWF0Y2goL0FuZHJvaWR8QmxhY2tCZXJyeXxpUGhvbmV8aVBhZHxpUG9kfE9wZXJhIE1pbml8SUVNb2JpbGUvaSkpLFxuICAgICAgICAgICAgICAgIGllTW9iaWxlID0gISEodXNlckFnZW50Lm1hdGNoKC9JRU1vYmlsZS9pKSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJyb3dzZXI6IG1hdGNoWyAxIF0gfHwgJycsXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogbWF0Y2hbIDIgXSB8fCAnMCcsXG5cbiAgICAgICAgICAgICAgICAvLyBhZGRpbmcgbW9iaWxlIGZsYWJcbiAgICAgICAgICAgICAgICBtb2JpbGU6IG1vYmlsZSxcbiAgICAgICAgICAgICAgICBpZU1vYmlsZTogaWVNb2JpbGUgIC8vIElmIHRoaXMgaXMgdHJ1ZSAoaS5lLiwgV1A4KSwgdGhlbiBLaW5ldGljIHRvdWNoIGV2ZW50cyBhcmUgZXhlY3V0ZWQgaW5zdGVhZCBvZiBlcXVpdmFsZW50IEtpbmV0aWMgbW91c2UgZXZlbnRzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvLyB1c2VyIGFnZW50ICBcbiAgICAgICAgVUE6IHVuZGVmaW5lZFxuICAgIH07XG5cbiAgICBLaW5ldGljLlVBID0gS2luZXRpYy5fcGFyc2VVQSgocm9vdC5uYXZpZ2F0b3IgJiYgcm9vdC5uYXZpZ2F0b3IudXNlckFnZW50KSB8fCAnJyk7XG4gICAgXG59KSh0aGlzKTtcblxuLy8gVXNlcyBOb2RlLCBBTUQgb3IgYnJvd3NlciBnbG9iYWxzIHRvIGNyZWF0ZSBhIG1vZHVsZS5cblxuLy8gSWYgeW91IHdhbnQgc29tZXRoaW5nIHRoYXQgd2lsbCB3b3JrIGluIG90aGVyIHN0cmljdGVyIENvbW1vbkpTIGVudmlyb25tZW50cyxcbi8vIG9yIGlmIHlvdSBuZWVkIHRvIGNyZWF0ZSBhIGNpcmN1bGFyIGRlcGVuZGVuY3ksIHNlZSBjb21tb25Kc1N0cmljdC5qc1xuXG4vLyBEZWZpbmVzIGEgbW9kdWxlIFwicmV0dXJuRXhwb3J0c1wiIHRoYXQgZGVwZW5kcyBhbm90aGVyIG1vZHVsZSBjYWxsZWQgXCJiXCIuXG4vLyBOb3RlIHRoYXQgdGhlIG5hbWUgb2YgdGhlIG1vZHVsZSBpcyBpbXBsaWVkIGJ5IHRoZSBmaWxlIG5hbWUuIEl0IGlzIGJlc3Rcbi8vIGlmIHRoZSBmaWxlIG5hbWUgYW5kIHRoZSBleHBvcnRlZCBnbG9iYWwgaGF2ZSBtYXRjaGluZyBuYW1lcy5cblxuLy8gSWYgdGhlICdiJyBtb2R1bGUgYWxzbyB1c2VzIHRoaXMgdHlwZSBvZiBib2lsZXJwbGF0ZSwgdGhlblxuLy8gaW4gdGhlIGJyb3dzZXIsIGl0IHdpbGwgY3JlYXRlIGEgZ2xvYmFsIC5iIHRoYXQgaXMgdXNlZCBiZWxvdy5cblxuLy8gSWYgeW91IGRvIG5vdCB3YW50IHRvIHN1cHBvcnQgdGhlIGJyb3dzZXIgZ2xvYmFsIHBhdGgsIHRoZW4geW91XG4vLyBjYW4gcmVtb3ZlIHRoZSBgcm9vdGAgdXNlIGFuZCB0aGUgcGFzc2luZyBgdGhpc2AgYXMgdGhlIGZpcnN0IGFyZyB0b1xuLy8gdGhlIHRvcCBmdW5jdGlvbi5cblxuLy8gaWYgdGhlIG1vZHVsZSBoYXMgbm8gZGVwZW5kZW5jaWVzLCB0aGUgYWJvdmUgcGF0dGVybiBjYW4gYmUgc2ltcGxpZmllZCB0b1xuKCBmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gICAgaWYoIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICB2YXIgS2luZXRpY0pTID0gZmFjdG9yeSgpO1xuICAgICAgICAvLyBydW50aW1lLWNoZWNrIGZvciBicm93c2VyaWZ5XG4gICAgICAgIGlmKGdsb2JhbC53aW5kb3cgPT09IGdsb2JhbCkge1xuICAgICAgICAgICAgS2luZXRpYy5kb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICAgICAgICAgIEtpbmV0aWMud2luZG93ID0gZ2xvYmFsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XG4gICAgICAgICAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbWVudHMgdGhhdCBzdXBwb3J0IG1vZHVsZS5leHBvcnRzLFxuICAgICAgICAgICAgLy8gbGlrZSBOb2RlLlxuICAgICAgICAgICAgdmFyIENhbnZhcyA9IHJlcXVpcmUoJ2NhbnZhcycpO1xuICAgICAgICAgICAgdmFyIGpzZG9tID0gcmVxdWlyZSgnanNkb20nKS5qc2RvbTtcblxuICAgICAgICAgICAgS2luZXRpYy5kb2N1bWVudCA9IGpzZG9tKCc8IURPQ1RZUEUgaHRtbD48aHRtbD48aGVhZD48L2hlYWQ+PGJvZHk+PC9ib2R5PjwvaHRtbD4nKTtcbiAgICAgICAgICAgIEtpbmV0aWMud2luZG93ID0gS2luZXRpYy5kb2N1bWVudC5jcmVhdGVXaW5kb3coKTtcbiAgICAgICAgICAgIEtpbmV0aWMud2luZG93LkltYWdlID0gQ2FudmFzLkltYWdlO1xuICAgICAgICAgICAgS2luZXRpYy5fbm9kZUNhbnZhcyA9IENhbnZhcztcbiAgICAgICAgfVxuXG4gICAgICAgIEtpbmV0aWMucm9vdCA9IHJvb3Q7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gS2luZXRpY0pTO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2UgaWYoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShmYWN0b3J5KTtcbiAgICB9XG4gICAgS2luZXRpYy5kb2N1bWVudCA9IGRvY3VtZW50O1xuICAgIEtpbmV0aWMud2luZG93ID0gd2luZG93O1xuICAgIEtpbmV0aWMucm9vdCA9IHJvb3Q7XG5cbn0odGhpcywgZnVuY3Rpb24oKSB7XG5cbiAgICAvLyBKdXN0IHJldHVybiBhIHZhbHVlIHRvIGRlZmluZSB0aGUgbW9kdWxlIGV4cG9ydC5cbiAgICAvLyBUaGlzIGV4YW1wbGUgcmV0dXJucyBhbiBvYmplY3QsIGJ1dCB0aGUgbW9kdWxlXG4gICAgLy8gY2FuIHJldHVybiBhIGZ1bmN0aW9uIGFzIHRoZSBleHBvcnRlZCB2YWx1ZS5cbiAgICByZXR1cm4gS2luZXRpYztcbn0pKTtcbjsoZnVuY3Rpb24oKSB7XG4gICAgLyoqXG4gICAgICogQ29sbGVjdGlvbiBjb25zdHJ1Y3Rvci4gIENvbGxlY3Rpb24gZXh0ZW5kc1xuICAgICAqICBBcnJheS4gIFRoaXMgY2xhc3MgaXMgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHtAbGluayBLaW5ldGljLkNvbnRhaW5lciNnZXR9XG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgKi9cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyksIGxlbmd0aCA9IGFyZ3MubGVuZ3RoLCBpID0gMDtcblxuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgZm9yKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzW2ldID0gYXJnc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5wcm90b3R5cGUgPSBbXTtcbiAgICAvKipcbiAgICAgKiBpdGVyYXRlIHRocm91Z2ggbm9kZSBhcnJheSBhbmQgcnVuIGEgZnVuY3Rpb24gZm9yIGVhY2ggbm9kZS5cbiAgICAgKiAgVGhlIG5vZGUgYW5kIGluZGV4IGlzIHBhc3NlZCBpbnRvIHRoZSBmdW5jdGlvblxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db2xsZWN0aW9uLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBhbGwgbm9kZXMgd2l0aCBuYW1lIGZvbyBpbnNpZGUgbGF5ZXIsIGFuZCBzZXQgeCB0byAxMCBmb3IgZWFjaFxuICAgICAqIGxheWVyLmdldCgnLmZvbycpLmVhY2goZnVuY3Rpb24oc2hhcGUsIG4pIHtcbiAgICAgKiAgIHNoYXBlLnNldFgoMTApO1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5wcm90b3R5cGUuZWFjaCA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgICAgZm9yKHZhciBuID0gMDsgbiA8IHRoaXMubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgIGZ1bmModGhpc1tuXSwgbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGNvbnZlcnQgY29sbGVjdGlvbiBpbnRvIGFuIGFycmF5XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbGxlY3Rpb24ucHJvdG90eXBlXG4gICAgICovXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcnIgPSBbXSxcbiAgICAgICAgICAgIGxlbiA9IHRoaXMubGVuZ3RoLFxuICAgICAgICAgICAgbjtcblxuICAgICAgICBmb3IobiA9IDA7IG4gPCBsZW47IG4rKykge1xuICAgICAgICAgICAgYXJyLnB1c2godGhpc1tuXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGNvbnZlcnQgYXJyYXkgaW50byBhIGNvbGxlY3Rpb25cbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyclxuICAgICAqL1xuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi50b0NvbGxlY3Rpb24gPSBmdW5jdGlvbihhcnIpIHtcbiAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBuZXcgS2luZXRpYy5Db2xsZWN0aW9uKCksXG4gICAgICAgICAgICBsZW4gPSBhcnIubGVuZ3RoLFxuICAgICAgICAgICAgbjtcblxuICAgICAgICBmb3IobiA9IDA7IG4gPCBsZW47IG4rKykge1xuICAgICAgICAgICAgY29sbGVjdGlvbi5wdXNoKGFycltuXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfTtcblxuICAgIC8vIG1hcCBvbmUgbWV0aG9kIGJ5IGl0J3MgbmFtZVxuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5fbWFwTWV0aG9kID0gZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICBLaW5ldGljLkNvbGxlY3Rpb24ucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgaTtcblxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXNbaV1bbWV0aG9kTmFtZV0uYXBwbHkodGhpc1tpXSwgYXJncyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyA9IGZ1bmN0aW9uKGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHZhciBwcm90ID0gY29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgICAgICBmb3IodmFyIG1ldGhvZE5hbWUgaW4gcHJvdCkge1xuICAgICAgICAgICAgS2luZXRpYy5Db2xsZWN0aW9uLl9tYXBNZXRob2QobWV0aG9kTmFtZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLypcbiAgICAqIExhc3QgdXBkYXRlZCBOb3ZlbWJlciAyMDExXG4gICAgKiBCeSBTaW1vbiBTYXJyaXNcbiAgICAqIHd3dy5zaW1vbnNhcnJpcy5jb21cbiAgICAqIHNhcnJpc0BhY20ub3JnXG4gICAgKlxuICAgICogRnJlZSB0byB1c2UgYW5kIGRpc3RyaWJ1dGUgYXQgd2lsbFxuICAgICogU28gbG9uZyBhcyB5b3UgYXJlIG5pY2UgdG8gcGVvcGxlLCBldGNcbiAgICAqL1xuXG4gICAgLypcbiAgICAqIFRoZSB1c2FnZSBvZiB0aGlzIGNsYXNzIHdhcyBpbnNwaXJlZCBieSBzb21lIG9mIHRoZSB3b3JrIGRvbmUgYnkgYSBmb3JrZWRcbiAgICAqIHByb2plY3QsIEtpbmV0aWNKUy1FeHQgYnkgV2FwcHdvcmtzLCB3aGljaCBpcyBiYXNlZCBvbiBTaW1vbidzIFRyYW5zZm9ybVxuICAgICogY2xhc3MuICBNb2RpZmllZCBieSBFcmljIFJvd2VsbFxuICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm0gY29uc3RydWN0b3JcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbbV0gT3B0aW9uYWwgc2l4LWVsZW1lbnQgbWF0cml4XG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgKi9cbiAgICBLaW5ldGljLlRyYW5zZm9ybSA9IGZ1bmN0aW9uKG0pIHtcbiAgICAgICAgdGhpcy5tID0gKG0gJiYgbS5zbGljZSgpKSB8fCBbMSwgMCwgMCwgMSwgMCwgMF07XG4gICAgfTtcblxuICAgIEtpbmV0aWMuVHJhbnNmb3JtLnByb3RvdHlwZSA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvcHkgS2luZXRpYy5UcmFuc2Zvcm0gb2JqZWN0XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVHJhbnNmb3JtLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5UcmFuc2Zvcm19XG4gICAgICAgICAqL1xuICAgICAgICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgS2luZXRpYy5UcmFuc2Zvcm0odGhpcy5tKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyYW5zZm9ybSBwb2ludFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRyYW5zZm9ybS5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50IDJEIHBvaW50KHgsIHkpXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IDJEIHBvaW50KHgsIHkpXG4gICAgICAgICAqL1xuICAgICAgICBwb2ludDogZnVuY3Rpb24ocG9pbnQpIHtcbiAgICAgICAgICAgIHZhciBtID0gdGhpcy5tO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB4OiBtWzBdICogcG9pbnQueCArIG1bMl0gKiBwb2ludC55ICsgbVs0XSxcbiAgICAgICAgICAgICAgICB5OiBtWzFdICogcG9pbnQueCArIG1bM10gKiBwb2ludC55ICsgbVs1XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcGx5IHRyYW5zbGF0aW9uXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVHJhbnNmb3JtLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5UcmFuc2Zvcm19XG4gICAgICAgICAqL1xuICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICAgIHRoaXMubVs0XSArPSB0aGlzLm1bMF0gKiB4ICsgdGhpcy5tWzJdICogeTtcbiAgICAgICAgICAgIHRoaXMubVs1XSArPSB0aGlzLm1bMV0gKiB4ICsgdGhpcy5tWzNdICogeTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQXBwbHkgc2NhbGVcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UcmFuc2Zvcm0ucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzeFxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3lcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuVHJhbnNmb3JtfVxuICAgICAgICAgKi9cbiAgICAgICAgc2NhbGU6IGZ1bmN0aW9uKHN4LCBzeSkge1xuICAgICAgICAgICAgdGhpcy5tWzBdICo9IHN4O1xuICAgICAgICAgICAgdGhpcy5tWzFdICo9IHN4O1xuICAgICAgICAgICAgdGhpcy5tWzJdICo9IHN5O1xuICAgICAgICAgICAgdGhpcy5tWzNdICo9IHN5O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHBseSByb3RhdGlvblxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRyYW5zZm9ybS5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZCAgQW5nbGUgaW4gcmFkaWFuc1xuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5UcmFuc2Zvcm19XG4gICAgICAgICAqL1xuICAgICAgICByb3RhdGU6IGZ1bmN0aW9uKHJhZCkge1xuICAgICAgICAgICAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xuICAgICAgICAgICAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICAgICAgICAgICAgdmFyIG0xMSA9IHRoaXMubVswXSAqIGMgKyB0aGlzLm1bMl0gKiBzO1xuICAgICAgICAgICAgdmFyIG0xMiA9IHRoaXMubVsxXSAqIGMgKyB0aGlzLm1bM10gKiBzO1xuICAgICAgICAgICAgdmFyIG0yMSA9IHRoaXMubVswXSAqIC1zICsgdGhpcy5tWzJdICogYztcbiAgICAgICAgICAgIHZhciBtMjIgPSB0aGlzLm1bMV0gKiAtcyArIHRoaXMubVszXSAqIGM7XG4gICAgICAgICAgICB0aGlzLm1bMF0gPSBtMTE7XG4gICAgICAgICAgICB0aGlzLm1bMV0gPSBtMTI7XG4gICAgICAgICAgICB0aGlzLm1bMl0gPSBtMjE7XG4gICAgICAgICAgICB0aGlzLm1bM10gPSBtMjI7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIHRyYW5zbGF0aW9uXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVHJhbnNmb3JtLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSAyRCBwb2ludCh4LCB5KVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0VHJhbnNsYXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB4OiB0aGlzLm1bNF0sXG4gICAgICAgICAgICAgICAgeTogdGhpcy5tWzVdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQXBwbHkgc2tld1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRyYW5zZm9ybS5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN4XG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzeVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5UcmFuc2Zvcm19XG4gICAgICAgICAqL1xuICAgICAgICBza2V3OiBmdW5jdGlvbihzeCwgc3kpIHtcbiAgICAgICAgICAgIHZhciBtMTEgPSB0aGlzLm1bMF0gKyB0aGlzLm1bMl0gKiBzeTtcbiAgICAgICAgICAgIHZhciBtMTIgPSB0aGlzLm1bMV0gKyB0aGlzLm1bM10gKiBzeTtcbiAgICAgICAgICAgIHZhciBtMjEgPSB0aGlzLm1bMl0gKyB0aGlzLm1bMF0gKiBzeDtcbiAgICAgICAgICAgIHZhciBtMjIgPSB0aGlzLm1bM10gKyB0aGlzLm1bMV0gKiBzeDtcbiAgICAgICAgICAgIHRoaXMubVswXSA9IG0xMTtcbiAgICAgICAgICAgIHRoaXMubVsxXSA9IG0xMjtcbiAgICAgICAgICAgIHRoaXMubVsyXSA9IG0yMTtcbiAgICAgICAgICAgIHRoaXMubVszXSA9IG0yMjtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyYW5zZm9ybSBtdWx0aXBsaWNhdGlvblxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRyYW5zZm9ybS5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtLaW5ldGljLlRyYW5zZm9ybX0gbWF0cml4XG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLlRyYW5zZm9ybX1cbiAgICAgICAgICovXG4gICAgICAgIG11bHRpcGx5OiBmdW5jdGlvbihtYXRyaXgpIHtcbiAgICAgICAgICAgIHZhciBtMTEgPSB0aGlzLm1bMF0gKiBtYXRyaXgubVswXSArIHRoaXMubVsyXSAqIG1hdHJpeC5tWzFdO1xuICAgICAgICAgICAgdmFyIG0xMiA9IHRoaXMubVsxXSAqIG1hdHJpeC5tWzBdICsgdGhpcy5tWzNdICogbWF0cml4Lm1bMV07XG5cbiAgICAgICAgICAgIHZhciBtMjEgPSB0aGlzLm1bMF0gKiBtYXRyaXgubVsyXSArIHRoaXMubVsyXSAqIG1hdHJpeC5tWzNdO1xuICAgICAgICAgICAgdmFyIG0yMiA9IHRoaXMubVsxXSAqIG1hdHJpeC5tWzJdICsgdGhpcy5tWzNdICogbWF0cml4Lm1bM107XG5cbiAgICAgICAgICAgIHZhciBkeCA9IHRoaXMubVswXSAqIG1hdHJpeC5tWzRdICsgdGhpcy5tWzJdICogbWF0cml4Lm1bNV0gKyB0aGlzLm1bNF07XG4gICAgICAgICAgICB2YXIgZHkgPSB0aGlzLm1bMV0gKiBtYXRyaXgubVs0XSArIHRoaXMubVszXSAqIG1hdHJpeC5tWzVdICsgdGhpcy5tWzVdO1xuXG4gICAgICAgICAgICB0aGlzLm1bMF0gPSBtMTE7XG4gICAgICAgICAgICB0aGlzLm1bMV0gPSBtMTI7XG4gICAgICAgICAgICB0aGlzLm1bMl0gPSBtMjE7XG4gICAgICAgICAgICB0aGlzLm1bM10gPSBtMjI7XG4gICAgICAgICAgICB0aGlzLm1bNF0gPSBkeDtcbiAgICAgICAgICAgIHRoaXMubVs1XSA9IGR5O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnZlcnQgdGhlIG1hdHJpeFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRyYW5zZm9ybS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuVHJhbnNmb3JtfVxuICAgICAgICAgKi9cbiAgICAgICAgaW52ZXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkID0gMSAvICh0aGlzLm1bMF0gKiB0aGlzLm1bM10gLSB0aGlzLm1bMV0gKiB0aGlzLm1bMl0pO1xuICAgICAgICAgICAgdmFyIG0wID0gdGhpcy5tWzNdICogZDtcbiAgICAgICAgICAgIHZhciBtMSA9IC10aGlzLm1bMV0gKiBkO1xuICAgICAgICAgICAgdmFyIG0yID0gLXRoaXMubVsyXSAqIGQ7XG4gICAgICAgICAgICB2YXIgbTMgPSB0aGlzLm1bMF0gKiBkO1xuICAgICAgICAgICAgdmFyIG00ID0gZCAqICh0aGlzLm1bMl0gKiB0aGlzLm1bNV0gLSB0aGlzLm1bM10gKiB0aGlzLm1bNF0pO1xuICAgICAgICAgICAgdmFyIG01ID0gZCAqICh0aGlzLm1bMV0gKiB0aGlzLm1bNF0gLSB0aGlzLm1bMF0gKiB0aGlzLm1bNV0pO1xuICAgICAgICAgICAgdGhpcy5tWzBdID0gbTA7XG4gICAgICAgICAgICB0aGlzLm1bMV0gPSBtMTtcbiAgICAgICAgICAgIHRoaXMubVsyXSA9IG0yO1xuICAgICAgICAgICAgdGhpcy5tWzNdID0gbTM7XG4gICAgICAgICAgICB0aGlzLm1bNF0gPSBtNDtcbiAgICAgICAgICAgIHRoaXMubVs1XSA9IG01O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiByZXR1cm4gbWF0cml4XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVHJhbnNmb3JtLnByb3RvdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TWF0cml4OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXQgdG8gYWJzb2x1dGUgcG9zaXRpb24gdmlhIHRyYW5zbGF0aW9uXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVHJhbnNmb3JtLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5UcmFuc2Zvcm19XG4gICAgICAgICAqIEBhdXRob3IgZXJpY2Ryb3dlbGxcbiAgICAgICAgICovXG4gICAgICAgIHNldEFic29sdXRlUG9zaXRpb246IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICAgIHZhciBtMCA9IHRoaXMubVswXSxcbiAgICAgICAgICAgICAgICBtMSA9IHRoaXMubVsxXSxcbiAgICAgICAgICAgICAgICBtMiA9IHRoaXMubVsyXSxcbiAgICAgICAgICAgICAgICBtMyA9IHRoaXMubVszXSxcbiAgICAgICAgICAgICAgICBtNCA9IHRoaXMubVs0XSxcbiAgICAgICAgICAgICAgICBtNSA9IHRoaXMubVs1XSxcbiAgICAgICAgICAgICAgICB5dCA9ICgobTAgKiAoeSAtIG01KSkgLSAobTEgKiAoeCAtIG00KSkpIC8gKChtMCAqIG0zKSAtIChtMSAqIG0yKSksXG4gICAgICAgICAgICAgICAgeHQgPSAoeCAtIG00IC0gKG0yICogeXQpKSAvIG0wO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGUoeHQsIHl0KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBDT05TVEFOVFNcbiAgICB2YXIgQ09OVEVYVF8yRCA9ICcyZCcsXG4gICAgICAgIE9CSkVDVF9BUlJBWSA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICAgIE9CSkVDVF9OVU1CRVIgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgICAgT0JKRUNUX1NUUklORyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgICAgICBQSV9PVkVSX0RFRzE4MCA9IE1hdGguUEkgLyAxODAsXG4gICAgICAgIERFRzE4MF9PVkVSX1BJID0gMTgwIC8gTWF0aC5QSSxcbiAgICAgICAgSEFTSCA9ICcjJyxcbiAgICAgICAgRU1QVFlfU1RSSU5HID0gJycsXG4gICAgICAgIFpFUk8gPSAnMCcsXG4gICAgICAgIEtJTkVUSUNfV0FSTklORyA9ICdLaW5ldGljIHdhcm5pbmc6ICcsXG4gICAgICAgIEtJTkVUSUNfRVJST1IgPSAnS2luZXRpYyBlcnJvcjogJyxcbiAgICAgICAgUkdCX1BBUkVOID0gJ3JnYignLFxuICAgICAgICBDT0xPUlMgPSB7XG4gICAgICAgICAgICBhcXVhOiBbMCwyNTUsMjU1XSxcbiAgICAgICAgICAgIGxpbWU6IFswLDI1NSwwXSxcbiAgICAgICAgICAgIHNpbHZlcjogWzE5MiwxOTIsMTkyXSxcbiAgICAgICAgICAgIGJsYWNrOiBbMCwwLDBdLFxuICAgICAgICAgICAgbWFyb29uOiBbMTI4LDAsMF0sXG4gICAgICAgICAgICB0ZWFsOiBbMCwxMjgsMTI4XSxcbiAgICAgICAgICAgIGJsdWU6IFswLDAsMjU1XSxcbiAgICAgICAgICAgIG5hdnk6IFswLDAsMTI4XSxcbiAgICAgICAgICAgIHdoaXRlOiBbMjU1LDI1NSwyNTVdLFxuICAgICAgICAgICAgZnVjaHNpYTogWzI1NSwwLDI1NV0sXG4gICAgICAgICAgICBvbGl2ZTpbMTI4LDEyOCwwXSxcbiAgICAgICAgICAgIHllbGxvdzogWzI1NSwyNTUsMF0sXG4gICAgICAgICAgICBvcmFuZ2U6IFsyNTUsMTY1LDBdLFxuICAgICAgICAgICAgZ3JheTogWzEyOCwxMjgsMTI4XSxcbiAgICAgICAgICAgIHB1cnBsZTogWzEyOCwwLDEyOF0sXG4gICAgICAgICAgICBncmVlbjogWzAsMTI4LDBdLFxuICAgICAgICAgICAgcmVkOiBbMjU1LDAsMF0sXG4gICAgICAgICAgICBwaW5rOiBbMjU1LDE5MiwyMDNdLFxuICAgICAgICAgICAgY3lhbjogWzAsMjU1LDI1NV0sXG4gICAgICAgICAgICB0cmFuc3BhcmVudDogWzI1NSwyNTUsMjU1LDBdXG4gICAgICAgIH0sXG5cbiAgICAgICAgUkdCX1JFR0VYID0gL3JnYlxcKChcXGR7MSwzfSksKFxcZHsxLDN9KSwoXFxkezEsM30pXFwpLztcblxuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2UgVXRpbFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICovXG4gICAgS2luZXRpYy5VdGlsID0ge1xuICAgICAgICAvKlxuICAgICAgICAgKiBjaGVycnktcGlja2VkIHV0aWxpdGllcyBmcm9tIHVuZGVyc2NvcmUuanNcbiAgICAgICAgICovXG4gICAgICAgIF9pc0VsZW1lbnQ6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuICEhKG9iaiAmJiBvYmoubm9kZVR5cGUgPT0gMSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9pc0Z1bmN0aW9uOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIHJldHVybiAhIShvYmogJiYgb2JqLmNvbnN0cnVjdG9yICYmIG9iai5jYWxsICYmIG9iai5hcHBseSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9pc09iamVjdDogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gKCEhb2JqICYmIG9iai5jb25zdHJ1Y3RvciA9PSBPYmplY3QpO1xuICAgICAgICB9LFxuICAgICAgICBfaXNBcnJheTogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT0gT0JKRUNUX0FSUkFZO1xuICAgICAgICB9LFxuICAgICAgICBfaXNOdW1iZXI6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09IE9CSkVDVF9OVU1CRVI7XG4gICAgICAgIH0sXG4gICAgICAgIF9pc1N0cmluZzogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT0gT0JKRUNUX1NUUklORztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCB3aGVuIGludm9rZWQsIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgYXQgbW9zdCBvbmNlXG4gICAgICAgIC8vIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLiBOb3JtYWxseSwgdGhlIHRocm90dGxlZCBmdW5jdGlvbiB3aWxsIHJ1blxuICAgICAgICAvLyBhcyBtdWNoIGFzIGl0IGNhbiwgd2l0aG91dCBldmVyIGdvaW5nIG1vcmUgdGhhbiBvbmNlIHBlciBgd2FpdGAgZHVyYXRpb247XG4gICAgICAgIC8vIGJ1dCBpZiB5b3UnZCBsaWtlIHRvIGRpc2FibGUgdGhlIGV4ZWN1dGlvbiBvbiB0aGUgbGVhZGluZyBlZGdlLCBwYXNzXG4gICAgICAgIC8vIGB7bGVhZGluZzogZmFsc2V9YC4gVG8gZGlzYWJsZSBleGVjdXRpb24gb24gdGhlIHRyYWlsaW5nIGVkZ2UsIGRpdHRvLlxuICAgICAgICBfdGhyb3R0bGU6IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIG9wdHMpIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0LCBhcmdzLCByZXN1bHQ7XG4gICAgICAgICAgICB2YXIgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICB2YXIgcHJldmlvdXMgPSAwO1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9O1xuICAgICAgICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXMgPSBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlID8gMCA6IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFwcmV2aW91cyAmJiBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzID0gbm93O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7XG4gICAgICAgICAgICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgICBpZiAocmVtYWluaW5nIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgcHJldmlvdXMgPSBub3c7XG4gICAgICAgICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRpbWVvdXQgJiYgb3B0aW9ucy50cmFpbGluZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLypcbiAgICAgICAgICogb3RoZXIgdXRpbHNcbiAgICAgICAgICovXG4gICAgICAgIF9oYXNNZXRob2RzOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIHZhciBuYW1lcyA9IFtdLFxuICAgICAgICAgICAgICAgIGtleTtcblxuICAgICAgICAgICAgZm9yKGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLl9pc0Z1bmN0aW9uKG9ialtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICBuYW1lcy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5hbWVzLmxlbmd0aCA+IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZUNhbnZhc0VsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNhbnZhcyA9IEtpbmV0aWMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICAvLyBvbiBzb21lIGVudmlyb25tZW50cyBjYW52YXMuc3R5bGUgaXMgcmVhZG9ubHlcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2FudmFzLnN0eWxlID0gY2FudmFzLnN0eWxlIHx8IHt9O1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNhbnZhcztcbiAgICAgICAgfSxcbiAgICAgICAgaXNCcm93c2VyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIGV4cG9ydHMgIT09ICAnb2JqZWN0Jyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9pc0luRG9jdW1lbnQ6IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICB3aGlsZShlbCA9IGVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBpZihlbCA9PSBLaW5ldGljLmRvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NpbXBsaWZ5QXJyYXk6IGZ1bmN0aW9uKGFycikge1xuICAgICAgICAgICAgdmFyIHJldEFyciA9IFtdLFxuICAgICAgICAgICAgICAgIGxlbiA9IGFyci5sZW5ndGgsXG4gICAgICAgICAgICAgICAgdXRpbCA9IEtpbmV0aWMuVXRpbCxcbiAgICAgICAgICAgICAgICBuLCB2YWw7XG5cbiAgICAgICAgICAgIGZvciAobj0wOyBuPGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgdmFsID0gYXJyW25dO1xuICAgICAgICAgICAgICAgIGlmICh1dGlsLl9pc051bWJlcih2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IE1hdGgucm91bmQodmFsICogMTAwMCkgLyAxMDAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghdXRpbC5faXNTdHJpbmcodmFsKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWwgPSB2YWwudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXRBcnIucHVzaCh2YWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmV0QXJyO1xuICAgICAgICB9LFxuICAgICAgICAvKlxuICAgICAgICAgKiBhcmcgY2FuIGJlIGFuIGltYWdlIG9iamVjdCBvciBpbWFnZSBkYXRhXG4gICAgICAgICAqL1xuICAgICAgICBfZ2V0SW1hZ2U6IGZ1bmN0aW9uKGFyZywgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBpbWFnZU9iaiwgY2FudmFzO1xuXG4gICAgICAgICAgICAvLyBpZiBhcmcgaXMgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmKCFhcmcpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgYXJnIGlzIGFscmVhZHkgYW4gaW1hZ2Ugb2JqZWN0XG4gICAgICAgICAgICBlbHNlIGlmKHRoaXMuX2lzRWxlbWVudChhcmcpKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soYXJnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgYXJnIGlzIGEgc3RyaW5nLCB0aGVuIGl0J3MgYSBkYXRhIHVybFxuICAgICAgICAgICAgZWxzZSBpZih0aGlzLl9pc1N0cmluZyhhcmcpKSB7XG4gICAgICAgICAgICAgICAgaW1hZ2VPYmogPSBuZXcgS2luZXRpYy53aW5kb3cuSW1hZ2UoKTtcbiAgICAgICAgICAgICAgICBpbWFnZU9iai5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soaW1hZ2VPYmopO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaW1hZ2VPYmouc3JjID0gYXJnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL2lmIGFyZyBpcyBhbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgZGF0YSBwcm9wZXJ0eSwgaXQncyBhbiBpbWFnZSBvYmplY3RcbiAgICAgICAgICAgIGVsc2UgaWYoYXJnLmRhdGEpIHtcbiAgICAgICAgICAgICAgICBjYW52YXMgPSBLaW5ldGljLlV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGFyZy53aWR0aDtcbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gYXJnLmhlaWdodDtcbiAgICAgICAgICAgICAgICB2YXIgX2NvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChDT05URVhUXzJEKTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5wdXRJbWFnZURhdGEoYXJnLCAwLCAwKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZXRJbWFnZShjYW52YXMudG9EYXRhVVJMKCksIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZ2V0UkdCQVN0cmluZzogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICB2YXIgcmVkID0gb2JqLnJlZCB8fCAwLFxuICAgICAgICAgICAgICAgIGdyZWVuID0gb2JqLmdyZWVuIHx8IDAsXG4gICAgICAgICAgICAgICAgYmx1ZSA9IG9iai5ibHVlIHx8IDAsXG4gICAgICAgICAgICAgICAgYWxwaGEgPSBvYmouYWxwaGEgfHwgMTtcblxuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAncmdiYSgnLFxuICAgICAgICAgICAgICAgIHJlZCxcbiAgICAgICAgICAgICAgICAnLCcsXG4gICAgICAgICAgICAgICAgZ3JlZW4sXG4gICAgICAgICAgICAgICAgJywnLFxuICAgICAgICAgICAgICAgIGJsdWUsXG4gICAgICAgICAgICAgICAgJywnLFxuICAgICAgICAgICAgICAgIGFscGhhLFxuICAgICAgICAgICAgICAgICcpJ1xuICAgICAgICAgICAgXS5qb2luKEVNUFRZX1NUUklORyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9yZ2JUb0hleDogZnVuY3Rpb24ociwgZywgYikge1xuICAgICAgICAgICAgcmV0dXJuICgoMSA8PCAyNCkgKyAociA8PCAxNikgKyAoZyA8PCA4KSArIGIpLnRvU3RyaW5nKDE2KS5zbGljZSgxKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2hleFRvUmdiOiBmdW5jdGlvbihoZXgpIHtcbiAgICAgICAgICAgIGhleCA9IGhleC5yZXBsYWNlKEhBU0gsIEVNUFRZX1NUUklORyk7XG4gICAgICAgICAgICB2YXIgYmlnaW50ID0gcGFyc2VJbnQoaGV4LCAxNik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHI6IChiaWdpbnQgPj4gMTYpICYgMjU1LFxuICAgICAgICAgICAgICAgIGc6IChiaWdpbnQgPj4gOCkgJiAyNTUsXG4gICAgICAgICAgICAgICAgYjogYmlnaW50ICYgMjU1XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogcmV0dXJuIHJhbmRvbSBoZXggY29sb3JcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5VdGlsLnByb3RvdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0UmFuZG9tQ29sb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHJhbmRDb2xvciA9IChNYXRoLnJhbmRvbSgpICogMHhGRkZGRkYgPDwgMCkudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgd2hpbGUgKHJhbmRDb2xvci5sZW5ndGggPCA2KSB7XG4gICAgICAgICAgICAgICAgcmFuZENvbG9yID0gWkVSTyArIHJhbmRDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBIQVNIICsgcmFuZENvbG9yO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogcmV0dXJuIHZhbHVlIHdpdGggZGVmYXVsdCBmYWxsYmFja1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlV0aWwucHJvdG90eXBlXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKHZhbCwgZGVmKSB7XG4gICAgICAgICAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCBSR0IgY29tcG9uZW50cyBvZiBhIGNvbG9yXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVXRpbC5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbG9yXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIC8vIGVhY2ggb2YgdGhlIGZvbGxvd2luZyBleGFtcGxlcyByZXR1cm4ge3I6MCwgZzowLCBiOjI1NX1cbiAgICAgICAgICogdmFyIHJnYiA9IEtpbmV0aWMuVXRpbC5nZXRSR0IoJ2JsdWUnKTtcbiAgICAgICAgICogdmFyIHJnYiA9IEtpbmV0aWMuVXRpbC5nZXRSR0IoJyMwMDAwZmYnKTtcbiAgICAgICAgICogdmFyIHJnYiA9IEtpbmV0aWMuVXRpbC5nZXRSR0IoJ3JnYigwLDAsMjU1KScpO1xuICAgICAgICAgKi9cbiAgICAgICAgZ2V0UkdCOiBmdW5jdGlvbihjb2xvcikge1xuICAgICAgICAgICAgdmFyIHJnYjtcbiAgICAgICAgICAgIC8vIGNvbG9yIHN0cmluZ1xuICAgICAgICAgICAgaWYgKGNvbG9yIGluIENPTE9SUykge1xuICAgICAgICAgICAgICAgIHJnYiA9IENPTE9SU1tjb2xvcl07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcjogcmdiWzBdLFxuICAgICAgICAgICAgICAgICAgICBnOiByZ2JbMV0sXG4gICAgICAgICAgICAgICAgICAgIGI6IHJnYlsyXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBoZXhcbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbG9yWzBdID09PSBIQVNIKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hleFRvUmdiKGNvbG9yLnN1YnN0cmluZygxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZ2Igc3RyaW5nXG4gICAgICAgICAgICBlbHNlIGlmIChjb2xvci5zdWJzdHIoMCwgNCkgPT09IFJHQl9QQVJFTikge1xuICAgICAgICAgICAgICAgIHJnYiA9IFJHQl9SRUdFWC5leGVjKGNvbG9yLnJlcGxhY2UoLyAvZywnJykpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHI6IHBhcnNlSW50KHJnYlsxXSwgMTApLFxuICAgICAgICAgICAgICAgICAgICBnOiBwYXJzZUludChyZ2JbMl0sIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgYjogcGFyc2VJbnQocmdiWzNdLCAxMClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZGVmYXVsdFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcjogMCxcbiAgICAgICAgICAgICAgICAgICAgZzogMCxcbiAgICAgICAgICAgICAgICAgICAgYjogMFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIG8xIHRha2VzIHByZWNlZGVuY2Ugb3ZlciBvMlxuICAgICAgICBfbWVyZ2U6IGZ1bmN0aW9uKG8xLCBvMikge1xuICAgICAgICAgICAgdmFyIHJldE9iaiA9IHRoaXMuX2Nsb25lKG8yKTtcbiAgICAgICAgICAgIGZvcih2YXIga2V5IGluIG8xKSB7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5faXNPYmplY3QobzFba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0T2JqW2tleV0gPSB0aGlzLl9tZXJnZShvMVtrZXldLCByZXRPYmpba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXRPYmpba2V5XSA9IG8xW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldE9iajtcbiAgICAgICAgfSxcbiAgICAgICAgY2xvbmVPYmplY3Q6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgdmFyIHJldE9iaiA9IHt9O1xuICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5faXNPYmplY3Qob2JqW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldE9ialtrZXldID0gdGhpcy5jbG9uZU9iamVjdChvYmpba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2lzQXJyYXkob2JqW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldE9ialtrZXldID0gdGhpcy5jbG9uZUFycmF5KG9ialtrZXldKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXRPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXRPYmo7XG4gICAgICAgIH0sXG4gICAgICAgIGNsb25lQXJyYXk6IGZ1bmN0aW9uKGFycikge1xuICAgICAgICAgICAgcmV0dXJuIGFyci5zbGljZSgwKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2RlZ1RvUmFkOiBmdW5jdGlvbihkZWcpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWcgKiBQSV9PVkVSX0RFRzE4MDtcbiAgICAgICAgfSxcbiAgICAgICAgX3JhZFRvRGVnOiBmdW5jdGlvbihyYWQpIHtcbiAgICAgICAgICAgIHJldHVybiByYWQgKiBERUcxODBfT1ZFUl9QSTtcbiAgICAgICAgfSxcbiAgICAgICAgX2NhcGl0YWxpemU6IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICAgICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEtJTkVUSUNfRVJST1IgKyBzdHIpO1xuICAgICAgICB9LFxuICAgICAgICB3YXJuOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBJRTkgb24gV2luZG93czcgNjRiaXQgd2lsbCB0aHJvdyBhIEpTIGVycm9yXG4gICAgICAgICAgICAgKiBpZiB3ZSBkb24ndCB1c2Ugd2luZG93LmNvbnNvbGUgaW4gdGhlIGNvbmRpdGlvbmFsXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmKEtpbmV0aWMucm9vdC5jb25zb2xlICYmIGNvbnNvbGUud2FybiAmJiBLaW5ldGljLnNob3dXYXJuaW5ncykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihLSU5FVElDX1dBUk5JTkcgKyBzdHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBleHRlbmQ6IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjdG9yKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTtcbiAgICAgICAgICAgICAgICB2YXIgb2xkX3Byb3RvID0gY2hpbGQucHJvdG90eXBlO1xuICAgICAgICAgICAgICAgIGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG9sZF9wcm90bykge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2xkX3Byb3RvLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnByb3RvdHlwZVtrZXldID0gb2xkX3Byb3RvW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFkZHMgbWV0aG9kcyB0byBhIGNvbnN0cnVjdG9yIHByb3RvdHlwZVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlV0aWwucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtZXRob2RzXG4gICAgICAgICAqL1xuICAgICAgICBhZGRNZXRob2RzOiBmdW5jdGlvbihjb25zdHJ1Y3RvciwgbWV0aG9kcykge1xuICAgICAgICAgICAgdmFyIGtleTtcblxuICAgICAgICAgICAgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yLnByb3RvdHlwZVtrZXldID0gbWV0aG9kc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZ2V0Q29udHJvbFBvaW50czogZnVuY3Rpb24oeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgdCkge1xuICAgICAgICAgICAgdmFyIGQwMSA9IE1hdGguc3FydChNYXRoLnBvdyh4MSAtIHgwLCAyKSArIE1hdGgucG93KHkxIC0geTAsIDIpKSxcbiAgICAgICAgICAgICAgICBkMTIgPSBNYXRoLnNxcnQoTWF0aC5wb3coeDIgLSB4MSwgMikgKyBNYXRoLnBvdyh5MiAtIHkxLCAyKSksXG4gICAgICAgICAgICAgICAgZmEgPSB0ICogZDAxIC8gKGQwMSArIGQxMiksXG4gICAgICAgICAgICAgICAgZmIgPSB0ICogZDEyIC8gKGQwMSArIGQxMiksXG4gICAgICAgICAgICAgICAgcDF4ID0geDEgLSBmYSAqICh4MiAtIHgwKSxcbiAgICAgICAgICAgICAgICBwMXkgPSB5MSAtIGZhICogKHkyIC0geTApLFxuICAgICAgICAgICAgICAgIHAyeCA9IHgxICsgZmIgKiAoeDIgLSB4MCksXG4gICAgICAgICAgICAgICAgcDJ5ID0geTEgKyBmYiAqICh5MiAtIHkwKTtcblxuICAgICAgICAgICAgcmV0dXJuIFtwMXggLHAxeSwgcDJ4LCBwMnldO1xuICAgICAgICB9LFxuICAgICAgICBfZXhwYW5kUG9pbnRzOiBmdW5jdGlvbihwLCB0ZW5zaW9uKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gcC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgYWxsUG9pbnRzID0gW10sXG4gICAgICAgICAgICAgICAgbiwgY3A7XG5cbiAgICAgICAgICAgIGZvciAobj0yOyBuPGxlbi0yOyBuKz0yKSB7XG4gICAgICAgICAgICAgICAgY3AgPSBLaW5ldGljLlV0aWwuX2dldENvbnRyb2xQb2ludHMocFtuLTJdLCBwW24tMV0sIHBbbl0sIHBbbisxXSwgcFtuKzJdLCBwW24rM10sIHRlbnNpb24pO1xuICAgICAgICAgICAgICAgIGFsbFBvaW50cy5wdXNoKGNwWzBdKTtcbiAgICAgICAgICAgICAgICBhbGxQb2ludHMucHVzaChjcFsxXSk7XG4gICAgICAgICAgICAgICAgYWxsUG9pbnRzLnB1c2gocFtuXSk7XG4gICAgICAgICAgICAgICAgYWxsUG9pbnRzLnB1c2gocFtuKzFdKTtcbiAgICAgICAgICAgICAgICBhbGxQb2ludHMucHVzaChjcFsyXSk7XG4gICAgICAgICAgICAgICAgYWxsUG9pbnRzLnB1c2goY3BbM10pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYWxsUG9pbnRzO1xuICAgICAgICB9LFxuICAgICAgICBfcmVtb3ZlTGFzdExldHRlcjogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyLnN1YnN0cmluZygwLCBzdHIubGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcbjsoZnVuY3Rpb24oKSB7XG4gICAgLy8gY2FsY3VsYXRlIHBpeGVsIHJhdGlvXG4gICAgdmFyIGNhbnZhcyA9IEtpbmV0aWMuVXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCksXG4gICAgICAgIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSxcbiAgICAgICAgLy8gaWYgdXNpbmcgYSBtb2JpbGUgZGV2aWNlLCBjYWxjdWxhdGUgdGhlIHBpeGVsIHJhdGlvLiAgT3RoZXJ3aXNlLCBqdXN0IHVzZVxuICAgICAgICAvLyAxLiAgRm9yIGRlc2t0b3AgYnJvd3NlcnMsIGlmIHRoZSB1c2VyIGhhcyB6b29tIGVuYWJsZWQsIGl0IGFmZmVjdHMgdGhlIHBpeGVsIHJhdGlvXG4gICAgICAgIC8vIGFuZCBjYXVzZXMgYXJ0aWZhY3RzIG9uIHRoZSBjYW52YXMuICBBcyBvZiAwMi8yNi8yMDE0LCB0aGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYSB3YXlcbiAgICAgICAgLy8gdG8gcmVsaWFibHkgY2FsY3VsYXRlIHRoZSBicm93c2VyIHpvb20gZm9yIG1vZGVybiBicm93c2Vycywgd2hpY2ggaXMgd2h5IHdlIGp1c3Qgc2V0XG4gICAgICAgIC8vIHRoZSBwaXhlbCByYXRpbyB0byAxIGZvciBkZXNrdG9wc1xuICAgICAgICBfcGl4ZWxSYXRpbyA9IEtpbmV0aWMuVUEubW9iaWxlID8gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGRldmljZVBpeGVsUmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxLFxuICAgICAgICAgICAgYmFja2luZ1N0b3JlUmF0aW8gPSBjb250ZXh0LndlYmtpdEJhY2tpbmdTdG9yZVBpeGVsUmF0aW9cbiAgICAgICAgICAgICAgICB8fCBjb250ZXh0Lm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW9cbiAgICAgICAgICAgICAgICB8fCBjb250ZXh0Lm1zQmFja2luZ1N0b3JlUGl4ZWxSYXRpb1xuICAgICAgICAgICAgICAgIHx8IGNvbnRleHQub0JhY2tpbmdTdG9yZVBpeGVsUmF0aW9cbiAgICAgICAgICAgICAgICB8fCBjb250ZXh0LmJhY2tpbmdTdG9yZVBpeGVsUmF0aW9cbiAgICAgICAgICAgICAgICB8fCAxO1xuICAgICAgICAgICAgcmV0dXJuIGRldmljZVBpeGVsUmF0aW8gLyBiYWNraW5nU3RvcmVSYXRpbztcbiAgICAgICAgfSkoKSA6IDE7XG5cbiAgICAvKipcbiAgICAgKiBDYW52YXMgUmVuZGVyZXIgY29uc3RydWN0b3JcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29uZmlnLndpZHRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbmZpZy5oZWlnaHRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29uZmlnLnBpeGVsUmF0aW8gS2luZXRpY0pTIGF1dG9tYXRpY2FsbHkgaGFuZGxlcyBwaXhlbCByYXRpbyBhZGp1c3RtZW50cyBpbiBvcmRlciB0byByZW5kZXIgY3Jpc3AgZHJhd2luZ3NcbiAgICAgKiAgb24gYWxsIGRldmljZXMuIE1vc3QgZGVza3RvcHMsIGxvdyBlbmQgdGFibGV0cywgYW5kIGxvdyBlbmQgcGhvbmVzLCBoYXZlIGRldmljZSBwaXhlbCByYXRpb3NcbiAgICAgKiAgb2YgMS4gIFNvbWUgaGlnaCBlbmQgdGFibGV0cyBhbmQgcGhvbmVzLCBsaWtlIGlQaG9uZXMgYW5kIGlQYWRzIChub3QgdGhlIG1pbmkpIGhhdmUgYSBkZXZpY2UgcGl4ZWwgcmF0aW8gXG4gICAgICogIG9mIDIuICBTb21lIE1hY2Jvb2sgUHJvcywgYW5kIGlNYWNzIGFsc28gaGF2ZSBhIGRldmljZSBwaXhlbCByYXRpbyBvZiAyLiAgU29tZSBoaWdoIGVuZCBBbmRyb2lkIGRldmljZXMgaGF2ZSBwaXhlbCBcbiAgICAgKiAgcmF0aW9zIG9mIDIgb3IgMy4gIFNvbWUgYnJvd3NlcnMgbGlrZSBGaXJlZm94IGFsbG93IHlvdSB0byBjb25maWd1cmUgdGhlIHBpeGVsIHJhdGlvIG9mIHRoZSB2aWV3cG9ydC4gIFVubGVzcyBvdGhlcndpc2VcbiAgICAgKiAgc3BlY2lmaWVkLCB0aGUgcGl4ZWwgcmF0aW8gd2lsbCBiZSBkZWZhdWx0ZWQgdG8gdGhlIGFjdHVhbCBkZXZpY2UgcGl4ZWwgcmF0aW8uICBZb3UgY2FuIG92ZXJyaWRlIHRoZSBkZXZpY2UgcGl4ZWxcbiAgICAgKiAgcmF0aW8gZm9yIHNwZWNpYWwgc2l0dWF0aW9ucywgb3IsIGlmIHlvdSBkb24ndCB3YW50IHRoZSBwaXhlbCByYXRpbyB0byBiZSB0YWtlbiBpbnRvIGFjY291bnQsIHlvdSBjYW4gc2V0IGl0IHRvIDEuXG4gICAgICovXG4gICAgS2luZXRpYy5DYW52YXMgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdGhpcy5pbml0KGNvbmZpZyk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuQ2FudmFzLnByb3RvdHlwZSA9IHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICB2YXIgY29uZiA9IGNvbmZpZyB8fCB7fTtcblxuICAgICAgICAgICAgdmFyIHBpeGVsUmF0aW8gPSBjb25mLnBpeGVsUmF0aW8gfHwgS2luZXRpYy5waXhlbFJhdGlvIHx8IF9waXhlbFJhdGlvO1xuXG4gICAgICAgICAgICB0aGlzLnBpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzID0gS2luZXRpYy5VdGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcblxuICAgICAgICAgICAgLy8gc2V0IGlubGluZSBzdHlsZXNcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZS5wYWRkaW5nID0gMDtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZS5tYXJnaW4gPSAwO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzLnN0eWxlLmJvcmRlciA9IDA7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGUuYmFja2dyb3VuZCA9ICd0cmFuc3BhcmVudCc7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzLnN0eWxlLnRvcCA9IDA7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGUubGVmdCA9IDA7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgY2FudmFzIGNvbnRleHRcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5DYW52YXMucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtDYW52YXNDb250ZXh0fSBjb250ZXh0XG4gICAgICAgICAqL1xuICAgICAgICBnZXRDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQ7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgcGl4ZWwgcmF0aW9cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5DYW52YXMucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IHBpeGVsIHJhdGlvXG4gICAgICAgICAqL1xuICAgICAgICBnZXRQaXhlbFJhdGlvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBpeGVsUmF0aW87XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgcGl4ZWwgcmF0aW9cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5DYW52YXMucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwaXhlbFJhdGlvIEtpbmV0aWNKUyBhdXRvbWF0aWNhbGx5IGhhbmRsZXMgcGl4ZWwgcmF0aW8gYWR1c3RtZW50cyBpbiBvcmRlciB0byByZW5kZXIgY3Jpc3AgZHJhd2luZ3MgXG4gICAgICAgICAqICBvbiBhbGwgZGV2aWNlcy4gTW9zdCBkZXNrdG9wcywgbG93IGVuZCB0YWJsZXRzLCBhbmQgbG93IGVuZCBwaG9uZXMsIGhhdmUgZGV2aWNlIHBpeGVsIHJhdGlvc1xuICAgICAgICAgKiAgb2YgMS4gIFNvbWUgaGlnaCBlbmQgdGFibGV0cyBhbmQgcGhvbmVzLCBsaWtlIGlQaG9uZXMgYW5kIGlQYWRzIChub3QgdGhlIG1pbmkpIGhhdmUgYSBkZXZpY2UgcGl4ZWwgcmF0aW8gXG4gICAgICAgICAqICBvZiAyLiAgU29tZSBNYWNib29rIFByb3MsIGFuZCBpTWFjcyBhbHNvIGhhdmUgYSBkZXZpY2UgcGl4ZWwgcmF0aW8gb2YgMi4gIFNvbWUgaGlnaCBlbmQgQW5kcm9pZCBkZXZpY2VzIGhhdmUgcGl4ZWwgXG4gICAgICAgICAqICByYXRpb3Mgb2YgMiBvciAzLiAgU29tZSBicm93c2VycyBsaWtlIEZpcmVmb3ggYWxsb3cgeW91IHRvIGNvbmZpZ3VyZSB0aGUgcGl4ZWwgcmF0aW8gb2YgdGhlIHZpZXdwb3J0LiAgVW5sZXNzIG90aGVyd2lzZVxuICAgICAgICAgKiAgc3BlY2lmaWNlZCwgdGhlIHBpeGVsIHJhdGlvIHdpbGwgYmUgZGVmYXVsdGVkIHRvIHRoZSBhY3R1YWwgZGV2aWNlIHBpeGVsIHJhdGlvLiAgWW91IGNhbiBvdmVycmlkZSB0aGUgZGV2aWNlIHBpeGVsXG4gICAgICAgICAqICByYXRpbyBmb3Igc3BlY2lhbCBzaXR1YXRpb25zLCBvciwgaWYgeW91IGRvbid0IHdhbnQgdGhlIHBpeGVsIHJhdGlvIHRvIGJlIHRha2VuIGludG8gYWNjb3VudCwgeW91IGNhbiBzZXQgaXQgdG8gMS5cbiAgICAgICAgICovXG4gICAgICAgIHNldFBpeGVsUmF0aW86IGZ1bmN0aW9uKHBpeGVsUmF0aW8pIHtcbiAgICAgICAgICAgIHRoaXMucGl4ZWxSYXRpbyA9IHBpeGVsUmF0aW87XG4gICAgICAgICAgICB0aGlzLnNldFNpemUodGhpcy5nZXRXaWR0aCgpLCB0aGlzLmdldEhlaWdodCgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNldCB3aWR0aFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNhbnZhcy5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXG4gICAgICAgICAqL1xuICAgICAgICBzZXRXaWR0aDogZnVuY3Rpb24od2lkdGgpIHtcbiAgICAgICAgICAgIC8vIHRha2UgaW50byBhY2NvdW50IHBpeGVsIHJhdGlvXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5fY2FudmFzLndpZHRoID0gd2lkdGggKiB0aGlzLnBpeGVsUmF0aW87XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXQgaGVpZ2h0XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ2FudmFzLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0XG4gICAgICAgICAqL1xuICAgICAgICBzZXRIZWlnaHQ6IGZ1bmN0aW9uKGhlaWdodCkge1xuICAgICAgICAgICAgLy8gdGFrZSBpbnRvIGFjY291bnQgcGl4ZWwgcmF0aW9cbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5fY2FudmFzLmhlaWdodCA9IGhlaWdodCAqIHRoaXMucGl4ZWxSYXRpbztcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IHdpZHRoXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ2FudmFzLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSB3aWR0aFxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0V2lkdGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2lkdGg7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgaGVpZ2h0XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ2FudmFzLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBoZWlnaHRcbiAgICAgICAgICovXG4gICAgICAgIGdldEhlaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oZWlnaHQ7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXQgc2l6ZVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNhbnZhcy5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHRcbiAgICAgICAgICovXG4gICAgICAgIHNldFNpemU6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0V2lkdGgod2lkdGgpO1xuICAgICAgICAgICAgdGhpcy5zZXRIZWlnaHQoaGVpZ2h0KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRvIGRhdGEgdXJsXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ2FudmFzLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWltZVR5cGVcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHF1YWxpdHkgYmV0d2VlbiAwIGFuZCAxIGZvciBqcGcgbWltZSB0eXBlc1xuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBkYXRhIHVybCBzdHJpbmdcbiAgICAgICAgICovXG4gICAgICAgIHRvRGF0YVVSTDogZnVuY3Rpb24obWltZVR5cGUsIHF1YWxpdHkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBjYWxsIGZhaWxzIChkdWUgdG8gYnJvd3NlciBidWcsIGxpa2UgaW4gRmlyZWZveCAzLjYpLFxuICAgICAgICAgICAgICAgIC8vIHRoZW4gcmV2ZXJ0IHRvIHByZXZpb3VzIG5vLXBhcmFtZXRlciBpbWFnZS9wbmcgYmVoYXZpb3JcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FudmFzLnRvRGF0YVVSTChtaW1lVHlwZSwgcXVhbGl0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaChlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcy50b0RhdGFVUkwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIEtpbmV0aWMuVXRpbC53YXJuKCdVbmFibGUgdG8gZ2V0IGRhdGEgVVJMLiAnICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIEtpbmV0aWMuU2NlbmVDYW52YXMgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdmFyIGNvbmYgPSBjb25maWcgfHwge307XG4gICAgICAgIHZhciB3aWR0aCA9IGNvbmYud2lkdGggfHwgMCxcbiAgICAgICAgICAgIGhlaWdodCA9IGNvbmYuaGVpZ2h0IHx8IDA7XG5cbiAgICAgICAgS2luZXRpYy5DYW52YXMuY2FsbCh0aGlzLCBjb25mKTtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gbmV3IEtpbmV0aWMuU2NlbmVDb250ZXh0KHRoaXMpO1xuICAgICAgICB0aGlzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuU2NlbmVDYW52YXMucHJvdG90eXBlID0ge1xuICAgICAgICBzZXRXaWR0aDogZnVuY3Rpb24od2lkdGgpIHtcbiAgICAgICAgICAgIHZhciBwaXhlbFJhdGlvID0gdGhpcy5waXhlbFJhdGlvLFxuICAgICAgICAgICAgICAgIF9jb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KCkuX2NvbnRleHQ7XG5cbiAgICAgICAgICAgIEtpbmV0aWMuQ2FudmFzLnByb3RvdHlwZS5zZXRXaWR0aC5jYWxsKHRoaXMsIHdpZHRoKTtcbiAgICAgICAgICAgIF9jb250ZXh0LnNjYWxlKHBpeGVsUmF0aW8sIHBpeGVsUmF0aW8pO1xuICAgICAgICB9LFxuICAgICAgICBzZXRIZWlnaHQ6IGZ1bmN0aW9uKGhlaWdodCkge1xuICAgICAgICAgICAgdmFyIHBpeGVsUmF0aW8gPSB0aGlzLnBpeGVsUmF0aW8sXG4gICAgICAgICAgICAgICAgX2NvbnRleHQgPSB0aGlzLmdldENvbnRleHQoKS5fY29udGV4dDtcblxuICAgICAgICAgICAgS2luZXRpYy5DYW52YXMucHJvdG90eXBlLnNldEhlaWdodC5jYWxsKHRoaXMsIGhlaWdodCk7XG4gICAgICAgICAgICBfY29udGV4dC5zY2FsZShwaXhlbFJhdGlvLCBwaXhlbFJhdGlvKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLlNjZW5lQ2FudmFzLCBLaW5ldGljLkNhbnZhcyk7XG5cbiAgICBLaW5ldGljLkhpdENhbnZhcyA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB2YXIgY29uZiA9IGNvbmZpZyB8fCB7fTtcbiAgICAgICAgdmFyIHdpZHRoID0gY29uZi53aWR0aCB8fCAwLFxuICAgICAgICAgICAgaGVpZ2h0ID0gY29uZi5oZWlnaHQgfHwgMDtcbiAgICAgICAgICAgIFxuICAgICAgICBLaW5ldGljLkNhbnZhcy5jYWxsKHRoaXMsIGNvbmYpO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBuZXcgS2luZXRpYy5IaXRDb250ZXh0KHRoaXMpO1xuICAgICAgICB0aGlzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHRoaXMuaGl0Q2FudmFzID0gdHJ1ZTtcbiAgICB9O1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5IaXRDYW52YXMsIEtpbmV0aWMuQ2FudmFzKTtcblxufSkoKTtcbjsoZnVuY3Rpb24oKSB7XG4gICAgdmFyIENPTU1BID0gJywnLFxuICAgICAgICBPUEVOX1BBUkVOID0gJygnLFxuICAgICAgICBDTE9TRV9QQVJFTiA9ICcpJyxcbiAgICAgICAgT1BFTl9QQVJFTl9CUkFDS0VUID0gJyhbJyxcbiAgICAgICAgQ0xPU0VfQlJBQ0tFVF9QQVJFTiA9ICddKScsXG4gICAgICAgIFNFTUlDT0xPTiA9ICc7JyxcbiAgICAgICAgRE9VQkxFX1BBUkVOID0gJygpJyxcbiAgICAgICAgLy8gRU1QVFlfU1RSSU5HID0gJycsXG4gICAgICAgIEVRVUFMUyA9ICc9JyxcbiAgICAgICAgLy8gU0VUID0gJ3NldCcsXG4gICAgICAgIENPTlRFWFRfTUVUSE9EUyA9IFtcbiAgICAgICAgICAgICdhcmMnLFxuICAgICAgICAgICAgJ2FyY1RvJyxcbiAgICAgICAgICAgICdiZWdpblBhdGgnLFxuICAgICAgICAgICAgJ2JlemllckN1cnZlVG8nLFxuICAgICAgICAgICAgJ2NsZWFyUmVjdCcsXG4gICAgICAgICAgICAnY2xpcCcsXG4gICAgICAgICAgICAnY2xvc2VQYXRoJyxcbiAgICAgICAgICAgICdjcmVhdGVMaW5lYXJHcmFkaWVudCcsXG4gICAgICAgICAgICAnY3JlYXRlUGF0dGVybicsXG4gICAgICAgICAgICAnY3JlYXRlUmFkaWFsR3JhZGllbnQnLFxuICAgICAgICAgICAgJ2RyYXdJbWFnZScsXG4gICAgICAgICAgICAnZmlsbCcsXG4gICAgICAgICAgICAnZmlsbFRleHQnLFxuICAgICAgICAgICAgJ2dldEltYWdlRGF0YScsXG4gICAgICAgICAgICAnY3JlYXRlSW1hZ2VEYXRhJyxcbiAgICAgICAgICAgICdsaW5lVG8nLFxuICAgICAgICAgICAgJ21vdmVUbycsXG4gICAgICAgICAgICAncHV0SW1hZ2VEYXRhJyxcbiAgICAgICAgICAgICdxdWFkcmF0aWNDdXJ2ZVRvJyxcbiAgICAgICAgICAgICdyZWN0JyxcbiAgICAgICAgICAgICdyZXN0b3JlJyxcbiAgICAgICAgICAgICdyb3RhdGUnLFxuICAgICAgICAgICAgJ3NhdmUnLFxuICAgICAgICAgICAgJ3NjYWxlJyxcbiAgICAgICAgICAgICdzZXRMaW5lRGFzaCcsXG4gICAgICAgICAgICAnc2V0VHJhbnNmb3JtJyxcbiAgICAgICAgICAgICdzdHJva2UnLFxuICAgICAgICAgICAgJ3N0cm9rZVRleHQnLFxuICAgICAgICAgICAgJ3RyYW5zZm9ybScsXG4gICAgICAgICAgICAndHJhbnNsYXRlJ1xuICAgICAgICBdO1xuXG4gICAgLyoqXG4gICAgICogQ2FudmFzIENvbnRleHQgY29uc3RydWN0b3JcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAqL1xuICAgIEtpbmV0aWMuQ29udGV4dCA9IGZ1bmN0aW9uKGNhbnZhcykge1xuICAgICAgICB0aGlzLmluaXQoY2FudmFzKTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5Db250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oY2FudmFzKSB7XG4gICAgICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQgPSBjYW52YXMuX2NhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgICAgICAgICBpZiAoS2luZXRpYy5lbmFibGVUcmFjZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJhY2VBcnIgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbmFibGVUcmFjZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZmlsbCBzaGFwZVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbnRleHQucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7S2luZXRpYy5TaGFwZX0gc2hhcGVcbiAgICAgICAgICovXG4gICAgICAgIGZpbGxTaGFwZTogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgIGlmKHNoYXBlLmdldEZpbGxFbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maWxsKHNoYXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHN0cm9rZSBzaGFwZVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbnRleHQucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7S2luZXRpYy5TaGFwZX0gc2hhcGVcbiAgICAgICAgICovXG4gICAgICAgIHN0cm9rZVNoYXBlOiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgaWYoc2hhcGUuZ2V0U3Ryb2tlRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3Ryb2tlKHNoYXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGZpbGwgdGhlbiBzdHJva2VcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250ZXh0LnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge0tpbmV0aWMuU2hhcGV9IHNoYXBlXG4gICAgICAgICAqL1xuICAgICAgICBmaWxsU3Ryb2tlU2hhcGU6IGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgZmlsbEVuYWJsZWQgPSBzaGFwZS5nZXRGaWxsRW5hYmxlZCgpO1xuICAgICAgICAgICAgaWYoZmlsbEVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maWxsKHNoYXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHNoYXBlLmdldFN0cm9rZUVuYWJsZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0cm9rZShzaGFwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgY29udGV4dCB0cmFjZSBpZiB0cmFjZSBpcyBlbmFibGVkXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ29udGV4dC5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSByZWxheGVkIGlmIGZhbHNlLCByZXR1cm4gc3RyaWN0IGNvbnRleHQgdHJhY2UsIHdoaWNoIGluY2x1ZGVzIG1ldGhvZCBuYW1lcywgbWV0aG9kIHBhcmFtZXRlcnNcbiAgICAgICAgICogIHByb3BlcnRpZXMsIGFuZCBwcm9wZXJ0eSB2YWx1ZXMuICBJZiB0cnVlLCByZXR1cm4gcmVsYXhlZCBjb250ZXh0IHRyYWNlLCB3aGljaCBvbmx5IHJldHVybnMgbWV0aG9kIG5hbWVzIGFuZFxuICAgICAgICAgKiAgcHJvcGVyaXRlcy5cbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIGdldFRyYWNlOiBmdW5jdGlvbihyZWxheGVkKSB7XG4gICAgICAgICAgICB2YXIgdHJhY2VBcnIgPSB0aGlzLnRyYWNlQXJyLFxuICAgICAgICAgICAgICAgIGxlbiA9IHRyYWNlQXJyLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBzdHIgPSAnJyxcbiAgICAgICAgICAgICAgICBuLCB0cmFjZSwgbWV0aG9kLCBhcmdzO1xuXG4gICAgICAgICAgICBmb3IgKG49MDsgbjxsZW47IG4rKykge1xuICAgICAgICAgICAgICAgIHRyYWNlID0gdHJhY2VBcnJbbl07XG4gICAgICAgICAgICAgICAgbWV0aG9kID0gdHJhY2UubWV0aG9kO1xuXG4gICAgICAgICAgICAgICAgLy8gbWV0aG9kc1xuICAgICAgICAgICAgICAgIGlmIChtZXRob2QpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJncyA9IHRyYWNlLmFyZ3M7XG4gICAgICAgICAgICAgICAgICAgIHN0ciArPSBtZXRob2Q7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWxheGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gRE9VQkxFX1BBUkVOO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEtpbmV0aWMuVXRpbC5faXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBPUEVOX1BBUkVOX0JSQUNLRVQgKyBhcmdzLmpvaW4oQ09NTUEpICsgQ0xPU0VfQlJBQ0tFVF9QQVJFTjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBPUEVOX1BBUkVOICsgYXJncy5qb2luKENPTU1BKSArIENMT1NFX1BBUkVOO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyICs9IHRyYWNlLnByb3BlcnR5O1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlbGF4ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBFUVVBTFMgKyB0cmFjZS52YWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdHIgKz0gU0VNSUNPTE9OO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogY2xlYXIgdHJhY2UgaWYgdHJhY2UgaXMgZW5hYmxlZFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbnRleHQucHJvdG90eXBlXG4gICAgICAgICAqL1xuICAgICAgICBjbGVhclRyYWNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMudHJhY2VBcnIgPSBbXTtcbiAgICAgICAgfSxcbiAgICAgICAgX3RyYWNlOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgIHZhciB0cmFjZUFyciA9IHRoaXMudHJhY2VBcnIsXG4gICAgICAgICAgICAgICAgbGVuO1xuIFxuICAgICAgICAgICAgdHJhY2VBcnIucHVzaChzdHIpO1xuICAgICAgICAgICAgbGVuID0gdHJhY2VBcnIubGVuZ3RoO1xuXG4gICAgICAgICAgICBpZiAobGVuID49IEtpbmV0aWMudHJhY2VBcnJNYXgpIHtcbiAgICAgICAgICAgICAgICB0cmFjZUFyci5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogcmVzZXQgY2FudmFzIGNvbnRleHQgdHJhbnNmb3JtXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ29udGV4dC5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBwaXhlbFJhdGlvID0gdGhpcy5nZXRDYW52YXMoKS5nZXRQaXhlbFJhdGlvKCk7XG4gICAgICAgICAgICB0aGlzLnNldFRyYW5zZm9ybSgxICogcGl4ZWxSYXRpbywgMCwgMCwgMSAqIHBpeGVsUmF0aW8sIDAsIDApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IGNhbnZhc1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbnRleHQucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLkNhbnZhc31cbiAgICAgICAgICovXG4gICAgICAgIGdldENhbnZhczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYW52YXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjbGVhciBjYW52YXNcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250ZXh0LnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gW2JvdW5kc11cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtib3VuZHMueF1cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtib3VuZHMueV1cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtib3VuZHMud2lkdGhdXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYm91bmRzLmhlaWdodF1cbiAgICAgICAgICovXG4gICAgICAgIGNsZWFyOiBmdW5jdGlvbihib3VuZHMpIHtcbiAgICAgICAgICAgIHZhciBjYW52YXMgPSB0aGlzLmdldENhbnZhcygpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoYm91bmRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhclJlY3QoYm91bmRzLnggfHwgMCwgYm91bmRzLnkgfHwgMCwgYm91bmRzLndpZHRoIHx8IDAsIGJvdW5kcy5oZWlnaHQgfHwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyUmVjdCgwLCAwLCBjYW52YXMuZ2V0V2lkdGgoKSwgY2FudmFzLmdldEhlaWdodCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2FwcGx5TGluZUNhcDogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciBsaW5lQ2FwID0gc2hhcGUuZ2V0TGluZUNhcCgpO1xuICAgICAgICAgICAgaWYobGluZUNhcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cignbGluZUNhcCcsIGxpbmVDYXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfYXBwbHlPcGFjaXR5OiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgdmFyIGFic09wYWNpdHkgPSBzaGFwZS5nZXRBYnNvbHV0ZU9wYWNpdHkoKTtcbiAgICAgICAgICAgIGlmKGFic09wYWNpdHkgIT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHIoJ2dsb2JhbEFscGhhJywgYWJzT3BhY2l0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9hcHBseUxpbmVKb2luOiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgdmFyIGxpbmVKb2luID0gc2hhcGUuZ2V0TGluZUpvaW4oKTtcbiAgICAgICAgICAgIGlmKGxpbmVKb2luKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdsaW5lSm9pbicsIGxpbmVKb2luKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2V0QXR0cjogZnVuY3Rpb24oYXR0ciwgdmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0W2F0dHJdID0gdmFsO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIGNvbnRleHQgcGFzcyB0aHJvdWdoIG1ldGhvZHNcbiAgICAgICAgYXJjOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5hcmMoYVswXSwgYVsxXSwgYVsyXSwgYVszXSwgYVs0XSwgYVs1XSk7XG4gICAgICAgIH0sXG4gICAgICAgIGJlZ2luUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICB9LFxuICAgICAgICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKGFbMF0sIGFbMV0sIGFbMl0sIGFbM10sIGFbNF0sIGFbNV0pO1xuICAgICAgICB9LFxuICAgICAgICBjbGVhclJlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmNsZWFyUmVjdChhWzBdLCBhWzFdLCBhWzJdLCBhWzNdKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xpcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmNsaXAoKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2VQYXRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZUltYWdlRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIGlmKGEubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuY3JlYXRlSW1hZ2VEYXRhKGFbMF0sIGFbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmNyZWF0ZUltYWdlRGF0YShhWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlTGluZWFyR3JhZGllbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudChhWzBdLCBhWzFdLCBhWzJdLCBhWzNdKTtcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlUGF0dGVybjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmNyZWF0ZVBhdHRlcm4oYVswXSwgYVsxXSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZVJhZGlhbEdyYWRpZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuY3JlYXRlUmFkaWFsR3JhZGllbnQoYVswXSwgYVsxXSwgYVsyXSwgYVszXSwgYVs0XSwgYVs1XSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRyYXdJbWFnZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBfY29udGV4dCA9IHRoaXMuX2NvbnRleHQ7XG5cbiAgICAgICAgICAgIGlmKGEubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQuZHJhd0ltYWdlKGFbMF0sIGFbMV0sIGFbMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhLmxlbmd0aCA9PT0gNSkge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0LmRyYXdJbWFnZShhWzBdLCBhWzFdLCBhWzJdLCBhWzNdLCBhWzRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYS5sZW5ndGggPT09IDkpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5kcmF3SW1hZ2UoYVswXSwgYVsxXSwgYVsyXSwgYVszXSwgYVs0XSwgYVs1XSwgYVs2XSwgYVs3XSwgYVs4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZpbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5maWxsKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGZpbGxUZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5maWxsVGV4dChhWzBdLCBhWzFdLCBhWzJdKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0SW1hZ2VEYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW1hZ2VEYXRhKGFbMF0sIGFbMV0sIGFbMl0sIGFbM10pO1xuICAgICAgICB9LFxuICAgICAgICBsaW5lVG86IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyhhWzBdLCBhWzFdKTtcbiAgICAgICAgfSxcbiAgICAgICAgbW92ZVRvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oYVswXSwgYVsxXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnJlY3QoYVswXSwgYVsxXSwgYVsyXSwgYVszXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHB1dEltYWdlRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQucHV0SW1hZ2VEYXRhKGFbMF0sIGFbMV0sIGFbMl0pO1xuICAgICAgICB9LFxuICAgICAgICBxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKGFbMF0sIGFbMV0sIGFbMl0sIGFbM10pO1xuICAgICAgICB9LFxuICAgICAgICByZXN0b3JlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQucmVzdG9yZSgpO1xuICAgICAgICB9LFxuICAgICAgICByb3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnJvdGF0ZShhWzBdKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2F2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnNhdmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2NhbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnNjYWxlKGFbMF0sIGFbMV0pO1xuICAgICAgICB9LFxuICAgICAgICBzZXRMaW5lRGFzaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBfY29udGV4dCA9IHRoaXMuX2NvbnRleHQ7XG5cbiAgICAgICAgICAgIC8vIHdvcmtzIGZvciBDaHJvbWUgYW5kIElFMTFcbiAgICAgICAgICAgIGlmKHRoaXMuX2NvbnRleHQuc2V0TGluZURhc2gpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5zZXRMaW5lRGFzaChhWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZlcmlmaWVkIHRoYXQgdGhpcyB3b3JrcyBpbiBmaXJlZm94XG4gICAgICAgICAgICBlbHNlIGlmKCdtb3pEYXNoJyBpbiBfY29udGV4dCkge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm1vekRhc2ggPSBhWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZG9lcyBub3QgY3VycmVudGx5IHdvcmsgZm9yIFNhZmFyaVxuICAgICAgICAgICAgZWxzZSBpZignd2Via2l0TGluZURhc2gnIGluIF9jb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQud2Via2l0TGluZURhc2ggPSBhWzBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBubyBzdXBwb3J0IGZvciBJRTkgYW5kIElFMTBcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VHJhbnNmb3JtOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5zZXRUcmFuc2Zvcm0oYVswXSwgYVsxXSwgYVsyXSwgYVszXSwgYVs0XSwgYVs1XSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0cm9rZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICB9LFxuICAgICAgICBzdHJva2VUZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5zdHJva2VUZXh0KGFbMF0sIGFbMV0sIGFbMl0pO1xuICAgICAgICB9LFxuICAgICAgICB0cmFuc2Zvcm06IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnRyYW5zZm9ybShhWzBdLCBhWzFdLCBhWzJdLCBhWzNdLCBhWzRdLCBhWzVdKTtcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC50cmFuc2xhdGUoYVswXSwgYVsxXSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9lbmFibGVUcmFjZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgbGVuID0gQ09OVEVYVF9NRVRIT0RTLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBfc2ltcGxpZnlBcnJheSA9IEtpbmV0aWMuVXRpbC5fc2ltcGxpZnlBcnJheSxcbiAgICAgICAgICAgICAgICBvcmlnU2V0dGVyID0gdGhpcy5zZXRBdHRyLFxuICAgICAgICAgICAgICAgIG4sIGFyZ3M7XG5cbiAgICAgICAgICAgIC8vIHRvIHByZXZlbnQgY3JlYXRpbmcgc2NvcGUgZnVuY3Rpb24gYXQgZWFjaCBsb29wXG4gICAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdNZXRob2QgPSB0aGF0W21ldGhvZE5hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0O1xuXG4gICAgICAgICAgICAgICAgICAgIHRoYXRbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MgPSBfc2ltcGxpZnlBcnJheShBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IG9yaWdNZXRob2QuYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll90cmFjZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2ROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gbWV0aG9kc1xuICAgICAgICAgICAgZm9yIChuPTA7IG48bGVuOyBuKyspIHtcbiAgICAgICAgICAgICAgICBmdW5jKENPTlRFWFRfTUVUSE9EU1tuXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGF0dHJzXG4gICAgICAgICAgICB0aGF0LnNldEF0dHIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBvcmlnU2V0dGVyLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgdGhhdC5fdHJhY2Uoe1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eTogYXJndW1lbnRzWzBdLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IGFyZ3VtZW50c1sxXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBLaW5ldGljLlNjZW5lQ29udGV4dCA9IGZ1bmN0aW9uKGNhbnZhcykge1xuICAgICAgICBLaW5ldGljLkNvbnRleHQuY2FsbCh0aGlzLCBjYW52YXMpO1xuICAgIH07XG5cbiAgICBLaW5ldGljLlNjZW5lQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgICAgIF9maWxsQ29sb3I6IGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgZmlsbCA9IHNoYXBlLmZpbGwoKVxuICAgICAgICAgICAgICAgIHx8IEtpbmV0aWMuVXRpbC5fZ2V0UkdCQVN0cmluZyh7XG4gICAgICAgICAgICAgICAgICAgIHJlZDogc2hhcGUuZmlsbFJlZCgpLFxuICAgICAgICAgICAgICAgICAgICBncmVlbjogc2hhcGUuZmlsbEdyZWVuKCksXG4gICAgICAgICAgICAgICAgICAgIGJsdWU6IHNoYXBlLmZpbGxCbHVlKCksXG4gICAgICAgICAgICAgICAgICAgIGFscGhhOiBzaGFwZS5maWxsQWxwaGEoKVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ2ZpbGxTdHlsZScsIGZpbGwpO1xuICAgICAgICAgICAgc2hhcGUuX2ZpbGxGdW5jKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICBfZmlsbFBhdHRlcm46IGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgZmlsbFBhdHRlcm5JbWFnZSA9IHNoYXBlLmdldEZpbGxQYXR0ZXJuSW1hZ2UoKSxcbiAgICAgICAgICAgICAgICBmaWxsUGF0dGVyblggPSBzaGFwZS5nZXRGaWxsUGF0dGVyblgoKSxcbiAgICAgICAgICAgICAgICBmaWxsUGF0dGVyblkgPSBzaGFwZS5nZXRGaWxsUGF0dGVyblkoKSxcbiAgICAgICAgICAgICAgICBmaWxsUGF0dGVyblNjYWxlID0gc2hhcGUuZ2V0RmlsbFBhdHRlcm5TY2FsZSgpLFxuICAgICAgICAgICAgICAgIGZpbGxQYXR0ZXJuUm90YXRpb24gPSBLaW5ldGljLmdldEFuZ2xlKHNoYXBlLmdldEZpbGxQYXR0ZXJuUm90YXRpb24oKSksXG4gICAgICAgICAgICAgICAgZmlsbFBhdHRlcm5PZmZzZXQgPSBzaGFwZS5nZXRGaWxsUGF0dGVybk9mZnNldCgpLFxuICAgICAgICAgICAgICAgIGZpbGxQYXR0ZXJuUmVwZWF0ID0gc2hhcGUuZ2V0RmlsbFBhdHRlcm5SZXBlYXQoKTtcblxuICAgICAgICAgICAgaWYoZmlsbFBhdHRlcm5YIHx8IGZpbGxQYXR0ZXJuWSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRlKGZpbGxQYXR0ZXJuWCB8fCAwLCBmaWxsUGF0dGVyblkgfHwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihmaWxsUGF0dGVyblJvdGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3RhdGUoZmlsbFBhdHRlcm5Sb3RhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihmaWxsUGF0dGVyblNjYWxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZShmaWxsUGF0dGVyblNjYWxlLngsIGZpbGxQYXR0ZXJuU2NhbGUueSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihmaWxsUGF0dGVybk9mZnNldCkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRlKC0xICogZmlsbFBhdHRlcm5PZmZzZXQueCwgLTEgKiBmaWxsUGF0dGVybk9mZnNldC55KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdmaWxsU3R5bGUnLCB0aGlzLmNyZWF0ZVBhdHRlcm4oZmlsbFBhdHRlcm5JbWFnZSwgZmlsbFBhdHRlcm5SZXBlYXQgfHwgJ3JlcGVhdCcpKTtcbiAgICAgICAgICAgIHRoaXMuZmlsbCgpO1xuICAgICAgICB9LFxuICAgICAgICBfZmlsbExpbmVhckdyYWRpZW50OiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gc2hhcGUuZ2V0RmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludCgpLFxuICAgICAgICAgICAgICAgIGVuZCA9IHNoYXBlLmdldEZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50KCksXG4gICAgICAgICAgICAgICAgY29sb3JTdG9wcyA9IHNoYXBlLmdldEZpbGxMaW5lYXJHcmFkaWVudENvbG9yU3RvcHMoKSxcbiAgICAgICAgICAgICAgICBncmQgPSB0aGlzLmNyZWF0ZUxpbmVhckdyYWRpZW50KHN0YXJ0LngsIHN0YXJ0LnksIGVuZC54LCBlbmQueSk7XG5cbiAgICAgICAgICAgIGlmIChjb2xvclN0b3BzKSB7XG4gICAgICAgICAgICAgICAgLy8gYnVpbGQgY29sb3Igc3RvcHNcbiAgICAgICAgICAgICAgICBmb3IodmFyIG4gPSAwOyBuIDwgY29sb3JTdG9wcy5sZW5ndGg7IG4gKz0gMikge1xuICAgICAgICAgICAgICAgICAgICBncmQuYWRkQ29sb3JTdG9wKGNvbG9yU3RvcHNbbl0sIGNvbG9yU3RvcHNbbiArIDFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdmaWxsU3R5bGUnLCBncmQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmlsbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZmlsbFJhZGlhbEdyYWRpZW50OiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gc2hhcGUuZ2V0RmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludCgpLFxuICAgICAgICAgICAgICAgIGVuZCA9IHNoYXBlLmdldEZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50KCksXG4gICAgICAgICAgICAgICAgc3RhcnRSYWRpdXMgPSBzaGFwZS5nZXRGaWxsUmFkaWFsR3JhZGllbnRTdGFydFJhZGl1cygpLFxuICAgICAgICAgICAgICAgIGVuZFJhZGl1cyA9IHNoYXBlLmdldEZpbGxSYWRpYWxHcmFkaWVudEVuZFJhZGl1cygpLFxuICAgICAgICAgICAgICAgIGNvbG9yU3RvcHMgPSBzaGFwZS5nZXRGaWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzKCksXG4gICAgICAgICAgICAgICAgZ3JkID0gdGhpcy5jcmVhdGVSYWRpYWxHcmFkaWVudChzdGFydC54LCBzdGFydC55LCBzdGFydFJhZGl1cywgZW5kLngsIGVuZC55LCBlbmRSYWRpdXMpO1xuICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGJ1aWxkIGNvbG9yIHN0b3BzXG4gICAgICAgICAgICBmb3IodmFyIG4gPSAwOyBuIDwgY29sb3JTdG9wcy5sZW5ndGg7IG4gKz0gMikge1xuICAgICAgICAgICAgICAgIGdyZC5hZGRDb2xvclN0b3AoY29sb3JTdG9wc1tuXSwgY29sb3JTdG9wc1tuICsgMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdmaWxsU3R5bGUnLCBncmQpO1xuICAgICAgICAgICAgdGhpcy5maWxsKCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9maWxsOiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgdmFyIGhhc0NvbG9yID0gc2hhcGUuZmlsbCgpIHx8IHNoYXBlLmZpbGxSZWQoKSB8fCBzaGFwZS5maWxsR3JlZW4oKSB8fCBzaGFwZS5maWxsQmx1ZSgpLFxuICAgICAgICAgICAgICAgIGhhc1BhdHRlcm4gPSBzaGFwZS5nZXRGaWxsUGF0dGVybkltYWdlKCksXG4gICAgICAgICAgICAgICAgaGFzTGluZWFyR3JhZGllbnQgPSBzaGFwZS5nZXRGaWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzKCksXG4gICAgICAgICAgICAgICAgaGFzUmFkaWFsR3JhZGllbnQgPSBzaGFwZS5nZXRGaWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzKCksXG4gICAgICAgICAgICAgICAgZmlsbFByaW9yaXR5ID0gc2hhcGUuZ2V0RmlsbFByaW9yaXR5KCk7XG5cbiAgICAgICAgICAgIC8vIHByaW9yaXR5IGZpbGxzXG4gICAgICAgICAgICBpZihoYXNDb2xvciAmJiBmaWxsUHJpb3JpdHkgPT09ICdjb2xvcicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maWxsQ29sb3Ioc2hhcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihoYXNQYXR0ZXJuICYmIGZpbGxQcmlvcml0eSA9PT0gJ3BhdHRlcm4nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsbFBhdHRlcm4oc2hhcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihoYXNMaW5lYXJHcmFkaWVudCAmJiBmaWxsUHJpb3JpdHkgPT09ICdsaW5lYXItZ3JhZGllbnQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsbExpbmVhckdyYWRpZW50KHNoYXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoaGFzUmFkaWFsR3JhZGllbnQgJiYgZmlsbFByaW9yaXR5ID09PSAncmFkaWFsLWdyYWRpZW50Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGxSYWRpYWxHcmFkaWVudChzaGFwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBub3cganVzdCB0cnkgYW5kIGZpbGwgd2l0aCB3aGF0ZXZlciBpcyBhdmFpbGFibGVcbiAgICAgICAgICAgIGVsc2UgaWYoaGFzQ29sb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maWxsQ29sb3Ioc2hhcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihoYXNQYXR0ZXJuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsbFBhdHRlcm4oc2hhcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihoYXNMaW5lYXJHcmFkaWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGxMaW5lYXJHcmFkaWVudChzaGFwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGhhc1JhZGlhbEdyYWRpZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsbFJhZGlhbEdyYWRpZW50KHNoYXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX3N0cm9rZTogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciBkYXNoID0gc2hhcGUuZGFzaCgpLFxuICAgICAgICAgICAgICAgIHN0cm9rZVNjYWxlRW5hYmxlZCA9IHNoYXBlLmdldFN0cm9rZVNjYWxlRW5hYmxlZCgpO1xuXG4gICAgICAgICAgICBpZihzaGFwZS5oYXNTdHJva2UoKSkge1xuICAgICAgICAgICAgICAgIGlmICghc3Ryb2tlU2NhbGVFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9hcHBseUxpbmVDYXAoc2hhcGUpO1xuICAgICAgICAgICAgICAgIGlmKGRhc2ggJiYgc2hhcGUuZGFzaEVuYWJsZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldExpbmVEYXNoKGRhc2gpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cignbGluZVdpZHRoJywgc2hhcGUuc3Ryb2tlV2lkdGgoKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdzdHJva2VTdHlsZScsIHNoYXBlLnN0cm9rZSgpXG4gICAgICAgICAgICAgICAgICAgIHx8IEtpbmV0aWMuVXRpbC5fZ2V0UkdCQVN0cmluZyh7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWQ6IHNoYXBlLnN0cm9rZVJlZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JlZW46IHNoYXBlLnN0cm9rZUdyZWVuKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBibHVlOiBzaGFwZS5zdHJva2VCbHVlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHBoYTogc2hhcGUuc3Ryb2tlQWxwaGEoKVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICBzaGFwZS5fc3Ryb2tlRnVuYyh0aGlzKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoIXN0cm9rZVNjYWxlRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9hcHBseVNoYWRvdzogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciB1dGlsID0gS2luZXRpYy5VdGlsLFxuICAgICAgICAgICAgICAgIGFic09wYWNpdHkgPSBzaGFwZS5nZXRBYnNvbHV0ZU9wYWNpdHkoKSxcbiAgICAgICAgICAgICAgICBjb2xvciA9IHV0aWwuZ2V0KHNoYXBlLmdldFNoYWRvd0NvbG9yKCksICdibGFjaycpLFxuICAgICAgICAgICAgICAgIGJsdXIgPSB1dGlsLmdldChzaGFwZS5nZXRTaGFkb3dCbHVyKCksIDUpLFxuICAgICAgICAgICAgICAgIHNoYWRvd09wYWNpdHkgPSB1dGlsLmdldChzaGFwZS5nZXRTaGFkb3dPcGFjaXR5KCksIDEpLFxuICAgICAgICAgICAgICAgIG9mZnNldCA9IHV0aWwuZ2V0KHNoYXBlLmdldFNoYWRvd09mZnNldCgpLCB7XG4gICAgICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgICAgIHk6IDBcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYoc2hhZG93T3BhY2l0eSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cignZ2xvYmFsQWxwaGEnLCBzaGFkb3dPcGFjaXR5ICogYWJzT3BhY2l0eSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cignc2hhZG93Q29sb3InLCBjb2xvcik7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ3NoYWRvd0JsdXInLCBibHVyKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cignc2hhZG93T2Zmc2V0WCcsIG9mZnNldC54KTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cignc2hhZG93T2Zmc2V0WScsIG9mZnNldC55KTtcbiAgICAgICAgXG4gICAgICAgIH1cbiAgICB9O1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5TY2VuZUNvbnRleHQsIEtpbmV0aWMuQ29udGV4dCk7XG5cbiAgICBLaW5ldGljLkhpdENvbnRleHQgPSBmdW5jdGlvbihjYW52YXMpIHtcbiAgICAgICAgS2luZXRpYy5Db250ZXh0LmNhbGwodGhpcywgY2FudmFzKTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5IaXRDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICAgICAgX2ZpbGw6IGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cignZmlsbFN0eWxlJywgc2hhcGUuY29sb3JLZXkpO1xuICAgICAgICAgICAgc2hhcGUuX2ZpbGxGdW5jSGl0KHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5yZXN0b3JlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zdHJva2U6IGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgICAgICAgICBpZihzaGFwZS5oYXNTdHJva2UoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FwcGx5TGluZUNhcChzaGFwZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdsaW5lV2lkdGgnLCBzaGFwZS5zdHJva2VXaWR0aCgpKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHIoJ3N0cm9rZVN0eWxlJywgc2hhcGUuY29sb3JLZXkpO1xuICAgICAgICAgICAgICAgIHNoYXBlLl9zdHJva2VGdW5jSGl0KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuSGl0Q29udGV4dCwgS2luZXRpYy5Db250ZXh0KTtcbn0pKCk7XG47Lypqc2hpbnQgdW51c2VkOmZhbHNlICovXG4oZnVuY3Rpb24oKSB7XG4gICAgLy8gQ09OU1RBTlRTXG4gICAgdmFyIEdFVCA9ICdnZXQnLFxuICAgICAgICBSR0IgPSAnUkdCJyxcbiAgICAgICAgU0VUID0gJ3NldCc7XG5cbiAgICBLaW5ldGljLkZhY3RvcnkgPSB7XG4gICAgICAgIGFkZEdldHRlclNldHRlcjogZnVuY3Rpb24oY29uc3RydWN0b3IsIGF0dHIsIGRlZiwgdmFsaWRhdG9yLCBhZnRlcikge1xuICAgICAgICAgICAgdGhpcy5hZGRHZXR0ZXIoY29uc3RydWN0b3IsIGF0dHIsIGRlZik7XG4gICAgICAgICAgICB0aGlzLmFkZFNldHRlcihjb25zdHJ1Y3RvciwgYXR0ciwgdmFsaWRhdG9yLCBhZnRlcik7XG4gICAgICAgICAgICB0aGlzLmFkZE92ZXJsb2FkZWRHZXR0ZXJTZXR0ZXIoY29uc3RydWN0b3IsIGF0dHIpO1xuICAgICAgICB9LFxuICAgICAgICBhZGRHZXR0ZXI6IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBhdHRyLCBkZWYpIHtcbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBHRVQgKyBLaW5ldGljLlV0aWwuX2NhcGl0YWxpemUoYXR0cik7XG5cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IHRoaXMuYXR0cnNbYXR0cl07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbCA9PT0gdW5kZWZpbmVkID8gZGVmIDogdmFsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkU2V0dGVyOiBmdW5jdGlvbihjb25zdHJ1Y3RvciwgYXR0ciwgdmFsaWRhdG9yLCBhZnRlcikge1xuICAgICAgICAgICAgdmFyIG1ldGhvZCA9IFNFVCArIEtpbmV0aWMuVXRpbC5fY2FwaXRhbGl6ZShhdHRyKTtcblxuICAgICAgICAgICAgY29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IHZhbGlkYXRvci5jYWxsKHRoaXMsIHZhbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0QXR0cihhdHRyLCB2YWwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFmdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGFmdGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBhZGRDb21wb25lbnRzR2V0dGVyU2V0dGVyOiBmdW5jdGlvbihjb25zdHJ1Y3RvciwgYXR0ciwgY29tcG9uZW50cywgdmFsaWRhdG9yLCBhZnRlcikge1xuICAgICAgICAgICAgdmFyIGxlbiA9IGNvbXBvbmVudHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGNhcGl0YWxpemUgPSBLaW5ldGljLlV0aWwuX2NhcGl0YWxpemUsXG4gICAgICAgICAgICAgICAgZ2V0dGVyID0gR0VUICsgY2FwaXRhbGl6ZShhdHRyKSxcbiAgICAgICAgICAgICAgICBzZXR0ZXIgPSBTRVQgKyBjYXBpdGFsaXplKGF0dHIpLFxuICAgICAgICAgICAgICAgIG4sIGNvbXBvbmVudDtcblxuICAgICAgICAgICAgLy8gZ2V0dGVyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvci5wcm90b3R5cGVbZ2V0dGVyXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciByZXQgPSB7fTtcblxuICAgICAgICAgICAgICAgIGZvciAobj0wOyBuPGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudCA9IGNvbXBvbmVudHNbbl07XG4gICAgICAgICAgICAgICAgICAgIHJldFtjb21wb25lbnRdID0gdGhpcy5nZXRBdHRyKGF0dHIgKyBjYXBpdGFsaXplKGNvbXBvbmVudCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBzZXR0ZXJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yLnByb3RvdHlwZVtzZXR0ZXJdID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9sZFZhbCA9IHRoaXMuYXR0cnNbYXR0cl0sXG4gICAgICAgICAgICAgICAgICAgIGtleTtcblxuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gdmFsaWRhdG9yLmNhbGwodGhpcywgdmFsKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiB2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0QXR0cihhdHRyICsgY2FwaXRhbGl6ZShrZXkpLCB2YWxba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZUNoYW5nZUV2ZW50KGF0dHIsIG9sZFZhbCwgdmFsKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoYWZ0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuYWRkT3ZlcmxvYWRlZEdldHRlclNldHRlcihjb25zdHJ1Y3RvciwgYXR0cik7XG4gICAgICAgIH0sXG4gICAgICAgIGFkZE92ZXJsb2FkZWRHZXR0ZXJTZXR0ZXI6IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBhdHRyKSB7XG4gICAgICAgICAgICB2YXIgY2FwaXRhbGl6ZWRBdHRyID0gS2luZXRpYy5VdGlsLl9jYXBpdGFsaXplKGF0dHIpLFxuICAgICAgICAgICAgICAgIHNldHRlciA9IFNFVCArIGNhcGl0YWxpemVkQXR0cixcbiAgICAgICAgICAgICAgICBnZXR0ZXIgPSBHRVQgKyBjYXBpdGFsaXplZEF0dHI7XG5cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yLnByb3RvdHlwZVthdHRyXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIHNldHRpbmdcbiAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW3NldHRlcl0oYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGdldHRpbmdcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbZ2V0dGVyXSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGJhY2tDb21wYXQ6IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBtZXRob2RzKSB7XG4gICAgICAgICAgICB2YXIga2V5O1xuXG4gICAgICAgICAgICBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICAgICAgICAgICAgY29uc3RydWN0b3IucHJvdG90eXBlW2tleV0gPSBjb25zdHJ1Y3Rvci5wcm90b3R5cGVbbWV0aG9kc1trZXldXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWZ0ZXJTZXRGaWx0ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5fZmlsdGVyVXBUb0RhdGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBLaW5ldGljLlZhbGlkYXRvcnMgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBSR0JDb21wb25lbnQ6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgaWYgKHZhbCA+IDI1NSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAyNTU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWxwaGFDb21wb25lbnQ6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgaWYgKHZhbCA+IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNocm9tZSBkb2VzIG5vdCBob25vciBhbHBoYSB2YWx1ZXMgb2YgMFxuICAgICAgICAgICAgZWxzZSBpZiAodmFsIDwgMC4wMDAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAuMDAwMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTs7KGZ1bmN0aW9uKCkge1xuICAgIC8vIENPTlNUQU5UU1xuICAgIHZhciBBQlNPTFVURV9PUEFDSVRZID0gJ2Fic29sdXRlT3BhY2l0eScsXG4gICAgICAgIEFCU09MVVRFX1RSQU5TRk9STSA9ICdhYnNvbHV0ZVRyYW5zZm9ybScsXG4gICAgICAgIENIQU5HRSA9ICdDaGFuZ2UnLFxuICAgICAgICBDSElMRFJFTiA9ICdjaGlsZHJlbicsXG4gICAgICAgIERPVCA9ICcuJyxcbiAgICAgICAgRU1QVFlfU1RSSU5HID0gJycsXG4gICAgICAgIEdFVCA9ICdnZXQnLFxuICAgICAgICBJRCA9ICdpZCcsXG4gICAgICAgIEtJTkVUSUMgPSAna2luZXRpYycsXG4gICAgICAgIExJU1RFTklORyA9ICdsaXN0ZW5pbmcnLFxuICAgICAgICBNT1VTRUVOVEVSID0gJ21vdXNlZW50ZXInLFxuICAgICAgICBNT1VTRUxFQVZFID0gJ21vdXNlbGVhdmUnLFxuICAgICAgICBOQU1FID0gJ25hbWUnLFxuICAgICAgICBTRVQgPSAnc2V0JyxcbiAgICAgICAgU0hBUEUgPSAnU2hhcGUnLFxuICAgICAgICBTUEFDRSA9ICcgJyxcbiAgICAgICAgU1RBR0UgPSAnc3RhZ2UnLFxuICAgICAgICBUUkFOU0ZPUk0gPSAndHJhbnNmb3JtJyxcbiAgICAgICAgVVBQRVJfU1RBR0UgPSAnU3RhZ2UnLFxuICAgICAgICBWSVNJQkxFID0gJ3Zpc2libGUnLFxuICAgICAgICBDTE9ORV9CTEFDS19MSVNUID0gWydpZCddLFxuXG4gICAgICAgIFRSQU5TRk9STV9DSEFOR0VfU1RSID0gW1xuICAgICAgICAgICAgJ3hDaGFuZ2Uua2luZXRpYycsXG4gICAgICAgICAgICAneUNoYW5nZS5raW5ldGljJyxcbiAgICAgICAgICAgICdzY2FsZVhDaGFuZ2Uua2luZXRpYycsXG4gICAgICAgICAgICAnc2NhbGVZQ2hhbmdlLmtpbmV0aWMnLFxuICAgICAgICAgICAgJ3NrZXdYQ2hhbmdlLmtpbmV0aWMnLFxuICAgICAgICAgICAgJ3NrZXdZQ2hhbmdlLmtpbmV0aWMnLFxuICAgICAgICAgICAgJ3JvdGF0aW9uQ2hhbmdlLmtpbmV0aWMnLFxuICAgICAgICAgICAgJ29mZnNldFhDaGFuZ2Uua2luZXRpYycsXG4gICAgICAgICAgICAnb2Zmc2V0WUNoYW5nZS5raW5ldGljJyxcbiAgICAgICAgICAgICd0cmFuc2Zvcm1zRW5hYmxlZENoYW5nZS5raW5ldGljJ1xuICAgICAgICBdLmpvaW4oU1BBQ0UpO1xuXG5cbiAgICBLaW5ldGljLlV0aWwuYWRkTWV0aG9kcyhLaW5ldGljLk5vZGUsIHtcbiAgICAgICAgX2luaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5faWQgPSBLaW5ldGljLmlkQ291bnRlcisrO1xuICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5hdHRycyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuX2ZpbHRlclVwVG9EYXRlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHJzKGNvbmZpZyk7XG5cbiAgICAgICAgICAgIC8vIGV2ZW50IGJpbmRpbmdzIGZvciBjYWNoZSBoYW5kbGluZ1xuICAgICAgICAgICAgdGhpcy5vbihUUkFOU0ZPUk1fQ0hBTkdFX1NUUiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJDYWNoZShUUkFOU0ZPUk0pO1xuICAgICAgICAgICAgICAgIHRoYXQuX2NsZWFyU2VsZkFuZERlc2NlbmRhbnRDYWNoZShBQlNPTFVURV9UUkFOU0ZPUk0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm9uKCd2aXNpYmxlQ2hhbmdlLmtpbmV0aWMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGF0Ll9jbGVhclNlbGZBbmREZXNjZW5kYW50Q2FjaGUoVklTSUJMRSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMub24oJ2xpc3RlbmluZ0NoYW5nZS5raW5ldGljJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5fY2xlYXJTZWxmQW5kRGVzY2VuZGFudENhY2hlKExJU1RFTklORyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMub24oJ29wYWNpdHlDaGFuZ2Uua2luZXRpYycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoYXQuX2NsZWFyU2VsZkFuZERlc2NlbmRhbnRDYWNoZShBQlNPTFVURV9PUEFDSVRZKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBfY2xlYXJDYWNoZTogZnVuY3Rpb24oYXR0cil7XG4gICAgICAgICAgICBpZiAoYXR0cikge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9jYWNoZVthdHRyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRDYWNoZTogZnVuY3Rpb24oYXR0ciwgcHJpdmF0ZUdldHRlcil7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSB0aGlzLl9jYWNoZVthdHRyXTtcblxuICAgICAgICAgICAgLy8gaWYgbm90IGNhY2hlZCwgd2UgbmVlZCB0byBzZXQgaXQgdXNpbmcgdGhlIHByaXZhdGUgZ2V0dGVyIG1ldGhvZC5cbiAgICAgICAgICAgIGlmIChjYWNoZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVbYXR0cl0gPSBwcml2YXRlR2V0dGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZVthdHRyXTtcbiAgICAgICAgfSxcbiAgICAgICAgLypcbiAgICAgICAgICogd2hlbiB0aGUgbG9naWMgZm9yIGEgY2FjaGVkIHJlc3VsdCBkZXBlbmRzIG9uIGFuY2VzdG9yIHByb3BhZ2F0aW9uLCB1c2UgdGhpc1xuICAgICAgICAgKiBtZXRob2QgdG8gY2xlYXIgc2VsZiBhbmQgY2hpbGRyZW4gY2FjaGVcbiAgICAgICAgICovXG4gICAgICAgIF9jbGVhclNlbGZBbmREZXNjZW5kYW50Q2FjaGU6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgICAgICAgIHRoaXMuX2NsZWFyQ2FjaGUoYXR0cik7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRDaGlsZHJlbigpLmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLl9jbGVhclNlbGZBbmREZXNjZW5kYW50Q2FjaGUoYXR0cik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAqIGNsZWFyIGNhY2hlZCBjYW52YXNcbiAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5Ob2RlfVxuICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICogbm9kZS5jbGVhckNhY2hlKCk7XG4gICAgICAgICovXG4gICAgICAgIGNsZWFyQ2FjaGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2NhY2hlLmNhbnZhcztcbiAgICAgICAgICAgIHRoaXMuX2ZpbHRlclVwVG9EYXRlID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICogY2FjaGUgbm9kZSB0byBpbXByb3ZlIGRyYXdpbmcgcGVyZm9ybWFuY2UsIGFwcGx5IGZpbHRlcnMsIG9yIGNyZWF0ZSBtb3JlIGFjY3VyYXRlXG4gICAgICAgICogIGhpdCByZWdpb25zXG4gICAgICAgICogQG1ldGhvZFxuICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdXG4gICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cbiAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cbiAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdXG4gICAgICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRyYXdCb3JkZXJdIHdoZW4gc2V0IHRvIHRydWUsIGEgcmVkIGJvcmRlciB3aWxsIGJlIGRyYXduIGFyb3VuZCB0aGUgY2FjaGVkXG4gICAgICAgICogIHJlZ2lvbiBmb3IgZGVidWdnaW5nIHB1cnBvc2VzXG4gICAgICAgICogQHJldHVybnMge0tpbmV0aWMuTm9kZX1cbiAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAqIC8vIGNhY2hlIGEgc2hhcGUgd2l0aCB0aGUgeCx5IHBvc2l0aW9uIG9mIHRoZSBib3VuZGluZyBib3ggYXQgdGhlIGNlbnRlciBhbmRcbiAgICAgICAgKiAvLyB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgYm91bmRpbmcgYm94IGVxdWFsIHRvIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mXG4gICAgICAgICogLy8gdGhlIHNoYXBlIG9idGFpbmVkIGZyb20gc2hhcGUud2lkdGgoKSBhbmQgc2hhcGUuaGVpZ2h0KClcbiAgICAgICAgKiBpbWFnZS5jYWNoZSgpO1xuICAgICAgICAqXG4gICAgICAgICogLy8gY2FjaGUgYSBub2RlIGFuZCBkZWZpbmUgdGhlIGJvdW5kaW5nIGJveCBwb3NpdGlvbiBhbmQgc2l6ZVxuICAgICAgICAqIG5vZGUuY2FjaGUoe1xuICAgICAgICAqICAgeDogLTMwLFxuICAgICAgICAqICAgeTogLTMwLFxuICAgICAgICAqICAgd2lkdGg6IDEwMCxcbiAgICAgICAgKiAgIGhlaWdodDogMjAwXG4gICAgICAgICogfSk7XG4gICAgICAgICpcbiAgICAgICAgKiAvLyBjYWNoZSBhIG5vZGUgYW5kIGRyYXcgYSByZWQgYm9yZGVyIGFyb3VuZCB0aGUgYm91bmRpbmcgYm94XG4gICAgICAgICogLy8gZm9yIGRlYnVnZ2luZyBwdXJwb3Nlc1xuICAgICAgICAqIG5vZGUuY2FjaGUoe1xuICAgICAgICAqICAgeDogLTMwLFxuICAgICAgICAqICAgeTogLTMwLFxuICAgICAgICAqICAgd2lkdGg6IDEwMCxcbiAgICAgICAgKiAgIGhlaWdodDogMjAwLFxuICAgICAgICAqICAgZHJhd0JvcmRlcjogdHJ1ZVxuICAgICAgICAqIH0pO1xuICAgICAgICAqL1xuICAgICAgICBjYWNoZTogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICB2YXIgY29uZiA9IGNvbmZpZyB8fCB7fSxcbiAgICAgICAgICAgICAgICB4ID0gY29uZi54IHx8IDAsXG4gICAgICAgICAgICAgICAgeSA9IGNvbmYueSB8fCAwLFxuICAgICAgICAgICAgICAgIHdpZHRoID0gY29uZi53aWR0aCB8fCB0aGlzLndpZHRoKCksXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gY29uZi5oZWlnaHQgfHwgdGhpcy5oZWlnaHQoKSxcbiAgICAgICAgICAgICAgICBkcmF3Qm9yZGVyID0gY29uZi5kcmF3Qm9yZGVyIHx8IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAod2lkdGggPT09IDAgfHwgaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgS2luZXRpYy5VdGlsLndhcm4oJ1dpZHRoIG9yIGhlaWdodCBvZiBjYWNoaW5nIGNvbmZpZ3VyYXRpb24gZXF1YWxzIDAuIENhY2hlIGlzIGlnbm9yZWQuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNhY2hlZFNjZW5lQ2FudmFzID0gbmV3IEtpbmV0aWMuU2NlbmVDYW52YXMoe1xuICAgICAgICAgICAgICAgICAgICBwaXhlbFJhdGlvOiAxLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgY2FjaGVkRmlsdGVyQ2FudmFzID0gbmV3IEtpbmV0aWMuU2NlbmVDYW52YXMoe1xuICAgICAgICAgICAgICAgICAgICBwaXhlbFJhdGlvOiAxLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgY2FjaGVkSGl0Q2FudmFzID0gbmV3IEtpbmV0aWMuSGl0Q2FudmFzKHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHNjZW5lQ29udGV4dCA9IGNhY2hlZFNjZW5lQ2FudmFzLmdldENvbnRleHQoKSxcbiAgICAgICAgICAgICAgICBoaXRDb250ZXh0ID0gY2FjaGVkSGl0Q2FudmFzLmdldENvbnRleHQoKTtcblxuICAgICAgICAgICAgY2FjaGVkSGl0Q2FudmFzLmlzQ2FjaGUgPSB0cnVlO1xuXG4gICAgICAgICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgIFxuICAgICAgICAgICAgc2NlbmVDb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgIGhpdENvbnRleHQuc2F2ZSgpO1xuXG4gICAgICAgICAgICAvLyB0aGlzIHdpbGwgZHJhdyBhIHJlZCBib3JkZXIgYXJvdW5kIHRoZSBjYWNoZWQgYm94IGZvclxuICAgICAgICAgICAgLy8gZGVidWdnaW5nIHB1cnBvc2VzXG4gICAgICAgICAgICBpZiAoZHJhd0JvcmRlcikge1xuICAgICAgICAgICAgICAgIHNjZW5lQ29udGV4dC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgc2NlbmVDb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIHNjZW5lQ29udGV4dC5yZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgIHNjZW5lQ29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICBzY2VuZUNvbnRleHQuc2V0QXR0cignc3Ryb2tlU3R5bGUnLCAncmVkJyk7XG4gICAgICAgICAgICAgICAgc2NlbmVDb250ZXh0LnNldEF0dHIoJ2xpbmVXaWR0aCcsIDUpO1xuICAgICAgICAgICAgICAgIHNjZW5lQ29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICBzY2VuZUNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzY2VuZUNvbnRleHQudHJhbnNsYXRlKHggKiAtMSwgeSAqIC0xKTtcbiAgICAgICAgICAgIGhpdENvbnRleHQudHJhbnNsYXRlKHggKiAtMSwgeSAqIC0xKTtcblxuICAgICAgICAgICAgLy8gZG9uJ3QgbmVlZCB0byB0cmFuc2xhdGUgY2FudmFzIGlmIHNoYXBlIGlzIG5vdCBhZGRlZCB0byBsYXllclxuICAgICAgICAgICAgaWYgKHRoaXMubm9kZVR5cGUgPT09ICdTaGFwZScpIHtcbiAgICAgICAgICAgICAgICBzY2VuZUNvbnRleHQudHJhbnNsYXRlKHRoaXMueCgpICogLTEsIHRoaXMueSgpICogLTEpO1xuICAgICAgICAgICAgICAgIGhpdENvbnRleHQudHJhbnNsYXRlKHRoaXMueCgpICogLTEsIHRoaXMueSgpICogLTEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmRyYXdTY2VuZShjYWNoZWRTY2VuZUNhbnZhcywgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRyYXdIaXQoY2FjaGVkSGl0Q2FudmFzLCB0aGlzKTtcblxuICAgICAgICAgICAgc2NlbmVDb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgICAgIGhpdENvbnRleHQucmVzdG9yZSgpO1xuXG4gICAgICAgICAgICB0aGlzLl9jYWNoZS5jYW52YXMgPSB7XG4gICAgICAgICAgICAgICAgc2NlbmU6IGNhY2hlZFNjZW5lQ2FudmFzLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogY2FjaGVkRmlsdGVyQ2FudmFzLFxuICAgICAgICAgICAgICAgIGhpdDogY2FjaGVkSGl0Q2FudmFzXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgX2RyYXdDYWNoZWRTY2VuZUNhbnZhczogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgICAgICB0aGlzLmdldExheWVyKCkuX2FwcGx5VHJhbnNmb3JtKHRoaXMsIGNvbnRleHQpO1xuICAgICAgICAgICAgY29udGV4dC5fYXBwbHlPcGFjaXR5KHRoaXMpO1xuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UodGhpcy5fZ2V0Q2FjaGVkU2NlbmVDYW52YXMoKS5fY2FudmFzLCAwLCAwKTtcbiAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgICB9LFxuICAgICAgICBfZ2V0Q2FjaGVkU2NlbmVDYW52YXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGZpbHRlcnMgPSB0aGlzLmZpbHRlcnMoKSxcbiAgICAgICAgICAgICAgICBjYWNoZWRDYW52YXMgPSB0aGlzLl9jYWNoZS5jYW52YXMsXG4gICAgICAgICAgICAgICAgc2NlbmVDYW52YXMgPSBjYWNoZWRDYW52YXMuc2NlbmUsXG4gICAgICAgICAgICAgICAgZmlsdGVyQ2FudmFzID0gY2FjaGVkQ2FudmFzLmZpbHRlcixcbiAgICAgICAgICAgICAgICBmaWx0ZXJDb250ZXh0ID0gZmlsdGVyQ2FudmFzLmdldENvbnRleHQoKSxcbiAgICAgICAgICAgICAgICBsZW4sIGltYWdlRGF0YSwgbiwgZmlsdGVyO1xuXG4gICAgICAgICAgICBpZiAoZmlsdGVycykge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZmlsdGVyVXBUb0RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IGZpbHRlcnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyQ29udGV4dC5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29weSBjYWNoZWQgY2FudmFzIG9udG8gZmlsdGVyIGNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlckNvbnRleHQuZHJhd0ltYWdlKHNjZW5lQ2FudmFzLl9jYW52YXMsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VEYXRhID0gZmlsdGVyQ29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgZmlsdGVyQ2FudmFzLmdldFdpZHRoKCksIGZpbHRlckNhbnZhcy5nZXRIZWlnaHQoKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFwcGx5IGZpbHRlcnMgdG8gZmlsdGVyIGNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobj0wOyBuPGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyID0gZmlsdGVyc1tuXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIuY2FsbCh0aGlzLCBpbWFnZURhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlckNvbnRleHQucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2goZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgS2luZXRpYy5VdGlsLndhcm4oJ1VuYWJsZSB0byBhcHBseSBmaWx0ZXIuICcgKyBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlsdGVyVXBUb0RhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXJDYW52YXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NlbmVDYW52YXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9kcmF3Q2FjaGVkSGl0Q2FudmFzOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGVkQ2FudmFzID0gdGhpcy5fY2FjaGUuY2FudmFzLFxuICAgICAgICAgICAgICAgIGhpdENhbnZhcyA9IGNhY2hlZENhbnZhcy5oaXQ7XG5cbiAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xuICAgICAgICAgICAgdGhpcy5nZXRMYXllcigpLl9hcHBseVRyYW5zZm9ybSh0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGhpdENhbnZhcy5fY2FudmFzLCAwLCAwKTtcbiAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogYmluZCBldmVudHMgdG8gdGhlIG5vZGUuIEtpbmV0aWNKUyBzdXBwb3J0cyBtb3VzZW92ZXIsIG1vdXNlbW92ZSxcbiAgICAgICAgICogIG1vdXNlb3V0LCBtb3VzZWVudGVyLCBtb3VzZWxlYXZlLCBtb3VzZWRvd24sIG1vdXNldXAsIG1vdXNld2hlZWwsIGNsaWNrLCBkYmxjbGljaywgdG91Y2hzdGFydCwgdG91Y2htb3ZlLFxuICAgICAgICAgKiAgdG91Y2hlbmQsIHRhcCwgZGJsdGFwLCBkcmFnc3RhcnQsIGRyYWdtb3ZlLCBhbmQgZHJhZ2VuZCBldmVudHMuIFRoZSBLaW5ldGljIFN0YWdlIHN1cHBvcnRzXG4gICAgICAgICAqICBjb250ZW50TW91c2VvdmVyLCBjb250ZW50TW91c2Vtb3ZlLCBjb250ZW50TW91c2VvdXQsIGNvbnRlbnRNb3VzZWRvd24sIGNvbnRlbnRNb3VzZXVwLFxuICAgICAgICAgKiAgY29udGVudENsaWNrLCBjb250ZW50RGJsY2xpY2ssIGNvbnRlbnRUb3VjaHN0YXJ0LCBjb250ZW50VG91Y2htb3ZlLCBjb250ZW50VG91Y2hlbmQsIGNvbnRlbnRUYXAsXG4gICAgICAgICAqICBhbmQgY29udGVudERibFRhcC4gIFBhc3MgaW4gYSBzdHJpbmcgb2YgZXZlbnRzIGRlbGltbWl0ZWQgYnkgYSBzcGFjZSB0byBiaW5kIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlXG4gICAgICAgICAqICBzdWNoIGFzICdtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUnLiBJbmNsdWRlIGEgbmFtZXNwYWNlIHRvIGJpbmQgYW5cbiAgICAgICAgICogIGV2ZW50IGJ5IG5hbWUgc3VjaCBhcyAnY2xpY2suZm9vYmFyJy5cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZ0U3RyIGUuZy4gJ2NsaWNrJywgJ21vdXNlZG93biB0b3VjaHN0YXJ0JywgJ21vdXNlZG93bi5mb28gdG91Y2hzdGFydC5mb28nXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIGhhbmRsZXIgZnVuY3Rpb24gaXMgcGFzc2VkIGFuIGV2ZW50IG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5Ob2RlfVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiAvLyBhZGQgY2xpY2sgbGlzdGVuZXJcbiAgICAgICAgICogbm9kZS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICogICBjb25zb2xlLmxvZygneW91IGNsaWNrZWQgbWUhJyk7XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBnZXQgdGhlIHRhcmdldCBub2RlXG4gICAgICAgICAqIG5vZGUub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAqICAgY29uc29sZS5sb2coZXZ0LnRhcmdldCk7XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBzdG9wIGV2ZW50IHByb3BhZ2F0aW9uXG4gICAgICAgICAqIG5vZGUub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAqICAgZXZ0LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBiaW5kIG11bHRpcGxlIGxpc3RlbmVyc1xuICAgICAgICAgKiBub2RlLm9uKCdjbGljayB0b3VjaHN0YXJ0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAqICAgY29uc29sZS5sb2coJ3lvdSBjbGlja2VkL3RvdWNoZWQgbWUhJyk7XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBuYW1lc3BhY2UgbGlzdGVuZXJcbiAgICAgICAgICogbm9kZS5vbignY2xpY2suZm9vJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAqICAgY29uc29sZS5sb2coJ3lvdSBjbGlja2VkL3RvdWNoZWQgbWUhJyk7XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBnZXQgdGhlIGV2ZW50IHR5cGVcbiAgICAgICAgICogbm9kZS5vbignY2xpY2sgdGFwJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAqICAgdmFyIGV2ZW50VHlwZSA9IGV2dC50eXBlO1xuICAgICAgICAgKiB9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gZ2V0IG5hdGl2ZSBldmVudCBvYmplY3RcbiAgICAgICAgICogbm9kZS5vbignY2xpY2sgdGFwJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAqICAgdmFyIG5hdGl2ZUV2ZW50ID0gZXZ0LmV2dDtcbiAgICAgICAgICogfSk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIGZvciBjaGFuZ2UgZXZlbnRzLCBnZXQgdGhlIG9sZCBhbmQgbmV3IHZhbFxuICAgICAgICAgKiBub2RlLm9uKCd4Q2hhbmdlJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAqICAgdmFyIG9sZFZhbCA9IGV2dC5vbGRWYWw7XG4gICAgICAgICAqICAgdmFyIG5ld1ZhbCA9IGV2dC5uZXdWYWw7XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKi9cbiAgICAgICAgb246IGZ1bmN0aW9uKGV2dFN0ciwgaGFuZGxlcikge1xuICAgICAgICAgICAgdmFyIGV2ZW50cyA9IGV2dFN0ci5zcGxpdChTUEFDRSksXG4gICAgICAgICAgICAgICAgbGVuID0gZXZlbnRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBuLCBldmVudCwgcGFydHMsIGJhc2VFdmVudCwgbmFtZTtcblxuICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBsb29wIHRocm91Z2ggdHlwZXMgYW5kIGF0dGFjaCBldmVudCBsaXN0ZW5lcnMgdG9cbiAgICAgICAgICAgICAqIGVhY2ggb25lLiAgZWcuICdjbGljayBtb3VzZW92ZXIubmFtZXNwYWNlIG1vdXNlb3V0J1xuICAgICAgICAgICAgICogd2lsbCBjcmVhdGUgdGhyZWUgZXZlbnQgYmluZGluZ3NcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZm9yKG4gPSAwOyBuIDwgbGVuOyBuKyspIHtcbiAgICAgICAgICAgICAgICBldmVudCA9IGV2ZW50c1tuXTtcbiAgICAgICAgICAgICAgICBwYXJ0cyA9IGV2ZW50LnNwbGl0KERPVCk7XG4gICAgICAgICAgICAgICAgYmFzZUV2ZW50ID0gcGFydHNbMF07XG4gICAgICAgICAgICAgICAgbmFtZSA9IHBhcnRzWzFdIHx8IEVNUFRZX1NUUklORztcblxuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBldmVudHMgYXJyYXkgaWYgaXQgZG9lc24ndCBleGlzdFxuICAgICAgICAgICAgICAgIGlmKCF0aGlzLmV2ZW50TGlzdGVuZXJzW2Jhc2VFdmVudF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyc1tiYXNlRXZlbnRdID0gW107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyc1tiYXNlRXZlbnRdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogcmVtb3ZlIGV2ZW50IGJpbmRpbmdzIGZyb20gdGhlIG5vZGUuIFBhc3MgaW4gYSBzdHJpbmcgb2ZcbiAgICAgICAgICogIGV2ZW50IHR5cGVzIGRlbGltbWl0ZWQgYnkgYSBzcGFjZSB0byByZW1vdmUgbXVsdGlwbGUgZXZlbnRcbiAgICAgICAgICogIGJpbmRpbmdzIGF0IG9uY2Ugc3VjaCBhcyAnbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlJy5cbiAgICAgICAgICogIGluY2x1ZGUgYSBuYW1lc3BhY2UgdG8gcmVtb3ZlIGFuIGV2ZW50IGJpbmRpbmcgYnkgbmFtZVxuICAgICAgICAgKiAgc3VjaCBhcyAnY2xpY2suZm9vYmFyJy4gSWYgeW91IG9ubHkgZ2l2ZSBhIG5hbWUgbGlrZSAnLmZvb2JhcicsXG4gICAgICAgICAqICBhbGwgZXZlbnRzIGluIHRoYXQgbmFtZXNwYWNlIHdpbGwgYmUgcmVtb3ZlZC5cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZ0U3RyIGUuZy4gJ2NsaWNrJywgJ21vdXNlZG93biB0b3VjaHN0YXJ0JywgJy5mb29iYXInXG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLk5vZGV9XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIC8vIHJlbW92ZSBsaXN0ZW5lclxuICAgICAgICAgKiBub2RlLm9mZignY2xpY2snKTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gcmVtb3ZlIG11bHRpcGxlIGxpc3RlbmVyc1xuICAgICAgICAgKiBub2RlLm9mZignY2xpY2sgdG91Y2hzdGFydCcpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyByZW1vdmUgbGlzdGVuZXIgYnkgbmFtZVxuICAgICAgICAgKiBub2RlLm9mZignY2xpY2suZm9vJyk7XG4gICAgICAgICAqL1xuICAgICAgICBvZmY6IGZ1bmN0aW9uKGV2dFN0cikge1xuICAgICAgICAgICAgdmFyIGV2ZW50cyA9IChldnRTdHIgfHwgJycpLnNwbGl0KFNQQUNFKSxcbiAgICAgICAgICAgICAgICBsZW4gPSBldmVudHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIG4sIHQsIGV2ZW50LCBwYXJ0cywgYmFzZUV2ZW50LCBuYW1lO1xuXG4gICAgICAgICAgICBpZiAoIWV2dFN0cikge1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBhbGwgZXZlbnRzXG4gICAgICAgICAgICAgICAgZm9yKHQgaW4gdGhpcy5ldmVudExpc3RlbmVycykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vZmYodCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yKG4gPSAwOyBuIDwgbGVuOyBuKyspIHtcbiAgICAgICAgICAgICAgICBldmVudCA9IGV2ZW50c1tuXTtcbiAgICAgICAgICAgICAgICBwYXJ0cyA9IGV2ZW50LnNwbGl0KERPVCk7XG4gICAgICAgICAgICAgICAgYmFzZUV2ZW50ID0gcGFydHNbMF07XG4gICAgICAgICAgICAgICAgbmFtZSA9IHBhcnRzWzFdO1xuXG4gICAgICAgICAgICAgICAgaWYoYmFzZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuZXZlbnRMaXN0ZW5lcnNbYmFzZUV2ZW50XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb2ZmKGJhc2VFdmVudCwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcih0IGluIHRoaXMuZXZlbnRMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29mZih0LCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvLyBzb21lIGV2ZW50IGFsaWFzZXMgZm9yIHRoaXJkIHBhcnR5IGludGVncmF0aW9uIGxpa2UgSGFtbWVySlNcbiAgICAgICAgZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHtcbiAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgICAgICAgICB0eXBlOiBldnQudHlwZSxcbiAgICAgICAgICAgICAgZXZ0OiBldnRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmZpcmUoZXZ0LnR5cGUsIGUpO1xuICAgICAgICB9LFxuICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbih0eXBlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAvLyB3ZSBoYXZlIHRvIHBhc3MgbmF0aXZlIGV2ZW50IHRvIGhhbmRsZXJcbiAgICAgICAgICAgIHRoaXMub24odHlwZSwgZnVuY3Rpb24oZXZ0KXtcbiAgICAgICAgICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgZXZ0LmV2dCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lciA6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMub2ZmKHR5cGUpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnQsIGJ1dCBkb24ndCBkZXN0cm95XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuTm9kZX1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogbm9kZS5yZW1vdmUoKTtcbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5nZXRQYXJlbnQoKTtcblxuICAgICAgICAgICAgaWYocGFyZW50ICYmIHBhcmVudC5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIHBhcmVudC5jaGlsZHJlbi5zcGxpY2UodGhpcy5pbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgcGFyZW50Ll9zZXRDaGlsZHJlbkluZGljZXMoKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5wYXJlbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGV2ZXJ5IGNhY2hlZCBhdHRyIHRoYXQgaXMgY2FsY3VsYXRlZCB2aWEgbm9kZSB0cmVlXG4gICAgICAgICAgICAvLyB0cmF2ZXJzYWwgbXVzdCBiZSBjbGVhcmVkIHdoZW4gcmVtb3ZpbmcgYSBub2RlXG4gICAgICAgICAgICB0aGlzLl9jbGVhclNlbGZBbmREZXNjZW5kYW50Q2FjaGUoU1RBR0UpO1xuICAgICAgICAgICAgdGhpcy5fY2xlYXJTZWxmQW5kRGVzY2VuZGFudENhY2hlKEFCU09MVVRFX1RSQU5TRk9STSk7XG4gICAgICAgICAgICB0aGlzLl9jbGVhclNlbGZBbmREZXNjZW5kYW50Q2FjaGUoVklTSUJMRSk7XG4gICAgICAgICAgICB0aGlzLl9jbGVhclNlbGZBbmREZXNjZW5kYW50Q2FjaGUoTElTVEVOSU5HKTtcbiAgICAgICAgICAgIHRoaXMuX2NsZWFyU2VsZkFuZERlc2NlbmRhbnRDYWNoZShBQlNPTFVURV9PUEFDSVRZKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiByZW1vdmUgYW5kIGRlc3Ryb3kgc2VsZlxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIG5vZGUuZGVzdHJveSgpO1xuICAgICAgICAgKi9cbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgZnJvbSBpZHMgYW5kIG5hbWVzIGhhc2hlc1xuICAgICAgICAgICAgS2luZXRpYy5fcmVtb3ZlSWQodGhpcy5nZXRJZCgpKTtcbiAgICAgICAgICAgIEtpbmV0aWMuX3JlbW92ZU5hbWUodGhpcy5nZXROYW1lKCksIHRoaXMuX2lkKTtcblxuICAgICAgICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCBhdHRyXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJcbiAgICAgICAgICogQHJldHVybnMge0ludGVnZXJ8U3RyaW5nfE9iamVjdHxBcnJheX1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogdmFyIHggPSBub2RlLmdldEF0dHIoJ3gnKTtcbiAgICAgICAgICovXG4gICAgICAgIGdldEF0dHI6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBHRVQgKyBLaW5ldGljLlV0aWwuX2NhcGl0YWxpemUoYXR0cik7XG4gICAgICAgICAgICBpZihLaW5ldGljLlV0aWwuX2lzRnVuY3Rpb24odGhpc1ttZXRob2RdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW21ldGhvZF0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSBnZXQgZGlyZWN0bHlcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmF0dHJzW2F0dHJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgKiBnZXQgYW5jZXN0b3JzXG4gICAgICAgICogQG1ldGhvZFxuICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICogQHJldHVybnMge0tpbmV0aWMuQ29sbGVjdGlvbn1cbiAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAqIHNoYXBlLmdldEFuY2VzdG9ycygpLmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAqICAgY29uc29sZS5sb2cobm9kZS5nZXRJZCgpKTtcbiAgICAgICAgKiB9KVxuICAgICAgICAqL1xuICAgICAgICBnZXRBbmNlc3RvcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KCksXG4gICAgICAgICAgICAgICAgYW5jZXN0b3JzID0gbmV3IEtpbmV0aWMuQ29sbGVjdGlvbigpO1xuXG4gICAgICAgICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgYW5jZXN0b3JzLnB1c2gocGFyZW50KTtcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQuZ2V0UGFyZW50KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhbmNlc3RvcnM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgYXR0cnMgb2JqZWN0IGxpdGVyYWxcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0QXR0cnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cnMgfHwge307XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXQgbXVsdGlwbGUgYXR0cnMgYXQgb25jZSB1c2luZyBhbiBvYmplY3QgbGl0ZXJhbFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgb2JqZWN0IGNvbnRhaW5pbmcga2V5IHZhbHVlIHBhaXJzXG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLk5vZGV9XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIG5vZGUuc2V0QXR0cnMoe1xuICAgICAgICAgKiAgIHg6IDUsXG4gICAgICAgICAqICAgZmlsbDogJ3JlZCdcbiAgICAgICAgICogfSk7XG4gICAgICAgICAqL1xuICAgICAgICBzZXRBdHRyczogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICB2YXIga2V5LCBtZXRob2Q7XG5cbiAgICAgICAgICAgIGlmKGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGZvcihrZXkgaW4gY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IENISUxEUkVOIHx8IGNvbmZpZ1trZXldIGluc3RhbmNlb2YgS2luZXRpYy5Ob2RlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IFNFVCArIEtpbmV0aWMuVXRpbC5fY2FwaXRhbGl6ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlIHNldHRlciBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKEtpbmV0aWMuVXRpbC5faXNGdW5jdGlvbih0aGlzW21ldGhvZF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1ttZXRob2RdKGNvbmZpZ1trZXldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSBzZXQgZGlyZWN0bHlcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldEF0dHIoa2V5LCBjb25maWdba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRldGVybWluZSBpZiBub2RlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzIGJ5IHRha2luZyBpbnRvIGFjY291bnQgYW5jZXN0b3JzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBQYXJlbnQgICAgfCBTZWxmICAgICAgfCBpc0xpc3RlbmluZ1xuICAgICAgICAgKiBsaXN0ZW5pbmcgfCBsaXN0ZW5pbmcgfCBcbiAgICAgICAgICogLS0tLS0tLS0tLSstLS0tLS0tLS0tLSstLS0tLS0tLS0tLS1cbiAgICAgICAgICogVCAgICAgICAgIHwgVCAgICAgICAgIHwgVCBcbiAgICAgICAgICogVCAgICAgICAgIHwgRiAgICAgICAgIHwgRlxuICAgICAgICAgKiBGICAgICAgICAgfCBUICAgICAgICAgfCBUIFxuICAgICAgICAgKiBGICAgICAgICAgfCBGICAgICAgICAgfCBGXG4gICAgICAgICAqIC0tLS0tLS0tLS0rLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tXG4gICAgICAgICAqIFQgICAgICAgICB8IEkgICAgICAgICB8IFRcbiAgICAgICAgICogRiAgICAgICAgIHwgSSAgICAgICAgIHwgRlxuICAgICAgICAgKiBJICAgICAgICAgfCBJICAgICAgICAgfCBUXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBpc0xpc3RlbmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q2FjaGUoTElTVEVOSU5HLCB0aGlzLl9pc0xpc3RlbmluZyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9pc0xpc3RlbmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbGlzdGVuaW5nID0gdGhpcy5nZXRMaXN0ZW5pbmcoKSxcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSB0aGlzLmdldFBhcmVudCgpO1xuXG4gICAgICAgICAgICAvLyB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIGEgc2ltcGxpZmljYXRpb24gb2YgdGhlIHRydXRoIHRhYmxlIGFib3ZlLlxuICAgICAgICAgICAgLy8gcGxlYXNlIG1vZGlmeSBjYXJlZnVsbHlcbiAgICAgICAgICAgIGlmIChsaXN0ZW5pbmcgPT09ICdpbmhlcml0Jykge1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5pc0xpc3RlbmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RlbmluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRldGVybWluZSBpZiBub2RlIGlzIHZpc2libGUgYnkgdGFraW5nIGludG8gYWNjb3VudCBhbmNlc3RvcnMuXG4gICAgICAgICAqXG4gICAgICAgICAqIFBhcmVudCAgICB8IFNlbGYgICAgICB8IGlzVmlzaWJsZVxuICAgICAgICAgKiB2aXNpYmxlICAgfCB2aXNpYmxlICAgfCBcbiAgICAgICAgICogLS0tLS0tLS0tLSstLS0tLS0tLS0tLSstLS0tLS0tLS0tLS1cbiAgICAgICAgICogVCAgICAgICAgIHwgVCAgICAgICAgIHwgVCBcbiAgICAgICAgICogVCAgICAgICAgIHwgRiAgICAgICAgIHwgRlxuICAgICAgICAgKiBGICAgICAgICAgfCBUICAgICAgICAgfCBUIFxuICAgICAgICAgKiBGICAgICAgICAgfCBGICAgICAgICAgfCBGXG4gICAgICAgICAqIC0tLS0tLS0tLS0rLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tXG4gICAgICAgICAqIFQgICAgICAgICB8IEkgICAgICAgICB8IFRcbiAgICAgICAgICogRiAgICAgICAgIHwgSSAgICAgICAgIHwgRlxuICAgICAgICAgKiBJICAgICAgICAgfCBJICAgICAgICAgfCBUXG5cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIGlzVmlzaWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q2FjaGUoVklTSUJMRSwgdGhpcy5faXNWaXNpYmxlKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2lzVmlzaWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdmlzaWJsZSA9IHRoaXMuZ2V0VmlzaWJsZSgpLFxuICAgICAgICAgICAgICAgIHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KCk7XG5cbiAgICAgICAgICAgIC8vIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgYSBzaW1wbGlmaWNhdGlvbiBvZiB0aGUgdHJ1dGggdGFibGUgYWJvdmUuXG4gICAgICAgICAgICAvLyBwbGVhc2UgbW9kaWZ5IGNhcmVmdWxseVxuICAgICAgICAgICAgaWYgKHZpc2libGUgPT09ICdpbmhlcml0Jykge1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5pc1Zpc2libGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpYmxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZGV0ZXJtaW5lIGlmIGxpc3RlbmluZyBpcyBlbmFibGVkIGJ5IHRha2luZyBpbnRvIGFjY291bnQgZGVzY2VuZGFudHMuICBJZiBzZWxmIG9yIGFueSBjaGlsZHJlblxuICAgICAgICAgKiBoYXZlIF9pc0xpc3RlbmluZ0VuYWJsZWQgc2V0IHRvIHRydWUsIHRoZW4gc2VsZiBhbHNvIGhhcyBsaXN0ZW5pbmcgZW5hYmxlZC5cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHNob3VsZERyYXdIaXQ6IGZ1bmN0aW9uKGNhbnZhcykge1xuICAgICAgICAgICAgdmFyIGxheWVyID0gdGhpcy5nZXRMYXllcigpO1xuICAgICAgICAgICAgcmV0dXJuICAoY2FudmFzICYmIGNhbnZhcy5pc0NhY2hlKSB8fCAobGF5ZXIgJiYgbGF5ZXIuaGl0R3JhcGhFbmFibGVkKCkpXG4gICAgICAgICAgICAgICAgJiYgdGhpcy5pc0xpc3RlbmluZygpICYmIHRoaXMuaXNWaXNpYmxlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzaG93IG5vZGVcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5Ob2RlfVxuICAgICAgICAgKi9cbiAgICAgICAgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGhpZGUgbm9kZS4gIEhpZGRlbiBub2RlcyBhcmUgbm8gbG9uZ2VyIGRldGVjdGFibGVcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5Ob2RlfVxuICAgICAgICAgKi9cbiAgICAgICAgaGlkZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgekluZGV4IHJlbGF0aXZlIHRvIHRoZSBub2RlJ3Mgc2libGluZ3Mgd2hvIHNoYXJlIHRoZSBzYW1lIHBhcmVudFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtJbnRlZ2VyfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0WkluZGV4OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmluZGV4IHx8IDA7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgYWJzb2x1dGUgei1pbmRleCB3aGljaCB0YWtlcyBpbnRvIGFjY291bnQgc2libGluZ1xuICAgICAgICAgKiAgYW5kIGFuY2VzdG9yIGluZGljZXNcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7SW50ZWdlcn1cbiAgICAgICAgICovXG4gICAgICAgIGdldEFic29sdXRlWkluZGV4OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkZXB0aCA9IHRoaXMuZ2V0RGVwdGgoKSxcbiAgICAgICAgICAgICAgICB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgICAgICAgbm9kZXMsIGxlbiwgbiwgY2hpbGQ7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZENoaWxkcmVuKGNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgbm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZm9yKG4gPSAwOyBuIDwgbGVuOyBuKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltuXTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcblxuICAgICAgICAgICAgICAgICAgICBpZihjaGlsZC5ub2RlVHlwZSAhPT0gU0hBUEUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzID0gbm9kZXMuY29uY2F0KGNoaWxkLmdldENoaWxkcmVuKCkudG9BcnJheSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmKGNoaWxkLl9pZCA9PT0gdGhhdC5faWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBsZW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZihub2Rlcy5sZW5ndGggPiAwICYmIG5vZGVzWzBdLmdldERlcHRoKCkgPD0gZGVwdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2hpbGRyZW4obm9kZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHRoYXQubm9kZVR5cGUgIT09IFVQUEVSX1NUQUdFKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2hpbGRyZW4odGhhdC5nZXRTdGFnZSgpLmdldENoaWxkcmVuKCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgbm9kZSBkZXB0aCBpbiBub2RlIHRyZWUuICBSZXR1cm5zIGFuIGludGVnZXIuXG4gICAgICAgICAqICBlLmcuIFN0YWdlIGRlcHRoIHdpbGwgYWx3YXlzIGJlIDAuICBMYXllcnMgd2lsbCBhbHdheXMgYmUgMS4gIEdyb3VwcyBhbmQgU2hhcGVzIHdpbGwgYWx3YXlzXG4gICAgICAgICAqICBiZSA+PSAyXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0ludGVnZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBnZXREZXB0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZGVwdGggPSAwLFxuICAgICAgICAgICAgICAgIHBhcmVudCA9IHRoaXMucGFyZW50O1xuXG4gICAgICAgICAgICB3aGlsZShwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBkZXB0aCsrO1xuICAgICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVwdGg7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFBvc2l0aW9uOiBmdW5jdGlvbihwb3MpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0WChwb3MueCk7XG4gICAgICAgICAgICB0aGlzLnNldFkocG9zLnkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgeDogdGhpcy5nZXRYKCksXG4gICAgICAgICAgICAgICAgeTogdGhpcy5nZXRZKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgYWJzb2x1dGUgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIHRvcCBsZWZ0IGNvcm5lciBvZiB0aGUgc3RhZ2UgY29udGFpbmVyIGRpdlxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRBYnNvbHV0ZVBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhYnNvbHV0ZU1hdHJpeCA9IHRoaXMuZ2V0QWJzb2x1dGVUcmFuc2Zvcm0oKS5nZXRNYXRyaXgoKSxcbiAgICAgICAgICAgICAgICBhYnNvbHV0ZVRyYW5zZm9ybSA9IG5ldyBLaW5ldGljLlRyYW5zZm9ybSgpLFxuICAgICAgICAgICAgICAgIG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cbiAgICAgICAgICAgIC8vIGNsb25lIHRoZSBtYXRyaXggYXJyYXlcbiAgICAgICAgICAgIGFic29sdXRlVHJhbnNmb3JtLm0gPSBhYnNvbHV0ZU1hdHJpeC5zbGljZSgpO1xuICAgICAgICAgICAgYWJzb2x1dGVUcmFuc2Zvcm0udHJhbnNsYXRlKG9mZnNldC54LCBvZmZzZXQueSk7XG5cbiAgICAgICAgICAgIHJldHVybiBhYnNvbHV0ZVRyYW5zZm9ybS5nZXRUcmFuc2xhdGlvbigpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogc2V0IGFic29sdXRlIHBvc2l0aW9uXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHBvc1xuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gcG9zLnhcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvcy55XG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLk5vZGV9XG4gICAgICAgICAqL1xuICAgICAgICBzZXRBYnNvbHV0ZVBvc2l0aW9uOiBmdW5jdGlvbihwb3MpIHtcbiAgICAgICAgICAgIHZhciBvcmlnVHJhbnMgPSB0aGlzLl9jbGVhclRyYW5zZm9ybSgpLFxuICAgICAgICAgICAgICAgIGl0O1xuXG4gICAgICAgICAgICAvLyBkb24ndCBjbGVhciB0cmFuc2xhdGlvblxuICAgICAgICAgICAgdGhpcy5hdHRycy54ID0gb3JpZ1RyYW5zLng7XG4gICAgICAgICAgICB0aGlzLmF0dHJzLnkgPSBvcmlnVHJhbnMueTtcbiAgICAgICAgICAgIGRlbGV0ZSBvcmlnVHJhbnMueDtcbiAgICAgICAgICAgIGRlbGV0ZSBvcmlnVHJhbnMueTtcblxuICAgICAgICAgICAgLy8gdW5yYXZlbCB0cmFuc2Zvcm1cbiAgICAgICAgICAgIGl0ID0gdGhpcy5nZXRBYnNvbHV0ZVRyYW5zZm9ybSgpO1xuXG4gICAgICAgICAgICBpdC5pbnZlcnQoKTtcbiAgICAgICAgICAgIGl0LnRyYW5zbGF0ZShwb3MueCwgcG9zLnkpO1xuICAgICAgICAgICAgcG9zID0ge1xuICAgICAgICAgICAgICAgIHg6IHRoaXMuYXR0cnMueCArIGl0LmdldFRyYW5zbGF0aW9uKCkueCxcbiAgICAgICAgICAgICAgICB5OiB0aGlzLmF0dHJzLnkgKyBpdC5nZXRUcmFuc2xhdGlvbigpLnlcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb24oe3g6cG9zLngsIHk6cG9zLnl9KTtcbiAgICAgICAgICAgIHRoaXMuX3NldFRyYW5zZm9ybShvcmlnVHJhbnMpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgX3NldFRyYW5zZm9ybTogZnVuY3Rpb24odHJhbnMpIHtcbiAgICAgICAgICAgIHZhciBrZXk7XG5cbiAgICAgICAgICAgIGZvcihrZXkgaW4gdHJhbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmF0dHJzW2tleV0gPSB0cmFuc1trZXldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9jbGVhckNhY2hlKFRSQU5TRk9STSk7XG4gICAgICAgICAgICB0aGlzLl9jbGVhclNlbGZBbmREZXNjZW5kYW50Q2FjaGUoQUJTT0xVVEVfVFJBTlNGT1JNKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2NsZWFyVHJhbnNmb3JtOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0cmFucyA9IHtcbiAgICAgICAgICAgICAgICB4OiB0aGlzLmdldFgoKSxcbiAgICAgICAgICAgICAgICB5OiB0aGlzLmdldFkoKSxcbiAgICAgICAgICAgICAgICByb3RhdGlvbjogdGhpcy5nZXRSb3RhdGlvbigpLFxuICAgICAgICAgICAgICAgIHNjYWxlWDogdGhpcy5nZXRTY2FsZVgoKSxcbiAgICAgICAgICAgICAgICBzY2FsZVk6IHRoaXMuZ2V0U2NhbGVZKCksXG4gICAgICAgICAgICAgICAgb2Zmc2V0WDogdGhpcy5nZXRPZmZzZXRYKCksXG4gICAgICAgICAgICAgICAgb2Zmc2V0WTogdGhpcy5nZXRPZmZzZXRZKCksXG4gICAgICAgICAgICAgICAgc2tld1g6IHRoaXMuZ2V0U2tld1goKSxcbiAgICAgICAgICAgICAgICBza2V3WTogdGhpcy5nZXRTa2V3WSgpXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLmF0dHJzLnggPSAwO1xuICAgICAgICAgICAgdGhpcy5hdHRycy55ID0gMDtcbiAgICAgICAgICAgIHRoaXMuYXR0cnMucm90YXRpb24gPSAwO1xuICAgICAgICAgICAgdGhpcy5hdHRycy5zY2FsZVggPSAxO1xuICAgICAgICAgICAgdGhpcy5hdHRycy5zY2FsZVkgPSAxO1xuICAgICAgICAgICAgdGhpcy5hdHRycy5vZmZzZXRYID0gMDtcbiAgICAgICAgICAgIHRoaXMuYXR0cnMub2Zmc2V0WSA9IDA7XG4gICAgICAgICAgICB0aGlzLmF0dHJzLnNrZXdYID0gMDtcbiAgICAgICAgICAgIHRoaXMuYXR0cnMuc2tld1kgPSAwO1xuXG4gICAgICAgICAgICB0aGlzLl9jbGVhckNhY2hlKFRSQU5TRk9STSk7XG4gICAgICAgICAgICB0aGlzLl9jbGVhclNlbGZBbmREZXNjZW5kYW50Q2FjaGUoQUJTT0xVVEVfVFJBTlNGT1JNKTtcblxuICAgICAgICAgICAgLy8gcmV0dXJuIG9yaWdpbmFsIHRyYW5zZm9ybVxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogbW92ZSBub2RlIGJ5IGFuIGFtb3VudCByZWxhdGl2ZSB0byBpdHMgY3VycmVudCBwb3NpdGlvblxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjaGFuZ2VcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYW5nZS54XG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFuZ2UueVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5Ob2RlfVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiAvLyBtb3ZlIG5vZGUgaW4geCBkaXJlY3Rpb24gYnkgMXB4IGFuZCB5IGRpcmVjdGlvbiBieSAycHhcbiAgICAgICAgICogbm9kZS5tb3ZlKHtcbiAgICAgICAgICogICB4OiAxLFxuICAgICAgICAgKiAgIHk6IDIpXG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKi9cbiAgICAgICAgbW92ZTogZnVuY3Rpb24oY2hhbmdlKSB7XG4gICAgICAgICAgICB2YXIgY2hhbmdlWCA9IGNoYW5nZS54LFxuICAgICAgICAgICAgICAgIGNoYW5nZVkgPSBjaGFuZ2UueSxcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5nZXRYKCksXG4gICAgICAgICAgICAgICAgeSA9IHRoaXMuZ2V0WSgpO1xuXG4gICAgICAgICAgICBpZihjaGFuZ2VYICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB4ICs9IGNoYW5nZVg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGNoYW5nZVkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHkgKz0gY2hhbmdlWTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbih7eDp4LCB5Onl9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBfZWFjaEFuY2VzdG9yUmV2ZXJzZTogZnVuY3Rpb24oZnVuYywgdG9wKSB7XG4gICAgICAgICAgICB2YXIgZmFtaWx5ID0gW10sXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gdGhpcy5nZXRQYXJlbnQoKSxcbiAgICAgICAgICAgICAgICBsZW4sIG47XG5cbiAgICAgICAgICAgIC8vIGlmIHRvcCBub2RlIGlzIGRlZmluZWQsIGFuZCB0aGlzIG5vZGUgaXMgdG9wIG5vZGUsXG4gICAgICAgICAgICAvLyB0aGVyZSdzIG5vIG5lZWQgdG8gYnVpbGQgYSBmYW1pbHkgdHJlZS4gIGp1c3QgZXhlY3V0ZVxuICAgICAgICAgICAgLy8gZnVuYyB3aXRoIHRoaXMgYmVjYXVzZSBpdCB3aWxsIGJlIHRoZSBvbmx5IG5vZGVcbiAgICAgICAgICAgIGlmICh0b3AgJiYgdG9wLl9pZCA9PT0gdGhpcy5faWQpIHtcbiAgICAgICAgICAgICAgICBmdW5jKHRoaXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmYW1pbHkudW5zaGlmdCh0aGlzKTtcblxuICAgICAgICAgICAgd2hpbGUocGFyZW50ICYmICghdG9wIHx8IHBhcmVudC5faWQgIT09IHRvcC5faWQpKSB7XG4gICAgICAgICAgICAgICAgZmFtaWx5LnVuc2hpZnQocGFyZW50KTtcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZW4gPSBmYW1pbHkubGVuZ3RoO1xuICAgICAgICAgICAgZm9yKG4gPSAwOyBuIDwgbGVuOyBuKyspIHtcbiAgICAgICAgICAgICAgICBmdW5jKGZhbWlseVtuXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiByb3RhdGUgbm9kZSBieSBhbiBhbW91bnQgaW4gZGVncmVlcyByZWxhdGl2ZSB0byBpdHMgY3VycmVudCByb3RhdGlvblxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0aGV0YVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5Ob2RlfVxuICAgICAgICAgKi9cbiAgICAgICAgcm90YXRlOiBmdW5jdGlvbih0aGV0YSkge1xuICAgICAgICAgICAgdGhpcy5zZXRSb3RhdGlvbih0aGlzLmdldFJvdGF0aW9uKCkgKyB0aGV0YSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIG1vdmUgbm9kZSB0byB0aGUgdG9wIG9mIGl0cyBzaWJsaW5nc1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgbW92ZVRvVG9wOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBLaW5ldGljLlV0aWwud2FybignTm9kZSBoYXMgbm8gcGFyZW50LiBtb3ZlVG9Ub3AgZnVuY3Rpb24gaXMgaWdub3JlZC4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmNoaWxkcmVuLnB1c2godGhpcyk7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5fc2V0Q2hpbGRyZW5JbmRpY2VzKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIG1vdmUgbm9kZSB1cFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgbW92ZVVwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBLaW5ldGljLlV0aWwud2FybignTm9kZSBoYXMgbm8gcGFyZW50LiBtb3ZlVXAgZnVuY3Rpb24gaXMgaWdub3JlZC4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4LFxuICAgICAgICAgICAgICAgIGxlbiA9IHRoaXMucGFyZW50LmdldENoaWxkcmVuKCkubGVuZ3RoO1xuICAgICAgICAgICAgaWYoaW5kZXggPCBsZW4gLSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXggKyAxLCAwLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5fc2V0Q2hpbGRyZW5JbmRpY2VzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtb3ZlIG5vZGUgZG93blxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgbW92ZURvd246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgICAgIEtpbmV0aWMuVXRpbC53YXJuKCdOb2RlIGhhcyBubyBwYXJlbnQuIG1vdmVEb3duIGZ1bmN0aW9uIGlzIGlnbm9yZWQuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgIGlmKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4IC0gMSwgMCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuX3NldENoaWxkcmVuSW5kaWNlcygpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogbW92ZSBub2RlIHRvIHRoZSBib3R0b20gb2YgaXRzIHNpYmxpbmdzXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBtb3ZlVG9Cb3R0b206IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgICAgIEtpbmV0aWMuVXRpbC53YXJuKCdOb2RlIGhhcyBubyBwYXJlbnQuIG1vdmVUb0JvdHRvbSBmdW5jdGlvbiBpcyBpZ25vcmVkLicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICBpZihpbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LmNoaWxkcmVuLnVuc2hpZnQodGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuX3NldENoaWxkcmVuSW5kaWNlcygpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogc2V0IHpJbmRleCByZWxhdGl2ZSB0byBzaWJsaW5nc1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gekluZGV4XG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLk5vZGV9XG4gICAgICAgICAqL1xuICAgICAgICBzZXRaSW5kZXg6IGZ1bmN0aW9uKHpJbmRleCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgICAgIEtpbmV0aWMuVXRpbC53YXJuKCdOb2RlIGhhcyBubyBwYXJlbnQuIHpJbmRleCBwYXJhbWV0ZXIgaXMgaWdub3JlZC4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZSh6SW5kZXgsIDAsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuX3NldENoaWxkcmVuSW5kaWNlcygpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgYWJzb2x1dGUgb3BhY2l0eVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRBYnNvbHV0ZU9wYWNpdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldENhY2hlKEFCU09MVVRFX09QQUNJVFksIHRoaXMuX2dldEFic29sdXRlT3BhY2l0eSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRBYnNvbHV0ZU9wYWNpdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGFic09wYWNpdHkgPSB0aGlzLmdldE9wYWNpdHkoKTtcbiAgICAgICAgICAgIGlmKHRoaXMuZ2V0UGFyZW50KCkpIHtcbiAgICAgICAgICAgICAgICBhYnNPcGFjaXR5ICo9IHRoaXMuZ2V0UGFyZW50KCkuZ2V0QWJzb2x1dGVPcGFjaXR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWJzT3BhY2l0eTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIG1vdmUgbm9kZSB0byBhbm90aGVyIGNvbnRhaW5lclxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7Q29udGFpbmVyfSBuZXdDb250YWluZXJcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuTm9kZX1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogLy8gbW92ZSBub2RlIGZyb20gY3VycmVudCBsYXllciBpbnRvIGxheWVyMlxuICAgICAgICAgKiBub2RlLm1vdmVUbyhsYXllcjIpO1xuICAgICAgICAgKi9cbiAgICAgICAgbW92ZVRvOiBmdW5jdGlvbihuZXdDb250YWluZXIpIHtcbiAgICAgICAgICAgIC8vIGRvIG5vdGhpbmcgaWYgbmV3IGNvbnRhaW5lciBpcyBhbHJlYWR5IHBhcmVudFxuICAgICAgICAgICAgaWYgKHRoaXMuZ2V0UGFyZW50KCkgIT09IG5ld0NvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgbmV3Q29udGFpbmVyLmFkZCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogY29udmVydCBOb2RlIGludG8gYW4gb2JqZWN0IGZvciBzZXJpYWxpemF0aW9uLiAgUmV0dXJucyBhbiBvYmplY3QuXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRvT2JqZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0eXBlID0gS2luZXRpYy5VdGlsLFxuICAgICAgICAgICAgICAgIG9iaiA9IHt9LFxuICAgICAgICAgICAgICAgIGF0dHJzID0gdGhpcy5nZXRBdHRycygpLFxuICAgICAgICAgICAgICAgIGtleSwgdmFsLCBnZXR0ZXIsIGRlZmF1bHRWYWx1ZTtcblxuICAgICAgICAgICAgb2JqLmF0dHJzID0ge307XG5cbiAgICAgICAgICAgIC8vIHNlcmlhbGl6ZSBvbmx5IGF0dHJpYnV0ZXMgdGhhdCBhcmUgbm90IGZ1bmN0aW9uLCBpbWFnZSwgRE9NLCBvciBvYmplY3RzIHdpdGggbWV0aG9kc1xuICAgICAgICAgICAgZm9yKGtleSBpbiBhdHRycykge1xuICAgICAgICAgICAgICAgIHZhbCA9IGF0dHJzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKCF0eXBlLl9pc0Z1bmN0aW9uKHZhbCkgJiYgIXR5cGUuX2lzRWxlbWVudCh2YWwpICYmICEodHlwZS5faXNPYmplY3QodmFsKSAmJiB0eXBlLl9oYXNNZXRob2RzKHZhbCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldHRlciA9IHRoaXNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGF0dHIgdmFsdWUgc28gdGhhdCB3ZSBjYW4gZXh0cmFjdCB0aGUgZGVmYXVsdCB2YWx1ZSBmcm9tIHRoZSBnZXR0ZXJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGF0dHJzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKHRoaXMpIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVzdG9yZSBhdHRyIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0VmFsdWUgIT09IHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmF0dHJzW2tleV0gPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9iai5jbGFzc05hbWUgPSB0aGlzLmdldENsYXNzTmFtZSgpO1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbnZlcnQgTm9kZSBpbnRvIGEgSlNPTiBzdHJpbmcuICBSZXR1cm5zIGEgSlNPTiBzdHJpbmcuXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ319XG4gICAgICAgICAqL1xuICAgICAgICB0b0pTT046IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9PYmplY3QoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgcGFyZW50IGNvbnRhaW5lclxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLk5vZGV9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IGxheWVyIGFuY2VzdG9yXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuTGF5ZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRMYXllcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5nZXRQYXJlbnQoKTtcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnQgPyBwYXJlbnQuZ2V0TGF5ZXIoKSA6IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgc3RhZ2UgYW5jZXN0b3JcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5TdGFnZX1cbiAgICAgICAgICovXG4gICAgICAgIGdldFN0YWdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRDYWNoZShTVEFHRSwgdGhpcy5fZ2V0U3RhZ2UpO1xuICAgICAgICB9LFxuICAgICAgICBfZ2V0U3RhZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KCk7XG4gICAgICAgICAgICBpZihwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50LmdldFN0YWdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZmlyZSBldmVudFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFR5cGUgZXZlbnQgdHlwZS4gIGNhbiBiZSBhIHJlZ3VsYXIgZXZlbnQsIGxpa2UgY2xpY2ssIG1vdXNlb3Zlciwgb3IgbW91c2VvdXQsIG9yIGl0IGNhbiBiZSBhIGN1c3RvbSBldmVudCwgbGlrZSBteUN1c3RvbUV2ZW50XG4gICAgICAgICAqIEBwYXJhbSB7RXZlbnR9IFtldnRdIGV2ZW50IG9iamVjdFxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtidWJibGVdIHNldHRpbmcgdGhlIHZhbHVlIHRvIGZhbHNlLCBvciBsZWF2aW5nIGl0IHVuZGVmaW5lZCwgd2lsbCByZXN1bHQgaW4gdGhlIGV2ZW50XG4gICAgICAgICAqICBub3QgYnViYmxpbmcuICBTZXR0aW5nIHRoZSB2YWx1ZSB0byB0cnVlIHdpbGwgcmVzdWx0IGluIHRoZSBldmVudCBidWJibGluZy5cbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuTm9kZX1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogLy8gbWFudWFsbHkgZmlyZSBjbGljayBldmVudFxuICAgICAgICAgKiBub2RlLmZpcmUoJ2NsaWNrJyk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIGZpcmUgY3VzdG9tIGV2ZW50XG4gICAgICAgICAqIG5vZGUuZmlyZSgnZm9vJyk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIGZpcmUgY3VzdG9tIGV2ZW50IHdpdGggY3VzdG9tIGV2ZW50IG9iamVjdFxuICAgICAgICAgKiBub2RlLmZpcmUoJ2ZvbycsIHtcbiAgICAgICAgICogICBiYXI6IDEwXG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBmaXJlIGNsaWNrIGV2ZW50IHRoYXQgYnViYmxlc1xuICAgICAgICAgKiBub2RlLmZpcmUoJ2NsaWNrJywgbnVsbCwgdHJ1ZSk7XG4gICAgICAgICAqL1xuICAgICAgICBmaXJlOiBmdW5jdGlvbihldmVudFR5cGUsIGV2dCwgYnViYmxlKSB7XG4gICAgICAgICAgICAvLyBidWJibGVcbiAgICAgICAgICAgIGlmIChidWJibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlQW5kQnViYmxlKGV2ZW50VHlwZSwgZXZ0IHx8IHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG5vIGJ1YmJsZVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZShldmVudFR5cGUsIGV2dCB8fCB7fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCBhYnNvbHV0ZSB0cmFuc2Zvcm0gb2YgdGhlIG5vZGUgd2hpY2ggdGFrZXMgaW50b1xuICAgICAgICAgKiAgYWNjb3VudCBpdHMgYW5jZXN0b3IgdHJhbnNmb3Jtc1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLlRyYW5zZm9ybX1cbiAgICAgICAgICovXG4gICAgICAgIGdldEFic29sdXRlVHJhbnNmb3JtOiBmdW5jdGlvbih0b3ApIHtcbiAgICAgICAgICAgIC8vIGlmIHVzaW5nIGFuIGFyZ3VtZW50LCB3ZSBjYW4ndCBjYWNoZSB0aGUgcmVzdWx0LlxuICAgICAgICAgICAgaWYgKHRvcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRBYnNvbHV0ZVRyYW5zZm9ybSh0b3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgbm8gYXJndW1lbnQsIHdlIGNhbiBjYWNoZSB0aGUgcmVzdWx0XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q2FjaGUoQUJTT0xVVEVfVFJBTlNGT1JNLCB0aGlzLl9nZXRBYnNvbHV0ZVRyYW5zZm9ybSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRBYnNvbHV0ZVRyYW5zZm9ybTogZnVuY3Rpb24odG9wKSB7XG4gICAgICAgICAgICB2YXIgYXQgPSBuZXcgS2luZXRpYy5UcmFuc2Zvcm0oKSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zRW5hYmxlZCwgdHJhbnM7XG5cbiAgICAgICAgICAgIC8vIHN0YXJ0IHdpdGggc3RhZ2UgYW5kIHRyYXZlcnNlIGRvd253YXJkcyB0byBzZWxmXG4gICAgICAgICAgICB0aGlzLl9lYWNoQW5jZXN0b3JSZXZlcnNlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zRW5hYmxlZCA9IG5vZGUudHJhbnNmb3Jtc0VuYWJsZWQoKTtcbiAgICAgICAgICAgICAgICB0cmFucyA9IG5vZGUuZ2V0VHJhbnNmb3JtKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHJhbnNmb3Jtc0VuYWJsZWQgPT09ICdhbGwnKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0Lm11bHRpcGx5KHRyYW5zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHJhbnNmb3Jtc0VuYWJsZWQgPT09ICdwb3NpdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgYXQudHJhbnNsYXRlKG5vZGUueCgpLCBub2RlLnkoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdG9wKTtcbiAgICAgICAgICAgIHJldHVybiBhdDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCB0cmFuc2Zvcm0gb2YgdGhlIG5vZGVcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5UcmFuc2Zvcm19XG4gICAgICAgICAqL1xuICAgICAgICBnZXRUcmFuc2Zvcm06IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldENhY2hlKFRSQU5TRk9STSwgdGhpcy5fZ2V0VHJhbnNmb3JtKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldFRyYW5zZm9ybTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyBLaW5ldGljLlRyYW5zZm9ybSgpLFxuICAgICAgICAgICAgICAgIHggPSB0aGlzLmdldFgoKSxcbiAgICAgICAgICAgICAgICB5ID0gdGhpcy5nZXRZKCksXG4gICAgICAgICAgICAgICAgcm90YXRpb24gPSBLaW5ldGljLmdldEFuZ2xlKHRoaXMuZ2V0Um90YXRpb24oKSksXG4gICAgICAgICAgICAgICAgc2NhbGVYID0gdGhpcy5nZXRTY2FsZVgoKSxcbiAgICAgICAgICAgICAgICBzY2FsZVkgPSB0aGlzLmdldFNjYWxlWSgpLFxuICAgICAgICAgICAgICAgIHNrZXdYID0gdGhpcy5nZXRTa2V3WCgpLFxuICAgICAgICAgICAgICAgIHNrZXdZID0gdGhpcy5nZXRTa2V3WSgpLFxuICAgICAgICAgICAgICAgIG9mZnNldFggPSB0aGlzLmdldE9mZnNldFgoKSxcbiAgICAgICAgICAgICAgICBvZmZzZXRZID0gdGhpcy5nZXRPZmZzZXRZKCk7XG5cbiAgICAgICAgICAgIGlmKHggIT09IDAgfHwgeSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIG0udHJhbnNsYXRlKHgsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYocm90YXRpb24gIT09IDApIHtcbiAgICAgICAgICAgICAgICBtLnJvdGF0ZShyb3RhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihza2V3WCAhPT0gMCB8fCBza2V3WSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIG0uc2tldyhza2V3WCwgc2tld1kpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoc2NhbGVYICE9PSAxIHx8IHNjYWxlWSAhPT0gMSkge1xuICAgICAgICAgICAgICAgIG0uc2NhbGUoc2NhbGVYLCBzY2FsZVkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYob2Zmc2V0WCAhPT0gMCB8fCBvZmZzZXRZICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgbS50cmFuc2xhdGUoLTEgKiBvZmZzZXRYLCAtMSAqIG9mZnNldFkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNsb25lIG5vZGUuICBSZXR1cm5zIGEgbmV3IE5vZGUgaW5zdGFuY2Ugd2l0aCBpZGVudGljYWwgYXR0cmlidXRlcy4gIFlvdSBjYW4gYWxzbyBvdmVycmlkZVxuICAgICAgICAgKiAgdGhlIG5vZGUgcHJvcGVydGllcyB3aXRoIGFuIG9iamVjdCBsaXRlcmFsLCBlbmFibGluZyB5b3UgdG8gdXNlIGFuIGV4aXN0aW5nIG5vZGUgYXMgYSB0ZW1wbGF0ZVxuICAgICAgICAgKiAgZm9yIGFub3RoZXIgbm9kZVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogb3ZlcnJpZGUgYXR0cnNcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuTm9kZX1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogLy8gc2ltcGxlIGNsb25lXG4gICAgICAgICAqIHZhciBjbG9uZSA9IG5vZGUuY2xvbmUoKTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gY2xvbmUgYSBub2RlIGFuZCBvdmVycmlkZSB0aGUgeCBwb3NpdGlvblxuICAgICAgICAgKiB2YXIgY2xvbmUgPSByZWN0LmNsb25lKHtcbiAgICAgICAgICogICB4OiA1XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKi9cbiAgICAgICAgY2xvbmU6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgLy8gaW5zdGFudGlhdGUgbmV3IG5vZGVcbiAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSB0aGlzLmdldENsYXNzTmFtZSgpLFxuICAgICAgICAgICAgICAgIGF0dHJzID0gS2luZXRpYy5VdGlsLmNsb25lT2JqZWN0KHRoaXMuYXR0cnMpLFxuICAgICAgICAgICAgICAgIGtleSwgYWxsTGlzdGVuZXJzLCBsZW4sIG4sIGxpc3RlbmVyO1xuICAgICAgICAgICAgLy8gZmlsdGVyIGJsYWNrIGF0dHJzXG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIENMT05FX0JMQUNLX0xJU1QpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmxvY2tBdHRyID0gQ0xPTkVfQkxBQ0tfTElTVFtpXTtcbiAgICAgICAgICAgICAgICBkZWxldGUgYXR0cnNbYmxvY2tBdHRyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGFwcGx5IGF0dHIgb3ZlcnJpZGVzXG4gICAgICAgICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBhdHRyc1trZXldID0gb2JqW2tleV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBub2RlID0gbmV3IEtpbmV0aWNbY2xhc3NOYW1lXShhdHRycyk7XG4gICAgICAgICAgICAvLyBjb3B5IG92ZXIgbGlzdGVuZXJzXG4gICAgICAgICAgICBmb3Ioa2V5IGluIHRoaXMuZXZlbnRMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICBhbGxMaXN0ZW5lcnMgPSB0aGlzLmV2ZW50TGlzdGVuZXJzW2tleV07XG4gICAgICAgICAgICAgICAgbGVuID0gYWxsTGlzdGVuZXJzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IobiA9IDA7IG4gPCBsZW47IG4rKykge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lciA9IGFsbExpc3RlbmVyc1tuXTtcbiAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICogZG9uJ3QgaW5jbHVkZSBraW5ldGljIG5hbWVzcGFjZWQgbGlzdGVuZXJzIGJlY2F1c2VcbiAgICAgICAgICAgICAgICAgICAgICogIHRoZXNlIGFyZSBnZW5lcmF0ZWQgYnkgdGhlIGNvbnN0cnVjdG9yc1xuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYobGlzdGVuZXIubmFtZS5pbmRleE9mKEtJTkVUSUMpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgbGlzdGVuZXJzIGFycmF5IGRvZXNuJ3QgZXhpc3QsIHRoZW4gY3JlYXRlIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICBpZighbm9kZS5ldmVudExpc3RlbmVyc1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5ldmVudExpc3RlbmVyc1trZXldID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmV2ZW50TGlzdGVuZXJzW2tleV0ucHVzaChsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBjb21wb3NpdGUgZGF0YSBVUkwuIElmIE1JTUUgdHlwZSBpcyBub3RcbiAgICAgICAgICogc3BlY2lmaWVkLCB0aGVuIFwiaW1hZ2UvcG5nXCIgd2lsbCByZXN1bHQuIEZvciBcImltYWdlL2pwZWdcIiwgc3BlY2lmeSBhIHF1YWxpdHlcbiAgICAgICAgICogbGV2ZWwgYXMgcXVhbGl0eSAocmFuZ2UgMC4wIC0gMS4wKVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubWltZVR5cGVdIGNhbiBiZSBcImltYWdlL3BuZ1wiIG9yIFwiaW1hZ2UvanBlZ1wiLlxuICAgICAgICAgKiAgXCJpbWFnZS9wbmdcIiBpcyB0aGUgZGVmYXVsdFxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XSB4IHBvc2l0aW9uIG9mIGNhbnZhcyBzZWN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldIHkgcG9zaXRpb24gb2YgY2FudmFzIHNlY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdIHdpZHRoIG9mIGNhbnZhcyBzZWN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF0gaGVpZ2h0IG9mIGNhbnZhcyBzZWN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnF1YWxpdHldIGpwZWcgcXVhbGl0eS4gIElmIHVzaW5nIGFuIFwiaW1hZ2UvanBlZ1wiIG1pbWVUeXBlLFxuICAgICAgICAgKiAgeW91IGNhbiBzcGVjaWZ5IHRoZSBxdWFsaXR5IGZyb20gMCB0byAxLCB3aGVyZSAwIGlzIHZlcnkgcG9vciBxdWFsaXR5IGFuZCAxXG4gICAgICAgICAqICBpcyB2ZXJ5IGhpZ2ggcXVhbGl0eVxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAgICAgKi9cbiAgICAgICAgdG9EYXRhVVJMOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblxuICAgICAgICAgICAgdmFyIG1pbWVUeXBlID0gY29uZmlnLm1pbWVUeXBlIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgcXVhbGl0eSA9IGNvbmZpZy5xdWFsaXR5IHx8IG51bGwsXG4gICAgICAgICAgICAgICAgc3RhZ2UgPSB0aGlzLmdldFN0YWdlKCksXG4gICAgICAgICAgICAgICAgeCA9IGNvbmZpZy54IHx8IDAsXG4gICAgICAgICAgICAgICAgeSA9IGNvbmZpZy55IHx8IDAsXG4gICAgICAgICAgICAgICAgY2FudmFzID0gbmV3IEtpbmV0aWMuU2NlbmVDYW52YXMoe1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogY29uZmlnLndpZHRoIHx8IHRoaXMuZ2V0V2lkdGgoKSB8fCAoc3RhZ2UgPyBzdGFnZS5nZXRXaWR0aCgpIDogMCksXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogY29uZmlnLmhlaWdodCB8fCB0aGlzLmdldEhlaWdodCgpIHx8IChzdGFnZSA/IHN0YWdlLmdldEhlaWdodCgpIDogMCksXG4gICAgICAgICAgICAgICAgICAgIHBpeGVsUmF0aW86IDFcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoKTtcblxuICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XG5cbiAgICAgICAgICAgIGlmKHggfHwgeSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKC0xICogeCwgLTEgKiB5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kcmF3U2NlbmUoY2FudmFzKTtcbiAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTChtaW1lVHlwZSwgcXVhbGl0eSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb252ZXJ0cyBub2RlIGludG8gYW4gaW1hZ2UuICBTaW5jZSB0aGUgdG9JbWFnZVxuICAgICAgICAgKiAgbWV0aG9kIGlzIGFzeW5jaHJvbm91cywgYSBjYWxsYmFjayBpcyByZXF1aXJlZC4gIHRvSW1hZ2UgaXMgbW9zdCBjb21tb25seSB1c2VkXG4gICAgICAgICAqICB0byBjYWNoZSBjb21wbGV4IGRyYXdpbmdzIGFzIGFuIGltYWdlIHNvIHRoYXQgdGhleSBkb24ndCBoYXZlIHRvIGNvbnN0YW50bHkgYmUgcmVkcmF3blxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uZmlnLmNhbGxiYWNrIGZ1bmN0aW9uIGV4ZWN1dGVkIHdoZW4gdGhlIGNvbXBvc2l0ZSBoYXMgY29tcGxldGVkXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm1pbWVUeXBlXSBjYW4gYmUgXCJpbWFnZS9wbmdcIiBvciBcImltYWdlL2pwZWdcIi5cbiAgICAgICAgICogIFwiaW1hZ2UvcG5nXCIgaXMgdGhlIGRlZmF1bHRcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF0geCBwb3NpdGlvbiBvZiBjYW52YXMgc2VjdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XSB5IHBvc2l0aW9uIG9mIGNhbnZhcyBzZWN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXSB3aWR0aCBvZiBjYW52YXMgc2VjdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdIGhlaWdodCBvZiBjYW52YXMgc2VjdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5xdWFsaXR5XSBqcGVnIHF1YWxpdHkuICBJZiB1c2luZyBhbiBcImltYWdlL2pwZWdcIiBtaW1lVHlwZSxcbiAgICAgICAgICogIHlvdSBjYW4gc3BlY2lmeSB0aGUgcXVhbGl0eSBmcm9tIDAgdG8gMSwgd2hlcmUgMCBpcyB2ZXJ5IHBvb3IgcXVhbGl0eSBhbmQgMVxuICAgICAgICAgKiAgaXMgdmVyeSBoaWdoIHF1YWxpdHlcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogdmFyIGltYWdlID0gbm9kZS50b0ltYWdlKHtcbiAgICAgICAgICogICBjYWxsYmFjazogZnVuY3Rpb24oaW1nKSB7XG4gICAgICAgICAqICAgICAvLyBkbyBzdHVmZiB3aXRoIGltZ1xuICAgICAgICAgKiAgIH1cbiAgICAgICAgICogfSk7XG4gICAgICAgICAqL1xuICAgICAgICB0b0ltYWdlOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuVXRpbC5fZ2V0SW1hZ2UodGhpcy50b0RhdGFVUkwoY29uZmlnKSwgZnVuY3Rpb24oaW1nKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLmNhbGxiYWNrKGltZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0U2l6ZTogZnVuY3Rpb24oc2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRXaWR0aChzaXplLndpZHRoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0SGVpZ2h0KHNpemUuaGVpZ2h0KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBnZXRTaXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuZ2V0V2lkdGgoKSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0SGVpZ2h0KClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGdldFdpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF0dHJzLndpZHRoIHx8IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEhlaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRycy5oZWlnaHQgfHwgMDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCBjbGFzcyBuYW1lLCB3aGljaCBtYXkgcmV0dXJuIFN0YWdlLCBMYXllciwgR3JvdXAsIG9yIHNoYXBlIGNsYXNzIG5hbWVzIGxpa2UgUmVjdCwgQ2lyY2xlLCBUZXh0LCBldGMuXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIGdldENsYXNzTmFtZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbGFzc05hbWUgfHwgdGhpcy5ub2RlVHlwZTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCB0aGUgbm9kZSB0eXBlLCB3aGljaCBtYXkgcmV0dXJuIFN0YWdlLCBMYXllciwgR3JvdXAsIG9yIE5vZGVcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0VHlwZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub2RlVHlwZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0RHJhZ0Rpc3RhbmNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGNvbXBhcmUgd2l0aCB1bmRlZmluZWQgYmVjYXVzZSB3ZSBuZWVkIHRvIHRyYWNrIDAgdmFsdWVcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dHJzLmRyYWdEaXN0YW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cnMuZHJhZ0Rpc3RhbmNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5nZXREcmFnRGlzdGFuY2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEtpbmV0aWMuZHJhZ0Rpc3RhbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZ2V0OiBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xhc3NOYW1lID09PSBzZWxlY3RvciB8fCB0aGlzLm5vZGVUeXBlID09PSBzZWxlY3RvciA/IFt0aGlzXSA6IFtdO1xuICAgICAgICB9LFxuICAgICAgICBfb2ZmOiBmdW5jdGlvbih0eXBlLCBuYW1lKSB7XG4gICAgICAgICAgICB2YXIgZXZ0TGlzdGVuZXJzID0gdGhpcy5ldmVudExpc3RlbmVyc1t0eXBlXSxcbiAgICAgICAgICAgICAgICBpLCBldnROYW1lO1xuXG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBldnRMaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBldnROYW1lID0gZXZ0TGlzdGVuZXJzW2ldLm5hbWU7XG4gICAgICAgICAgICAgICAgLy8gdGhlIGZvbGxvd2luZyB0d28gY29uZGl0aW9ucyBtdXN0IGJlIHRydWUgaW4gb3JkZXIgdG8gcmVtb3ZlIGEgaGFuZGxlcjpcbiAgICAgICAgICAgICAgICAvLyAxKSB0aGUgY3VycmVudCBldmVudCBuYW1lIGNhbm5vdCBiZSBraW5ldGljIHVubGVzcyB0aGUgZXZlbnQgbmFtZSBpcyBraW5ldGljXG4gICAgICAgICAgICAgICAgLy8gICAgdGhpcyBlbmFibGVzIGRldmVsb3BlcnMgdG8gZm9yY2UgcmVtb3ZlIGEga2luZXRpYyBzcGVjaWZpYyBsaXN0ZW5lciBmb3Igd2hhdGV2ZXIgcmVhc29uXG4gICAgICAgICAgICAgICAgLy8gMikgYW4gZXZlbnQgbmFtZSBpcyBub3Qgc3BlY2lmaWVkLCBvciBpZiBvbmUgaXMgc3BlY2lmaWVkLCBpdCBtYXRjaGVzIHRoZSBjdXJyZW50IGV2ZW50IG5hbWVcbiAgICAgICAgICAgICAgICBpZigoZXZ0TmFtZSAhPT0gJ2tpbmV0aWMnIHx8IG5hbWUgPT09ICdraW5ldGljJykgJiYgKCFuYW1lIHx8IGV2dE5hbWUgPT09IG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2dExpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGV2dExpc3RlbmVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmV2ZW50TGlzdGVuZXJzW3R5cGVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2ZpcmVDaGFuZ2VFdmVudDogZnVuY3Rpb24oYXR0ciwgb2xkVmFsLCBuZXdWYWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpcmUoYXR0ciArIENIQU5HRSwge1xuICAgICAgICAgICAgICAgIG9sZFZhbDogb2xkVmFsLFxuICAgICAgICAgICAgICAgIG5ld1ZhbDogbmV3VmFsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0SWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICB2YXIgb2xkSWQgPSB0aGlzLmdldElkKCk7XG5cbiAgICAgICAgICAgIEtpbmV0aWMuX3JlbW92ZUlkKG9sZElkKTtcbiAgICAgICAgICAgIEtpbmV0aWMuX2FkZElkKHRoaXMsIGlkKTtcbiAgICAgICAgICAgIHRoaXMuX3NldEF0dHIoSUQsIGlkKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBzZXROYW1lOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICB2YXIgb2xkTmFtZSA9IHRoaXMuZ2V0TmFtZSgpO1xuXG4gICAgICAgICAgICBLaW5ldGljLl9yZW1vdmVOYW1lKG9sZE5hbWUsIHRoaXMuX2lkKTtcbiAgICAgICAgICAgIEtpbmV0aWMuX2FkZE5hbWUodGhpcywgbmFtZSk7XG4gICAgICAgICAgICB0aGlzLl9zZXRBdHRyKE5BTUUsIG5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXQgYXR0clxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsXG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLk5vZGV9XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIG5vZGUuc2V0QXR0cigneCcsIDUpO1xuICAgICAgICAgKi9cbiAgICAgICAgc2V0QXR0cjogZnVuY3Rpb24oYXR0ciwgdmFsKSB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kID0gU0VUICsgS2luZXRpYy5VdGlsLl9jYXBpdGFsaXplKGF0dHIpLFxuICAgICAgICAgICAgICAgIGZ1bmMgPSB0aGlzW21ldGhvZF07XG5cbiAgICAgICAgICAgIGlmKEtpbmV0aWMuVXRpbC5faXNGdW5jdGlvbihmdW5jKSkge1xuICAgICAgICAgICAgICAgIGZ1bmMuY2FsbCh0aGlzLCB2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHNldCBkaXJlY3RseVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0QXR0cihhdHRyLCB2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIF9zZXRBdHRyOiBmdW5jdGlvbihrZXksIHZhbCkge1xuICAgICAgICAgICAgdmFyIG9sZFZhbDtcbiAgICAgICAgICAgIGlmKHZhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgb2xkVmFsID0gdGhpcy5hdHRyc1trZXldO1xuICAgICAgICAgICAgICAgIHRoaXMuYXR0cnNba2V5XSA9IHZhbDtcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlQ2hhbmdlRXZlbnQoa2V5LCBvbGRWYWwsIHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9zZXRDb21wb25lbnRBdHRyOiBmdW5jdGlvbihrZXksIGNvbXBvbmVudCwgdmFsKSB7XG4gICAgICAgICAgICB2YXIgb2xkVmFsO1xuICAgICAgICAgICAgaWYodmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBvbGRWYWwgPSB0aGlzLmF0dHJzW2tleV07XG5cbiAgICAgICAgICAgICAgICBpZiAoIW9sZFZhbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdmFsdWUgdG8gZGVmYXVsdCB2YWx1ZSB1c2luZyBnZXRBdHRyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cnNba2V5XSA9IHRoaXMuZ2V0QXR0cihrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLmF0dHJzW2tleV1bY29tcG9uZW50XSA9IHZhbDtcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlQ2hhbmdlRXZlbnQoa2V5LCBvbGRWYWwsIHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9maXJlQW5kQnViYmxlOiBmdW5jdGlvbihldmVudFR5cGUsIGV2dCwgY29tcGFyZVNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgb2theVRvUnVuID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYoZXZ0ICYmIHRoaXMubm9kZVR5cGUgPT09IFNIQVBFKSB7XG4gICAgICAgICAgICAgICAgZXZ0LnRhcmdldCA9IHRoaXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGV2ZW50VHlwZSA9PT0gTU9VU0VFTlRFUiAmJiBjb21wYXJlU2hhcGUgJiYgKHRoaXMuX2lkID09PSBjb21wYXJlU2hhcGUuX2lkIHx8ICh0aGlzLmlzQW5jZXN0b3JPZiAmJiB0aGlzLmlzQW5jZXN0b3JPZihjb21wYXJlU2hhcGUpKSkpIHtcbiAgICAgICAgICAgICAgICBva2F5VG9SdW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoZXZlbnRUeXBlID09PSBNT1VTRUxFQVZFICYmIGNvbXBhcmVTaGFwZSAmJiAodGhpcy5faWQgPT09IGNvbXBhcmVTaGFwZS5faWQgfHwgKHRoaXMuaXNBbmNlc3Rvck9mICYmIHRoaXMuaXNBbmNlc3Rvck9mKGNvbXBhcmVTaGFwZSkpKSkge1xuICAgICAgICAgICAgICAgIG9rYXlUb1J1biA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYob2theVRvUnVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZShldmVudFR5cGUsIGV2dCk7XG5cbiAgICAgICAgICAgICAgICAvLyBzaW11bGF0ZSBldmVudCBidWJibGluZ1xuICAgICAgICAgICAgICAgIHZhciBzdG9wQnViYmxlID0gKGV2ZW50VHlwZSA9PT0gTU9VU0VFTlRFUiB8fCBldmVudFR5cGUgPT09IE1PVVNFTEVBVkUpICYmICgoY29tcGFyZVNoYXBlICYmIGNvbXBhcmVTaGFwZS5pc0FuY2VzdG9yT2YgJiYgY29tcGFyZVNoYXBlLmlzQW5jZXN0b3JPZih0aGlzKSkgfHwgISEoY29tcGFyZVNoYXBlICYmIGNvbXBhcmVTaGFwZS5pc0FuY2VzdG9yT2YpKTtcbiAgICAgICAgICAgICAgICBpZihldnQgJiYgIWV2dC5jYW5jZWxCdWJibGUgJiYgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuaXNMaXN0ZW5pbmcoKSAmJiAoIXN0b3BCdWJibGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNvbXBhcmVTaGFwZSAmJiBjb21wYXJlU2hhcGUucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maXJlQW5kQnViYmxlLmNhbGwodGhpcy5wYXJlbnQsIGV2ZW50VHlwZSwgZXZ0LCBjb21wYXJlU2hhcGUucGFyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmVBbmRCdWJibGUuY2FsbCh0aGlzLnBhcmVudCwgZXZlbnRUeXBlLCBldnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZmlyZTogZnVuY3Rpb24oZXZlbnRUeXBlLCBldnQpIHtcbiAgICAgICAgICAgIHZhciBldmVudHMgPSB0aGlzLmV2ZW50TGlzdGVuZXJzW2V2ZW50VHlwZV0sXG4gICAgICAgICAgICAgICAgaTtcblxuICAgICAgICAgICAgZXZ0LnR5cGUgPSBldmVudFR5cGU7XG5cbiAgICAgICAgICAgIGlmIChldmVudHMpIHtcbiAgICAgICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzW2ldLmhhbmRsZXIuY2FsbCh0aGlzLCBldnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRyYXcgYm90aCBzY2VuZSBhbmQgaGl0IGdyYXBocy4gIElmIHRoZSBub2RlIGJlaW5nIGRyYXduIGlzIHRoZSBzdGFnZSwgYWxsIG9mIHRoZSBsYXllcnMgd2lsbCBiZSBjbGVhcmVkIGFuZCByZWRyYXduXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuTm9kZX1cbiAgICAgICAgICovXG4gICAgICAgIGRyYXc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5kcmF3U2NlbmUoKTtcbiAgICAgICAgICAgIHRoaXMuZHJhd0hpdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIGNyZWF0ZSBub2RlIHdpdGggSlNPTiBzdHJpbmcuICBEZS1zZXJpYWxpenRpb24gZG9lcyBub3QgZ2VuZXJhdGUgY3VzdG9tXG4gICAgICogIHNoYXBlIGRyYXdpbmcgZnVuY3Rpb25zLCBpbWFnZXMsIG9yIGV2ZW50IGhhbmRsZXJzICh0aGlzIHdvdWxkIG1ha2UgdGhlXG4gICAgICogIHNlcmlhbGl6ZWQgb2JqZWN0IGh1Z2UpLiAgSWYgeW91ciBhcHAgdXNlcyBjdXN0b20gc2hhcGVzLCBpbWFnZXMsIGFuZFxuICAgICAqICBldmVudCBoYW5kbGVycyAoaXQgcHJvYmFibHkgZG9lcyksIHRoZW4geW91IG5lZWQgdG8gc2VsZWN0IHRoZSBhcHByb3ByaWF0ZVxuICAgICAqICBzaGFwZXMgYWZ0ZXIgbG9hZGluZyB0aGUgc3RhZ2UgYW5kIHNldCB0aGVzZSBwcm9wZXJ0aWVzIHZpYSBvbigpLCBzZXREcmF3RnVuYygpLFxuICAgICAqICBhbmQgc2V0SW1hZ2UoKSBtZXRob2RzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ganNvblxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gW2NvbnRhaW5lcl0gb3B0aW9uYWwgY29udGFpbmVyIGRvbSBlbGVtZW50IHVzZWQgb25seSBpZiB5b3UncmVcbiAgICAgKiAgY3JlYXRpbmcgYSBzdGFnZSBub2RlXG4gICAgICovXG4gICAgS2luZXRpYy5Ob2RlLmNyZWF0ZSA9IGZ1bmN0aW9uKGpzb24sIGNvbnRhaW5lcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3JlYXRlTm9kZShKU09OLnBhcnNlKGpzb24pLCBjb250YWluZXIpO1xuICAgIH07XG4gICAgS2luZXRpYy5Ob2RlLl9jcmVhdGVOb2RlID0gZnVuY3Rpb24ob2JqLCBjb250YWluZXIpIHtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuZ2V0Q2xhc3NOYW1lLmNhbGwob2JqKSxcbiAgICAgICAgICAgIGNoaWxkcmVuID0gb2JqLmNoaWxkcmVuLFxuICAgICAgICAgICAgbm8sIGxlbiwgbjtcblxuICAgICAgICAvLyBpZiBjb250YWluZXIgd2FzIHBhc3NlZCBpbiwgYWRkIGl0IHRvIGF0dHJzXG4gICAgICAgIGlmKGNvbnRhaW5lcikge1xuICAgICAgICAgICAgb2JqLmF0dHJzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vID0gbmV3IEtpbmV0aWNbY2xhc3NOYW1lXShvYmouYXR0cnMpO1xuICAgICAgICBpZihjaGlsZHJlbikge1xuICAgICAgICAgICAgbGVuID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgZm9yKG4gPSAwOyBuIDwgbGVuOyBuKyspIHtcbiAgICAgICAgICAgICAgICBuby5hZGQodGhpcy5fY3JlYXRlTm9kZShjaGlsZHJlbltuXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vO1xuICAgIH07XG5cblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PSBhZGQgZ2V0dGVycyBzZXR0ZXJzID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZE92ZXJsb2FkZWRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAncG9zaXRpb24nKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IG5vZGUgcG9zaXRpb24gcmVsYXRpdmUgdG8gcGFyZW50XG4gICAgICogQG5hbWUgcG9zaXRpb25cbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9zXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvcy54XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvcy55XG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBwb3NpdGlvblxuICAgICAqIHZhciBwb3NpdGlvbiA9IG5vZGUucG9zaXRpb24oKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBwb3NpdGlvblxuICAgICAqIG5vZGUucG9zaXRpb24oe1xuICAgICAqICAgeDogNVxuICAgICAqICAgeTogMTBcbiAgICAgKiB9KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAneCcsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCB4IHBvc2l0aW9uXG4gICAgICogQG5hbWUgeFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCB4XG4gICAgICogdmFyIHggPSBub2RlLngoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCB4XG4gICAgICogbm9kZS54KDUpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICd5JywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHkgcG9zaXRpb25cbiAgICAgKiBAbmFtZSB5XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAcmV0dXJucyB7SW50ZWdlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCB5XG4gICAgICogdmFyIHkgPSBub2RlLnkoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCB5XG4gICAgICogbm9kZS55KDUpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdvcGFjaXR5JywgMSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IG9wYWNpdHkuICBPcGFjaXR5IHZhbHVlcyByYW5nZSBmcm9tIDAgdG8gMS5cbiAgICAgKiAgQSBub2RlIHdpdGggYW4gb3BhY2l0eSBvZiAwIGlzIGZ1bGx5IHRyYW5zcGFyZW50LCBhbmQgYSBub2RlXG4gICAgICogIHdpdGggYW4gb3BhY2l0eSBvZiAxIGlzIGZ1bGx5IG9wYXF1ZVxuICAgICAqIEBuYW1lIG9wYWNpdHlcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3BhY2l0eVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgb3BhY2l0eVxuICAgICAqIHZhciBvcGFjaXR5ID0gbm9kZS5vcGFjaXR5KCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgb3BhY2l0eVxuICAgICAqIG5vZGUub3BhY2l0eSgwLjUpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlcihLaW5ldGljLk5vZGUsICduYW1lJyk7XG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZE92ZXJsb2FkZWRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnbmFtZScpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBuYW1lXG4gICAgICogQG5hbWUgbmFtZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBuYW1lXG4gICAgICogdmFyIG5hbWUgPSBub2RlLm5hbWUoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBuYW1lXG4gICAgICogbm9kZS5uYW1lKCdmb28nKTtcbiAgICAgKlxuICAgICAqIC8vIGFsc28gbm9kZSBtYXkgaGF2ZSBtdWx0aXBsZSBuYW1lcyAoYXMgY3NzIGNsYXNzZXMpXG4gICAgICogbm9kZS5uYW1lKCdmb28gYmFyJyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2lkJyk7XG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZE92ZXJsb2FkZWRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnaWQnKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgaWRcbiAgICAgKiBAbmFtZSBpZFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgaWRcbiAgICAgKiB2YXIgbmFtZSA9IG5vZGUuaWQoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBpZFxuICAgICAqIG5vZGUuaWQoJ2ZvbycpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdyb3RhdGlvbicsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCByb3RhdGlvbiBpbiBkZWdyZWVzXG4gICAgICogQG5hbWUgcm90YXRpb25cbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcm90YXRpb25cbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHJvdGF0aW9uIGluIGRlZ3JlZXNcbiAgICAgKiB2YXIgcm90YXRpb24gPSBub2RlLnJvdGF0aW9uKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgcm90YXRpb24gaW4gZGVncmVlc1xuICAgICAqIG5vZGUucm90YXRpb24oNDUpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZENvbXBvbmVudHNHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnc2NhbGUnLCBbJ3gnLCAneSddKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgc2NhbGVcbiAgICAgKiBAbmFtZSBzY2FsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzY2FsZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZS54XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlLnlcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHNjYWxlXG4gICAgICogdmFyIHNjYWxlID0gbm9kZS5zY2FsZSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHNjYWxlIFxuICAgICAqIHNoYXBlLnNjYWxlKHtcbiAgICAgKiAgIHg6IDJcbiAgICAgKiAgIHk6IDNcbiAgICAgKiB9KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnc2NhbGVYJywgMSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHNjYWxlIHhcbiAgICAgKiBAbmFtZSBzY2FsZVhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc2NhbGUgeFxuICAgICAqIHZhciBzY2FsZVggPSBub2RlLnNjYWxlWCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHNjYWxlIHhcbiAgICAgKiBub2RlLnNjYWxlWCgyKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnc2NhbGVZJywgMSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHNjYWxlIHlcbiAgICAgKiBAbmFtZSBzY2FsZVlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc2NhbGUgeVxuICAgICAqIHZhciBzY2FsZVkgPSBub2RlLnNjYWxlWSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHNjYWxlIHlcbiAgICAgKiBub2RlLnNjYWxlWSgyKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRDb21wb25lbnRzR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3NrZXcnLCBbJ3gnLCAneSddKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgc2tld1xuICAgICAqIEBuYW1lIHNrZXdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc2tld1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBza2V3LnhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2tldy55XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBza2V3XG4gICAgICogdmFyIHNrZXcgPSBub2RlLnNrZXcoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBza2V3IFxuICAgICAqIG5vZGUuc2tldyh7XG4gICAgICogICB4OiAyMFxuICAgICAqICAgeTogMTBcbiAgICAgKiB9KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnc2tld1gnLCAwKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgc2tldyB4XG4gICAgICogQG5hbWUgc2tld1hcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc2tldyB4XG4gICAgICogdmFyIHNrZXdYID0gbm9kZS5za2V3WCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHNrZXcgeFxuICAgICAqIG5vZGUuc2tld1goMyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3NrZXdZJywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHNrZXcgeVxuICAgICAqIEBuYW1lIHNrZXdZXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHNrZXcgeVxuICAgICAqIHZhciBza2V3WSA9IG5vZGUuc2tld1koKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBza2V3IHlcbiAgICAgKiBub2RlLnNrZXdZKDMpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZENvbXBvbmVudHNHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnb2Zmc2V0JywgWyd4JywgJ3knXSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IG9mZnNldC4gIE9mZnNldHMgdGhlIGRlZmF1bHQgcG9zaXRpb24gYW5kIHJvdGF0aW9uIHBvaW50XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9mZnNldFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQueFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQueVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgb2Zmc2V0XG4gICAgICogdmFyIG9mZnNldCA9IG5vZGUub2Zmc2V0KCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgb2Zmc2V0XG4gICAgICogbm9kZS5vZmZzZXQoe1xuICAgICAqICAgeDogMjBcbiAgICAgKiAgIHk6IDEwXG4gICAgICogfSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ29mZnNldFgnLCAwKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgb2Zmc2V0IHhcbiAgICAgKiBAbmFtZSBvZmZzZXRYXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IG9mZnNldCB4XG4gICAgICogdmFyIG9mZnNldFggPSBub2RlLm9mZnNldFgoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBvZmZzZXQgeFxuICAgICAqIG5vZGUub2Zmc2V0WCgzKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnb2Zmc2V0WScsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBvZmZzZXQgeVxuICAgICAqIEBuYW1lIG9mZnNldFlcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgb2Zmc2V0IHlcbiAgICAgKiB2YXIgb2Zmc2V0WSA9IG5vZGUub2Zmc2V0WSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IG9mZnNldCB5XG4gICAgICogbm9kZS5vZmZzZXRZKDMpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZFNldHRlcihLaW5ldGljLk5vZGUsICdkcmFnRGlzdGFuY2UnKTtcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkT3ZlcmxvYWRlZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdkcmFnRGlzdGFuY2UnKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZHJhZyBkaXN0YW5jZVxuICAgICAqIEBuYW1lIGRyYWdEaXN0YW5jZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkaXN0YW5jZVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZHJhZyBkaXN0YW5jZVxuICAgICAqIHZhciBkcmFnRGlzdGFuY2UgPSBub2RlLmRyYWdEaXN0YW5jZSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGRpc3RhbmNlXG4gICAgICogLy8gbm9kZSBzdGFydHMgZHJhZ2dpbmcgb25seSBpZiBwb2ludGVyIG1vdmVkIG1vcmUgdGhlbiAzIHBpeGVsc1xuICAgICAqIG5vZGUuZHJhZ0Rpc3RhbmNlKDMpO1xuICAgICAqIC8vIG9yIHNldCBnbG9iYWxseVxuICAgICAqIEtpbmV0aWMuZHJhZ0Rpc3RhbmNlID0gMztcbiAgICAgKi9cblxuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZFNldHRlcihLaW5ldGljLk5vZGUsICd3aWR0aCcsIDApO1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRPdmVybG9hZGVkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3dpZHRoJyk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCB3aWR0aFxuICAgICAqIEBuYW1lIHdpZHRoXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCB3aWR0aFxuICAgICAqIHZhciB3aWR0aCA9IG5vZGUud2lkdGgoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCB3aWR0aFxuICAgICAqIG5vZGUud2lkdGgoMTAwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnaGVpZ2h0JywgMCk7XG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZE92ZXJsb2FkZWRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnaGVpZ2h0Jyk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBoZWlnaHRcbiAgICAgKiBAbmFtZSBoZWlnaHRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBoZWlnaHRcbiAgICAgKiB2YXIgaGVpZ2h0ID0gbm9kZS5oZWlnaHQoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBoZWlnaHRcbiAgICAgKiBub2RlLmhlaWdodCgxMDApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdsaXN0ZW5pbmcnLCAnaW5oZXJpdCcpO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgbGlzdGVuaWcgYXR0ci4gIElmIHlvdSBuZWVkIHRvIGRldGVybWluZSBpZiBhIG5vZGUgaXMgbGlzdGVuaW5nIG9yIG5vdFxuICAgICAqICAgYnkgdGFraW5nIGludG8gYWNjb3VudCBpdHMgcGFyZW50cywgdXNlIHRoZSBpc0xpc3RlbmluZygpIG1ldGhvZCAgXG4gICAgICogQG5hbWUgbGlzdGVuaW5nXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtCb29sZWFufFN0cmluZ30gbGlzdGVuaW5nIENhbiBiZSBcImluaGVyaXRcIiwgdHJ1ZSwgb3IgZmFsc2UuICBUaGUgZGVmYXVsdCBpcyBcImluaGVyaXRcIi5cbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbnxTdHJpbmd9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgbGlzdGVuaW5nIGF0dHJcbiAgICAgKiB2YXIgbGlzdGVuaW5nID0gbm9kZS5saXN0ZW5pbmcoKTtcbiAgICAgKlxuICAgICAqIC8vIHN0b3AgbGlzdGVuaW5nIGZvciBldmVudHNcbiAgICAgKiBub2RlLmxpc3RlbmluZyhmYWxzZSk7XG4gICAgICpcbiAgICAgKiAvLyBsaXN0ZW4gZm9yIGV2ZW50c1xuICAgICAqIG5vZGUubGlzdGVuaW5nKHRydWUpO1xuICAgICAqXG4gICAgICogLy8gbGlzdGVuIHRvIGV2ZW50cyBhY2NvcmRpbmcgdG8gdGhlIHBhcmVudFxuICAgICAqIG5vZGUubGlzdGVuaW5nKCdpbmhlcml0Jyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2ZpbHRlcnMnLCB1bmRlZmluZWQsIGZ1bmN0aW9uKHZhbCkge3RoaXMuX2ZpbHRlclVwVG9EYXRlID0gZmFsc2U7cmV0dXJuIHZhbDt9KTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbHRlcnMuICBGaWx0ZXJzIGFyZSBhcHBsaWVkIHRvIGNhY2hlZCBjYW52YXNlc1xuICAgICAqIEBuYW1lIGZpbHRlcnNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBmaWx0ZXJzIGFycmF5IG9mIGZpbHRlcnNcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsdGVyc1xuICAgICAqIHZhciBmaWx0ZXJzID0gbm9kZS5maWx0ZXJzKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgYSBzaW5nbGUgZmlsdGVyXG4gICAgICogbm9kZS5jYWNoZSgpO1xuICAgICAqIG5vZGUuZmlsdGVycyhbS2luZXRpYy5GaWx0ZXJzLkJsdXJdKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBtdWx0aXBsZSBmaWx0ZXJzXG4gICAgICogbm9kZS5jYWNoZSgpO1xuICAgICAqIG5vZGUuZmlsdGVycyhbXG4gICAgICogICBLaW5ldGljLkZpbHRlcnMuQmx1cixcbiAgICAgKiAgIEtpbmV0aWMuRmlsdGVycy5TZXBpYSxcbiAgICAgKiAgIEtpbmV0aWMuRmlsdGVycy5JbnZlcnRcbiAgICAgKiBdKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAndmlzaWJsZScsICdpbmhlcml0Jyk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCB2aXNpYmxlIGF0dHIuICBDYW4gYmUgXCJpbmhlcml0XCIsIHRydWUsIG9yIGZhbHNlLiAgVGhlIGRlZmF1bHQgaXMgXCJpbmhlcml0XCIuXG4gICAgICogICBJZiB5b3UgbmVlZCB0byBkZXRlcm1pbmUgaWYgYSBub2RlIGlzIHZpc2libGUgb3Igbm90XG4gICAgICogICBieSB0YWtpbmcgaW50byBhY2NvdW50IGl0cyBwYXJlbnRzLCB1c2UgdGhlIGlzVmlzaWJsZSgpIG1ldGhvZCAgXG4gICAgICogQG5hbWUgdmlzaWJsZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbnxTdHJpbmd9IHZpc2libGVcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbnxTdHJpbmd9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgdmlzaWJsZSBhdHRyXG4gICAgICogdmFyIHZpc2libGUgPSBub2RlLnZpc2libGUoKTtcbiAgICAgKlxuICAgICAqIC8vIG1ha2UgaW52aXNpYmxlXG4gICAgICogbm9kZS52aXNpYmxlKGZhbHNlKTtcbiAgICAgKlxuICAgICAqIC8vIG1ha2UgdmlzaWJsZVxuICAgICAqIG5vZGUudmlzaWJsZSh0cnVlKTtcbiAgICAgKlxuICAgICAqIC8vIG1ha2UgdmlzaWJsZSBhY2NvcmRpbmcgdG8gdGhlIHBhcmVudFxuICAgICAqIG5vZGUudmlzaWJsZSgnaW5oZXJpdCcpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICd0cmFuc2Zvcm1zRW5hYmxlZCcsICdhbGwnKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgdHJhbnNmb3JtcyB0aGF0IGFyZSBlbmFibGVkLiAgQ2FuIGJlIFwiYWxsXCIsIFwibm9uZVwiLCBvciBcInBvc2l0aW9uXCIuICBUaGUgZGVmYXVsdFxuICAgICAqICBpcyBcImFsbFwiXG4gICAgICogQG5hbWUgdHJhbnNmb3Jtc0VuYWJsZWRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZW5hYmxlZFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBlbmFibGUgcG9zaXRpb24gdHJhbnNmb3JtIG9ubHkgdG8gaW1wcm92ZSBkcmF3IHBlcmZvcm1hbmNlXG4gICAgICogbm9kZS50cmFuc2Zvcm1zRW5hYmxlZCgncG9zaXRpb24nKTtcbiAgICAgKlxuICAgICAqIC8vIGVuYWJsZSBhbGwgdHJhbnNmb3Jtc1xuICAgICAqIG5vZGUudHJhbnNmb3Jtc0VuYWJsZWQoJ2FsbCcpO1xuICAgICAqL1xuXG5cblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgbm9kZSBzaXplXG4gICAgICogQG5hbWUgc2l6ZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzaXplXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNpemUud2lkdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2l6ZS5oZWlnaHRcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IG5vZGUgc2l6ZVxuICAgICAqIHZhciBzaXplID0gbm9kZS5zaXplKCk7XG4gICAgICogdmFyIHggPSBzaXplLng7XG4gICAgICogdmFyIHkgPSBzaXplLnk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc2l6ZVxuICAgICAqIG5vZGUuc2l6ZSh7XG4gICAgICogICB3aWR0aDogMTAwLFxuICAgICAqICAgaGVpZ2h0OiAyMDBcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkT3ZlcmxvYWRlZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdzaXplJyk7XG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYmFja0NvbXBhdChLaW5ldGljLk5vZGUsIHtcbiAgICAgICAgcm90YXRlRGVnOiAncm90YXRlJyxcbiAgICAgICAgc2V0Um90YXRpb25EZWc6ICdzZXRSb3RhdGlvbicsXG4gICAgICAgIGdldFJvdGF0aW9uRGVnOiAnZ2V0Um90YXRpb24nXG4gICAgfSk7XG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLk5vZGUpO1xufSkoKTtcbjsoZnVuY3Rpb24oKSB7XHJcbiAgICAvKipcclxuICAgICogR3JheXNjYWxlIEZpbHRlclxyXG4gICAgKiBAZnVuY3Rpb25cclxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRmlsdGVyc1xyXG4gICAgKiBAcGFyYW0ge09iamVjdH0gaW1hZ2VEYXRhXHJcbiAgICAqIEBleGFtcGxlXHJcbiAgICAqIG5vZGUuY2FjaGUoKTtcclxuICAgICogbm9kZS5maWx0ZXJzKFtLaW5ldGljLkZpbHRlcnMuR3JheXNjYWxlXSk7XHJcbiAgICAqL1xyXG4gICAgS2luZXRpYy5GaWx0ZXJzLkdyYXlzY2FsZSA9IGZ1bmN0aW9uKGltYWdlRGF0YSkge1xyXG4gICAgICAgIHZhciBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsXHJcbiAgICAgICAgICAgIGxlbiA9IGRhdGEubGVuZ3RoLFxyXG4gICAgICAgICAgICBpLCBicmlnaHRuZXNzO1xyXG5cclxuICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xyXG4gICAgICAgICAgICBicmlnaHRuZXNzID0gMC4zNCAqIGRhdGFbaV0gKyAwLjUgKiBkYXRhW2kgKyAxXSArIDAuMTYgKiBkYXRhW2kgKyAyXTtcclxuICAgICAgICAgICAgLy8gcmVkXHJcbiAgICAgICAgICAgIGRhdGFbaV0gPSBicmlnaHRuZXNzO1xyXG4gICAgICAgICAgICAvLyBncmVlblxyXG4gICAgICAgICAgICBkYXRhW2kgKyAxXSA9IGJyaWdodG5lc3M7XHJcbiAgICAgICAgICAgIC8vIGJsdWVcclxuICAgICAgICAgICAgZGF0YVtpICsgMl0gPSBicmlnaHRuZXNzO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0pKCk7XHJcbjsoZnVuY3Rpb24oKSB7XG4gICAgLyoqXG4gICAgICogQnJpZ2h0ZW4gRmlsdGVyLiAgXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRmlsdGVyc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZURhdGFcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG5vZGUuY2FjaGUoKTtcbiAgICAgKiBub2RlLmZpbHRlcnMoW0tpbmV0aWMuRmlsdGVycy5CcmlnaHRlbl0pO1xuICAgICAqIG5vZGUuYnJpZ2h0bmVzcygwLjgpO1xuICAgICAqL1xuICAgIEtpbmV0aWMuRmlsdGVycy5CcmlnaHRlbiA9IGZ1bmN0aW9uKGltYWdlRGF0YSkge1xuICAgICAgICB2YXIgYnJpZ2h0bmVzcyA9IHRoaXMuYnJpZ2h0bmVzcygpICogMjU1LFxuICAgICAgICAgICAgZGF0YSA9IGltYWdlRGF0YS5kYXRhLFxuICAgICAgICAgICAgbGVuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIGZvcihpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgICAgICAgICAvLyByZWRcbiAgICAgICAgICAgIGRhdGFbaV0gKz0gYnJpZ2h0bmVzcztcbiAgICAgICAgICAgIC8vIGdyZWVuXG4gICAgICAgICAgICBkYXRhW2kgKyAxXSArPSBicmlnaHRuZXNzO1xuICAgICAgICAgICAgLy8gYmx1ZVxuICAgICAgICAgICAgZGF0YVtpICsgMl0gKz0gYnJpZ2h0bmVzcztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2JyaWdodG5lc3MnLCAwLCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xuICAgIC8qKlxuICAgICogZ2V0L3NldCBmaWx0ZXIgYnJpZ2h0bmVzcy4gIFRoZSBicmlnaHRuZXNzIGlzIGEgbnVtYmVyIGJldHdlZW4gLTEgYW5kIDEuJm5ic3A7IFBvc2l0aXZlIHZhbHVlcyBcbiAgICAqICBicmlnaHRlbiB0aGUgcGl4ZWxzIGFuZCBuZWdhdGl2ZSB2YWx1ZXMgZGFya2VuIHRoZW0uIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuQnJpZ2h0ZW59IGZpbHRlci5cbiAgICAqIEBuYW1lIGJyaWdodG5lc3NcbiAgICAqIEBtZXRob2RcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgKiBAcGFyYW0ge051bWJlcn0gYnJpZ2h0bmVzcyB2YWx1ZSBiZXR3ZWVuIC0xIGFuZCAxXG4gICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICovXG5cbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xyXG4gICAgLyoqXHJcbiAgICAqIEludmVydCBGaWx0ZXJcclxuICAgICogQGZ1bmN0aW9uXHJcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcclxuICAgICogQHBhcmFtIHtPYmplY3R9IGltYWdlRGF0YVxyXG4gICAgKiBAZXhhbXBsZVxyXG4gICAgKiBub2RlLmNhY2hlKCk7XHJcbiAgICAqIG5vZGUuZmlsdGVycyhbS2luZXRpYy5GaWx0ZXJzLkludmVydF0pO1xyXG4gICAgKi9cclxuICAgIEtpbmV0aWMuRmlsdGVycy5JbnZlcnQgPSBmdW5jdGlvbihpbWFnZURhdGEpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IGltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgICAgICBsZW4gPSBkYXRhLmxlbmd0aCxcclxuICAgICAgICAgICAgaTtcclxuXHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcclxuICAgICAgICAgICAgLy8gcmVkXHJcbiAgICAgICAgICAgIGRhdGFbaV0gPSAyNTUgLSBkYXRhW2ldO1xyXG4gICAgICAgICAgICAvLyBncmVlblxyXG4gICAgICAgICAgICBkYXRhW2kgKyAxXSA9IDI1NSAtIGRhdGFbaSArIDFdO1xyXG4gICAgICAgICAgICAvLyBibHVlXHJcbiAgICAgICAgICAgIGRhdGFbaSArIDJdID0gMjU1IC0gZGF0YVtpICsgMl07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSkoKTs7LypcbiB0aGUgR2F1c3MgZmlsdGVyXG4gbWFzdGVyIHJlcG86IGh0dHBzOi8vZ2l0aHViLmNvbS9wYXZlbHBvd2VyL2tpbmV0aWNqc0dhdXNzRmlsdGVyL1xuKi9cbihmdW5jdGlvbigpIHtcbiAgICAvKlxuXG4gICAgIFN0YWNrQmx1ciAtIGEgZmFzdCBhbG1vc3QgR2F1c3NpYW4gQmx1ciBGb3IgQ2FudmFzXG5cbiAgICAgVmVyc2lvbjogICAwLjVcbiAgICAgQXV0aG9yOiAgICBNYXJpbyBLbGluZ2VtYW5uXG4gICAgIENvbnRhY3Q6ICAgbWFyaW9AcXVhc2ltb25kby5jb21cbiAgICAgV2Vic2l0ZTogICBodHRwOi8vd3d3LnF1YXNpbW9uZG8uY29tL1N0YWNrQmx1ckZvckNhbnZhc1xuICAgICBUd2l0dGVyOiAgIEBxdWFzaW1vbmRvXG5cbiAgICAgSW4gY2FzZSB5b3UgZmluZCB0aGlzIGNsYXNzIHVzZWZ1bCAtIGVzcGVjaWFsbHkgaW4gY29tbWVyY2lhbCBwcm9qZWN0cyAtXG4gICAgIEkgYW0gbm90IHRvdGFsbHkgdW5oYXBweSBmb3IgYSBzbWFsbCBkb25hdGlvbiB0byBteSBQYXlQYWwgYWNjb3VudFxuICAgICBtYXJpb0BxdWFzaW1vbmRvLmRlXG5cbiAgICAgT3Igc3VwcG9ydCBtZSBvbiBmbGF0dHI6XG4gICAgIGh0dHBzOi8vZmxhdHRyLmNvbS90aGluZy83Mjc5MS9TdGFja0JsdXItYS1mYXN0LWFsbW9zdC1HYXVzc2lhbi1CbHVyLUVmZmVjdC1mb3ItQ2FudmFzSmF2YXNjcmlwdFxuXG4gICAgIENvcHlyaWdodCAoYykgMjAxMCBNYXJpbyBLbGluZ2VtYW5uXG5cbiAgICAgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb25cbiAgICAgb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAgICAgZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0XG4gICAgIHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLFxuICAgICBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICAgICBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGVcbiAgICAgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmdcbiAgICAgY29uZGl0aW9uczpcblxuICAgICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICAgICBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuICAgICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICAgICBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVNcbiAgICAgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkRcbiAgICAgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbiAgICAgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksXG4gICAgIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lOR1xuICAgICBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SXG4gICAgIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIEJsdXJTdGFjaygpIHtcbiAgICAgICAgdGhpcy5yID0gMDtcbiAgICAgICAgdGhpcy5nID0gMDtcbiAgICAgICAgdGhpcy5iID0gMDtcbiAgICAgICAgdGhpcy5hID0gMDtcbiAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbXVsX3RhYmxlID0gW1xuICAgICAgICA1MTIsNTEyLDQ1Niw1MTIsMzI4LDQ1NiwzMzUsNTEyLDQwNSwzMjgsMjcxLDQ1NiwzODgsMzM1LDI5Miw1MTIsXG4gICAgICAgIDQ1NCw0MDUsMzY0LDMyOCwyOTgsMjcxLDQ5Niw0NTYsNDIwLDM4OCwzNjAsMzM1LDMxMiwyOTIsMjczLDUxMixcbiAgICAgICAgNDgyLDQ1NCw0MjgsNDA1LDM4MywzNjQsMzQ1LDMyOCwzMTIsMjk4LDI4NCwyNzEsMjU5LDQ5Niw0NzUsNDU2LFxuICAgICAgICA0MzcsNDIwLDQwNCwzODgsMzc0LDM2MCwzNDcsMzM1LDMyMywzMTIsMzAyLDI5MiwyODIsMjczLDI2NSw1MTIsXG4gICAgICAgIDQ5Nyw0ODIsNDY4LDQ1NCw0NDEsNDI4LDQxNyw0MDUsMzk0LDM4MywzNzMsMzY0LDM1NCwzNDUsMzM3LDMyOCxcbiAgICAgICAgMzIwLDMxMiwzMDUsMjk4LDI5MSwyODQsMjc4LDI3MSwyNjUsMjU5LDUwNyw0OTYsNDg1LDQ3NSw0NjUsNDU2LFxuICAgICAgICA0NDYsNDM3LDQyOCw0MjAsNDEyLDQwNCwzOTYsMzg4LDM4MSwzNzQsMzY3LDM2MCwzNTQsMzQ3LDM0MSwzMzUsXG4gICAgICAgIDMyOSwzMjMsMzE4LDMxMiwzMDcsMzAyLDI5NywyOTIsMjg3LDI4MiwyNzgsMjczLDI2OSwyNjUsMjYxLDUxMixcbiAgICAgICAgNTA1LDQ5Nyw0ODksNDgyLDQ3NSw0NjgsNDYxLDQ1NCw0NDcsNDQxLDQzNSw0MjgsNDIyLDQxNyw0MTEsNDA1LFxuICAgICAgICAzOTksMzk0LDM4OSwzODMsMzc4LDM3MywzNjgsMzY0LDM1OSwzNTQsMzUwLDM0NSwzNDEsMzM3LDMzMiwzMjgsXG4gICAgICAgIDMyNCwzMjAsMzE2LDMxMiwzMDksMzA1LDMwMSwyOTgsMjk0LDI5MSwyODcsMjg0LDI4MSwyNzgsMjc0LDI3MSxcbiAgICAgICAgMjY4LDI2NSwyNjIsMjU5LDI1Nyw1MDcsNTAxLDQ5Niw0OTEsNDg1LDQ4MCw0NzUsNDcwLDQ2NSw0NjAsNDU2LFxuICAgICAgICA0NTEsNDQ2LDQ0Miw0MzcsNDMzLDQyOCw0MjQsNDIwLDQxNiw0MTIsNDA4LDQwNCw0MDAsMzk2LDM5MiwzODgsXG4gICAgICAgIDM4NSwzODEsMzc3LDM3NCwzNzAsMzY3LDM2MywzNjAsMzU3LDM1NCwzNTAsMzQ3LDM0NCwzNDEsMzM4LDMzNSxcbiAgICAgICAgMzMyLDMyOSwzMjYsMzIzLDMyMCwzMTgsMzE1LDMxMiwzMTAsMzA3LDMwNCwzMDIsMjk5LDI5NywyOTQsMjkyLFxuICAgICAgICAyODksMjg3LDI4NSwyODIsMjgwLDI3OCwyNzUsMjczLDI3MSwyNjksMjY3LDI2NSwyNjMsMjYxLDI1OVxuICAgIF07XG5cbiAgICB2YXIgc2hnX3RhYmxlID0gW1xuICAgICAgICA5LCAxMSwgMTIsIDEzLCAxMywgMTQsIDE0LCAxNSwgMTUsIDE1LCAxNSwgMTYsIDE2LCAxNiwgMTYsIDE3LFxuICAgICAgICAxNywgMTcsIDE3LCAxNywgMTcsIDE3LCAxOCwgMTgsIDE4LCAxOCwgMTgsIDE4LCAxOCwgMTgsIDE4LCAxOSxcbiAgICAgICAgMTksIDE5LCAxOSwgMTksIDE5LCAxOSwgMTksIDE5LCAxOSwgMTksIDE5LCAxOSwgMTksIDIwLCAyMCwgMjAsXG4gICAgICAgIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIxLFxuICAgICAgICAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSxcbiAgICAgICAgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsXG4gICAgICAgIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLFxuICAgICAgICAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMyxcbiAgICAgICAgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsXG4gICAgICAgIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLFxuICAgICAgICAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMyxcbiAgICAgICAgMjMsIDIzLCAyMywgMjMsIDIzLCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsXG4gICAgICAgIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LFxuICAgICAgICAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCxcbiAgICAgICAgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsXG4gICAgICAgIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjRcbiAgICBdO1xuXG4gICAgZnVuY3Rpb24gZmlsdGVyR2F1c3NCbHVyUkdCQSggaW1hZ2VEYXRhLCByYWRpdXMpIHtcblxuICAgICAgICB2YXIgcGl4ZWxzID0gaW1hZ2VEYXRhLmRhdGEsXG4gICAgICAgICAgICB3aWR0aCA9IGltYWdlRGF0YS53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodCA9IGltYWdlRGF0YS5oZWlnaHQ7XG5cbiAgICAgICAgdmFyIHgsIHksIGksIHAsIHlwLCB5aSwgeXcsIHJfc3VtLCBnX3N1bSwgYl9zdW0sIGFfc3VtLFxuICAgICAgICAgICAgcl9vdXRfc3VtLCBnX291dF9zdW0sIGJfb3V0X3N1bSwgYV9vdXRfc3VtLFxuICAgICAgICAgICAgcl9pbl9zdW0sIGdfaW5fc3VtLCBiX2luX3N1bSwgYV9pbl9zdW0sXG4gICAgICAgICAgICBwciwgcGcsIHBiLCBwYSwgcmJzO1xuXG4gICAgICAgIHZhciBkaXYgPSByYWRpdXMgKyByYWRpdXMgKyAxLFxuICAgICAgICAgICAgd2lkdGhNaW51czEgID0gd2lkdGggLSAxLFxuICAgICAgICAgICAgaGVpZ2h0TWludXMxID0gaGVpZ2h0IC0gMSxcbiAgICAgICAgICAgIHJhZGl1c1BsdXMxICA9IHJhZGl1cyArIDEsXG4gICAgICAgICAgICBzdW1GYWN0b3IgPSByYWRpdXNQbHVzMSAqICggcmFkaXVzUGx1czEgKyAxICkgLyAyLFxuICAgICAgICAgICAgc3RhY2tTdGFydCA9IG5ldyBCbHVyU3RhY2soKSxcbiAgICAgICAgICAgIHN0YWNrRW5kID0gbnVsbCxcbiAgICAgICAgICAgIHN0YWNrID0gc3RhY2tTdGFydCxcbiAgICAgICAgICAgIHN0YWNrSW4gPSBudWxsLFxuICAgICAgICAgICAgc3RhY2tPdXQgPSBudWxsLFxuICAgICAgICAgICAgbXVsX3N1bSA9IG11bF90YWJsZVtyYWRpdXNdLFxuICAgICAgICAgICAgc2hnX3N1bSA9IHNoZ190YWJsZVtyYWRpdXNdO1xuXG4gICAgICAgIGZvciAoIGkgPSAxOyBpIDwgZGl2OyBpKysgKSB7XG4gICAgICAgICAgICBzdGFjayA9IHN0YWNrLm5leHQgPSBuZXcgQmx1clN0YWNrKCk7XG4gICAgICAgICAgICBpZiAoIGkgPT0gcmFkaXVzUGx1czEgKXtcbiAgICAgICAgICAgICAgICBzdGFja0VuZCA9IHN0YWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhY2submV4dCA9IHN0YWNrU3RhcnQ7XG5cbiAgICAgICAgeXcgPSB5aSA9IDA7XG5cbiAgICAgICAgZm9yICggeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKyApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJfaW5fc3VtID0gZ19pbl9zdW0gPSBiX2luX3N1bSA9IGFfaW5fc3VtID0gcl9zdW0gPSBnX3N1bSA9IGJfc3VtID0gYV9zdW0gPSAwO1xuXG4gICAgICAgICAgICByX291dF9zdW0gPSByYWRpdXNQbHVzMSAqICggcHIgPSBwaXhlbHNbeWldICk7XG4gICAgICAgICAgICBnX291dF9zdW0gPSByYWRpdXNQbHVzMSAqICggcGcgPSBwaXhlbHNbeWkrMV0gKTtcbiAgICAgICAgICAgIGJfb3V0X3N1bSA9IHJhZGl1c1BsdXMxICogKCBwYiA9IHBpeGVsc1t5aSsyXSApO1xuICAgICAgICAgICAgYV9vdXRfc3VtID0gcmFkaXVzUGx1czEgKiAoIHBhID0gcGl4ZWxzW3lpKzNdICk7XG5cbiAgICAgICAgICAgIHJfc3VtICs9IHN1bUZhY3RvciAqIHByO1xuICAgICAgICAgICAgZ19zdW0gKz0gc3VtRmFjdG9yICogcGc7XG4gICAgICAgICAgICBiX3N1bSArPSBzdW1GYWN0b3IgKiBwYjtcbiAgICAgICAgICAgIGFfc3VtICs9IHN1bUZhY3RvciAqIHBhO1xuXG4gICAgICAgICAgICBzdGFjayA9IHN0YWNrU3RhcnQ7XG5cbiAgICAgICAgICAgIGZvciggaSA9IDA7IGkgPCByYWRpdXNQbHVzMTsgaSsrIClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGFjay5yID0gcHI7XG4gICAgICAgICAgICAgICAgc3RhY2suZyA9IHBnO1xuICAgICAgICAgICAgICAgIHN0YWNrLmIgPSBwYjtcbiAgICAgICAgICAgICAgICBzdGFjay5hID0gcGE7XG4gICAgICAgICAgICAgICAgc3RhY2sgPSBzdGFjay5uZXh0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IoIGkgPSAxOyBpIDwgcmFkaXVzUGx1czE7IGkrKyApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcCA9IHlpICsgKCggd2lkdGhNaW51czEgPCBpID8gd2lkdGhNaW51czEgOiBpICkgPDwgMiApO1xuICAgICAgICAgICAgICAgIHJfc3VtICs9ICggc3RhY2suciA9ICggcHIgPSBwaXhlbHNbcF0pKSAqICggcmJzID0gcmFkaXVzUGx1czEgLSBpICk7XG4gICAgICAgICAgICAgICAgZ19zdW0gKz0gKCBzdGFjay5nID0gKCBwZyA9IHBpeGVsc1twKzFdKSkgKiByYnM7XG4gICAgICAgICAgICAgICAgYl9zdW0gKz0gKCBzdGFjay5iID0gKCBwYiA9IHBpeGVsc1twKzJdKSkgKiByYnM7XG4gICAgICAgICAgICAgICAgYV9zdW0gKz0gKCBzdGFjay5hID0gKCBwYSA9IHBpeGVsc1twKzNdKSkgKiByYnM7XG5cbiAgICAgICAgICAgICAgICByX2luX3N1bSArPSBwcjtcbiAgICAgICAgICAgICAgICBnX2luX3N1bSArPSBwZztcbiAgICAgICAgICAgICAgICBiX2luX3N1bSArPSBwYjtcbiAgICAgICAgICAgICAgICBhX2luX3N1bSArPSBwYTtcblxuICAgICAgICAgICAgICAgIHN0YWNrID0gc3RhY2submV4dDtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBzdGFja0luID0gc3RhY2tTdGFydDtcbiAgICAgICAgICAgIHN0YWNrT3V0ID0gc3RhY2tFbmQ7XG4gICAgICAgICAgICBmb3IgKCB4ID0gMDsgeCA8IHdpZHRoOyB4KysgKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBpeGVsc1t5aSszXSA9IHBhID0gKGFfc3VtICogbXVsX3N1bSkgPj4gc2hnX3N1bTtcbiAgICAgICAgICAgICAgICBpZiAoIHBhICE9PSAwIClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBhID0gMjU1IC8gcGE7XG4gICAgICAgICAgICAgICAgICAgIHBpeGVsc1t5aV0gICA9ICgocl9zdW0gKiBtdWxfc3VtKSA+PiBzaGdfc3VtKSAqIHBhO1xuICAgICAgICAgICAgICAgICAgICBwaXhlbHNbeWkrMV0gPSAoKGdfc3VtICogbXVsX3N1bSkgPj4gc2hnX3N1bSkgKiBwYTtcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxzW3lpKzJdID0gKChiX3N1bSAqIG11bF9zdW0pID4+IHNoZ19zdW0pICogcGE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxzW3lpXSA9IHBpeGVsc1t5aSsxXSA9IHBpeGVsc1t5aSsyXSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcl9zdW0gLT0gcl9vdXRfc3VtO1xuICAgICAgICAgICAgICAgIGdfc3VtIC09IGdfb3V0X3N1bTtcbiAgICAgICAgICAgICAgICBiX3N1bSAtPSBiX291dF9zdW07XG4gICAgICAgICAgICAgICAgYV9zdW0gLT0gYV9vdXRfc3VtO1xuXG4gICAgICAgICAgICAgICAgcl9vdXRfc3VtIC09IHN0YWNrSW4ucjtcbiAgICAgICAgICAgICAgICBnX291dF9zdW0gLT0gc3RhY2tJbi5nO1xuICAgICAgICAgICAgICAgIGJfb3V0X3N1bSAtPSBzdGFja0luLmI7XG4gICAgICAgICAgICAgICAgYV9vdXRfc3VtIC09IHN0YWNrSW4uYTtcblxuICAgICAgICAgICAgICAgIHAgPSAgKCB5dyArICggKCBwID0geCArIHJhZGl1cyArIDEgKSA8IHdpZHRoTWludXMxID8gcCA6IHdpZHRoTWludXMxICkgKSA8PCAyO1xuXG4gICAgICAgICAgICAgICAgcl9pbl9zdW0gKz0gKCBzdGFja0luLnIgPSBwaXhlbHNbcF0pO1xuICAgICAgICAgICAgICAgIGdfaW5fc3VtICs9ICggc3RhY2tJbi5nID0gcGl4ZWxzW3ArMV0pO1xuICAgICAgICAgICAgICAgIGJfaW5fc3VtICs9ICggc3RhY2tJbi5iID0gcGl4ZWxzW3ArMl0pO1xuICAgICAgICAgICAgICAgIGFfaW5fc3VtICs9ICggc3RhY2tJbi5hID0gcGl4ZWxzW3ArM10pO1xuXG4gICAgICAgICAgICAgICAgcl9zdW0gKz0gcl9pbl9zdW07XG4gICAgICAgICAgICAgICAgZ19zdW0gKz0gZ19pbl9zdW07XG4gICAgICAgICAgICAgICAgYl9zdW0gKz0gYl9pbl9zdW07XG4gICAgICAgICAgICAgICAgYV9zdW0gKz0gYV9pbl9zdW07XG5cbiAgICAgICAgICAgICAgICBzdGFja0luID0gc3RhY2tJbi5uZXh0O1xuXG4gICAgICAgICAgICAgICAgcl9vdXRfc3VtICs9ICggcHIgPSBzdGFja091dC5yICk7XG4gICAgICAgICAgICAgICAgZ19vdXRfc3VtICs9ICggcGcgPSBzdGFja091dC5nICk7XG4gICAgICAgICAgICAgICAgYl9vdXRfc3VtICs9ICggcGIgPSBzdGFja091dC5iICk7XG4gICAgICAgICAgICAgICAgYV9vdXRfc3VtICs9ICggcGEgPSBzdGFja091dC5hICk7XG5cbiAgICAgICAgICAgICAgICByX2luX3N1bSAtPSBwcjtcbiAgICAgICAgICAgICAgICBnX2luX3N1bSAtPSBwZztcbiAgICAgICAgICAgICAgICBiX2luX3N1bSAtPSBwYjtcbiAgICAgICAgICAgICAgICBhX2luX3N1bSAtPSBwYTtcblxuICAgICAgICAgICAgICAgIHN0YWNrT3V0ID0gc3RhY2tPdXQubmV4dDtcblxuICAgICAgICAgICAgICAgIHlpICs9IDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB5dyArPSB3aWR0aDtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgZm9yICggeCA9IDA7IHggPCB3aWR0aDsgeCsrIClcbiAgICAgICAge1xuICAgICAgICAgICAgZ19pbl9zdW0gPSBiX2luX3N1bSA9IGFfaW5fc3VtID0gcl9pbl9zdW0gPSBnX3N1bSA9IGJfc3VtID0gYV9zdW0gPSByX3N1bSA9IDA7XG5cbiAgICAgICAgICAgIHlpID0geCA8PCAyO1xuICAgICAgICAgICAgcl9vdXRfc3VtID0gcmFkaXVzUGx1czEgKiAoIHByID0gcGl4ZWxzW3lpXSk7XG4gICAgICAgICAgICBnX291dF9zdW0gPSByYWRpdXNQbHVzMSAqICggcGcgPSBwaXhlbHNbeWkrMV0pO1xuICAgICAgICAgICAgYl9vdXRfc3VtID0gcmFkaXVzUGx1czEgKiAoIHBiID0gcGl4ZWxzW3lpKzJdKTtcbiAgICAgICAgICAgIGFfb3V0X3N1bSA9IHJhZGl1c1BsdXMxICogKCBwYSA9IHBpeGVsc1t5aSszXSk7XG5cbiAgICAgICAgICAgIHJfc3VtICs9IHN1bUZhY3RvciAqIHByO1xuICAgICAgICAgICAgZ19zdW0gKz0gc3VtRmFjdG9yICogcGc7XG4gICAgICAgICAgICBiX3N1bSArPSBzdW1GYWN0b3IgKiBwYjtcbiAgICAgICAgICAgIGFfc3VtICs9IHN1bUZhY3RvciAqIHBhO1xuXG4gICAgICAgICAgICBzdGFjayA9IHN0YWNrU3RhcnQ7XG5cbiAgICAgICAgICAgIGZvciggaSA9IDA7IGkgPCByYWRpdXNQbHVzMTsgaSsrIClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGFjay5yID0gcHI7XG4gICAgICAgICAgICAgICAgc3RhY2suZyA9IHBnO1xuICAgICAgICAgICAgICAgIHN0YWNrLmIgPSBwYjtcbiAgICAgICAgICAgICAgICBzdGFjay5hID0gcGE7XG4gICAgICAgICAgICAgICAgc3RhY2sgPSBzdGFjay5uZXh0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB5cCA9IHdpZHRoO1xuXG4gICAgICAgICAgICBmb3IoIGkgPSAxOyBpIDw9IHJhZGl1czsgaSsrIClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB5aSA9ICggeXAgKyB4ICkgPDwgMjtcblxuICAgICAgICAgICAgICAgIHJfc3VtICs9ICggc3RhY2suciA9ICggcHIgPSBwaXhlbHNbeWldKSkgKiAoIHJicyA9IHJhZGl1c1BsdXMxIC0gaSApO1xuICAgICAgICAgICAgICAgIGdfc3VtICs9ICggc3RhY2suZyA9ICggcGcgPSBwaXhlbHNbeWkrMV0pKSAqIHJicztcbiAgICAgICAgICAgICAgICBiX3N1bSArPSAoIHN0YWNrLmIgPSAoIHBiID0gcGl4ZWxzW3lpKzJdKSkgKiByYnM7XG4gICAgICAgICAgICAgICAgYV9zdW0gKz0gKCBzdGFjay5hID0gKCBwYSA9IHBpeGVsc1t5aSszXSkpICogcmJzO1xuXG4gICAgICAgICAgICAgICAgcl9pbl9zdW0gKz0gcHI7XG4gICAgICAgICAgICAgICAgZ19pbl9zdW0gKz0gcGc7XG4gICAgICAgICAgICAgICAgYl9pbl9zdW0gKz0gcGI7XG4gICAgICAgICAgICAgICAgYV9pbl9zdW0gKz0gcGE7XG5cbiAgICAgICAgICAgICAgICBzdGFjayA9IHN0YWNrLm5leHQ7XG5cbiAgICAgICAgICAgICAgICBpZiggaSA8IGhlaWdodE1pbnVzMSApXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB5cCArPSB3aWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHlpID0geDtcbiAgICAgICAgICAgIHN0YWNrSW4gPSBzdGFja1N0YXJ0O1xuICAgICAgICAgICAgc3RhY2tPdXQgPSBzdGFja0VuZDtcbiAgICAgICAgICAgIGZvciAoIHkgPSAwOyB5IDwgaGVpZ2h0OyB5KysgKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHAgPSB5aSA8PCAyO1xuICAgICAgICAgICAgICAgIHBpeGVsc1twKzNdID0gcGEgPSAoYV9zdW0gKiBtdWxfc3VtKSA+PiBzaGdfc3VtO1xuICAgICAgICAgICAgICAgIGlmICggcGEgPiAwIClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBhID0gMjU1IC8gcGE7XG4gICAgICAgICAgICAgICAgICAgIHBpeGVsc1twXSAgID0gKChyX3N1bSAqIG11bF9zdW0pID4+IHNoZ19zdW0gKSAqIHBhO1xuICAgICAgICAgICAgICAgICAgICBwaXhlbHNbcCsxXSA9ICgoZ19zdW0gKiBtdWxfc3VtKSA+PiBzaGdfc3VtICkgKiBwYTtcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxzW3ArMl0gPSAoKGJfc3VtICogbXVsX3N1bSkgPj4gc2hnX3N1bSApICogcGE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxzW3BdID0gcGl4ZWxzW3ArMV0gPSBwaXhlbHNbcCsyXSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcl9zdW0gLT0gcl9vdXRfc3VtO1xuICAgICAgICAgICAgICAgIGdfc3VtIC09IGdfb3V0X3N1bTtcbiAgICAgICAgICAgICAgICBiX3N1bSAtPSBiX291dF9zdW07XG4gICAgICAgICAgICAgICAgYV9zdW0gLT0gYV9vdXRfc3VtO1xuXG4gICAgICAgICAgICAgICAgcl9vdXRfc3VtIC09IHN0YWNrSW4ucjtcbiAgICAgICAgICAgICAgICBnX291dF9zdW0gLT0gc3RhY2tJbi5nO1xuICAgICAgICAgICAgICAgIGJfb3V0X3N1bSAtPSBzdGFja0luLmI7XG4gICAgICAgICAgICAgICAgYV9vdXRfc3VtIC09IHN0YWNrSW4uYTtcblxuICAgICAgICAgICAgICAgIHAgPSAoIHggKyAoKCAoIHAgPSB5ICsgcmFkaXVzUGx1czEpIDwgaGVpZ2h0TWludXMxID8gcCA6IGhlaWdodE1pbnVzMSApICogd2lkdGggKSkgPDwgMjtcblxuICAgICAgICAgICAgICAgIHJfc3VtICs9ICggcl9pbl9zdW0gKz0gKCBzdGFja0luLnIgPSBwaXhlbHNbcF0pKTtcbiAgICAgICAgICAgICAgICBnX3N1bSArPSAoIGdfaW5fc3VtICs9ICggc3RhY2tJbi5nID0gcGl4ZWxzW3ArMV0pKTtcbiAgICAgICAgICAgICAgICBiX3N1bSArPSAoIGJfaW5fc3VtICs9ICggc3RhY2tJbi5iID0gcGl4ZWxzW3ArMl0pKTtcbiAgICAgICAgICAgICAgICBhX3N1bSArPSAoIGFfaW5fc3VtICs9ICggc3RhY2tJbi5hID0gcGl4ZWxzW3ArM10pKTtcblxuICAgICAgICAgICAgICAgIHN0YWNrSW4gPSBzdGFja0luLm5leHQ7XG5cbiAgICAgICAgICAgICAgICByX291dF9zdW0gKz0gKCBwciA9IHN0YWNrT3V0LnIgKTtcbiAgICAgICAgICAgICAgICBnX291dF9zdW0gKz0gKCBwZyA9IHN0YWNrT3V0LmcgKTtcbiAgICAgICAgICAgICAgICBiX291dF9zdW0gKz0gKCBwYiA9IHN0YWNrT3V0LmIgKTtcbiAgICAgICAgICAgICAgICBhX291dF9zdW0gKz0gKCBwYSA9IHN0YWNrT3V0LmEgKTtcblxuICAgICAgICAgICAgICAgIHJfaW5fc3VtIC09IHByO1xuICAgICAgICAgICAgICAgIGdfaW5fc3VtIC09IHBnO1xuICAgICAgICAgICAgICAgIGJfaW5fc3VtIC09IHBiO1xuICAgICAgICAgICAgICAgIGFfaW5fc3VtIC09IHBhO1xuXG4gICAgICAgICAgICAgICAgc3RhY2tPdXQgPSBzdGFja091dC5uZXh0O1xuXG4gICAgICAgICAgICAgICAgeWkgKz0gd2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCbHVyIEZpbHRlclxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lIEJsdXJcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5GaWx0ZXJzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGltYWdlRGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogbm9kZS5jYWNoZSgpO1xuICAgICAqIG5vZGUuZmlsdGVycyhbS2luZXRpYy5GaWx0ZXJzLkJsdXJdKTtcbiAgICAgKiBub2RlLmJsdXJSYWRpdXMoMTApO1xuICAgICAqL1xuICAgIEtpbmV0aWMuRmlsdGVycy5CbHVyID0gZnVuY3Rpb24gQmx1cihpbWFnZURhdGEpIHtcbiAgICAgICAgdmFyIHJhZGl1cyA9IE1hdGgucm91bmQodGhpcy5ibHVyUmFkaXVzKCkpO1xuXG4gICAgICAgIGlmIChyYWRpdXMgPiAwKSB7XG4gICAgICAgICAgICBmaWx0ZXJHYXVzc0JsdXJSR0JBKGltYWdlRGF0YSwgcmFkaXVzKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2JsdXJSYWRpdXMnLCAwLCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xuXG4gICAgLyoqXG4gICAgKiBnZXQvc2V0IGJsdXIgcmFkaXVzLiBVc2Ugd2l0aCB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLkJsdXJ9IGZpbHRlclxuICAgICogQG5hbWUgYmx1clJhZGl1c1xuICAgICogQG1ldGhvZFxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAqIEBwYXJhbSB7SW50ZWdlcn0gcmFkaXVzXG4gICAgKiBAcmV0dXJucyB7SW50ZWdlcn1cbiAgICAqL1xufSkoKTs7KGZ1bmN0aW9uKCkge1xuXG5cdGZ1bmN0aW9uIHBpeGVsQXQoaWRhdGEsIHgsIHkpIHtcblx0XHR2YXIgaWR4ID0gKHkgKiBpZGF0YS53aWR0aCArIHgpICogNDtcblx0XHR2YXIgZCA9IFtdO1xuXHRcdGQucHVzaChpZGF0YS5kYXRhW2lkeCsrXSwgaWRhdGEuZGF0YVtpZHgrK10sIGlkYXRhLmRhdGFbaWR4KytdLCBpZGF0YS5kYXRhW2lkeCsrXSk7XG5cdFx0cmV0dXJuIGQ7XG5cdH1cblxuXHRmdW5jdGlvbiByZ2JEaXN0YW5jZShwMSwgcDIpIHtcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHAxWzBdIC0gcDJbMF0sIDIpICsgTWF0aC5wb3cocDFbMV0gLSBwMlsxXSwgMikgKyBNYXRoLnBvdyhwMVsyXSAtIHAyWzJdLCAyKSk7XG5cdH1cblxuXHRmdW5jdGlvbiByZ2JNZWFuKHBUYWIpIHtcblx0XHR2YXIgbSA9IFswLCAwLCAwXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcFRhYi5sZW5ndGg7IGkrKykge1xuXHRcdFx0bVswXSArPSBwVGFiW2ldWzBdO1xuXHRcdFx0bVsxXSArPSBwVGFiW2ldWzFdO1xuXHRcdFx0bVsyXSArPSBwVGFiW2ldWzJdO1xuXHRcdH1cblxuXHRcdG1bMF0gLz0gcFRhYi5sZW5ndGg7XG5cdFx0bVsxXSAvPSBwVGFiLmxlbmd0aDtcblx0XHRtWzJdIC89IHBUYWIubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIG07XG5cdH1cblxuXHRmdW5jdGlvbiBiYWNrZ3JvdW5kTWFzayhpZGF0YSwgdGhyZXNob2xkKSB7XG5cdFx0dmFyIHJnYnZfbm8gPSBwaXhlbEF0KGlkYXRhLCAwLCAwKTtcblx0XHR2YXIgcmdidl9uZSA9IHBpeGVsQXQoaWRhdGEsIGlkYXRhLndpZHRoIC0gMSwgMCk7XG5cdFx0dmFyIHJnYnZfc28gPSBwaXhlbEF0KGlkYXRhLCAwLCBpZGF0YS5oZWlnaHQgLSAxKTtcblx0XHR2YXIgcmdidl9zZSA9IHBpeGVsQXQoaWRhdGEsIGlkYXRhLndpZHRoIC0gMSwgaWRhdGEuaGVpZ2h0IC0gMSk7XG5cblxuXHRcdHZhciB0aHJlcyA9IHRocmVzaG9sZCB8fCAxMDtcblx0XHRpZiAocmdiRGlzdGFuY2Uocmdidl9ubywgcmdidl9uZSkgPCB0aHJlcyAmJiByZ2JEaXN0YW5jZShyZ2J2X25lLCByZ2J2X3NlKSA8IHRocmVzICYmIHJnYkRpc3RhbmNlKHJnYnZfc2UsIHJnYnZfc28pIDwgdGhyZXMgJiYgcmdiRGlzdGFuY2Uocmdidl9zbywgcmdidl9ubykgPCB0aHJlcykge1xuXG5cdFx0XHQvLyBNZWFuIGNvbG9yXG5cdFx0XHR2YXIgbWVhbiA9IHJnYk1lYW4oW3JnYnZfbmUsIHJnYnZfbm8sIHJnYnZfc2UsIHJnYnZfc29dKTtcblxuXHRcdFx0Ly8gTWFzayBiYXNlZCBvbiBjb2xvciBkaXN0YW5jZVxuXHRcdFx0dmFyIG1hc2sgPSBbXTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaWRhdGEud2lkdGggKiBpZGF0YS5oZWlnaHQ7IGkrKykge1xuXHRcdFx0XHR2YXIgZCA9IHJnYkRpc3RhbmNlKG1lYW4sIFtpZGF0YS5kYXRhW2kgKiA0XSwgaWRhdGEuZGF0YVtpICogNCArIDFdLCBpZGF0YS5kYXRhW2kgKiA0ICsgMl1dKTtcblx0XHRcdFx0bWFza1tpXSA9IChkIDwgdGhyZXMpID8gMCA6IDI1NTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hc2s7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gYXBwbHlNYXNrKGlkYXRhLCBtYXNrKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBpZGF0YS53aWR0aCAqIGlkYXRhLmhlaWdodDsgaSsrKSB7XG5cdFx0XHRpZGF0YS5kYXRhWzQgKiBpICsgM10gPSBtYXNrW2ldO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGVyb2RlTWFzayhtYXNrLCBzdywgc2gpIHtcblxuXHRcdHZhciB3ZWlnaHRzID0gWzEsIDEsIDEsIDEsIDAsIDEsIDEsIDEsIDFdO1xuXHRcdHZhciBzaWRlID0gTWF0aC5yb3VuZChNYXRoLnNxcnQod2VpZ2h0cy5sZW5ndGgpKTtcblx0XHR2YXIgaGFsZlNpZGUgPSBNYXRoLmZsb29yKHNpZGUgLyAyKTtcblxuXHRcdHZhciBtYXNrUmVzdWx0ID0gW107XG5cdFx0Zm9yICh2YXIgeSA9IDA7IHkgPCBzaDsgeSsrKSB7XG5cdFx0XHRmb3IgKHZhciB4ID0gMDsgeCA8IHN3OyB4KyspIHtcblxuXHRcdFx0XHR2YXIgc28gPSB5ICogc3cgKyB4O1xuXHRcdFx0XHR2YXIgYSA9IDA7XG5cdFx0XHRcdGZvciAodmFyIGN5ID0gMDsgY3kgPCBzaWRlOyBjeSsrKSB7XG5cdFx0XHRcdFx0Zm9yICh2YXIgY3ggPSAwOyBjeCA8IHNpZGU7IGN4KyspIHtcblx0XHRcdFx0XHRcdHZhciBzY3kgPSB5ICsgY3kgLSBoYWxmU2lkZTtcblx0XHRcdFx0XHRcdHZhciBzY3ggPSB4ICsgY3ggLSBoYWxmU2lkZTtcblxuXHRcdFx0XHRcdFx0aWYgKHNjeSA+PSAwICYmIHNjeSA8IHNoICYmIHNjeCA+PSAwICYmIHNjeCA8IHN3KSB7XG5cblx0XHRcdFx0XHRcdFx0dmFyIHNyY09mZiA9IHNjeSAqIHN3ICsgc2N4O1xuXHRcdFx0XHRcdFx0XHR2YXIgd3QgPSB3ZWlnaHRzW2N5ICogc2lkZSArIGN4XTtcblxuXHRcdFx0XHRcdFx0XHRhICs9IG1hc2tbc3JjT2ZmXSAqIHd0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1hc2tSZXN1bHRbc29dID0gKGEgPT09IDI1NSAqIDgpID8gMjU1IDogMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWFza1Jlc3VsdDtcblx0fVxuXG5cdGZ1bmN0aW9uIGRpbGF0ZU1hc2sobWFzaywgc3csIHNoKSB7XG5cblx0XHR2YXIgd2VpZ2h0cyA9IFsxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxXTtcblx0XHR2YXIgc2lkZSA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KHdlaWdodHMubGVuZ3RoKSk7XG5cdFx0dmFyIGhhbGZTaWRlID0gTWF0aC5mbG9vcihzaWRlIC8gMik7XG5cblx0XHR2YXIgbWFza1Jlc3VsdCA9IFtdO1xuXHRcdGZvciAodmFyIHkgPSAwOyB5IDwgc2g7IHkrKykge1xuXHRcdFx0Zm9yICh2YXIgeCA9IDA7IHggPCBzdzsgeCsrKSB7XG5cblx0XHRcdFx0dmFyIHNvID0geSAqIHN3ICsgeDtcblx0XHRcdFx0dmFyIGEgPSAwO1xuXHRcdFx0XHRmb3IgKHZhciBjeSA9IDA7IGN5IDwgc2lkZTsgY3krKykge1xuXHRcdFx0XHRcdGZvciAodmFyIGN4ID0gMDsgY3ggPCBzaWRlOyBjeCsrKSB7XG5cdFx0XHRcdFx0XHR2YXIgc2N5ID0geSArIGN5IC0gaGFsZlNpZGU7XG5cdFx0XHRcdFx0XHR2YXIgc2N4ID0geCArIGN4IC0gaGFsZlNpZGU7XG5cblx0XHRcdFx0XHRcdGlmIChzY3kgPj0gMCAmJiBzY3kgPCBzaCAmJiBzY3ggPj0gMCAmJiBzY3ggPCBzdykge1xuXG5cdFx0XHRcdFx0XHRcdHZhciBzcmNPZmYgPSBzY3kgKiBzdyArIHNjeDtcblx0XHRcdFx0XHRcdFx0dmFyIHd0ID0gd2VpZ2h0c1tjeSAqIHNpZGUgKyBjeF07XG5cblx0XHRcdFx0XHRcdFx0YSArPSBtYXNrW3NyY09mZl0gKiB3dDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtYXNrUmVzdWx0W3NvXSA9IChhID49IDI1NSAqIDQpID8gMjU1IDogMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWFza1Jlc3VsdDtcblx0fVxuXG5cdGZ1bmN0aW9uIHNtb290aEVkZ2VNYXNrKG1hc2ssIHN3LCBzaCkge1xuXG5cdFx0dmFyIHdlaWdodHMgPSBbMSAvIDksIDEgLyA5LCAxIC8gOSwgMSAvIDksIDEgLyA5LCAxIC8gOSwgMSAvIDksIDEgLyA5LCAxIC8gOV07XG5cdFx0dmFyIHNpZGUgPSBNYXRoLnJvdW5kKE1hdGguc3FydCh3ZWlnaHRzLmxlbmd0aCkpO1xuXHRcdHZhciBoYWxmU2lkZSA9IE1hdGguZmxvb3Ioc2lkZSAvIDIpO1xuXG5cdFx0dmFyIG1hc2tSZXN1bHQgPSBbXTtcblx0XHRmb3IgKHZhciB5ID0gMDsgeSA8IHNoOyB5KyspIHtcblx0XHRcdGZvciAodmFyIHggPSAwOyB4IDwgc3c7IHgrKykge1xuXG5cdFx0XHRcdHZhciBzbyA9IHkgKiBzdyArIHg7XG5cdFx0XHRcdHZhciBhID0gMDtcblx0XHRcdFx0Zm9yICh2YXIgY3kgPSAwOyBjeSA8IHNpZGU7IGN5KyspIHtcblx0XHRcdFx0XHRmb3IgKHZhciBjeCA9IDA7IGN4IDwgc2lkZTsgY3grKykge1xuXHRcdFx0XHRcdFx0dmFyIHNjeSA9IHkgKyBjeSAtIGhhbGZTaWRlO1xuXHRcdFx0XHRcdFx0dmFyIHNjeCA9IHggKyBjeCAtIGhhbGZTaWRlO1xuXG5cdFx0XHRcdFx0XHRpZiAoc2N5ID49IDAgJiYgc2N5IDwgc2ggJiYgc2N4ID49IDAgJiYgc2N4IDwgc3cpIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgc3JjT2ZmID0gc2N5ICogc3cgKyBzY3g7XG5cdFx0XHRcdFx0XHRcdHZhciB3dCA9IHdlaWdodHNbY3kgKiBzaWRlICsgY3hdO1xuXG5cdFx0XHRcdFx0XHRcdGEgKz0gbWFza1tzcmNPZmZdICogd3Q7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWFza1Jlc3VsdFtzb10gPSBhO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXNrUmVzdWx0O1xuXHR9XG5cdFxuXHQvKipcblx0ICogTWFzayBGaWx0ZXJcblx0ICogQGZ1bmN0aW9uXG5cdCAqIEBuYW1lIE1hc2tcblx0ICogQG1lbWJlcm9mIEtpbmV0aWMuRmlsdGVyc1xuXHQgKiBAcGFyYW0ge09iamVjdH0gaW1hZ2VEYXRhXG5cdCAqIEBleGFtcGxlXG4gICAgICogbm9kZS5jYWNoZSgpO1xuICAgICAqIG5vZGUuZmlsdGVycyhbS2luZXRpYy5GaWx0ZXJzLk1hc2tdKTtcbiAgICAgKiBub2RlLnRocmVzaG9sZCgwLjEpO1xuXHQgKi9cblx0S2luZXRpYy5GaWx0ZXJzLk1hc2sgPSBmdW5jdGlvbihpbWFnZURhdGEpIHtcblx0XHQvLyBEZXRlY3QgcGl4ZWxzIGNsb3NlIHRvIHRoZSBiYWNrZ3JvdW5kIGNvbG9yXG5cdFx0dmFyIHRocmVzaG9sZCA9IHRoaXMudGhyZXNob2xkKCksXG4gICAgICAgIG1hc2sgPSBiYWNrZ3JvdW5kTWFzayhpbWFnZURhdGEsIHRocmVzaG9sZCk7XG5cdFx0aWYgKG1hc2spIHtcblx0XHRcdC8vIEVyb2RlXG5cdFx0XHRtYXNrID0gZXJvZGVNYXNrKG1hc2ssIGltYWdlRGF0YS53aWR0aCwgaW1hZ2VEYXRhLmhlaWdodCk7XG5cblx0XHRcdC8vIERpbGF0ZVxuXHRcdFx0bWFzayA9IGRpbGF0ZU1hc2sobWFzaywgaW1hZ2VEYXRhLndpZHRoLCBpbWFnZURhdGEuaGVpZ2h0KTtcblxuXHRcdFx0Ly8gR3JhZGllbnRcblx0XHRcdG1hc2sgPSBzbW9vdGhFZGdlTWFzayhtYXNrLCBpbWFnZURhdGEud2lkdGgsIGltYWdlRGF0YS5oZWlnaHQpO1xuXG5cdFx0XHQvLyBBcHBseSBtYXNrXG5cdFx0XHRhcHBseU1hc2soaW1hZ2VEYXRhLCBtYXNrKTtcblx0XHRcdFxuXHRcdFx0Ly8gdG9kbyA6IFVwZGF0ZSBoaXQgcmVnaW9uIGZ1bmN0aW9uIGFjY29yZGluZyB0byBtYXNrXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGltYWdlRGF0YTtcblx0fTtcblxuXHRLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3RocmVzaG9sZCcsIDAsIG51bGwsIEtpbmV0aWMuRmFjdG9yeS5hZnRlclNldEZpbHRlcik7XG59KSgpO1xuOyhmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogUkdCIEZpbHRlclxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lIFJHQlxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW1hZ2VEYXRhXG4gICAgICogQGF1dGhvciBpcHBvNjE1XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBub2RlLmNhY2hlKCk7XG4gICAgICogbm9kZS5maWx0ZXJzKFtLaW5ldGljLkZpbHRlcnMuUkdCXSk7XG4gICAgICogbm9kZS5ibHVlKDEyMCk7XG4gICAgICogbm9kZS5ncmVlbigyMDApO1xuICAgICAqL1xuICAgIEtpbmV0aWMuRmlsdGVycy5SR0IgPSBmdW5jdGlvbiAoaW1hZ2VEYXRhKSB7XG4gICAgICAgIHZhciBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsXG4gICAgICAgICAgICBuUGl4ZWxzID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICByZWQgPSB0aGlzLnJlZCgpLFxuICAgICAgICAgICAgZ3JlZW4gPSB0aGlzLmdyZWVuKCksXG4gICAgICAgICAgICBibHVlID0gdGhpcy5ibHVlKCksXG4gICAgICAgICAgICBpLCBicmlnaHRuZXNzO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuUGl4ZWxzOyBpICs9IDQpIHtcbiAgICAgICAgICAgIGJyaWdodG5lc3MgPSAoMC4zNCAqIGRhdGFbaV0gKyAwLjUgKiBkYXRhW2kgKyAxXSArIDAuMTYgKiBkYXRhW2kgKyAyXSkvMjU1O1xuICAgICAgICAgICAgZGF0YVtpICAgIF0gPSBicmlnaHRuZXNzKnJlZDsgLy8gclxuICAgICAgICAgICAgZGF0YVtpICsgMV0gPSBicmlnaHRuZXNzKmdyZWVuOyAvLyBnXG4gICAgICAgICAgICBkYXRhW2kgKyAyXSA9IGJyaWdodG5lc3MqYmx1ZTsgLy8gYlxuICAgICAgICAgICAgZGF0YVtpICsgM10gPSBkYXRhW2kgKyAzXTsgLy8gYWxwaGFcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3JlZCcsIDAsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICB0aGlzLl9maWx0ZXJVcFRvRGF0ZSA9IGZhbHNlO1xuICAgICAgICBpZiAodmFsID4gMjU1KSB7XG4gICAgICAgICAgICByZXR1cm4gMjU1O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8qKlxuICAgICogZ2V0L3NldCBmaWx0ZXIgcmVkIHZhbHVlLiBVc2Ugd2l0aCB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLlJHQn0gZmlsdGVyLlxuICAgICogQG5hbWUgcmVkXG4gICAgKiBAbWV0aG9kXG4gICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICogQHBhcmFtIHtJbnRlZ2VyfSByZWQgdmFsdWUgYmV0d2VlbiAwIGFuZCAyNTVcbiAgICAqIEByZXR1cm5zIHtJbnRlZ2VyfVxuICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2dyZWVuJywgMCwgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIHRoaXMuX2ZpbHRlclVwVG9EYXRlID0gZmFsc2U7XG4gICAgICAgIGlmICh2YWwgPiAyNTUpIHtcbiAgICAgICAgICAgIHJldHVybiAyNTU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWwpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLyoqXG4gICAgKiBnZXQvc2V0IGZpbHRlciBncmVlbiB2YWx1ZS4gVXNlIHdpdGgge0BsaW5rIEtpbmV0aWMuRmlsdGVycy5SR0J9IGZpbHRlci5cbiAgICAqIEBuYW1lIGdyZWVuXG4gICAgKiBAbWV0aG9kXG4gICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICogQHBhcmFtIHtJbnRlZ2VyfSBncmVlbiB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDI1NVxuICAgICogQHJldHVybnMge0ludGVnZXJ9XG4gICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnYmx1ZScsIDAsIEtpbmV0aWMuVmFsaWRhdG9ycy5SR0JDb21wb25lbnQsIEtpbmV0aWMuRmFjdG9yeS5hZnRlclNldEZpbHRlcik7XG4gICAgLyoqXG4gICAgKiBnZXQvc2V0IGZpbHRlciBibHVlIHZhbHVlLiBVc2Ugd2l0aCB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLlJHQn0gZmlsdGVyLlxuICAgICogQG5hbWUgYmx1ZVxuICAgICogQG1ldGhvZFxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAqIEBwYXJhbSB7SW50ZWdlcn0gYmx1ZSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDI1NVxuICAgICogQHJldHVybnMge0ludGVnZXJ9XG4gICAgKi9cbn0pKCk7XG47KGZ1bmN0aW9uICgpIHtcblxuICAgIC8qKlxuICAgICogSFNWIEZpbHRlci4gQWRqdXN0cyB0aGUgaHVlLCBzYXR1cmF0aW9uIGFuZCB2YWx1ZVxuICAgICogQGZ1bmN0aW9uXG4gICAgKiBAbmFtZSBIU1ZcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZURhdGFcbiAgICAqIEBhdXRob3IgaXBwbzYxNVxuICAgICogQGV4YW1wbGVcbiAgICAqIGltYWdlLmZpbHRlcnMoW0tpbmV0aWMuRmlsdGVycy5IU1ZdKTtcbiAgICAqIGltYWdlLnZhbHVlKDIwMCk7XG4gICAgKi9cblxuICAgIEtpbmV0aWMuRmlsdGVycy5IU1YgPSBmdW5jdGlvbiAoaW1hZ2VEYXRhKSB7XG4gICAgICAgIHZhciBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsXG4gICAgICAgICAgICBuUGl4ZWxzID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICB2ID0gTWF0aC5wb3coMix0aGlzLnZhbHVlKCkpLFxuICAgICAgICAgICAgcyA9IE1hdGgucG93KDIsdGhpcy5zYXR1cmF0aW9uKCkpLFxuICAgICAgICAgICAgaCA9IE1hdGguYWJzKCh0aGlzLmh1ZSgpKSArIDM2MCkgJSAzNjAsXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIC8vIEJhc2lzIGZvciB0aGUgdGVjaG5pcXVlIHVzZWQ6XG4gICAgICAgIC8vIGh0dHA6Ly9iZWVzYnV6ei5iaXovY29kZS9oc3ZfY29sb3JfdHJhbnNmb3Jtcy5waHBcbiAgICAgICAgLy8gViBpcyB0aGUgdmFsdWUgbXVsdGlwbGllciAoMSBmb3Igbm9uZSwgMiBmb3IgZG91YmxlLCAwLjUgZm9yIGhhbGYpXG4gICAgICAgIC8vIFMgaXMgdGhlIHNhdHVyYXRpb24gbXVsdGlwbGllciAoMSBmb3Igbm9uZSwgMiBmb3IgZG91YmxlLCAwLjUgZm9yIGhhbGYpXG4gICAgICAgIC8vIEggaXMgdGhlIGh1ZSBzaGlmdCBpbiBkZWdyZWVzICgwIHRvIDM2MClcbiAgICAgICAgLy8gdnN1ID0gVipTKmNvcyhIKlBJLzE4MCk7XG4gICAgICAgIC8vIHZzdyA9IFYqUypzaW4oSCpQSS8xODApO1xuICAgICAgICAvL1sgLjI5OVYrLjcwMXZzdSsuMTY4dnN3ICAgIC41ODdWLS41ODd2c3UrLjMzMHZzdyAgICAuMTE0Vi0uMTE0dnN1LS40OTd2c3cgXSBbUl1cbiAgICAgICAgLy9bIC4yOTlWLS4yOTl2c3UtLjMyOHZzdyAgICAuNTg3VisuNDEzdnN1Ky4wMzV2c3cgICAgLjExNFYtLjExNHZzdSsuMjkydnN3IF0qW0ddXG4gICAgICAgIC8vWyAuMjk5Vi0uMzAwdnN1KzEuMjV2c3cgICAgLjU4N1YtLjU4OHZzdS0xLjA1dnN3ICAgIC4xMTRWKy44ODZ2c3UtLjIwM3ZzdyBdIFtCXVxuXG4gICAgICAgIC8vIFByZWNvbXB1dGUgdGhlIHZhbHVlcyBpbiB0aGUgbWF0cml4OlxuICAgICAgICB2YXIgdnN1ID0gdipzKk1hdGguY29zKGgqTWF0aC5QSS8xODApLFxuICAgICAgICAgICAgdnN3ID0gdipzKk1hdGguc2luKGgqTWF0aC5QSS8xODApO1xuICAgICAgICAvLyAocmVzdWx0IHNwb3QpKHNvdXJjZSBzcG90KVxuICAgICAgICB2YXIgcnIgPSAwLjI5OSp2KzAuNzAxKnZzdSswLjE2Nyp2c3csXG4gICAgICAgICAgICByZyA9IDAuNTg3KnYtMC41ODcqdnN1KzAuMzMwKnZzdyxcbiAgICAgICAgICAgIHJiID0gMC4xMTQqdi0wLjExNCp2c3UtMC40OTcqdnN3O1xuICAgICAgICB2YXIgZ3IgPSAwLjI5OSp2LTAuMjk5KnZzdS0wLjMyOCp2c3csXG4gICAgICAgICAgICBnZyA9IDAuNTg3KnYrMC40MTMqdnN1KzAuMDM1KnZzdyxcbiAgICAgICAgICAgIGdiID0gMC4xMTQqdi0wLjExNCp2c3UrMC4yOTMqdnN3O1xuICAgICAgICB2YXIgYnIgPSAwLjI5OSp2LTAuMzAwKnZzdSsxLjI1MCp2c3csXG4gICAgICAgICAgICBiZyA9IDAuNTg3KnYtMC41ODYqdnN1LTEuMDUwKnZzdyxcbiAgICAgICAgICAgIGJiID0gMC4xMTQqdiswLjg4Nip2c3UtMC4yMDAqdnN3O1xuXG4gICAgICAgIHZhciByLGcsYixhO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuUGl4ZWxzOyBpICs9IDQpIHtcbiAgICAgICAgICAgIHIgPSBkYXRhW2krMF07XG4gICAgICAgICAgICBnID0gZGF0YVtpKzFdO1xuICAgICAgICAgICAgYiA9IGRhdGFbaSsyXTtcbiAgICAgICAgICAgIGEgPSBkYXRhW2krM107XG5cbiAgICAgICAgICAgIGRhdGFbaSswXSA9IHJyKnIgKyByZypnICsgcmIqYjtcbiAgICAgICAgICAgIGRhdGFbaSsxXSA9IGdyKnIgKyBnZypnICsgZ2IqYjtcbiAgICAgICAgICAgIGRhdGFbaSsyXSA9IGJyKnIgKyBiZypnICsgYmIqYjtcbiAgICAgICAgICAgIGRhdGFbaSszXSA9IGE7IC8vIGFscGhhXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2h1ZScsIDAsIG51bGwsIEtpbmV0aWMuRmFjdG9yeS5hZnRlclNldEZpbHRlcik7XG4gICAgLyoqXG4gICAgKiBnZXQvc2V0IGhzdiBodWUgaW4gZGVncmVlcy4gVXNlIHdpdGgge0BsaW5rIEtpbmV0aWMuRmlsdGVycy5IU1Z9IG9yIHtAbGluayBLaW5ldGljLkZpbHRlcnMuSFNMfSBmaWx0ZXIuXG4gICAgKiBAbmFtZSBodWVcbiAgICAqIEBtZXRob2RcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgKiBAcGFyYW0ge051bWJlcn0gaHVlIHZhbHVlIGJldHdlZW4gMCBhbmQgMzU5XG4gICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3NhdHVyYXRpb24nLCAwLCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xuICAgIC8qKlxuICAgICogZ2V0L3NldCBoc3Ygc2F0dXJhdGlvbi4gVXNlIHdpdGgge0BsaW5rIEtpbmV0aWMuRmlsdGVycy5IU1Z9IG9yIHtAbGluayBLaW5ldGljLkZpbHRlcnMuSFNMfSBmaWx0ZXIuXG4gICAgKiBAbmFtZSBzYXR1cmF0aW9uXG4gICAgKiBAbWV0aG9kXG4gICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHNhdHVyYXRpb24gMCBpcyBubyBjaGFuZ2UsIC0xLjAgaGFsdmVzIHRoZSBzYXR1cmF0aW9uLCAxLjAgZG91YmxlcywgZXRjLi5cbiAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAndmFsdWUnLCAwLCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xuICAgIC8qKlxuICAgICogZ2V0L3NldCBoc3YgdmFsdWUuIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuSFNWfSBmaWx0ZXIuXG4gICAgKiBAbmFtZSB2YWx1ZVxuICAgICogQG1ldGhvZFxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAwIGlzIG5vIGNoYW5nZSwgLTEuMCBoYWx2ZXMgdGhlIHZhbHVlLCAxLjAgZG91YmxlcywgZXRjLi5cbiAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgKi9cblxufSkoKTtcbjsoZnVuY3Rpb24gKCkge1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdodWUnLCAwLCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xuICAgIC8qKlxuICAgICogZ2V0L3NldCBoc3YgaHVlIGluIGRlZ3JlZXMuIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuSFNWfSBvciB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLkhTTH0gZmlsdGVyLlxuICAgICogQG5hbWUgaHVlXG4gICAgKiBAbWV0aG9kXG4gICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGh1ZSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDM1OVxuICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdzYXR1cmF0aW9uJywgMCwgbnVsbCwgS2luZXRpYy5GYWN0b3J5LmFmdGVyU2V0RmlsdGVyKTtcbiAgICAvKipcbiAgICAqIGdldC9zZXQgaHN2IHNhdHVyYXRpb24uIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuSFNWfSBvciB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLkhTTH0gZmlsdGVyLlxuICAgICogQG5hbWUgc2F0dXJhdGlvblxuICAgICogQG1ldGhvZFxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBzYXR1cmF0aW9uIDAgaXMgbm8gY2hhbmdlLCAtMS4wIGhhbHZlcyB0aGUgc2F0dXJhdGlvbiwgMS4wIGRvdWJsZXMsIGV0Yy4uXG4gICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2x1bWluYW5jZScsIDAsIG51bGwsIEtpbmV0aWMuRmFjdG9yeS5hZnRlclNldEZpbHRlcik7XG4gICAgLyoqXG4gICAgKiBnZXQvc2V0IGhzbCBsdW1pbmFuY2UuIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuSFNMfSBmaWx0ZXIuXG4gICAgKiBAbmFtZSB2YWx1ZVxuICAgICogQG1ldGhvZFxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAwIGlzIG5vIGNoYW5nZSwgLTEuMCBoYWx2ZXMgdGhlIHZhbHVlLCAxLjAgZG91YmxlcywgZXRjLi5cbiAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogSFNMIEZpbHRlci4gQWRqdXN0cyB0aGUgaHVlLCBzYXR1cmF0aW9uIGFuZCBsdW1pbmFuY2UgKG9yIGxpZ2h0bmVzcylcbiAgICAqIEBmdW5jdGlvblxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRmlsdGVyc1xuICAgICogQHBhcmFtIHtPYmplY3R9IGltYWdlRGF0YVxuICAgICogQGF1dGhvciBpcHBvNjE1XG4gICAgKiBAZXhhbXBsZVxuICAgICogaW1hZ2UuZmlsdGVycyhbS2luZXRpYy5GaWx0ZXJzLkhTTF0pO1xuICAgICogaW1hZ2UubHVtaW5hbmNlKDIwMCk7XG4gICAgKi9cblxuICAgIEtpbmV0aWMuRmlsdGVycy5IU0wgPSBmdW5jdGlvbiAoaW1hZ2VEYXRhKSB7XG4gICAgICAgIHZhciBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsXG4gICAgICAgICAgICBuUGl4ZWxzID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICB2ID0gMSxcbiAgICAgICAgICAgIHMgPSBNYXRoLnBvdygyLHRoaXMuc2F0dXJhdGlvbigpKSxcbiAgICAgICAgICAgIGggPSBNYXRoLmFicygodGhpcy5odWUoKSkgKyAzNjApICUgMzYwLFxuICAgICAgICAgICAgbCA9IHRoaXMubHVtaW5hbmNlKCkqMTI3LFxuICAgICAgICAgICAgaTtcblxuICAgICAgICAvLyBCYXNpcyBmb3IgdGhlIHRlY2huaXF1ZSB1c2VkOlxuICAgICAgICAvLyBodHRwOi8vYmVlc2J1enouYml6L2NvZGUvaHN2X2NvbG9yX3RyYW5zZm9ybXMucGhwXG4gICAgICAgIC8vIFYgaXMgdGhlIHZhbHVlIG11bHRpcGxpZXIgKDEgZm9yIG5vbmUsIDIgZm9yIGRvdWJsZSwgMC41IGZvciBoYWxmKVxuICAgICAgICAvLyBTIGlzIHRoZSBzYXR1cmF0aW9uIG11bHRpcGxpZXIgKDEgZm9yIG5vbmUsIDIgZm9yIGRvdWJsZSwgMC41IGZvciBoYWxmKVxuICAgICAgICAvLyBIIGlzIHRoZSBodWUgc2hpZnQgaW4gZGVncmVlcyAoMCB0byAzNjApXG4gICAgICAgIC8vIHZzdSA9IFYqUypjb3MoSCpQSS8xODApO1xuICAgICAgICAvLyB2c3cgPSBWKlMqc2luKEgqUEkvMTgwKTtcbiAgICAgICAgLy9bIC4yOTlWKy43MDF2c3UrLjE2OHZzdyAgICAuNTg3Vi0uNTg3dnN1Ky4zMzB2c3cgICAgLjExNFYtLjExNHZzdS0uNDk3dnN3IF0gW1JdXG4gICAgICAgIC8vWyAuMjk5Vi0uMjk5dnN1LS4zMjh2c3cgICAgLjU4N1YrLjQxM3ZzdSsuMDM1dnN3ICAgIC4xMTRWLS4xMTR2c3UrLjI5MnZzdyBdKltHXVxuICAgICAgICAvL1sgLjI5OVYtLjMwMHZzdSsxLjI1dnN3ICAgIC41ODdWLS41ODh2c3UtMS4wNXZzdyAgICAuMTE0VisuODg2dnN1LS4yMDN2c3cgXSBbQl1cblxuICAgICAgICAvLyBQcmVjb21wdXRlIHRoZSB2YWx1ZXMgaW4gdGhlIG1hdHJpeDpcbiAgICAgICAgdmFyIHZzdSA9IHYqcypNYXRoLmNvcyhoKk1hdGguUEkvMTgwKSxcbiAgICAgICAgICAgIHZzdyA9IHYqcypNYXRoLnNpbihoKk1hdGguUEkvMTgwKTtcbiAgICAgICAgLy8gKHJlc3VsdCBzcG90KShzb3VyY2Ugc3BvdClcbiAgICAgICAgdmFyIHJyID0gMC4yOTkqdiswLjcwMSp2c3UrMC4xNjcqdnN3LFxuICAgICAgICAgICAgcmcgPSAwLjU4Nyp2LTAuNTg3KnZzdSswLjMzMCp2c3csXG4gICAgICAgICAgICByYiA9IDAuMTE0KnYtMC4xMTQqdnN1LTAuNDk3KnZzdztcbiAgICAgICAgdmFyIGdyID0gMC4yOTkqdi0wLjI5OSp2c3UtMC4zMjgqdnN3LFxuICAgICAgICAgICAgZ2cgPSAwLjU4Nyp2KzAuNDEzKnZzdSswLjAzNSp2c3csXG4gICAgICAgICAgICBnYiA9IDAuMTE0KnYtMC4xMTQqdnN1KzAuMjkzKnZzdztcbiAgICAgICAgdmFyIGJyID0gMC4yOTkqdi0wLjMwMCp2c3UrMS4yNTAqdnN3LFxuICAgICAgICAgICAgYmcgPSAwLjU4Nyp2LTAuNTg2KnZzdS0xLjA1MCp2c3csXG4gICAgICAgICAgICBiYiA9IDAuMTE0KnYrMC44ODYqdnN1LTAuMjAwKnZzdztcblxuICAgICAgICB2YXIgcixnLGIsYTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgblBpeGVsczsgaSArPSA0KSB7XG4gICAgICAgICAgICByID0gZGF0YVtpKzBdO1xuICAgICAgICAgICAgZyA9IGRhdGFbaSsxXTtcbiAgICAgICAgICAgIGIgPSBkYXRhW2krMl07XG4gICAgICAgICAgICBhID0gZGF0YVtpKzNdO1xuXG4gICAgICAgICAgICBkYXRhW2krMF0gPSBycipyICsgcmcqZyArIHJiKmIgKyBsO1xuICAgICAgICAgICAgZGF0YVtpKzFdID0gZ3IqciArIGdnKmcgKyBnYipiICsgbDtcbiAgICAgICAgICAgIGRhdGFbaSsyXSA9IGJyKnIgKyBiZypnICsgYmIqYiArIGw7XG4gICAgICAgICAgICBkYXRhW2krM10gPSBhOyAvLyBhbHBoYVxuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG47KGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBFbWJvc3MgRmlsdGVyLlxuICAgICAqIFBpeGFzdGljIExpYiAtIEVtYm9zcyBmaWx0ZXIgLSB2MC4xLjBcbiAgICAgKiBDb3B5cmlnaHQgKGMpIDIwMDggSmFjb2IgU2VpZGVsaW4sIGpzZWlkZWxpbkBuaWhpbG9naWMuZGssIGh0dHA6Ly9ibG9nLm5paGlsb2dpYy5kay9cbiAgICAgKiBMaWNlbnNlOiBbaHR0cDovL3d3dy5waXhhc3RpYy5jb20vbGliL2xpY2Vuc2UudHh0XVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW1hZ2VEYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBub2RlLmNhY2hlKCk7XG4gICAgICogbm9kZS5maWx0ZXJzKFtLaW5ldGljLkZpbHRlcnMuRW1ib3NzXSk7XG4gICAgICogbm9kZS5lbWJvc3NTdHJlbmd0aCgwLjgpO1xuICAgICAqIG5vZGUuZW1ib3NzV2hpdGVMZXZlbCgwLjMpO1xuICAgICAqIG5vZGUuZW1ib3NzRGlyZWN0aW9uKCdyaWdodCcpO1xuICAgICAqIG5vZGUuZW1ib3NzQmxlbmQodHJ1ZSk7XG4gICAgICovXG4gICAgS2luZXRpYy5GaWx0ZXJzLkVtYm9zcyA9IGZ1bmN0aW9uIChpbWFnZURhdGEpIHtcblxuICAgICAgICAvLyBwaXhhc3RpYyBzdHJlbmd0aCBpcyBiZXR3ZWVuIDAgYW5kIDEwLiAgSSB3YW50IGl0IGJldHdlZW4gMCBhbmQgMVxuICAgICAgICAvLyBwaXhhc3RpYyBncmV5TGV2ZWwgaXMgYmV0d2VlbiAwIGFuZCAyNTUuICBJIHdhbnQgaXQgYmV0d2VlbiAwIGFuZCAxLiAgQWxzbyxcbiAgICAgICAgLy8gYSBtYXggdmFsdWUgb2YgZ3JleUxldmVsIHlpZWxkcyBhIHdoaXRlIGVtYm9zcywgYW5kIHRoZSBtaW4gdmFsdWUgeWllbGRzIGEgYmxhY2tcbiAgICAgICAgLy8gZW1ib3NzLiAgVGhlcmVmb3JlLCBJIGNoYW5nZWQgZ3JleUxldmVsIHRvIHdoaXRlTGV2ZWxcbiAgICAgICAgdmFyIHN0cmVuZ3RoID0gdGhpcy5lbWJvc3NTdHJlbmd0aCgpICogMTAsXG4gICAgICAgICAgICBncmV5TGV2ZWwgPSB0aGlzLmVtYm9zc1doaXRlTGV2ZWwoKSAqIDI1NSxcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IHRoaXMuZW1ib3NzRGlyZWN0aW9uKCksXG4gICAgICAgICAgICBibGVuZCA9IHRoaXMuZW1ib3NzQmxlbmQoKSxcbiAgICAgICAgICAgIGRpclkgPSAwLFxuICAgICAgICAgICAgZGlyWCA9IDAsXG4gICAgICAgICAgICBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsXG4gICAgICAgICAgICB3ID0gaW1hZ2VEYXRhLndpZHRoLFxuICAgICAgICAgICAgaCA9IGltYWdlRGF0YS5oZWlnaHQsXG4gICAgICAgICAgICB3NCA9IHcqNCxcbiAgICAgICAgICAgIHkgPSBoO1xuXG4gICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlICd0b3AtbGVmdCc6XG4gICAgICAgICAgICAgICAgZGlyWSA9IC0xO1xuICAgICAgICAgICAgICAgIGRpclggPSAtMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICAgICAgZGlyWSA9IC0xO1xuICAgICAgICAgICAgICAgIGRpclggPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndG9wLXJpZ2h0JzpcbiAgICAgICAgICAgICAgICBkaXJZID0gLTE7XG4gICAgICAgICAgICAgICAgZGlyWCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgZGlyWSA9IDA7XG4gICAgICAgICAgICAgICAgZGlyWCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdib3R0b20tcmlnaHQnOlxuICAgICAgICAgICAgICAgIGRpclkgPSAxO1xuICAgICAgICAgICAgICAgIGRpclggPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgICAgICBkaXJZID0gMTtcbiAgICAgICAgICAgICAgICBkaXJYID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbS1sZWZ0JzpcbiAgICAgICAgICAgICAgICBkaXJZID0gMTtcbiAgICAgICAgICAgICAgICBkaXJYID0gLTE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgICBkaXJZID0gMDtcbiAgICAgICAgICAgICAgICBkaXJYID0gLTE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBkbyB7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0WSA9ICh5LTEpKnc0O1xuXG4gICAgICAgICAgICB2YXIgb3RoZXJZID0gZGlyWTtcbiAgICAgICAgICAgIGlmICh5ICsgb3RoZXJZIDwgMSl7XG4gICAgICAgICAgICAgICAgb3RoZXJZID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh5ICsgb3RoZXJZID4gaCkge1xuICAgICAgICAgICAgICAgIG90aGVyWSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBvZmZzZXRZT3RoZXIgPSAoeS0xK290aGVyWSkqdyo0O1xuXG4gICAgICAgICAgICB2YXIgeCA9IHc7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IG9mZnNldFkgKyAoeC0xKSo0O1xuXG4gICAgICAgICAgICAgICAgdmFyIG90aGVyWCA9IGRpclg7XG4gICAgICAgICAgICAgICAgaWYgKHggKyBvdGhlclggPCAxKXtcbiAgICAgICAgICAgICAgICAgICAgb3RoZXJYID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHggKyBvdGhlclggPiB3KSB7XG4gICAgICAgICAgICAgICAgICAgIG90aGVyWCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldE90aGVyID0gb2Zmc2V0WU90aGVyICsgKHgtMStvdGhlclgpKjQ7XG5cbiAgICAgICAgICAgICAgICB2YXIgZFIgPSBkYXRhW29mZnNldF0gLSBkYXRhW29mZnNldE90aGVyXTtcbiAgICAgICAgICAgICAgICB2YXIgZEcgPSBkYXRhW29mZnNldCsxXSAtIGRhdGFbb2Zmc2V0T3RoZXIrMV07XG4gICAgICAgICAgICAgICAgdmFyIGRCID0gZGF0YVtvZmZzZXQrMl0gLSBkYXRhW29mZnNldE90aGVyKzJdO1xuXG4gICAgICAgICAgICAgICAgdmFyIGRpZiA9IGRSO1xuICAgICAgICAgICAgICAgIHZhciBhYnNEaWYgPSBkaWYgPiAwID8gZGlmIDogLWRpZjtcblxuICAgICAgICAgICAgICAgIHZhciBhYnNHID0gZEcgPiAwID8gZEcgOiAtZEc7XG4gICAgICAgICAgICAgICAgdmFyIGFic0IgPSBkQiA+IDAgPyBkQiA6IC1kQjtcblxuICAgICAgICAgICAgICAgIGlmIChhYnNHID4gYWJzRGlmKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpZiA9IGRHO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWJzQiA+IGFic0RpZikge1xuICAgICAgICAgICAgICAgICAgICBkaWYgPSBkQjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkaWYgKj0gc3RyZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBpZiAoYmxlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBkYXRhW29mZnNldF0gKyBkaWY7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnID0gZGF0YVtvZmZzZXQrMV0gKyBkaWY7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiID0gZGF0YVtvZmZzZXQrMl0gKyBkaWY7XG5cbiAgICAgICAgICAgICAgICAgICAgZGF0YVtvZmZzZXRdID0gKHIgPiAyNTUpID8gMjU1IDogKHIgPCAwID8gMCA6IHIpO1xuICAgICAgICAgICAgICAgICAgICBkYXRhW29mZnNldCsxXSA9IChnID4gMjU1KSA/IDI1NSA6IChnIDwgMCA/IDAgOiBnKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtvZmZzZXQrMl0gPSAoYiA+IDI1NSkgPyAyNTUgOiAoYiA8IDAgPyAwIDogYik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdyZXkgPSBncmV5TGV2ZWwgLSBkaWY7XG4gICAgICAgICAgICAgICAgICAgIGlmIChncmV5IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JleSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZ3JleSA+IDI1NSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JleSA9IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbb2Zmc2V0XSA9IGRhdGFbb2Zmc2V0KzFdID0gZGF0YVtvZmZzZXQrMl0gPSBncmV5O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSB3aGlsZSAoLS14KTtcbiAgICAgICAgfSB3aGlsZSAoLS15KTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdlbWJvc3NTdHJlbmd0aCcsIDAuNSwgbnVsbCwgS2luZXRpYy5GYWN0b3J5LmFmdGVyU2V0RmlsdGVyKTtcbiAgICAvKipcbiAgICAqIGdldC9zZXQgZW1ib3NzIHN0cmVuZ3RoLiBVc2Ugd2l0aCB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLkVtYm9zc30gZmlsdGVyLlxuICAgICogQG5hbWUgZW1ib3NzU3RyZW5ndGhcbiAgICAqIEBtZXRob2RcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgKiBAcGFyYW0ge051bWJlcn0gbGV2ZWwgYmV0d2VlbiAwIGFuZCAxLiAgRGVmYXVsdCBpcyAwLjVcbiAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnZW1ib3NzV2hpdGVMZXZlbCcsIDAuNSwgbnVsbCwgS2luZXRpYy5GYWN0b3J5LmFmdGVyU2V0RmlsdGVyKTtcbiAgICAvKipcbiAgICAqIGdldC9zZXQgZW1ib3NzIHdoaXRlIGxldmVsLiBVc2Ugd2l0aCB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLkVtYm9zc30gZmlsdGVyLlxuICAgICogQG5hbWUgZW1ib3NzV2hpdGVMZXZlbFxuICAgICogQG1ldGhvZFxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbWJvc3NXaGl0ZUxldmVsIGJldHdlZW4gMCBhbmQgMS4gIERlZmF1bHQgaXMgMC41XG4gICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2VtYm9zc0RpcmVjdGlvbicsICd0b3AtbGVmdCcsIG51bGwsIEtpbmV0aWMuRmFjdG9yeS5hZnRlclNldEZpbHRlcik7XG4gICAgLyoqXG4gICAgKiBnZXQvc2V0IGVtYm9zcyBkaXJlY3Rpb24uIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuRW1ib3NzfSBmaWx0ZXIuXG4gICAgKiBAbmFtZSBlbWJvc3NEaXJlY3Rpb25cbiAgICAqIEBtZXRob2RcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gZW1ib3NzRGlyZWN0aW9uIGNhbiBiZSB0b3AtbGVmdCwgdG9wLCB0b3AtcmlnaHQsIHJpZ2h0LCBib3R0b20tcmlnaHQsIGJvdHRvbSwgYm90dG9tLWxlZnQgb3IgbGVmdFxuICAgICogICBUaGUgZGVmYXVsdCBpcyB0b3AtbGVmdFxuICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdlbWJvc3NCbGVuZCcsIGZhbHNlLCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xuICAgIC8qKlxuICAgICogZ2V0L3NldCBlbWJvc3MgYmxlbmQuIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuRW1ib3NzfSBmaWx0ZXIuXG4gICAgKiBAbmFtZSBlbWJvc3NCbGVuZFxuICAgICogQG1ldGhvZFxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW1ib3NzQmxlbmRcbiAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICovXG59KSgpO1xuXG5cbjsoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHJlbWFwKGZyb21WYWx1ZSwgZnJvbU1pbiwgZnJvbU1heCwgdG9NaW4sIHRvTWF4KSB7XG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHJhbmdlIG9mIHRoZSBkYXRhXG4gICAgICAgIHZhciBmcm9tUmFuZ2UgPSBmcm9tTWF4IC0gZnJvbU1pbixcbiAgICAgICAgICB0b1JhbmdlID0gdG9NYXggLSB0b01pbixcbiAgICAgICAgICB0b1ZhbHVlO1xuXG4gICAgICAgIC8vIElmIGVpdGhlciByYW5nZSBpcyAwLCB0aGVuIHRoZSB2YWx1ZSBjYW4gb25seSBiZSBtYXBwZWQgdG8gMSB2YWx1ZVxuICAgICAgICBpZiAoZnJvbVJhbmdlID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9NaW4gKyB0b1JhbmdlIC8gMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9SYW5nZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRvTWluO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gKDEpIHVudHJhbnNsYXRlLCAoMikgdW5zY2FsZSwgKDMpIHJlc2NhbGUsICg0KSByZXRyYW5zbGF0ZVxuICAgICAgICB0b1ZhbHVlID0gKGZyb21WYWx1ZSAtIGZyb21NaW4pIC8gZnJvbVJhbmdlO1xuICAgICAgICB0b1ZhbHVlID0gKHRvUmFuZ2UgKiB0b1ZhbHVlKSArIHRvTWluO1xuXG4gICAgICAgIHJldHVybiB0b1ZhbHVlO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBFbmhhbmNlIEZpbHRlci4gQWRqdXN0cyB0aGUgY29sb3JzIHNvIHRoYXQgdGhleSBzcGFuIHRoZSB3aWRlc3RcbiAgICAqICBwb3NzaWJsZSByYW5nZSAoaWUgMC0yNTUpLiBQZXJmb3JtcyB3KmggcGl4ZWwgcmVhZHMgYW5kIHcqaCBwaXhlbFxuICAgICogIHdyaXRlcy5cbiAgICAqIEBmdW5jdGlvblxuICAgICogQG5hbWUgRW5oYW5jZVxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRmlsdGVyc1xuICAgICogQHBhcmFtIHtPYmplY3R9IGltYWdlRGF0YVxuICAgICogQGF1dGhvciBpcHBvNjE1XG4gICAgKiBAZXhhbXBsZVxuICAgICogbm9kZS5jYWNoZSgpO1xuICAgICogbm9kZS5maWx0ZXJzKFtLaW5ldGljLkZpbHRlcnMuRW5oYW5jZV0pO1xuICAgICogbm9kZS5lbmhhbmNlKDAuNCk7XG4gICAgKi9cbiAgICBLaW5ldGljLkZpbHRlcnMuRW5oYW5jZSA9IGZ1bmN0aW9uIChpbWFnZURhdGEpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBpbWFnZURhdGEuZGF0YSxcbiAgICAgICAgICAgIG5TdWJQaXhlbHMgPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgICAgIHJNaW4gPSBkYXRhWzBdLCByTWF4ID0gck1pbiwgcixcbiAgICAgICAgICAgIGdNaW4gPSBkYXRhWzFdLCBnTWF4ID0gZ01pbiwgZyxcbiAgICAgICAgICAgIGJNaW4gPSBkYXRhWzJdLCBiTWF4ID0gYk1pbiwgYixcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgLy8gSWYgd2UgYXJlIG5vdCBlbmhhbmNpbmcgYW55dGhpbmcgLSBkb24ndCBkbyBhbnkgY29tcHV0YXRpb25cbiAgICAgICAgdmFyIGVuaGFuY2VBbW91bnQgPSB0aGlzLmVuaGFuY2UoKTtcbiAgICAgICAgaWYoIGVuaGFuY2VBbW91bnQgPT09IDAgKXsgcmV0dXJuOyB9XG5cbiAgICAgICAgLy8gMXN0IFBhc3MgLSBmaW5kIHRoZSBtaW4gYW5kIG1heCBmb3IgZWFjaCBjaGFubmVsOlxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgblN1YlBpeGVsczsgaSArPSA0KSB7XG4gICAgICAgICAgICByID0gZGF0YVtpICsgMF07XG4gICAgICAgICAgICBpZiAociA8IHJNaW4pIHsgck1pbiA9IHI7IH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHIgPiByTWF4KSB7IHJNYXggPSByOyB9XG4gICAgICAgICAgICBnID0gZGF0YVtpICsgMV07XG4gICAgICAgICAgICBpZiAoZyA8IGdNaW4pIHsgZ01pbiA9IGc7IH0gZWxzZVxuICAgICAgICAgICAgaWYgKGcgPiBnTWF4KSB7IGdNYXggPSBnOyB9XG4gICAgICAgICAgICBiID0gZGF0YVtpICsgMl07XG4gICAgICAgICAgICBpZiAoYiA8IGJNaW4pIHsgYk1pbiA9IGI7IH0gZWxzZVxuICAgICAgICAgICAgaWYgKGIgPiBiTWF4KSB7IGJNYXggPSBiOyB9XG4gICAgICAgICAgICAvL2EgPSBkYXRhW2kgKyAzXTtcbiAgICAgICAgICAgIC8vaWYgKGEgPCBhTWluKSB7IGFNaW4gPSBhOyB9IGVsc2VcbiAgICAgICAgICAgIC8vaWYgKGEgPiBhTWF4KSB7IGFNYXggPSBhOyB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBvbmx5IDEgbGV2ZWwgLSBkb24ndCByZW1hcFxuICAgICAgICBpZiggck1heCA9PT0gck1pbiApeyByTWF4ID0gMjU1OyByTWluID0gMDsgfVxuICAgICAgICBpZiggZ01heCA9PT0gZ01pbiApeyBnTWF4ID0gMjU1OyBnTWluID0gMDsgfVxuICAgICAgICBpZiggYk1heCA9PT0gYk1pbiApeyBiTWF4ID0gMjU1OyBiTWluID0gMDsgfVxuXG4gICAgICAgIHZhciByTWlkLCByR29hbE1heCxyR29hbE1pbixcbiAgICAgICAgICAgIGdNaWQsIGdHb2FsTWF4LGdHb2FsTWluLFxuICAgICAgICAgICAgYk1pZCwgYkdvYWxNYXgsYkdvYWxNaW47XG5cbiAgICAgICAgLy8gSWYgdGhlIGVuaGFuY2VtZW50IGlzIHBvc2l0aXZlIC0gc3RyZXRjaCB0aGUgaGlzdG9ncmFtIFxuICAgICAgICBpZiAoIGVuaGFuY2VBbW91bnQgPiAwICl7XG4gICAgICAgICAgICByR29hbE1heCA9IHJNYXggKyBlbmhhbmNlQW1vdW50KigyNTUtck1heCk7XG4gICAgICAgICAgICByR29hbE1pbiA9IHJNaW4gLSBlbmhhbmNlQW1vdW50KihyTWluLTApO1xuICAgICAgICAgICAgZ0dvYWxNYXggPSBnTWF4ICsgZW5oYW5jZUFtb3VudCooMjU1LWdNYXgpO1xuICAgICAgICAgICAgZ0dvYWxNaW4gPSBnTWluIC0gZW5oYW5jZUFtb3VudCooZ01pbi0wKTtcbiAgICAgICAgICAgIGJHb2FsTWF4ID0gYk1heCArIGVuaGFuY2VBbW91bnQqKDI1NS1iTWF4KTtcbiAgICAgICAgICAgIGJHb2FsTWluID0gYk1pbiAtIGVuaGFuY2VBbW91bnQqKGJNaW4tMCk7XG4gICAgICAgIC8vIElmIHRoZSBlbmhhbmNlbWVudCBpcyBuZWdhdGl2ZSAtIGNvbXByZXNzIHRoZSBoaXN0b2dyYW1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJNaWQgPSAock1heCArIHJNaW4pKjAuNTtcbiAgICAgICAgICAgIHJHb2FsTWF4ID0gck1heCArIGVuaGFuY2VBbW91bnQqKHJNYXgtck1pZCk7XG4gICAgICAgICAgICByR29hbE1pbiA9IHJNaW4gKyBlbmhhbmNlQW1vdW50KihyTWluLXJNaWQpO1xuICAgICAgICAgICAgZ01pZCA9IChnTWF4ICsgZ01pbikqMC41O1xuICAgICAgICAgICAgZ0dvYWxNYXggPSBnTWF4ICsgZW5oYW5jZUFtb3VudCooZ01heC1nTWlkKTtcbiAgICAgICAgICAgIGdHb2FsTWluID0gZ01pbiArIGVuaGFuY2VBbW91bnQqKGdNaW4tZ01pZCk7XG4gICAgICAgICAgICBiTWlkID0gKGJNYXggKyBiTWluKSowLjU7XG4gICAgICAgICAgICBiR29hbE1heCA9IGJNYXggKyBlbmhhbmNlQW1vdW50KihiTWF4LWJNaWQpO1xuICAgICAgICAgICAgYkdvYWxNaW4gPSBiTWluICsgZW5oYW5jZUFtb3VudCooYk1pbi1iTWlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBhc3MgMiAtIHJlbWFwIGV2ZXJ5dGhpbmcsIGV4Y2VwdCB0aGUgYWxwaGFcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG5TdWJQaXhlbHM7IGkgKz0gNCkge1xuICAgICAgICAgICAgZGF0YVtpICsgMF0gPSByZW1hcChkYXRhW2kgKyAwXSwgck1pbiwgck1heCwgckdvYWxNaW4sIHJHb2FsTWF4KTtcbiAgICAgICAgICAgIGRhdGFbaSArIDFdID0gcmVtYXAoZGF0YVtpICsgMV0sIGdNaW4sIGdNYXgsIGdHb2FsTWluLCBnR29hbE1heCk7XG4gICAgICAgICAgICBkYXRhW2kgKyAyXSA9IHJlbWFwKGRhdGFbaSArIDJdLCBiTWluLCBiTWF4LCBiR29hbE1pbiwgYkdvYWxNYXgpO1xuICAgICAgICAgICAgLy9kYXRhW2kgKyAzXSA9IHJlbWFwKGRhdGFbaSArIDNdLCBhTWluLCBhTWF4LCBhR29hbE1pbiwgYUdvYWxNYXgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnZW5oYW5jZScsIDAsIG51bGwsIEtpbmV0aWMuRmFjdG9yeS5hZnRlclNldEZpbHRlcik7XG5cbiAgICAvKipcbiAgICAqIGdldC9zZXQgZW5oYW5jZS4gVXNlIHdpdGgge0BsaW5rIEtpbmV0aWMuRmlsdGVycy5FbmhhbmNlfSBmaWx0ZXIuXG4gICAgKiBAbmFtZSBlbmhhbmNlXG4gICAgKiBAbWV0aG9kXG4gICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICogQHBhcmFtIHtGbG9hdH0gYW1vdW50XG4gICAgKiBAcmV0dXJucyB7RmxvYXR9XG4gICAgKi9cbn0pKCk7XG47KGZ1bmN0aW9uICgpIHtcblxuICAgIC8qKlxuICAgICAqIFBvc3Rlcml6ZSBGaWx0ZXIuIEFkanVzdHMgdGhlIGNoYW5uZWxzIHNvIHRoYXQgdGhlcmUgYXJlIG5vIG1vcmVcbiAgICAgKiAgdGhhbiBuIGRpZmZlcmVudCB2YWx1ZXMgZm9yIHRoYXQgY2hhbm5lbC4gVGhpcyBpcyBhbHNvIGFwcGxpZWRcbiAgICAgKiAgdG8gdGhlIGFscGhhIGNoYW5uZWwuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG5hbWUgUG9zdGVyaXplXG4gICAgICogQGF1dGhvciBpcHBvNjE1XG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRmlsdGVyc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZURhdGFcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG5vZGUuY2FjaGUoKTtcbiAgICAgKiBub2RlLmZpbHRlcnMoW0tpbmV0aWMuRmlsdGVycy5Qb3N0ZXJpemVdKTtcbiAgICAgKiBub2RlLmxldmVscygwLjgpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GaWx0ZXJzLlBvc3Rlcml6ZSA9IGZ1bmN0aW9uIChpbWFnZURhdGEpIHtcbiAgICAgICAgLy8gbGV2ZWwgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDI1NVxuICAgICAgICB2YXIgbGV2ZWxzID0gTWF0aC5yb3VuZCh0aGlzLmxldmVscygpICogMjU0KSArIDEsXG4gICAgICAgICAgICBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsXG4gICAgICAgICAgICBsZW4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgICAgIHNjYWxlID0gKDI1NSAvIGxldmVscyksXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgZGF0YVtpXSA9IE1hdGguZmxvb3IoZGF0YVtpXSAvIHNjYWxlKSAqIHNjYWxlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnbGV2ZWxzJywgMC41LCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xuXG4gICAgLyoqXG4gICAgKiBnZXQvc2V0IGxldmVscy4gIE11c3QgYmUgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxLiAgVXNlIHdpdGgge0BsaW5rIEtpbmV0aWMuRmlsdGVycy5Qb3N0ZXJpemV9IGZpbHRlci5cbiAgICAqIEBuYW1lIGxldmVsc1xuICAgICogQG1ldGhvZFxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbCBiZXR3ZWVuIDAgYW5kIDFcbiAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgKi9cbn0pKCk7OyhmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOb2lzZSBGaWx0ZXIuIFJhbmRvbWx5IGFkZHMgb3Igc3Vic3RyYWN0cyB0byB0aGUgY29sb3IgY2hhbm5lbHNcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQG5hbWUgTm9pc2VcclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZURhdGFcclxuICAgICAqIEBhdXRob3IgaXBwbzYxNVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIG5vZGUuY2FjaGUoKTtcclxuICAgICAqIG5vZGUuZmlsdGVycyhbS2luZXRpYy5GaWx0ZXJzLk5vaXNlXSk7XHJcbiAgICAgKiBub2RlLm5vaXNlKDAuOCk7XHJcbiAgICAgKi9cclxuICAgIEtpbmV0aWMuRmlsdGVycy5Ob2lzZSA9IGZ1bmN0aW9uIChpbWFnZURhdGEpIHtcclxuICAgICAgICB2YXIgYW1vdW50ID0gdGhpcy5ub2lzZSgpICogMjU1LFxyXG4gICAgICAgICAgICBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsXHJcbiAgICAgICAgICAgIG5QaXhlbHMgPSBkYXRhLmxlbmd0aCxcclxuICAgICAgICAgICAgaGFsZiA9IGFtb3VudCAvIDIsXHJcbiAgICAgICAgICAgIGk7XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuUGl4ZWxzOyBpICs9IDQpIHtcclxuICAgICAgICAgICAgZGF0YVtpICsgMF0gKz0gaGFsZiAtIDIgKiBoYWxmICogTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgICAgZGF0YVtpICsgMV0gKz0gaGFsZiAtIDIgKiBoYWxmICogTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgICAgZGF0YVtpICsgMl0gKz0gaGFsZiAtIDIgKiBoYWxmICogTWF0aC5yYW5kb20oKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnbm9pc2UnLCAwLjIsIG51bGwsIEtpbmV0aWMuRmFjdG9yeS5hZnRlclNldEZpbHRlcik7XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIGdldC9zZXQgbm9pc2UgYW1vdW50LiAgTXVzdCBiZSBhIHZhbHVlIGJldHdlZW4gMCBhbmQgMS4gVXNlIHdpdGgge0BsaW5rIEtpbmV0aWMuRmlsdGVycy5Ob2lzZX0gZmlsdGVyLlxyXG4gICAgKiBAbmFtZSBub2lzZVxyXG4gICAgKiBAbWV0aG9kXHJcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXHJcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBub2lzZVxyXG4gICAgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG4gICAgKi9cclxufSkoKTtcclxuOyhmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQaXhlbGF0ZSBGaWx0ZXIuIEF2ZXJhZ2VzIGdyb3VwcyBvZiBwaXhlbHMgYW5kIHJlZHJhd3NcclxuICAgICAqICB0aGVtIGFzIGxhcmdlciBwaXhlbHNcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQG5hbWUgUGl4ZWxhdGVcclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZURhdGFcclxuICAgICAqIEBhdXRob3IgaXBwbzYxNVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIG5vZGUuY2FjaGUoKTtcclxuICAgICAqIG5vZGUuZmlsdGVycyhbS2luZXRpYy5GaWx0ZXJzLlBpeGVsYXRlXSk7XHJcbiAgICAgKiBub2RlLnBpeGVsU2l6ZSgxMCk7XHJcbiAgICAgKi9cclxuXHJcbiAgICBLaW5ldGljLkZpbHRlcnMuUGl4ZWxhdGUgPSBmdW5jdGlvbiAoaW1hZ2VEYXRhKSB7XHJcblxyXG4gICAgICAgIHZhciBwaXhlbFNpemUgPSBNYXRoLmNlaWwodGhpcy5waXhlbFNpemUoKSksXHJcbiAgICAgICAgICAgIHdpZHRoID0gaW1hZ2VEYXRhLndpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQgPSBpbWFnZURhdGEuaGVpZ2h0LFxyXG4gICAgICAgICAgICB4LCB5LCBpLFxyXG4gICAgICAgICAgICAvL3BpeGVsc1BlckJpbiA9IHBpeGVsU2l6ZSAqIHBpeGVsU2l6ZSxcclxuICAgICAgICAgICAgcmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEsXHJcbiAgICAgICAgICAgIG5CaW5zWCA9IE1hdGguY2VpbCh3aWR0aCAvIHBpeGVsU2l6ZSksXHJcbiAgICAgICAgICAgIG5CaW5zWSA9IE1hdGguY2VpbChoZWlnaHQgLyBwaXhlbFNpemUpLFxyXG4gICAgICAgICAgICB4QmluU3RhcnQsIHhCaW5FbmQsIHlCaW5TdGFydCwgeUJpbkVuZCxcclxuICAgICAgICAgICAgeEJpbiwgeUJpbiwgcGl4ZWxzSW5CaW47XHJcbiAgICAgICAgaW1hZ2VEYXRhID0gaW1hZ2VEYXRhLmRhdGE7XHJcblxyXG4gICAgICAgIGZvciAoeEJpbiA9IDA7IHhCaW4gPCBuQmluc1g7IHhCaW4gKz0gMSkge1xyXG4gICAgICAgICAgICBmb3IgKHlCaW4gPSAwOyB5QmluIDwgbkJpbnNZOyB5QmluICs9IDEpIHtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgdGhlIGNvbG9yIGFjY3VtbGF0b3JzIHRvIDBcclxuICAgICAgICAgICAgICAgIHJlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICBncmVlbiA9IDA7XHJcbiAgICAgICAgICAgICAgICBibHVlID0gMDtcclxuICAgICAgICAgICAgICAgIGFscGhhID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgd2hpY2ggcGl4ZWxzIGFyZSBpbmNsdWRlZCBpbiB0aGlzIGJpblxyXG4gICAgICAgICAgICAgICAgeEJpblN0YXJ0ID0geEJpbiAqIHBpeGVsU2l6ZTtcclxuICAgICAgICAgICAgICAgIHhCaW5FbmQgPSB4QmluU3RhcnQgKyBwaXhlbFNpemU7XHJcbiAgICAgICAgICAgICAgICB5QmluU3RhcnQgPSB5QmluICogcGl4ZWxTaXplO1xyXG4gICAgICAgICAgICAgICAgeUJpbkVuZCA9IHlCaW5TdGFydCArIHBpeGVsU2l6ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgYWxsIG9mIHRoZSBwaXhlbHMgdG8gdGhpcyBiaW4hXHJcbiAgICAgICAgICAgICAgICBwaXhlbHNJbkJpbiA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHggPSB4QmluU3RhcnQ7IHggPCB4QmluRW5kOyB4ICs9IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiggeCA+PSB3aWR0aCApeyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoeSA9IHlCaW5TdGFydDsgeSA8IHlCaW5FbmQ7IHkgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggeSA+PSBoZWlnaHQgKXsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9ICh3aWR0aCAqIHkgKyB4KSAqIDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZCArPSBpbWFnZURhdGFbaSArIDBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBncmVlbiArPSBpbWFnZURhdGFbaSArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBibHVlICs9IGltYWdlRGF0YVtpICsgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFscGhhICs9IGltYWdlRGF0YVtpICsgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpeGVsc0luQmluICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgY2hhbm5lbHMgYXJlIGJldHdlZW4gMC0yNTVcclxuICAgICAgICAgICAgICAgIHJlZCA9IHJlZCAvIHBpeGVsc0luQmluO1xyXG4gICAgICAgICAgICAgICAgZ3JlZW4gPSBncmVlbiAvIHBpeGVsc0luQmluO1xyXG4gICAgICAgICAgICAgICAgYmx1ZSA9IGJsdWUgLyBwaXhlbHNJbkJpbjtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBEcmF3IHRoaXMgYmluXHJcbiAgICAgICAgICAgICAgICBmb3IgKHggPSB4QmluU3RhcnQ7IHggPCB4QmluRW5kOyB4ICs9IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiggeCA+PSB3aWR0aCApeyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoeSA9IHlCaW5TdGFydDsgeSA8IHlCaW5FbmQ7IHkgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggeSA+PSBoZWlnaHQgKXsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9ICh3aWR0aCAqIHkgKyB4KSAqIDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlRGF0YVtpICsgMF0gPSByZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlRGF0YVtpICsgMV0gPSBncmVlbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VEYXRhW2kgKyAyXSA9IGJsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlRGF0YVtpICsgM10gPSBhbHBoYTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIFxyXG4gICAgfTtcclxuXHJcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3BpeGVsU2l6ZScsIDgsIG51bGwsIEtpbmV0aWMuRmFjdG9yeS5hZnRlclNldEZpbHRlcik7XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIGdldC9zZXQgcGl4ZWwgc2l6ZS4gVXNlIHdpdGgge0BsaW5rIEtpbmV0aWMuRmlsdGVycy5QaXhlbGF0ZX0gZmlsdGVyLlxyXG4gICAgKiBAbmFtZSBwaXhlbFNpemVcclxuICAgICogQG1ldGhvZFxyXG4gICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxyXG4gICAgKiBAcGFyYW0ge0ludGVnZXJ9IHBpeGVsU2l6ZVxyXG4gICAgKiBAcmV0dXJucyB7SW50ZWdlcn1cclxuICAgICovXHJcbn0pKCk7OyhmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaHJlc2hvbGQgRmlsdGVyLiBQdXNoZXMgYW55IHZhbHVlIGFib3ZlIHRoZSBtaWQgcG9pbnQgdG8gXHJcbiAgICAgKiAgdGhlIG1heCBhbmQgYW55IHZhbHVlIGJlbG93IHRoZSBtaWQgcG9pbnQgdG8gdGhlIG1pbi5cclxuICAgICAqICBUaGlzIGFmZmVjdHMgdGhlIGFscGhhIGNoYW5uZWwuXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBuYW1lIFRocmVzaG9sZFxyXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRmlsdGVyc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGltYWdlRGF0YVxyXG4gICAgICogQGF1dGhvciBpcHBvNjE1XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogbm9kZS5jYWNoZSgpO1xyXG4gICAgICogbm9kZS5maWx0ZXJzKFtLaW5ldGljLkZpbHRlcnMuVGhyZXNob2xkXSk7XHJcbiAgICAgKiBub2RlLnRocmVzaG9sZCgwLjEpO1xyXG4gICAgICovXHJcblxyXG4gICAgS2luZXRpYy5GaWx0ZXJzLlRocmVzaG9sZCA9IGZ1bmN0aW9uIChpbWFnZURhdGEpIHtcclxuICAgICAgICB2YXIgbGV2ZWwgPSB0aGlzLnRocmVzaG9sZCgpICogMjU1LFxyXG4gICAgICAgICAgICBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsXHJcbiAgICAgICAgICAgIGxlbiA9IGRhdGEubGVuZ3RoLFxyXG4gICAgICAgICAgICBpO1xyXG5cclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgZGF0YVtpXSA9IGRhdGFbaV0gPCBsZXZlbCA/IDAgOiAyNTU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3RocmVzaG9sZCcsIDAuNSwgbnVsbCwgS2luZXRpYy5GYWN0b3J5LmFmdGVyU2V0RmlsdGVyKTtcclxuXHJcbiAgICAvKipcclxuICAgICogZ2V0L3NldCB0aHJlc2hvbGQuICBNdXN0IGJlIGEgdmFsdWUgYmV0d2VlbiAwIGFuZCAxLiBVc2Ugd2l0aCB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLlRocmVzaG9sZH0gb3Ige0BsaW5rIEtpbmV0aWMuRmlsdGVycy5NYXNrfSBmaWx0ZXIuXHJcbiAgICAqIEBuYW1lIHRocmVzaG9sZFxyXG4gICAgKiBAbWV0aG9kXHJcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXHJcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSB0aHJlc2hvbGRcclxuICAgICogQHJldHVybnMge051bWJlcn1cclxuICAgICovXHJcbn0pKCk7OyhmdW5jdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBTZXBpYSBGaWx0ZXJcbiAgICAgKiBCYXNlZCBvbjogUGl4YXN0aWMgTGliIC0gU2VwaWEgZmlsdGVyIC0gdjAuMS4wXG4gICAgICogQ29weXJpZ2h0IChjKSAyMDA4IEphY29iIFNlaWRlbGluLCBqc2VpZGVsaW5AbmloaWxvZ2ljLmRrLCBodHRwOi8vYmxvZy5uaWhpbG9naWMuZGsvXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG5hbWUgU2VwaWFcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5GaWx0ZXJzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGltYWdlRGF0YVxuICAgICAqIEBhdXRob3IgSmFjb2IgU2VpZGVsaW4gPGpzZWlkZWxpbkBuaWhpbG9naWMuZGs+XG4gICAgICogQGxpY2Vuc2UgTVBMIHYxLjEgW2h0dHA6Ly93d3cucGl4YXN0aWMuY29tL2xpYi9saWNlbnNlLnR4dF1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG5vZGUuY2FjaGUoKTtcbiAgICAgKiBub2RlLmZpbHRlcnMoW0tpbmV0aWMuRmlsdGVycy5TZXBpYV0pO1xuICAgICAqL1xuICAgIEtpbmV0aWMuRmlsdGVycy5TZXBpYSA9IGZ1bmN0aW9uIChpbWFnZURhdGEpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBpbWFnZURhdGEuZGF0YSxcbiAgICAgICAgICAgIHcgPSBpbWFnZURhdGEud2lkdGgsXG4gICAgICAgICAgICB5ID0gaW1hZ2VEYXRhLmhlaWdodCxcbiAgICAgICAgICAgIHc0ID0gdyo0LFxuICAgICAgICAgICAgb2Zmc2V0WSwgeCwgb2Zmc2V0LCBvciwgb2csIG9iLCByLCBnLCBiO1xuICAgICAgICBcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgb2Zmc2V0WSA9ICh5LTEpKnc0O1xuICAgICAgICAgICAgeCA9IHc7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0WSArICh4LTEpKjQ7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgb3IgPSBkYXRhW29mZnNldF07XG4gICAgICAgICAgICAgICAgb2cgPSBkYXRhW29mZnNldCsxXTtcbiAgICAgICAgICAgICAgICBvYiA9IGRhdGFbb2Zmc2V0KzJdO1xuXG4gICAgICAgICAgICAgICAgciA9IG9yICogMC4zOTMgKyBvZyAqIDAuNzY5ICsgb2IgKiAwLjE4OTtcbiAgICAgICAgICAgICAgICBnID0gb3IgKiAwLjM0OSArIG9nICogMC42ODYgKyBvYiAqIDAuMTY4O1xuICAgICAgICAgICAgICAgIGIgPSBvciAqIDAuMjcyICsgb2cgKiAwLjUzNCArIG9iICogMC4xMzE7XG5cbiAgICAgICAgICAgICAgICBkYXRhW29mZnNldF0gPSByID4gMjU1ID8gMjU1IDogcjtcbiAgICAgICAgICAgICAgICBkYXRhW29mZnNldCsxXSA9IGcgPiAyNTUgPyAyNTUgOiBnO1xuICAgICAgICAgICAgICAgIGRhdGFbb2Zmc2V0KzJdID0gYiA+IDI1NSA/IDI1NSA6IGI7XG4gICAgICAgICAgICAgICAgZGF0YVtvZmZzZXQrM10gPSBkYXRhW29mZnNldCszXTtcbiAgICAgICAgICAgIH0gd2hpbGUgKC0teCk7XG4gICAgICAgIH0gd2hpbGUgKC0teSk7XG4gICAgfTtcbn0pKCk7XG47KGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBTb2xhcml6ZSBGaWx0ZXJcbiAgICAgKiBQaXhhc3RpYyBMaWIgLSBTb2xhcml6ZSBmaWx0ZXIgLSB2MC4xLjBcbiAgICAgKiBDb3B5cmlnaHQgKGMpIDIwMDggSmFjb2IgU2VpZGVsaW4sIGpzZWlkZWxpbkBuaWhpbG9naWMuZGssIGh0dHA6Ly9ibG9nLm5paGlsb2dpYy5kay9cbiAgICAgKiBMaWNlbnNlOiBbaHR0cDovL3d3dy5waXhhc3RpYy5jb20vbGliL2xpY2Vuc2UudHh0XVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lIFNvbGFyaXplXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRmlsdGVyc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZURhdGFcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG5vZGUuY2FjaGUoKTtcbiAgICAgKiBub2RlLmZpbHRlcnMoW0tpbmV0aWMuRmlsdGVycy5Tb2xhcml6ZV0pO1xuICAgICAqL1xuICAgIEtpbmV0aWMuRmlsdGVycy5Tb2xhcml6ZSA9IGZ1bmN0aW9uIChpbWFnZURhdGEpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBpbWFnZURhdGEuZGF0YSxcbiAgICAgICAgICAgIHcgPSBpbWFnZURhdGEud2lkdGgsXG4gICAgICAgICAgICBoID0gaW1hZ2VEYXRhLmhlaWdodCxcbiAgICAgICAgICAgIHc0ID0gdyo0LFxuICAgICAgICAgICAgeSA9IGg7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgdmFyIG9mZnNldFkgPSAoeS0xKSp3NDtcbiAgICAgICAgICAgIHZhciB4ID0gdztcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0WSArICh4LTEpKjQ7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSBkYXRhW29mZnNldF07XG4gICAgICAgICAgICAgICAgdmFyIGcgPSBkYXRhW29mZnNldCsxXTtcbiAgICAgICAgICAgICAgICB2YXIgYiA9IGRhdGFbb2Zmc2V0KzJdO1xuXG4gICAgICAgICAgICAgICAgaWYgKHIgPiAxMjcpIHtcbiAgICAgICAgICAgICAgICAgICAgciA9IDI1NSAtIHI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChnID4gMTI3KSB7XG4gICAgICAgICAgICAgICAgICAgIGcgPSAyNTUgLSBnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYiA+IDEyNykge1xuICAgICAgICAgICAgICAgICAgICBiID0gMjU1IC0gYjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkYXRhW29mZnNldF0gPSByO1xuICAgICAgICAgICAgICAgIGRhdGFbb2Zmc2V0KzFdID0gZztcbiAgICAgICAgICAgICAgICBkYXRhW29mZnNldCsyXSA9IGI7XG4gICAgICAgICAgICB9IHdoaWxlICgtLXgpO1xuICAgICAgICB9IHdoaWxlICgtLXkpO1xuICAgIH07XG59KSgpO1xuXG5cbjsvKmpzaGludCBuZXdjYXA6ZmFsc2UgKi9cbihmdW5jdGlvbiAoKSB7XG5cbiAgLypcbiAgICogVG9Qb2xhciBGaWx0ZXIuIENvbnZlcnRzIGltYWdlIGRhdGEgdG8gcG9sYXIgY29vcmRpbmF0ZXMuIFBlcmZvcm1zIFxuICAgKiAgdypoKjQgcGl4ZWwgcmVhZHMgYW5kIHcqaCBwaXhlbCB3cml0ZXMuIFRoZSByIGF4aXMgaXMgcGxhY2VkIGFsb25nXG4gICAqICB3aGF0IHdvdWxkIGJlIHRoZSB5IGF4aXMgYW5kIHRoZSB0aGV0YSBheGlzIGFsb25nIHRoZSB4IGF4aXMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAYXV0aG9yIGlwcG82MTVcbiAgICogQG1lbWJlcm9mIEtpbmV0aWMuRmlsdGVyc1xuICAgKiBAcGFyYW0ge0ltYWdlRGF0YX0gc3JjLCB0aGUgc291cmNlIGltYWdlIGRhdGEgKHdoYXQgd2lsbCBiZSB0cmFuc2Zvcm1lZClcbiAgICogQHBhcmFtIHtJbWFnZURhdGF9IGRzdCwgdGhlIGRlc3RpbmF0aW9uIGltYWdlIGRhdGEgKHdoZXJlIGl0IHdpbGwgYmUgc2F2ZWQpXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHQucG9sYXJDZW50ZXJYXSBob3Jpem9udGFsIGxvY2F0aW9uIGZvciB0aGUgY2VudGVyIG9mIHRoZSBjaXJjbGUsXG4gICAqICBkZWZhdWx0IGlzIGluIHRoZSBtaWRkbGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHQucG9sYXJDZW50ZXJZXSB2ZXJ0aWNhbCBsb2NhdGlvbiBmb3IgdGhlIGNlbnRlciBvZiB0aGUgY2lyY2xlLFxuICAgKiAgZGVmYXVsdCBpcyBpbiB0aGUgbWlkZGxlXG4gICAqL1xuXG4gICAgdmFyIFRvUG9sYXIgPSBmdW5jdGlvbihzcmMsZHN0LG9wdCl7XG5cbiAgICAgICAgdmFyIHNyY1BpeGVscyA9IHNyYy5kYXRhLFxuICAgICAgICAgICAgZHN0UGl4ZWxzID0gZHN0LmRhdGEsXG4gICAgICAgICAgICB4U2l6ZSA9IHNyYy53aWR0aCxcbiAgICAgICAgICAgIHlTaXplID0gc3JjLmhlaWdodCxcbiAgICAgICAgICAgIHhNaWQgPSBvcHQucG9sYXJDZW50ZXJYIHx8IHhTaXplLzIsXG4gICAgICAgICAgICB5TWlkID0gb3B0LnBvbGFyQ2VudGVyWSB8fCB5U2l6ZS8yLFxuICAgICAgICAgICAgaSwgeCwgeSwgcj0wLGc9MCxiPTAsYT0wO1xuXG4gICAgICAgIC8vIEZpbmQgdGhlIGxhcmdlc3QgcmFkaXVzXG4gICAgICAgIHZhciByYWQsIHJNYXggPSBNYXRoLnNxcnQoIHhNaWQqeE1pZCArIHlNaWQqeU1pZCApO1xuICAgICAgICB4ID0geFNpemUgLSB4TWlkO1xuICAgICAgICB5ID0geVNpemUgLSB5TWlkO1xuICAgICAgICByYWQgPSBNYXRoLnNxcnQoIHgqeCArIHkqeSApO1xuICAgICAgICByTWF4ID0gKHJhZCA+IHJNYXgpP3JhZDpyTWF4O1xuXG4gICAgICAgIC8vIFdlJ2xsIGJlIHVpc25nIHkgYXMgdGhlIHJhZGl1cywgYW5kIHggYXMgdGhlIGFuZ2xlICh0aGV0YT10KVxuICAgICAgICB2YXIgclNpemUgPSB5U2l6ZSxcbiAgICAgICAgICAgIHRTaXplID0geFNpemUsXG4gICAgICAgICAgICByYWRpdXMsIHRoZXRhO1xuXG4gICAgICAgIC8vIFdlIHdhbnQgdG8gY292ZXIgYWxsIGFuZ2xlcyAoMC0zNjApIGFuZCB3ZSBuZWVkIHRvIGNvbnZlcnQgdG9cbiAgICAgICAgLy8gcmFkaWFucyAoKlBJLzE4MClcbiAgICAgICAgdmFyIGNvbnZlcnNpb24gPSAzNjAvdFNpemUqTWF0aC5QSS8xODAsIHNpbiwgY29zO1xuXG4gICAgICAgIC8vIHZhciB4MSwgeDIsIHgxaSwgeDJpLCB5MSwgeTIsIHkxaSwgeTJpLCBzY2FsZTtcblxuICAgICAgICBmb3IoIHRoZXRhPTA7IHRoZXRhPHRTaXplOyB0aGV0YSs9MSApe1xuICAgICAgICAgICAgc2luID0gTWF0aC5zaW4odGhldGEqY29udmVyc2lvbik7XG4gICAgICAgICAgICBjb3MgPSBNYXRoLmNvcyh0aGV0YSpjb252ZXJzaW9uKTtcbiAgICAgICAgICAgIGZvciggcmFkaXVzPTA7IHJhZGl1czxyU2l6ZTsgcmFkaXVzKz0xICl7XG4gICAgICAgICAgICAgICAgeCA9IE1hdGguZmxvb3IoeE1pZCtyTWF4KnJhZGl1cy9yU2l6ZSpjb3MpO1xuICAgICAgICAgICAgICAgIHkgPSBNYXRoLmZsb29yKHlNaWQrck1heCpyYWRpdXMvclNpemUqc2luKTtcbiAgICAgICAgICAgICAgICBpID0gKHkqeFNpemUgKyB4KSo0O1xuICAgICAgICAgICAgICAgIHIgPSBzcmNQaXhlbHNbaSswXTtcbiAgICAgICAgICAgICAgICBnID0gc3JjUGl4ZWxzW2krMV07XG4gICAgICAgICAgICAgICAgYiA9IHNyY1BpeGVsc1tpKzJdO1xuICAgICAgICAgICAgICAgIGEgPSBzcmNQaXhlbHNbaSszXTtcblxuICAgICAgICAgICAgICAgIC8vIFN0b3JlIGl0XG4gICAgICAgICAgICAgICAgLy9pID0gKHRoZXRhICogeFNpemUgKyByYWRpdXMpICogNDtcbiAgICAgICAgICAgICAgICBpID0gKHRoZXRhICsgcmFkaXVzKnhTaXplKSAqIDQ7XG4gICAgICAgICAgICAgICAgZHN0UGl4ZWxzW2krMF0gPSByO1xuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1tpKzFdID0gZztcbiAgICAgICAgICAgICAgICBkc3RQaXhlbHNbaSsyXSA9IGI7XG4gICAgICAgICAgICAgICAgZHN0UGl4ZWxzW2krM10gPSBhO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBGcm9tUG9sYXIgRmlsdGVyLiBDb252ZXJ0cyBpbWFnZSBkYXRhIGZyb20gcG9sYXIgY29vcmRpbmF0ZXMgYmFjayB0byByZWN0YW5ndWxhci5cbiAgICAgKiAgUGVyZm9ybXMgdypoKjQgcGl4ZWwgcmVhZHMgYW5kIHcqaCBwaXhlbCB3cml0ZXMuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGF1dGhvciBpcHBvNjE1XG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRmlsdGVyc1xuICAgICAqIEBwYXJhbSB7SW1hZ2VEYXRhfSBzcmMsIHRoZSBzb3VyY2UgaW1hZ2UgZGF0YSAod2hhdCB3aWxsIGJlIHRyYW5zZm9ybWVkKVxuICAgICAqIEBwYXJhbSB7SW1hZ2VEYXRhfSBkc3QsIHRoZSBkZXN0aW5hdGlvbiBpbWFnZSBkYXRhICh3aGVyZSBpdCB3aWxsIGJlIHNhdmVkKVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdC5wb2xhckNlbnRlclhdIGhvcml6b250YWwgbG9jYXRpb24gZm9yIHRoZSBjZW50ZXIgb2YgdGhlIGNpcmNsZSxcbiAgICAgKiAgZGVmYXVsdCBpcyBpbiB0aGUgbWlkZGxlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHQucG9sYXJDZW50ZXJZXSB2ZXJ0aWNhbCBsb2NhdGlvbiBmb3IgdGhlIGNlbnRlciBvZiB0aGUgY2lyY2xlLFxuICAgICAqICBkZWZhdWx0IGlzIGluIHRoZSBtaWRkbGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdC5wb2xhclJvdGF0aW9uXSBhbW91bnQgdG8gcm90YXRlIHRoZSBpbWFnZSBjb3VudGVyY2xvY2t3aXMsXG4gICAgICogIDAgaXMgbm8gcm90YXRpb24sIDM2MCBkZWdyZWVzIGlzIGEgZnVsbCByb3RhdGlvblxuICAgICAqL1xuXG4gICAgdmFyIEZyb21Qb2xhciA9IGZ1bmN0aW9uKHNyYyxkc3Qsb3B0KXtcblxuICAgICAgICB2YXIgc3JjUGl4ZWxzID0gc3JjLmRhdGEsXG4gICAgICAgICAgICBkc3RQaXhlbHMgPSBkc3QuZGF0YSxcbiAgICAgICAgICAgIHhTaXplID0gc3JjLndpZHRoLFxuICAgICAgICAgICAgeVNpemUgPSBzcmMuaGVpZ2h0LFxuICAgICAgICAgICAgeE1pZCA9IG9wdC5wb2xhckNlbnRlclggfHwgeFNpemUvMixcbiAgICAgICAgICAgIHlNaWQgPSBvcHQucG9sYXJDZW50ZXJZIHx8IHlTaXplLzIsXG4gICAgICAgICAgICBpLCB4LCB5LCBkeCwgZHksIHI9MCxnPTAsYj0wLGE9MDtcblxuXG4gICAgICAgIC8vIEZpbmQgdGhlIGxhcmdlc3QgcmFkaXVzXG4gICAgICAgIHZhciByYWQsIHJNYXggPSBNYXRoLnNxcnQoIHhNaWQqeE1pZCArIHlNaWQqeU1pZCApO1xuICAgICAgICB4ID0geFNpemUgLSB4TWlkO1xuICAgICAgICB5ID0geVNpemUgLSB5TWlkO1xuICAgICAgICByYWQgPSBNYXRoLnNxcnQoIHgqeCArIHkqeSApO1xuICAgICAgICByTWF4ID0gKHJhZCA+IHJNYXgpP3JhZDpyTWF4O1xuXG4gICAgICAgIC8vIFdlJ2xsIGJlIHVpc25nIHggYXMgdGhlIHJhZGl1cywgYW5kIHkgYXMgdGhlIGFuZ2xlICh0aGV0YT10KVxuICAgICAgICB2YXIgclNpemUgPSB5U2l6ZSxcbiAgICAgICAgdFNpemUgPSB4U2l6ZSxcbiAgICAgICAgcmFkaXVzLCB0aGV0YSxcbiAgICAgICAgcGhhc2VTaGlmdCA9IG9wdC5wb2xhclJvdGF0aW9uIHx8IDA7XG5cbiAgICAgICAgLy8gV2UgbmVlZCB0byBjb252ZXJ0IHRvIGRlZ3JlZXMgYW5kIHdlIG5lZWQgdG8gbWFrZSBzdXJlXG4gICAgICAgIC8vIGl0J3MgYmV0d2VlbiAoMC0zNjApXG4gICAgICAgIC8vIHZhciBjb252ZXJzaW9uID0gdFNpemUvMzYwKjE4MC9NYXRoLlBJO1xuICAgICAgICAvL3ZhciBjb252ZXJzaW9uID0gdFNpemUvMzYwKjE4MC9NYXRoLlBJO1xuXG4gICAgICAgIHZhciB4MSwgeTE7XG5cbiAgICAgICAgZm9yKCB4PTA7IHg8eFNpemU7IHgrPTEgKXtcbiAgICAgICAgICAgIGZvciggeT0wOyB5PHlTaXplOyB5Kz0xICl7XG4gICAgICAgICAgICAgICAgZHggPSB4IC0geE1pZDtcbiAgICAgICAgICAgICAgICBkeSA9IHkgLSB5TWlkO1xuICAgICAgICAgICAgICAgIHJhZGl1cyA9IE1hdGguc3FydChkeCpkeCArIGR5KmR5KSpyU2l6ZS9yTWF4O1xuICAgICAgICAgICAgICAgIHRoZXRhID0gKE1hdGguYXRhbjIoZHksZHgpKjE4MC9NYXRoLlBJICsgMzYwICsgcGhhc2VTaGlmdCklMzYwO1xuICAgICAgICAgICAgICAgIHRoZXRhID0gdGhldGEqdFNpemUvMzYwO1xuICAgICAgICAgICAgICAgIHgxID0gTWF0aC5mbG9vcih0aGV0YSk7XG4gICAgICAgICAgICAgICAgeTEgPSBNYXRoLmZsb29yKHJhZGl1cyk7XG4gICAgICAgICAgICAgICAgaSA9ICh5MSp4U2l6ZSArIHgxKSo0O1xuICAgICAgICAgICAgICAgIHIgPSBzcmNQaXhlbHNbaSswXTtcbiAgICAgICAgICAgICAgICBnID0gc3JjUGl4ZWxzW2krMV07XG4gICAgICAgICAgICAgICAgYiA9IHNyY1BpeGVsc1tpKzJdO1xuICAgICAgICAgICAgICAgIGEgPSBzcmNQaXhlbHNbaSszXTtcblxuICAgICAgICAgICAgICAgIC8vIFN0b3JlIGl0XG4gICAgICAgICAgICAgICAgaSA9ICh5KnhTaXplICsgeCkqNDtcbiAgICAgICAgICAgICAgICBkc3RQaXhlbHNbaSswXSA9IHI7XG4gICAgICAgICAgICAgICAgZHN0UGl4ZWxzW2krMV0gPSBnO1xuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1tpKzJdID0gYjtcbiAgICAgICAgICAgICAgICBkc3RQaXhlbHNbaSszXSA9IGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICAvL0tpbmV0aWMuRmlsdGVycy5Ub1BvbGFyID0gS2luZXRpYy5VdGlsLl9GaWx0ZXJXcmFwRG91YmxlQnVmZmVyKFRvUG9sYXIpO1xuICAgIC8vS2luZXRpYy5GaWx0ZXJzLkZyb21Qb2xhciA9IEtpbmV0aWMuVXRpbC5fRmlsdGVyV3JhcERvdWJsZUJ1ZmZlcihGcm9tUG9sYXIpO1xuXG4gICAgLy8gY3JlYXRlIGEgdGVtcG9yYXJ5IGNhbnZhcyBmb3Igd29ya2luZyAtIHNoYXJlZCBiZXR3ZWVuIG11bHRpcGxlIGNhbGxzXG4gICAgdmFyIHRlbXBDYW52YXMgPSBLaW5ldGljLlV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xuXG4gICAgLypcbiAgICAgKiBLYWxlaWRvc2NvcGUgRmlsdGVyLiBcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAbmFtZSBLYWxlaWRvc2NvcGVcbiAgICAgKiBAYXV0aG9yIGlwcG82MTVcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5GaWx0ZXJzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBub2RlLmNhY2hlKCk7XG4gICAgICogbm9kZS5maWx0ZXJzKFtLaW5ldGljLkZpbHRlcnMuS2FsZWlkb3Njb3BlXSk7XG4gICAgICogbm9kZS5rYWxlaWRvc2NvcGVQb3dlcigzKTtcbiAgICAgKiBub2RlLmthbGVpZG9zY29wZUFuZ2xlKDQ1KTtcbiAgICAgKi9cbiAgICBLaW5ldGljLkZpbHRlcnMuS2FsZWlkb3Njb3BlID0gZnVuY3Rpb24oaW1hZ2VEYXRhKXtcbiAgICAgICAgdmFyIHhTaXplID0gaW1hZ2VEYXRhLndpZHRoLFxuICAgICAgICAgICAgeVNpemUgPSBpbWFnZURhdGEuaGVpZ2h0O1xuXG4gICAgICAgIHZhciB4LHkseG9mZixpLCByLGcsYixhLCBzcmNQb3MsIGRzdFBvcztcbiAgICAgICAgdmFyIHBvd2VyID0gTWF0aC5yb3VuZCggdGhpcy5rYWxlaWRvc2NvcGVQb3dlcigpICk7XG4gICAgICAgIHZhciBhbmdsZSA9IE1hdGgucm91bmQoIHRoaXMua2FsZWlkb3Njb3BlQW5nbGUoKSApO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gTWF0aC5mbG9vcih4U2l6ZSooYW5nbGUlMzYwKS8zNjApO1xuXG4gICAgICAgIGlmKCBwb3dlciA8IDEgKXtyZXR1cm47fVxuXG4gICAgICAgIC8vIFdvcmsgd2l0aCBvdXIgc2hhcmVkIGJ1ZmZlciBjYW52YXNcbiAgICAgICAgdGVtcENhbnZhcy53aWR0aCA9IHhTaXplO1xuICAgICAgICB0ZW1wQ2FudmFzLmhlaWdodCA9IHlTaXplO1xuICAgICAgICB2YXIgc2NyYXRjaERhdGEgPSB0ZW1wQ2FudmFzLmdldENvbnRleHQoJzJkJykuZ2V0SW1hZ2VEYXRhKDAsMCx4U2l6ZSx5U2l6ZSk7XG5cbiAgICAgICAgLy8gQ29udmVydCB0aGhlIG9yaWdpbmFsIHRvIHBvbGFyIGNvb3JkaW5hdGVzXG4gICAgICAgIFRvUG9sYXIoIGltYWdlRGF0YSwgc2NyYXRjaERhdGEsIHtcbiAgICAgICAgICAgIHBvbGFyQ2VudGVyWDp4U2l6ZS8yLFxuICAgICAgICAgICAgcG9sYXJDZW50ZXJZOnlTaXplLzJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIGhvdyBiaWcgZWFjaCBzZWN0aW9uIHdpbGwgYmUsIGlmIGl0J3MgdG9vIHNtYWxsIFxuICAgICAgICAvLyBtYWtlIGl0IGJpZ2dlclxuICAgICAgICB2YXIgbWluU2VjdGlvblNpemUgPSB4U2l6ZSAvIE1hdGgucG93KDIscG93ZXIpO1xuICAgICAgICB3aGlsZSggbWluU2VjdGlvblNpemUgPD0gOCl7XG4gICAgICAgICAgICBtaW5TZWN0aW9uU2l6ZSA9IG1pblNlY3Rpb25TaXplKjI7XG4gICAgICAgICAgICBwb3dlciAtPSAxO1xuICAgICAgICB9XG4gICAgICAgIG1pblNlY3Rpb25TaXplID0gTWF0aC5jZWlsKG1pblNlY3Rpb25TaXplKTtcbiAgICAgICAgdmFyIHNlY3Rpb25TaXplID0gbWluU2VjdGlvblNpemU7XG5cbiAgICAgICAgLy8gQ29weSB0aGUgb2Zmc2V0IHJlZ2lvbiB0byAwXG4gICAgICAgIC8vIERlcGVuZGluZyBvbiB0aGUgc2l6ZSBvZiBmaWx0ZXIgYW5kIGxvY2F0aW9uIG9mIHRoZSBvZmZzZXQgd2UgbWF5IG5lZWRcbiAgICAgICAgLy8gdG8gY29weSB0aGUgc2VjdGlvbiBiYWNrd2FyZHMgdG8gcHJldmVudCBpdCBmcm9tIHJld3JpdGluZyBpdHNlbGZcbiAgICAgICAgdmFyIHhTdGFydCA9IDAsXG4gICAgICAgICAgeEVuZCA9IHNlY3Rpb25TaXplLFxuICAgICAgICAgIHhEZWx0YSA9IDE7XG4gICAgICAgIGlmKCBvZmZzZXQrbWluU2VjdGlvblNpemUgPiB4U2l6ZSApe1xuICAgICAgICAgICAgeFN0YXJ0ID0gc2VjdGlvblNpemU7XG4gICAgICAgICAgICB4RW5kID0gMDtcbiAgICAgICAgICAgIHhEZWx0YSA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIGZvciggeT0wOyB5PHlTaXplOyB5Kz0xICl7XG4gICAgICAgICAgICBmb3IoIHg9eFN0YXJ0OyB4ICE9PSB4RW5kOyB4Kz14RGVsdGEgKXtcbiAgICAgICAgICAgICAgICB4b2ZmID0gTWF0aC5yb3VuZCh4K29mZnNldCkleFNpemU7XG4gICAgICAgICAgICAgICAgc3JjUG9zID0gKHhTaXplKnkreG9mZikqNDtcbiAgICAgICAgICAgICAgICByID0gc2NyYXRjaERhdGEuZGF0YVtzcmNQb3MrMF07XG4gICAgICAgICAgICAgICAgZyA9IHNjcmF0Y2hEYXRhLmRhdGFbc3JjUG9zKzFdO1xuICAgICAgICAgICAgICAgIGIgPSBzY3JhdGNoRGF0YS5kYXRhW3NyY1BvcysyXTtcbiAgICAgICAgICAgICAgICBhID0gc2NyYXRjaERhdGEuZGF0YVtzcmNQb3MrM107XG4gICAgICAgICAgICAgICAgZHN0UG9zID0gKHhTaXplKnkreCkqNDtcbiAgICAgICAgICAgICAgICBzY3JhdGNoRGF0YS5kYXRhW2RzdFBvcyswXSA9IHI7XG4gICAgICAgICAgICAgICAgc2NyYXRjaERhdGEuZGF0YVtkc3RQb3MrMV0gPSBnO1xuICAgICAgICAgICAgICAgIHNjcmF0Y2hEYXRhLmRhdGFbZHN0UG9zKzJdID0gYjtcbiAgICAgICAgICAgICAgICBzY3JhdGNoRGF0YS5kYXRhW2RzdFBvcyszXSA9IGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQZXJmb3JtIHRoZSBhY3R1YWwgZWZmZWN0XG4gICAgICAgIGZvciggeT0wOyB5PHlTaXplOyB5Kz0xICl7XG4gICAgICAgICAgICBzZWN0aW9uU2l6ZSA9IE1hdGguZmxvb3IoIG1pblNlY3Rpb25TaXplICk7XG4gICAgICAgICAgICBmb3IoIGk9MDsgaTxwb3dlcjsgaSs9MSApe1xuICAgICAgICAgICAgICAgIGZvciggeD0wOyB4PHNlY3Rpb25TaXplKzE7IHgrPTEgKXtcbiAgICAgICAgICAgICAgICAgICAgc3JjUG9zID0gKHhTaXplKnkreCkqNDtcbiAgICAgICAgICAgICAgICAgICAgciA9IHNjcmF0Y2hEYXRhLmRhdGFbc3JjUG9zKzBdO1xuICAgICAgICAgICAgICAgICAgICBnID0gc2NyYXRjaERhdGEuZGF0YVtzcmNQb3MrMV07XG4gICAgICAgICAgICAgICAgICAgIGIgPSBzY3JhdGNoRGF0YS5kYXRhW3NyY1BvcysyXTtcbiAgICAgICAgICAgICAgICAgICAgYSA9IHNjcmF0Y2hEYXRhLmRhdGFbc3JjUG9zKzNdO1xuICAgICAgICAgICAgICAgICAgICBkc3RQb3MgPSAoeFNpemUqeStzZWN0aW9uU2l6ZSoyLXgtMSkqNDtcbiAgICAgICAgICAgICAgICAgICAgc2NyYXRjaERhdGEuZGF0YVtkc3RQb3MrMF0gPSByO1xuICAgICAgICAgICAgICAgICAgICBzY3JhdGNoRGF0YS5kYXRhW2RzdFBvcysxXSA9IGc7XG4gICAgICAgICAgICAgICAgICAgIHNjcmF0Y2hEYXRhLmRhdGFbZHN0UG9zKzJdID0gYjtcbiAgICAgICAgICAgICAgICAgICAgc2NyYXRjaERhdGEuZGF0YVtkc3RQb3MrM10gPSBhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWN0aW9uU2l6ZSAqPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29udmVydCBiYWNrIGZyb20gcG9sYXIgY29vcmRpbmF0ZXNcbiAgICAgICAgRnJvbVBvbGFyKHNjcmF0Y2hEYXRhLGltYWdlRGF0YSx7cG9sYXJSb3RhdGlvbjowfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICogZ2V0L3NldCBrYWxlaWRvc2NvcGUgcG93ZXIuIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuS2FsZWlkb3Njb3BlfSBmaWx0ZXIuXG4gICAgKiBAbmFtZSBrYWxlaWRvc2NvcGVQb3dlclxuICAgICogQG1ldGhvZFxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAqIEBwYXJhbSB7SW50ZWdlcn0gcG93ZXIgb2Yga2FsZWlkb3Njb3BlXG4gICAgKiBAcmV0dXJucyB7SW50ZWdlcn1cbiAgICAqL1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAna2FsZWlkb3Njb3BlUG93ZXInLCAyLCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xuXG4gICAgLyoqXG4gICAgKiBnZXQvc2V0IGthbGVpZG9zY29wZSBhbmdsZS4gVXNlIHdpdGgge0BsaW5rIEtpbmV0aWMuRmlsdGVycy5LYWxlaWRvc2NvcGV9IGZpbHRlci5cbiAgICAqIEBuYW1lIGthbGVpZG9zY29wZUFuZ2xlXG4gICAgKiBAbWV0aG9kXG4gICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICogQHBhcmFtIHtJbnRlZ2VyfSBkZWdyZWVzXG4gICAgKiBAcmV0dXJucyB7SW50ZWdlcn1cbiAgICAqL1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAna2FsZWlkb3Njb3BlQW5nbGUnLCAwLCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xuXG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICB2YXIgQkFUQ0hfRFJBV19TVE9QX1RJTUVfRElGRiA9IDUwMDtcblxuICAgIHZhciBub3cgPShmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKEtpbmV0aWMucm9vdC5wZXJmb3JtYW5jZSAmJiBLaW5ldGljLnJvb3QucGVyZm9ybWFuY2Uubm93KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEtpbmV0aWMucm9vdC5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0pKCk7XG5cbiAgICB2YXIgUkFGID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gS2luZXRpYy5yb290LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgICAgICAgfHwgS2luZXRpYy5yb290LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgICAgICAgfHwgS2luZXRpYy5yb290Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgICAgICAgfHwgS2luZXRpYy5yb290Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICAgICAgICAgIHx8IEtpbmV0aWMucm9vdC5tc1JlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgICAgICAgfHwgRlJBRjtcbiAgICB9KSgpO1xuXG4gICAgZnVuY3Rpb24gRlJBRihjYWxsYmFjaykge1xuICAgICAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlcXVlc3RBbmltRnJhbWUoKSB7XG4gICAgICAgIHJldHVybiBSQUYuYXBwbHkoS2luZXRpYy5yb290LCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBBbmltYXRpb24gY29uc3RydWN0b3IuICBBIHN0YWdlIGlzIHVzZWQgdG8gY29udGFpbiBtdWx0aXBsZSBsYXllcnMgYW5kIGhhbmRsZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBmdW5jdGlvbiBleGVjdXRlZCBvbiBlYWNoIGFuaW1hdGlvbiBmcmFtZS4gIFRoZSBmdW5jdGlvbiBpcyBwYXNzZWQgYSBmcmFtZSBvYmplY3QsIHdoaWNoIGNvbnRhaW5zXG4gICAgICogIHRpbWVEaWZmLCBsYXN0VGltZSwgdGltZSwgYW5kIGZyYW1lUmF0ZSBwcm9wZXJ0aWVzLiAgVGhlIHRpbWVEaWZmIHByb3BlcnR5IGlzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBwYXNzZWRcbiAgICAgKiAgc2luY2UgdGhlIGxhc3QgYW5pbWF0aW9uIGZyYW1lLiAgVGhlIGxhc3RUaW1lIHByb3BlcnR5IGlzIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHRoYXQgZWxhcHNlZCBmcm9tIHRoZSBtb21lbnQgdGhlIGFuaW1hdGlvbiBzdGFydGVkXG4gICAgICogIHRvIHRoZSBsYXN0IGFuaW1hdGlvbiBmcmFtZS4gIFRoZSB0aW1lIHByb3BlcnR5IGlzIHRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyB0aGF0IGVsbGFwc2VkIGZyb20gdGhlIG1vbWVudCB0aGUgYW5pbWF0aW9uIHN0YXJ0ZWRcbiAgICAgKiAgdG8gdGhlIGN1cnJlbnQgYW5pbWF0aW9uIGZyYW1lLiAgVGhlIGZyYW1lUmF0ZSBwcm9wZXJ0eSBpcyB0aGUgY3VycmVudCBmcmFtZSByYXRlIGluIGZyYW1lcyAvIHNlY29uZC4gUmV0dXJuIGZhbHNlIGZyb20gZnVuY3Rpb24sXG4gICAgICogIGlmIHlvdSBkb24ndCBuZWVkIHRvIHJlZHJhdyBsYXllci9sYXllcnMgb24gc29tZSBmcmFtZXMuXG4gICAgICogQHBhcmFtIHtLaW5ldGljLkxheWVyfEFycmF5fSBbbGF5ZXJzXSBsYXllcihzKSB0byBiZSByZWRyYXduIG9uIGVhY2ggYW5pbWF0aW9uIGZyYW1lLiBDYW4gYmUgYSBsYXllciwgYW4gYXJyYXkgb2YgbGF5ZXJzLCBvciBudWxsLlxuICAgICAqICBOb3Qgc3BlY2lmeWluZyBhIG5vZGUgd2lsbCByZXN1bHQgaW4gbm8gcmVkcmF3LlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gbW92ZSBhIG5vZGUgdG8gdGhlIHJpZ2h0IGF0IDUwIHBpeGVscyAvIHNlY29uZFxuICAgICAqIHZhciB2ZWxvY2l0eSA9IDUwO1xuICAgICAqXG4gICAgICogdmFyIGFuaW0gPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oZnJhbWUpIHtcbiAgICAgKiAgIHZhciBkaXN0ID0gdmVsb2NpdHkgKiAoZnJhbWUudGltZURpZmYgLyAxMDAwKTtcbiAgICAgKiAgIG5vZGUubW92ZShkaXN0LCAwKTtcbiAgICAgKiB9LCBsYXllcik7XG4gICAgICpcbiAgICAgKiBhbmltLnN0YXJ0KCk7XG4gICAgICovXG4gICAgS2luZXRpYy5BbmltYXRpb24gPSBmdW5jdGlvbihmdW5jLCBsYXllcnMpIHtcbiAgICAgICAgdmFyIEFuaW0gPSBLaW5ldGljLkFuaW1hdGlvbjtcbiAgICAgICAgdGhpcy5mdW5jID0gZnVuYztcbiAgICAgICAgdGhpcy5zZXRMYXllcnMobGF5ZXJzKTtcbiAgICAgICAgdGhpcy5pZCA9IEFuaW0uYW5pbUlkQ291bnRlcisrO1xuICAgICAgICB0aGlzLmZyYW1lID0ge1xuICAgICAgICAgICAgdGltZTogMCxcbiAgICAgICAgICAgIHRpbWVEaWZmOiAwLFxuICAgICAgICAgICAgbGFzdFRpbWU6IG5vdygpXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKlxuICAgICAqIEFuaW1hdGlvbiBtZXRob2RzXG4gICAgICovXG4gICAgS2luZXRpYy5BbmltYXRpb24ucHJvdG90eXBlID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogc2V0IGxheWVycyB0byBiZSByZWRyYXduIG9uIGVhY2ggYW5pbWF0aW9uIGZyYW1lXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQW5pbWF0aW9uLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge0tpbmV0aWMuTGF5ZXJ8QXJyYXl9IFtsYXllcnNdIGxheWVyKHMpIHRvIGJlIHJlZHJhd24uJm5ic3A7IENhbiBiZSBhIGxheWVyLCBhbiBhcnJheSBvZiBsYXllcnMsIG9yIG51bGwuICBOb3Qgc3BlY2lmeWluZyBhIG5vZGUgd2lsbCByZXN1bHQgaW4gbm8gcmVkcmF3LlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0TGF5ZXJzOiBmdW5jdGlvbihsYXllcnMpIHtcbiAgICAgICAgICAgIHZhciBsYXlzID0gW107XG4gICAgICAgICAgICAvLyBpZiBwYXNzaW5nIGluIG5vIGxheWVyc1xuICAgICAgICAgICAgaWYgKCFsYXllcnMpIHtcbiAgICAgICAgICAgICAgICBsYXlzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBwYXNzaW5nIGluIGFuIGFycmF5IG9mIExheWVyc1xuICAgICAgICAgICAgLy8gTk9URTogbGF5ZXJzIGNvdWxkIGJlIGFuIGFycmF5IG9yIEtpbmV0aWMuQ29sbGVjdGlvbi4gIGZvciBzaW1wbGljaXR5LCBJJ20ganVzdCBpbnNwZWN0aW5nXG4gICAgICAgICAgICAvLyB0aGUgbGVuZ3RoIHByb3BlcnR5IHRvIGNoZWNrIGZvciBib3RoIGNhc2VzXG4gICAgICAgICAgICBlbHNlIGlmIChsYXllcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGxheXMgPSBsYXllcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBwYXNzaW5nIGluIGEgTGF5ZXJcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxheXMgPSBbbGF5ZXJzXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5sYXllcnMgPSBsYXlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IGxheWVyc1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkFuaW1hdGlvbi5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIGdldExheWVyczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sYXllcnM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhZGQgbGF5ZXIuICBSZXR1cm5zIHRydWUgaWYgdGhlIGxheWVyIHdhcyBhZGRlZCwgYW5kIGZhbHNlIGlmIGl0IHdhcyBub3RcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5BbmltYXRpb24ucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7S2luZXRpYy5MYXllcn0gbGF5ZXJcbiAgICAgICAgICovXG4gICAgICAgIGFkZExheWVyOiBmdW5jdGlvbihsYXllcikge1xuICAgICAgICAgICAgdmFyIGxheWVycyA9IHRoaXMubGF5ZXJzLFxuICAgICAgICAgICAgICAgIGxlbiwgbjtcblxuICAgICAgICAgICAgaWYgKGxheWVycykge1xuICAgICAgICAgICAgICAgIGxlbiA9IGxheWVycy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAvLyBkb24ndCBhZGQgdGhlIGxheWVyIGlmIGl0IGFscmVhZHkgZXhpc3RzXG4gICAgICAgICAgICAgICAgZm9yIChuID0gMDsgbiA8IGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllcnNbbl0uX2lkID09PSBsYXllci5faWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubGF5ZXJzID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMubGF5ZXJzLnB1c2gobGF5ZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZXRlcm1pbmUgaWYgYW5pbWF0aW9uIGlzIHJ1bm5pbmcgb3Igbm90LiAgcmV0dXJucyB0cnVlIG9yIGZhbHNlXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQW5pbWF0aW9uLnByb3RvdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgaXNSdW5uaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gS2luZXRpYy5BbmltYXRpb24sXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9ucyA9IGEuYW5pbWF0aW9ucyxcbiAgICAgICAgICAgICAgICBsZW4gPSBhbmltYXRpb25zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBuO1xuXG4gICAgICAgICAgICBmb3IobiA9IDA7IG4gPCBsZW47IG4rKykge1xuICAgICAgICAgICAgICAgIGlmKGFuaW1hdGlvbnNbbl0uaWQgPT09IHRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogc3RhcnQgYW5pbWF0aW9uXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQW5pbWF0aW9uLnByb3RvdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIEFuaW0gPSBLaW5ldGljLkFuaW1hdGlvbjtcbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgICAgdGhpcy5mcmFtZS50aW1lRGlmZiA9IDA7XG4gICAgICAgICAgICB0aGlzLmZyYW1lLmxhc3RUaW1lID0gbm93KCk7XG4gICAgICAgICAgICBBbmltLl9hZGRBbmltYXRpb24odGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzdG9wIGFuaW1hdGlvblxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkFuaW1hdGlvbi5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgS2luZXRpYy5BbmltYXRpb24uX3JlbW92ZUFuaW1hdGlvbih0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3VwZGF0ZUZyYW1lT2JqZWN0OiBmdW5jdGlvbih0aW1lKSB7XG4gICAgICAgICAgICB0aGlzLmZyYW1lLnRpbWVEaWZmID0gdGltZSAtIHRoaXMuZnJhbWUubGFzdFRpbWU7XG4gICAgICAgICAgICB0aGlzLmZyYW1lLmxhc3RUaW1lID0gdGltZTtcbiAgICAgICAgICAgIHRoaXMuZnJhbWUudGltZSArPSB0aGlzLmZyYW1lLnRpbWVEaWZmO1xuICAgICAgICAgICAgdGhpcy5mcmFtZS5mcmFtZVJhdGUgPSAxMDAwIC8gdGhpcy5mcmFtZS50aW1lRGlmZjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgS2luZXRpYy5BbmltYXRpb24uYW5pbWF0aW9ucyA9IFtdO1xuICAgIEtpbmV0aWMuQW5pbWF0aW9uLmFuaW1JZENvdW50ZXIgPSAwO1xuICAgIEtpbmV0aWMuQW5pbWF0aW9uLmFuaW1SdW5uaW5nID0gZmFsc2U7XG5cbiAgICBLaW5ldGljLkFuaW1hdGlvbi5fYWRkQW5pbWF0aW9uID0gZnVuY3Rpb24oYW5pbSkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMucHVzaChhbmltKTtcbiAgICAgICAgdGhpcy5faGFuZGxlQW5pbWF0aW9uKCk7XG4gICAgfTtcbiAgICBLaW5ldGljLkFuaW1hdGlvbi5fcmVtb3ZlQW5pbWF0aW9uID0gZnVuY3Rpb24oYW5pbSkge1xuICAgICAgICB2YXIgaWQgPSBhbmltLmlkLFxuICAgICAgICAgICAgYW5pbWF0aW9ucyA9IHRoaXMuYW5pbWF0aW9ucyxcbiAgICAgICAgICAgIGxlbiA9IGFuaW1hdGlvbnMubGVuZ3RoLFxuICAgICAgICAgICAgbjtcblxuICAgICAgICBmb3IobiA9IDA7IG4gPCBsZW47IG4rKykge1xuICAgICAgICAgICAgaWYoYW5pbWF0aW9uc1tuXS5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnMuc3BsaWNlKG4sIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIEtpbmV0aWMuQW5pbWF0aW9uLl9ydW5GcmFtZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGxheWVySGFzaCA9IHt9LFxuICAgICAgICAgICAgYW5pbWF0aW9ucyA9IHRoaXMuYW5pbWF0aW9ucyxcbiAgICAgICAgICAgIGFuaW0sIGxheWVycywgZnVuYywgbiwgaSwgbGF5ZXJzTGVuLCBsYXllciwga2V5LCBuZWVkUmVkcmF3O1xuICAgICAgICAvKlxuICAgICAgICAgKiBsb29wIHRocm91Z2ggYWxsIGFuaW1hdGlvbnMgYW5kIGV4ZWN1dGUgYW5pbWF0aW9uXG4gICAgICAgICAqICBmdW5jdGlvbi4gIGlmIHRoZSBhbmltYXRpb24gb2JqZWN0IGhhcyBzcGVjaWZpZWQgbm9kZSxcbiAgICAgICAgICogIHdlIGNhbiBhZGQgdGhlIG5vZGUgdG8gdGhlIG5vZGVzIGhhc2ggdG8gZWxpbWluYXRlXG4gICAgICAgICAqICBkcmF3aW5nIHRoZSBzYW1lIG5vZGUgbXVsdGlwbGUgdGltZXMuICBUaGUgbm9kZSBwcm9wZXJ0eVxuICAgICAgICAgKiAgY2FuIGJlIHRoZSBzdGFnZSBpdHNlbGYgb3IgYSBsYXllclxuICAgICAgICAgKi9cbiAgICAgICAgLypcbiAgICAgICAgICogV0FSTklORzogZG9uJ3QgY2FjaGUgYW5pbWF0aW9ucy5sZW5ndGggYmVjYXVzZSBpdCBjb3VsZCBjaGFuZ2Ugd2hpbGVcbiAgICAgICAgICogdGhlIGZvciBsb29wIGlzIHJ1bm5pbmcsIGNhdXNpbmcgYSBKUyBlcnJvclxuICAgICAgICAgKi9cblxuICAgICAgICBmb3IobiA9IDA7IG4gPCBhbmltYXRpb25zLmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICBhbmltID0gYW5pbWF0aW9uc1tuXTtcbiAgICAgICAgICAgIGxheWVycyA9IGFuaW0ubGF5ZXJzO1xuICAgICAgICAgICAgZnVuYyA9IGFuaW0uZnVuYztcblxuXG4gICAgICAgICAgICBhbmltLl91cGRhdGVGcmFtZU9iamVjdChub3coKSk7XG4gICAgICAgICAgICBsYXllcnNMZW4gPSBsYXllcnMubGVuZ3RoO1xuXG4gICAgICAgICAgICAvLyBpZiBhbmltYXRpb24gb2JqZWN0IGhhcyBhIGZ1bmN0aW9uLCBleGVjdXRlIGl0XG4gICAgICAgICAgICBpZiAoZnVuYykge1xuICAgICAgICAgICAgICAgIC8vIGFsbG93IGFuaW0gYnlwYXNzaW5nIGRyYXdpbmdcbiAgICAgICAgICAgICAgICBuZWVkUmVkcmF3ID0gKGZ1bmMuY2FsbChhbmltLCBhbmltLmZyYW1lKSAhPT0gZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZWVkUmVkcmF3ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZWVkUmVkcmF3KSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxheWVyc0xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyID0gbGF5ZXJzW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5faWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJIYXNoW2xheWVyLl9pZF0gPSBsYXllcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoa2V5IGluIGxheWVySGFzaCkge1xuICAgICAgICAgICAgbGF5ZXJIYXNoW2tleV0uZHJhdygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBLaW5ldGljLkFuaW1hdGlvbi5fYW5pbWF0aW9uTG9vcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgQW5pbSA9IEtpbmV0aWMuQW5pbWF0aW9uO1xuXG4gICAgICAgIGlmKEFuaW0uYW5pbWF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltRnJhbWUoQW5pbS5fYW5pbWF0aW9uTG9vcCk7XG4gICAgICAgICAgICBBbmltLl9ydW5GcmFtZXMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIEFuaW0uYW5pbVJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgS2luZXRpYy5BbmltYXRpb24uX2hhbmRsZUFuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIGlmKCF0aGlzLmFuaW1SdW5uaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1SdW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoYXQuX2FuaW1hdGlvbkxvb3AoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgbW92ZVRvID0gS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5tb3ZlVG87XG4gICAgS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5tb3ZlVG8gPSBmdW5jdGlvbihjb250YWluZXIpIHtcbiAgICAgICAgbW92ZVRvLmNhbGwodGhpcywgY29udGFpbmVyKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogYmF0Y2ggZHJhd1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5CYXNlLnByb3RvdHlwZVxuICAgICAqL1xuICAgIEtpbmV0aWMuQmFzZUxheWVyLnByb3RvdHlwZS5iYXRjaERyYXcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgQW5pbSA9IEtpbmV0aWMuQW5pbWF0aW9uO1xuXG4gICAgICAgIGlmICghdGhpcy5iYXRjaEFuaW0pIHtcbiAgICAgICAgICAgIHRoaXMuYmF0Y2hBbmltID0gbmV3IEFuaW0oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoYXQubGFzdEJhdGNoRHJhd1RpbWUgJiYgbm93KCkgLSB0aGF0Lmxhc3RCYXRjaERyYXdUaW1lID4gQkFUQ0hfRFJBV19TVE9QX1RJTUVfRElGRikge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmJhdGNoQW5pbS5zdG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxhc3RCYXRjaERyYXdUaW1lID0gbm93KCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmJhdGNoQW5pbS5pc1J1bm5pbmcoKSkge1xuICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICB0aGlzLmJhdGNoQW5pbS5zdGFydCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIGJhdGNoIGRyYXdcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3RhZ2UucHJvdG90eXBlXG4gICAgICovXG4gICAgS2luZXRpYy5TdGFnZS5wcm90b3R5cGUuYmF0Y2hEcmF3ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZ2V0Q2hpbGRyZW4oKS5lYWNoKGZ1bmN0aW9uKGxheWVyKSB7XG4gICAgICAgICAgICBsYXllci5iYXRjaERyYXcoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0pKHRoaXMpO1xuOyhmdW5jdGlvbigpIHtcbiAgICB2YXIgYmxhY2tsaXN0ID0ge1xuICAgICAgICBub2RlOiAxLFxuICAgICAgICBkdXJhdGlvbjogMSxcbiAgICAgICAgZWFzaW5nOiAxLFxuICAgICAgICBvbkZpbmlzaDogMSxcbiAgICAgICAgeW95bzogMVxuICAgIH0sXG5cbiAgICBQQVVTRUQgPSAxLFxuICAgIFBMQVlJTkcgPSAyLFxuICAgIFJFVkVSU0lORyA9IDMsXG5cbiAgICBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqXG4gICAgICogVHdlZW4gY29uc3RydWN0b3IuICBUd2VlbnMgZW5hYmxlIHlvdSB0byBhbmltYXRlIGEgbm9kZSBiZXR3ZWVuIHRoZSBjdXJyZW50IHN0YXRlIGFuZCBhIG5ldyBzdGF0ZS5cbiAgICAgKiAgWW91IGNhbiBwbGF5LCBwYXVzZSwgcmV2ZXJzZSwgc2VlaywgcmVzZXQsIGFuZCBmaW5pc2ggdHdlZW5zLiAgQnkgZGVmYXVsdCwgdHdlZW5zIGFyZSBhbmltYXRlZCB1c2luZ1xuICAgICAqICBhIGxpbmVhciBlYXNpbmcuICBGb3IgbW9yZSB0d2VlbmluZyBvcHRpb25zLCBjaGVjayBvdXQge0BsaW5rIEtpbmV0aWMuRWFzaW5nc31cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gaW5zdGFudGlhdGUgbmV3IHR3ZWVuIHdoaWNoIGZ1bGx5IHJvdGF0ZXMgYSBub2RlIGluIDEgc2Vjb25kXG4gICAgICogdmFyIHR3ZWVuID0gbmV3IEtpbmV0aWMuVHdlZW4oe1xuICAgICAqICAgbm9kZTogbm9kZSxcbiAgICAgKiAgIHJvdGF0aW9uRGVnOiAzNjAsXG4gICAgICogICBkdXJhdGlvbjogMSxcbiAgICAgKiAgIGVhc2luZzogS2luZXRpYy5FYXNpbmdzLkVhc2VJbk91dFxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogLy8gcGxheSB0d2VlblxuICAgICAqIHR3ZWVuLnBsYXkoKTtcbiAgICAgKlxuICAgICAqIC8vIHBhdXNlIHR3ZWVuXG4gICAgICogdHdlZW4ucGF1c2UoKTtcbiAgICAgKi9cbiAgICBLaW5ldGljLlR3ZWVuID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgIG5vZGUgPSBjb25maWcubm9kZSxcbiAgICAgICAgICAgIG5vZGVJZCA9IG5vZGUuX2lkLFxuICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgICBlYXNpbmcgPSBjb25maWcuZWFzaW5nIHx8IEtpbmV0aWMuRWFzaW5ncy5MaW5lYXIsXG4gICAgICAgICAgICB5b3lvID0gISFjb25maWcueW95byxcbiAgICAgICAgICAgIGtleTtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5kdXJhdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChjb25maWcuZHVyYXRpb24gPT09IDApIHsgIC8vIHplcm8gaXMgYmFkIHZhbHVlIGZvciBkdXJhdGlvblxuICAgICAgICAgICAgZHVyYXRpb24gPSAwLjAwMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0gY29uZmlnLmR1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgICAgIHRoaXMuX2lkID0gaWRDb3VudGVyKys7XG5cbiAgICAgICAgdGhpcy5hbmltID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhhdC50d2Vlbi5vbkVudGVyRnJhbWUoKTtcbiAgICAgICAgfSwgbm9kZS5nZXRMYXllcigpIHx8ICgobm9kZSBpbnN0YW5jZW9mIEtpbmV0aWMuU3RhZ2UpID8gbm9kZS5nZXRMYXllcnMoKSA6IG51bGwpKTtcblxuICAgICAgICB0aGlzLnR3ZWVuID0gbmV3IFR3ZWVuKGtleSwgZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgdGhhdC5fdHdlZW5GdW5jKGkpO1xuICAgICAgICB9LCBlYXNpbmcsIDAsIDEsIGR1cmF0aW9uICogMTAwMCwgeW95byk7XG5cbiAgICAgICAgdGhpcy5fYWRkTGlzdGVuZXJzKCk7XG5cbiAgICAgICAgLy8gaW5pdCBhdHRycyBtYXBcbiAgICAgICAgaWYgKCFLaW5ldGljLlR3ZWVuLmF0dHJzW25vZGVJZF0pIHtcbiAgICAgICAgICAgIEtpbmV0aWMuVHdlZW4uYXR0cnNbbm9kZUlkXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmICghS2luZXRpYy5Ud2Vlbi5hdHRyc1tub2RlSWRdW3RoaXMuX2lkXSkge1xuICAgICAgICAgICAgS2luZXRpYy5Ud2Vlbi5hdHRyc1tub2RlSWRdW3RoaXMuX2lkXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIC8vIGluaXQgdHdlZW5zIG1hcFxuICAgICAgICBpZiAoIUtpbmV0aWMuVHdlZW4udHdlZW5zW25vZGVJZF0pIHtcbiAgICAgICAgICAgIEtpbmV0aWMuVHdlZW4udHdlZW5zW25vZGVJZF0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoa2V5IGluIGNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGJsYWNrbGlzdFtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hZGRBdHRyKGtleSwgY29uZmlnW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZXNldCgpO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrc1xuICAgICAgICB0aGlzLm9uRmluaXNoID0gY29uZmlnLm9uRmluaXNoO1xuICAgICAgICB0aGlzLm9uUmVzZXQgPSBjb25maWcub25SZXNldDtcbiAgICB9O1xuXG4gICAgLy8gc3RhcnQvZGlmZiBvYmplY3QgPSBhdHRycy5ub2RlSWQudHdlZW5JZC5hdHRyXG4gICAgS2luZXRpYy5Ud2Vlbi5hdHRycyA9IHt9O1xuICAgIC8vIHR3ZWVuSWQgPSB0d2VlbnMubm9kZUlkLmF0dHJcbiAgICBLaW5ldGljLlR3ZWVuLnR3ZWVucyA9IHt9O1xuXG4gICAgS2luZXRpYy5Ud2Vlbi5wcm90b3R5cGUgPSB7XG4gICAgICAgIF9hZGRBdHRyOiBmdW5jdGlvbihrZXksIGVuZCkge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUsXG4gICAgICAgICAgICAgICAgbm9kZUlkID0gbm9kZS5faWQsXG4gICAgICAgICAgICAgICAgc3RhcnQsIGRpZmYsIHR3ZWVuSWQsIG4sIGxlbjtcblxuICAgICAgICAgICAgLy8gcmVtb3ZlIGNvbmZsaWN0IGZyb20gdHdlZW4gbWFwIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgdHdlZW5JZCA9IEtpbmV0aWMuVHdlZW4udHdlZW5zW25vZGVJZF1ba2V5XTtcblxuICAgICAgICAgICAgaWYgKHR3ZWVuSWQpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgS2luZXRpYy5Ud2Vlbi5hdHRyc1tub2RlSWRdW3R3ZWVuSWRdW2tleV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFkZCB0byB0d2VlbiBtYXBcbiAgICAgICAgICAgIHN0YXJ0ID0gbm9kZS5nZXRBdHRyKGtleSk7XG5cbiAgICAgICAgICAgIGlmIChLaW5ldGljLlV0aWwuX2lzQXJyYXkoZW5kKSkge1xuICAgICAgICAgICAgICAgIGRpZmYgPSBbXTtcbiAgICAgICAgICAgICAgICBsZW4gPSBlbmQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAobj0wOyBuPGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpZmYucHVzaChlbmRbbl0gLSBzdGFydFtuXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkaWZmID0gZW5kIC0gc3RhcnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEtpbmV0aWMuVHdlZW4uYXR0cnNbbm9kZUlkXVt0aGlzLl9pZF1ba2V5XSA9IHtcbiAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgICAgICAgZGlmZjogZGlmZlxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEtpbmV0aWMuVHdlZW4udHdlZW5zW25vZGVJZF1ba2V5XSA9IHRoaXMuX2lkO1xuICAgICAgICB9LFxuICAgICAgICBfdHdlZW5GdW5jOiBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSxcbiAgICAgICAgICAgICAgICBhdHRycyA9IEtpbmV0aWMuVHdlZW4uYXR0cnNbbm9kZS5faWRdW3RoaXMuX2lkXSxcbiAgICAgICAgICAgICAgICBrZXksIGF0dHIsIHN0YXJ0LCBkaWZmLCBuZXdWYWwsIG4sIGxlbjtcblxuICAgICAgICAgICAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgICAgICAgICBhdHRyID0gYXR0cnNba2V5XTtcbiAgICAgICAgICAgICAgICBzdGFydCA9IGF0dHIuc3RhcnQ7XG4gICAgICAgICAgICAgICAgZGlmZiA9IGF0dHIuZGlmZjtcblxuICAgICAgICAgICAgICAgIGlmIChLaW5ldGljLlV0aWwuX2lzQXJyYXkoc3RhcnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBsZW4gPSBzdGFydC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobj0wOyBuPGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWwucHVzaChzdGFydFtuXSArIChkaWZmW25dICogaSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXdWYWwgPSBzdGFydCArIChkaWZmICogaSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyKGtleSwgbmV3VmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2FkZExpc3RlbmVyczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8vIHN0YXJ0IGxpc3RlbmVyc1xuICAgICAgICAgICAgdGhpcy50d2Vlbi5vblBsYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGF0LmFuaW0uc3RhcnQoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnR3ZWVuLm9uUmV2ZXJzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoYXQuYW5pbS5zdGFydCgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gc3RvcCBsaXN0ZW5lcnNcbiAgICAgICAgICAgIHRoaXMudHdlZW4ub25QYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoYXQuYW5pbS5zdG9wKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy50d2Vlbi5vbkZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGF0Lm9uRmluaXNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQub25GaW5pc2goKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy50d2Vlbi5vblJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoYXQub25SZXNldCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Lm9uUmVzZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogcGxheVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlR3ZWVuLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7VHdlZW59XG4gICAgICAgICAqL1xuICAgICAgICBwbGF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMudHdlZW4ucGxheSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiByZXZlcnNlXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVHdlZW4ucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtUd2Vlbn1cbiAgICAgICAgICovXG4gICAgICAgIHJldmVyc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy50d2Vlbi5yZXZlcnNlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJlc2V0XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVHdlZW4ucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtUd2Vlbn1cbiAgICAgICAgICovXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMudHdlZW4ucmVzZXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogc2Vla1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlR3ZWVuLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IHQgdGltZSBpbiBzZWNvbmRzIGJldHdlZW4gMCBhbmQgdGhlIGR1cmF0aW9uXG4gICAgICAgICAqIEByZXR1cm5zIHtUd2Vlbn1cbiAgICAgICAgICovXG4gICAgICAgIHNlZWs6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHRoaXMudHdlZW4uc2Vlayh0ICogMTAwMCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHBhdXNlXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVHdlZW4ucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtUd2Vlbn1cbiAgICAgICAgICovXG4gICAgICAgIHBhdXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMudHdlZW4ucGF1c2UoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZmluaXNoXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVHdlZW4ucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtUd2Vlbn1cbiAgICAgICAgICovXG4gICAgICAgIGZpbmlzaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnR3ZWVuLmZpbmlzaCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZXN0cm95XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVHdlZW4ucHJvdG90eXBlXG4gICAgICAgICAqL1xuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBub2RlSWQgPSB0aGlzLm5vZGUuX2lkLFxuICAgICAgICAgICAgICAgIHRoaXNJZCA9IHRoaXMuX2lkLFxuICAgICAgICAgICAgICAgIGF0dHJzID0gS2luZXRpYy5Ud2Vlbi50d2VlbnNbbm9kZUlkXSxcbiAgICAgICAgICAgICAgICBrZXk7XG5cbiAgICAgICAgICAgIHRoaXMucGF1c2UoKTtcblxuICAgICAgICAgICAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgS2luZXRpYy5Ud2Vlbi50d2VlbnNbbm9kZUlkXVtrZXldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWxldGUgS2luZXRpYy5Ud2Vlbi5hdHRyc1tub2RlSWRdW3RoaXNJZF07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIFR3ZWVuID0gZnVuY3Rpb24ocHJvcCwgcHJvcEZ1bmMsIGZ1bmMsIGJlZ2luLCBmaW5pc2gsIGR1cmF0aW9uLCB5b3lvKSB7XG4gICAgICAgIHRoaXMucHJvcCA9IHByb3A7XG4gICAgICAgIHRoaXMucHJvcEZ1bmMgPSBwcm9wRnVuYztcbiAgICAgICAgdGhpcy5iZWdpbiA9IGJlZ2luO1xuICAgICAgICB0aGlzLl9wb3MgPSBiZWdpbjtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICB0aGlzLl9jaGFuZ2UgPSAwO1xuICAgICAgICB0aGlzLnByZXZQb3MgPSAwO1xuICAgICAgICB0aGlzLnlveW8gPSB5b3lvO1xuICAgICAgICB0aGlzLl90aW1lID0gMDtcbiAgICAgICAgdGhpcy5fcG9zaXRpb24gPSAwO1xuICAgICAgICB0aGlzLl9zdGFydFRpbWUgPSAwO1xuICAgICAgICB0aGlzLl9maW5pc2ggPSAwO1xuICAgICAgICB0aGlzLmZ1bmMgPSBmdW5jO1xuICAgICAgICB0aGlzLl9jaGFuZ2UgPSBmaW5pc2ggLSB0aGlzLmJlZ2luO1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfTtcbiAgICAvKlxuICAgICAqIFR3ZWVuIG1ldGhvZHNcbiAgICAgKi9cbiAgICBUd2Vlbi5wcm90b3R5cGUgPSB7XG4gICAgICAgIGZpcmU6IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSB0aGlzW3N0cl07XG4gICAgICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGltZTogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYodCA+IHRoaXMuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLnlveW8pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGltZSA9IHRoaXMuZHVyYXRpb247XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5pc2goKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKHQgPCAwKSB7XG4gICAgICAgICAgICAgICAgaWYodGhpcy55b3lvKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RpbWUgPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lID0gdDtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZXRUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90aW1lO1xuICAgICAgICB9LFxuICAgICAgICBzZXRQb3NpdGlvbjogZnVuY3Rpb24ocCkge1xuICAgICAgICAgICAgdGhpcy5wcmV2UG9zID0gdGhpcy5fcG9zO1xuICAgICAgICAgICAgdGhpcy5wcm9wRnVuYyhwKTtcbiAgICAgICAgICAgIHRoaXMuX3BvcyA9IHA7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFBvc2l0aW9uOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpZih0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0ID0gdGhpcy5fdGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZ1bmModCwgdGhpcy5iZWdpbiwgdGhpcy5fY2hhbmdlLCB0aGlzLmR1cmF0aW9uKTtcbiAgICAgICAgfSxcbiAgICAgICAgcGxheTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gUExBWUlORztcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0VGltZSA9IHRoaXMuZ2V0VGltZXIoKSAtIHRoaXMuX3RpbWU7XG4gICAgICAgICAgICB0aGlzLm9uRW50ZXJGcmFtZSgpO1xuICAgICAgICAgICAgdGhpcy5maXJlKCdvblBsYXknKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmV2ZXJzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gUkVWRVJTSU5HO1xuICAgICAgICAgICAgdGhpcy5fdGltZSA9IHRoaXMuZHVyYXRpb24gLSB0aGlzLl90aW1lO1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRUaW1lID0gdGhpcy5nZXRUaW1lcigpIC0gdGhpcy5fdGltZTtcbiAgICAgICAgICAgIHRoaXMub25FbnRlckZyYW1lKCk7XG4gICAgICAgICAgICB0aGlzLmZpcmUoJ29uUmV2ZXJzZScpO1xuICAgICAgICB9LFxuICAgICAgICBzZWVrOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgICAgICB0aGlzLl90aW1lID0gdDtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgICAgICB0aGlzLmZpcmUoJ29uU2VlaycpO1xuICAgICAgICB9LFxuICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgICAgICB0aGlzLl90aW1lID0gMDtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgICAgICB0aGlzLmZpcmUoJ29uUmVzZXQnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZmluaXNoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgICAgIHRoaXMuX3RpbWUgPSB0aGlzLmR1cmF0aW9uO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuZmlyZSgnb25GaW5pc2gnKTtcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb24odGhpcy5nZXRQb3NpdGlvbih0aGlzLl90aW1lKSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRW50ZXJGcmFtZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdCA9IHRoaXMuZ2V0VGltZXIoKSAtIHRoaXMuX3N0YXJ0VGltZTtcbiAgICAgICAgICAgIGlmKHRoaXMuc3RhdGUgPT09IFBMQVlJTkcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRpbWUodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXRlID09PSBSRVZFUlNJTkcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRpbWUodGhpcy5kdXJhdGlvbiAtIHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwYXVzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gUEFVU0VEO1xuICAgICAgICAgICAgdGhpcy5maXJlKCdvblBhdXNlJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFRpbWVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKlxuICAgICogVGhlc2UgZWFzZXMgd2VyZSBwb3J0ZWQgZnJvbSBhbiBBZG9iZSBGbGFzaCB0d2VlbmluZyBsaWJyYXJ5IHRvIEphdmFTY3JpcHRcbiAgICAqIGJ5IFhhcmljXG4gICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2UgRWFzaW5nc1xuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICovXG4gICAgS2luZXRpYy5FYXNpbmdzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgKiBiYWNrIGVhc2UgaW5cbiAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5FYXNpbmdzXG4gICAgICAgICovXG4gICAgICAgICdCYWNrRWFzZUluJzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgICAgICAgICAgdmFyIHMgPSAxLjcwMTU4O1xuICAgICAgICAgICAgcmV0dXJuIGMgKiAodCAvPSBkKSAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKSArIGI7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAqIGJhY2sgZWFzZSBvdXRcbiAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5FYXNpbmdzXG4gICAgICAgICovXG4gICAgICAgICdCYWNrRWFzZU91dCc6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIHZhciBzID0gMS43MDE1ODtcbiAgICAgICAgICAgIHJldHVybiBjICogKCggdCA9IHQgLyBkIC0gMSkgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAxKSArIGI7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAqIGJhY2sgZWFzZSBpbiBvdXRcbiAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5FYXNpbmdzXG4gICAgICAgICovXG4gICAgICAgICdCYWNrRWFzZUluT3V0JzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgICAgICAgICAgdmFyIHMgPSAxLjcwMTU4O1xuICAgICAgICAgICAgaWYoKHQgLz0gZCAvIDIpIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjIC8gMiAqICh0ICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgLSBzKSkgKyBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGMgLyAyICogKCh0IC09IDIpICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgKyBzKSArIDIpICsgYjtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICogZWxhc3RpYyBlYXNlIGluXG4gICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRWFzaW5nc1xuICAgICAgICAqL1xuICAgICAgICAnRWxhc3RpY0Vhc2VJbic6IGZ1bmN0aW9uKHQsIGIsIGMsIGQsIGEsIHApIHtcbiAgICAgICAgICAgIC8vIGFkZGVkIHMgPSAwXG4gICAgICAgICAgICB2YXIgcyA9IDA7XG4gICAgICAgICAgICBpZih0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZigodCAvPSBkKSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGIgKyBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoIXApIHtcbiAgICAgICAgICAgICAgICBwID0gZCAqIDAuMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCFhIHx8IGEgPCBNYXRoLmFicyhjKSkge1xuICAgICAgICAgICAgICAgIGEgPSBjO1xuICAgICAgICAgICAgICAgIHMgPSBwIC8gNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbihjIC8gYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLShhICogTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAqIGQgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSkgKyBiO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgKiBlbGFzdGljIGVhc2Ugb3V0XG4gICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRWFzaW5nc1xuICAgICAgICAqL1xuICAgICAgICAnRWxhc3RpY0Vhc2VPdXQnOiBmdW5jdGlvbih0LCBiLCBjLCBkLCBhLCBwKSB7XG4gICAgICAgICAgICAvLyBhZGRlZCBzID0gMFxuICAgICAgICAgICAgdmFyIHMgPSAwO1xuICAgICAgICAgICAgaWYodCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoKHQgLz0gZCkgPT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBiICsgYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCFwKSB7XG4gICAgICAgICAgICAgICAgcCA9IGQgKiAwLjM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZighYSB8fCBhIDwgTWF0aC5hYnMoYykpIHtcbiAgICAgICAgICAgICAgICBhID0gYztcbiAgICAgICAgICAgICAgICBzID0gcCAvIDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzID0gcCAvICgyICogTWF0aC5QSSkgKiBNYXRoLmFzaW4oYyAvIGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigodCAqIGQgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSArIGMgKyBiKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICogZWxhc3RpYyBlYXNlIGluIG91dFxuICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkVhc2luZ3NcbiAgICAgICAgKi9cbiAgICAgICAgJ0VsYXN0aWNFYXNlSW5PdXQnOiBmdW5jdGlvbih0LCBiLCBjLCBkLCBhLCBwKSB7XG4gICAgICAgICAgICAvLyBhZGRlZCBzID0gMFxuICAgICAgICAgICAgdmFyIHMgPSAwO1xuICAgICAgICAgICAgaWYodCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoKHQgLz0gZCAvIDIpID09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYiArIGM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZighcCkge1xuICAgICAgICAgICAgICAgIHAgPSBkICogKDAuMyAqIDEuNSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZighYSB8fCBhIDwgTWF0aC5hYnMoYykpIHtcbiAgICAgICAgICAgICAgICBhID0gYztcbiAgICAgICAgICAgICAgICBzID0gcCAvIDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzID0gcCAvICgyICogTWF0aC5QSSkgKiBNYXRoLmFzaW4oYyAvIGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodCA8IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTAuNSAqIChhICogTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAqIGQgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSkgKyBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGEgKiBNYXRoLnBvdygyLCAtMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAqIGQgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSAqIDAuNSArIGMgKyBiO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgKiBib3VuY2UgZWFzZSBvdXRcbiAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5FYXNpbmdzXG4gICAgICAgICovXG4gICAgICAgICdCb3VuY2VFYXNlT3V0JzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgICAgICAgICAgaWYoKHQgLz0gZCkgPCAoMSAvIDIuNzUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGMgKiAoNy41NjI1ICogdCAqIHQpICsgYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYodCA8ICgyIC8gMi43NSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYyAqICg3LjU2MjUgKiAodCAtPSAoMS41IC8gMi43NSkpICogdCArIDAuNzUpICsgYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYodCA8ICgyLjUgLyAyLjc1KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjICogKDcuNTYyNSAqICh0IC09ICgyLjI1IC8gMi43NSkpICogdCArIDAuOTM3NSkgKyBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGMgKiAoNy41NjI1ICogKHQgLT0gKDIuNjI1IC8gMi43NSkpICogdCArIDAuOTg0Mzc1KSArIGI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAqIGJvdW5jZSBlYXNlIGluXG4gICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRWFzaW5nc1xuICAgICAgICAqL1xuICAgICAgICAnQm91bmNlRWFzZUluJzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgICAgICAgICAgcmV0dXJuIGMgLSBLaW5ldGljLkVhc2luZ3MuQm91bmNlRWFzZU91dChkIC0gdCwgMCwgYywgZCkgKyBiO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgKiBib3VuY2UgZWFzZSBpbiBvdXRcbiAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5FYXNpbmdzXG4gICAgICAgICovXG4gICAgICAgICdCb3VuY2VFYXNlSW5PdXQnOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgICAgICAgICBpZih0IDwgZCAvIDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gS2luZXRpYy5FYXNpbmdzLkJvdW5jZUVhc2VJbih0ICogMiwgMCwgYywgZCkgKiAwLjUgKyBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEtpbmV0aWMuRWFzaW5ncy5Cb3VuY2VFYXNlT3V0KHQgKiAyIC0gZCwgMCwgYywgZCkgKiAwLjUgKyBjICogMC41ICsgYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICogZWFzZSBpblxuICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkVhc2luZ3NcbiAgICAgICAgKi9cbiAgICAgICAgJ0Vhc2VJbic6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICsgYjtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICogZWFzZSBvdXRcbiAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5FYXNpbmdzXG4gICAgICAgICovXG4gICAgICAgICdFYXNlT3V0JzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgICAgICAgICAgcmV0dXJuIC1jICogKHQgLz0gZCkgKiAodCAtIDIpICsgYjtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICogZWFzZSBpbiBvdXRcbiAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5FYXNpbmdzXG4gICAgICAgICovXG4gICAgICAgICdFYXNlSW5PdXQnOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgICAgICAgICBpZigodCAvPSBkIC8gMikgPCAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGMgLyAyICogdCAqIHQgKyBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIC1jIC8gMiAqICgoLS10KSAqICh0IC0gMikgLSAxKSArIGI7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAqIHN0cm9uZyBlYXNlIGluXG4gICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRWFzaW5nc1xuICAgICAgICAqL1xuICAgICAgICAnU3Ryb25nRWFzZUluJzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgICAgICAgICAgcmV0dXJuIGMgKiAodCAvPSBkKSAqIHQgKiB0ICogdCAqIHQgKyBiO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgKiBzdHJvbmcgZWFzZSBvdXRcbiAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5FYXNpbmdzXG4gICAgICAgICovXG4gICAgICAgICdTdHJvbmdFYXNlT3V0JzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgICAgICAgICAgcmV0dXJuIGMgKiAoKCB0ID0gdCAvIGQgLSAxKSAqIHQgKiB0ICogdCAqIHQgKyAxKSArIGI7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAqIHN0cm9uZyBlYXNlIGluIG91dFxuICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkVhc2luZ3NcbiAgICAgICAgKi9cbiAgICAgICAgJ1N0cm9uZ0Vhc2VJbk91dCc6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIGlmKCh0IC89IGQgLyAyKSA8IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYyAvIDIgKiB0ICogdCAqIHQgKiB0ICogdCArIGI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYyAvIDIgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgKiB0ICsgMikgKyBiO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgKiBsaW5lYXJcbiAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5FYXNpbmdzXG4gICAgICAgICovXG4gICAgICAgICdMaW5lYXInOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgICAgICAgICByZXR1cm4gYyAqIHQgLyBkICsgYjtcbiAgICAgICAgfVxuICAgIH07XG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICBLaW5ldGljLkREID0ge1xuICAgICAgICAvLyBwcm9wZXJ0aWVzXG4gICAgICAgIGFuaW06IG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBiID0gdGhpcy5kaXJ0eTtcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICB9KSxcbiAgICAgICAgaXNEcmFnZ2luZzogZmFsc2UsXG4gICAgICAgIGp1c3REcmFnZ2VkOiBmYWxzZSxcbiAgICAgICAgb2Zmc2V0OiB7XG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMFxuICAgICAgICB9LFxuICAgICAgICBub2RlOiBudWxsLFxuXG4gICAgICAgIC8vIG1ldGhvZHNcbiAgICAgICAgX2RyYWc6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgdmFyIGRkID0gS2luZXRpYy5ERCxcbiAgICAgICAgICAgICAgICBub2RlID0gZGQubm9kZTtcblxuICAgICAgICAgICAgaWYobm9kZSkge1xuICAgICAgICAgICAgICAgaWYoIWRkLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IG5vZGUuZ2V0U3RhZ2UoKS5nZXRQb2ludGVyUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyYWdEaXN0YW5jZSA9IG5vZGUuZHJhZ0Rpc3RhbmNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnMocG9zLnggLSBkZC5zdGFydFBvaW50ZXJQb3MueCksXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyhwb3MueSAtIGRkLnN0YXJ0UG9pbnRlclBvcy55KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2UgPCBkcmFnRGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG5vZGUuX3NldERyYWdQb3NpdGlvbihldnQpO1xuICAgICAgICAgICAgICAgIGlmKCFkZC5pc0RyYWdnaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGRkLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBub2RlLmZpcmUoJ2RyYWdzdGFydCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgOiAnZHJhZ3N0YXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA6IG5vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBldnQgOiBldnRcbiAgICAgICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZXhlY3V0ZSBvbmRyYWdtb3ZlIGlmIGRlZmluZWRcbiAgICAgICAgICAgICAgICBub2RlLmZpcmUoJ2RyYWdtb3ZlJywge1xuICAgICAgICAgICAgICAgICAgICB0eXBlIDogJ2RyYWdtb3ZlJyxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0IDogbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgZXZ0IDogZXZ0XG4gICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9lbmREcmFnQmVmb3JlOiBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgIHZhciBkZCA9IEtpbmV0aWMuREQsXG4gICAgICAgICAgICAgICAgbm9kZSA9IGRkLm5vZGUsXG4gICAgICAgICAgICAgICAgbm9kZVR5cGUsIGxheWVyO1xuXG4gICAgICAgICAgICBpZihub2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICAgICAgICAgICAgICAgIGxheWVyID0gbm9kZS5nZXRMYXllcigpO1xuICAgICAgICAgICAgICAgIGRkLmFuaW0uc3RvcCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gb25seSBmaXJlIGRyYWdlbmQgZXZlbnQgaWYgdGhlIGRyYWcgYW5kIGRyb3BcbiAgICAgICAgICAgICAgICAvLyBvcGVyYXRpb24gYWN0dWFsbHkgc3RhcnRlZC5cbiAgICAgICAgICAgICAgICBpZihkZC5pc0RyYWdnaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGRkLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZGQuanVzdERyYWdnZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBLaW5ldGljLmxpc3RlbkNsaWNrVGFwID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZ0LmRyYWdFbmROb2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlbGV0ZSBkZC5ub2RlO1xuXG4gICAgICAgICAgICAgICAgKGxheWVyIHx8IG5vZGUpLmRyYXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2VuZERyYWdBZnRlcjogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICBldnQgPSBldnQgfHwge307XG5cbiAgICAgICAgICAgIHZhciBkcmFnRW5kTm9kZSA9IGV2dC5kcmFnRW5kTm9kZTtcblxuICAgICAgICAgICAgaWYgKGV2dCAmJiBkcmFnRW5kTm9kZSkge1xuICAgICAgICAgICAgICAgIGRyYWdFbmROb2RlLmZpcmUoJ2RyYWdlbmQnLCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUgOiAnZHJhZ2VuZCcsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA6IGRyYWdFbmROb2RlLFxuICAgICAgICAgICAgICAgICAgICBldnQgOiBldnRcbiAgICAgICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBOb2RlIGV4dGVuZGVyc1xuXG4gICAgLyoqXG4gICAgICogaW5pdGlhdGUgZHJhZyBhbmQgZHJvcFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqL1xuICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuc3RhcnREcmFnID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkZCA9IEtpbmV0aWMuREQsXG4gICAgICAgICAgICBzdGFnZSA9IHRoaXMuZ2V0U3RhZ2UoKSxcbiAgICAgICAgICAgIGxheWVyID0gdGhpcy5nZXRMYXllcigpLFxuICAgICAgICAgICAgcG9zID0gc3RhZ2UuZ2V0UG9pbnRlclBvc2l0aW9uKCksXG4gICAgICAgICAgICBhcCA9IHRoaXMuZ2V0QWJzb2x1dGVQb3NpdGlvbigpO1xuXG4gICAgICAgIGlmKHBvcykge1xuICAgICAgICAgICAgaWYgKGRkLm5vZGUpIHtcbiAgICAgICAgICAgICAgICBkZC5ub2RlLnN0b3BEcmFnKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRkLm5vZGUgPSB0aGlzO1xuICAgICAgICAgICAgZGQuc3RhcnRQb2ludGVyUG9zID0gcG9zO1xuICAgICAgICAgICAgZGQub2Zmc2V0LnggPSBwb3MueCAtIGFwLng7XG4gICAgICAgICAgICBkZC5vZmZzZXQueSA9IHBvcy55IC0gYXAueTtcbiAgICAgICAgICAgIGRkLmFuaW0uc2V0TGF5ZXJzKGxheWVyIHx8IHRoaXMuZ2V0TGF5ZXJzKCkpO1xuICAgICAgICAgICAgZGQuYW5pbS5zdGFydCgpO1xuXG4gICAgICAgICAgICB0aGlzLl9zZXREcmFnUG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLl9zZXREcmFnUG9zaXRpb24gPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgdmFyIGRkID0gS2luZXRpYy5ERCxcbiAgICAgICAgICAgIHBvcyA9IHRoaXMuZ2V0U3RhZ2UoKS5nZXRQb2ludGVyUG9zaXRpb24oKSxcbiAgICAgICAgICAgIGRiZiA9IHRoaXMuZ2V0RHJhZ0JvdW5kRnVuYygpO1xuICAgICAgICBpZiAoIXBvcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXdOb2RlUG9zID0ge1xuICAgICAgICAgICAgeDogcG9zLnggLSBkZC5vZmZzZXQueCxcbiAgICAgICAgICAgIHk6IHBvcy55IC0gZGQub2Zmc2V0LnlcbiAgICAgICAgfTtcblxuICAgICAgICBpZihkYmYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3Tm9kZVBvcyA9IGRiZi5jYWxsKHRoaXMsIG5ld05vZGVQb3MsIGV2dCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRBYnNvbHV0ZVBvc2l0aW9uKG5ld05vZGVQb3MpO1xuXG4gICAgICAgIGlmICghdGhpcy5fbGFzdFBvcyB8fCB0aGlzLl9sYXN0UG9zLnggIT09IG5ld05vZGVQb3MueCB8fFxuICAgICAgICAgICAgdGhpcy5fbGFzdFBvcy55ICE9PSBuZXdOb2RlUG9zLnkpIHtcbiAgICAgICAgICAgIGRkLmFuaW0uZGlydHkgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbGFzdFBvcyA9IG5ld05vZGVQb3M7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIHN0b3AgZHJhZyBhbmQgZHJvcFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqL1xuICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuc3RvcERyYWcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGRkID0gS2luZXRpYy5ERCxcbiAgICAgICAgICAgIGV2dCA9IHt9O1xuICAgICAgICBkZC5fZW5kRHJhZ0JlZm9yZShldnQpO1xuICAgICAgICBkZC5fZW5kRHJhZ0FmdGVyKGV2dCk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuc2V0RHJhZ2dhYmxlID0gZnVuY3Rpb24oZHJhZ2dhYmxlKSB7XG4gICAgICAgIHRoaXMuX3NldEF0dHIoJ2RyYWdnYWJsZScsIGRyYWdnYWJsZSk7XG4gICAgICAgIHRoaXMuX2RyYWdDaGFuZ2UoKTtcbiAgICB9O1xuXG4gICAgdmFyIG9yaWdEZXN0cm95ID0gS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5kZXN0cm95O1xuXG4gICAgS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkZCA9IEtpbmV0aWMuREQ7XG5cbiAgICAgICAgLy8gc3RvcCBERFxuICAgICAgICBpZihkZC5ub2RlICYmIGRkLm5vZGUuX2lkID09PSB0aGlzLl9pZCkge1xuXG4gICAgICAgICAgICB0aGlzLnN0b3BEcmFnKCk7XG4gICAgICAgIH1cblxuICAgICAgICBvcmlnRGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBkZXRlcm1pbmUgaWYgbm9kZSBpcyBjdXJyZW50bHkgaW4gZHJhZyBhbmQgZHJvcCBtb2RlXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICovXG4gICAgS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5pc0RyYWdnaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkZCA9IEtpbmV0aWMuREQ7XG4gICAgICAgIHJldHVybiAhIShkZC5ub2RlICYmIGRkLm5vZGUuX2lkID09PSB0aGlzLl9pZCAmJiBkZC5pc0RyYWdnaW5nKTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5fbGlzdGVuRHJhZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fZHJhZ0NsZWFudXAoKTtcblxuICAgICAgICBpZiAodGhpcy5nZXRDbGFzc05hbWUoKSA9PT0gJ1N0YWdlJykge1xuICAgICAgICAgICAgdGhpcy5vbignY29udGVudE1vdXNlZG93bi5raW5ldGljIGNvbnRlbnRUb3VjaHN0YXJ0LmtpbmV0aWMnLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgICAgICBpZighS2luZXRpYy5ERC5ub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc3RhcnREcmFnKGV2dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9uKCdtb3VzZWRvd24ua2luZXRpYyB0b3VjaHN0YXJ0LmtpbmV0aWMnLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgICAgICAvLyBpZ25vcmUgcmlnaHQgYW5kIG1pZGRsZSBidXR0b25zXG4gICAgICAgICAgICAgICAgaWYgKGV2dC5ldnQuYnV0dG9uID09PSAxIHx8IGV2dC5ldnQuYnV0dG9uID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIUtpbmV0aWMuREQubm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LnN0YXJ0RHJhZyhldnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbGlzdGVuaW5nIGlzIHJlcXVpcmVkIGZvciBkcmFnIGFuZCBkcm9wXG4gICAgICAgIC8qXG4gICAgICAgIHRoaXMuX2xpc3RlbmluZ0VuYWJsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9jbGVhclNlbGZBbmRBbmNlc3RvckNhY2hlKCdsaXN0ZW5pbmdFbmFibGVkJyk7XG4gICAgICAgICovXG4gICAgfTtcblxuICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuX2RyYWdDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYodGhpcy5hdHRycy5kcmFnZ2FibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlbkRyYWcoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgICAgIHRoaXMuX2RyYWdDbGVhbnVwKCk7XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBmb3JjZSBkcmFnIGFuZCBkcm9wIHRvIGVuZFxuICAgICAgICAgICAgICogaWYgdGhpcyBub2RlIGlzIGN1cnJlbnRseSBpblxuICAgICAgICAgICAgICogZHJhZyBhbmQgZHJvcCBtb2RlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBzdGFnZSA9IHRoaXMuZ2V0U3RhZ2UoKTtcbiAgICAgICAgICAgIHZhciBkZCA9IEtpbmV0aWMuREQ7XG4gICAgICAgICAgICBpZihzdGFnZSAmJiBkZC5ub2RlICYmIGRkLm5vZGUuX2lkID09PSB0aGlzLl9pZCkge1xuICAgICAgICAgICAgICAgIGRkLm5vZGUuc3RvcERyYWcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLl9kcmFnQ2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5nZXRDbGFzc05hbWUoKSA9PT0gJ1N0YWdlJykge1xuICAgICAgICAgICAgdGhpcy5vZmYoJ2NvbnRlbnRNb3VzZWRvd24ua2luZXRpYycpO1xuICAgICAgICAgICAgdGhpcy5vZmYoJ2NvbnRlbnRUb3VjaHN0YXJ0LmtpbmV0aWMnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub2ZmKCdtb3VzZWRvd24ua2luZXRpYycpO1xuICAgICAgICAgICAgdGhpcy5vZmYoJ3RvdWNoc3RhcnQua2luZXRpYycpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnZHJhZ0JvdW5kRnVuYycpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBkcmFnIGJvdW5kIGZ1bmN0aW9uLiAgVGhpcyBpcyB1c2VkIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0XG4gICAgICogIGRyYWcgYW5kIGRyb3AgcG9zaXRpb25cbiAgICAgKiBAbmFtZSBkcmFnQm91bmRGdW5jXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhZ0JvdW5kRnVuY1xuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBkcmFnIGJvdW5kIGZ1bmN0aW9uXG4gICAgICogdmFyIGRyYWdCb3VuZEZ1bmMgPSBub2RlLmRyYWdCb3VuZEZ1bmMoKTtcbiAgICAgKlxuICAgICAqIC8vIGNyZWF0ZSB2ZXJ0aWNhbCBkcmFnIGFuZCBkcm9wXG4gICAgICogbm9kZS5kcmFnQm91bmRGdW5jKGZ1bmN0aW9uKHBvcyl7XG4gICAgICogICByZXR1cm4ge1xuICAgICAqICAgICB4OiB0aGlzLmdldEFic29sdXRlUG9zaXRpb24oKS54LFxuICAgICAqICAgICB5OiBwb3MueVxuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXIoS2luZXRpYy5Ob2RlLCAnZHJhZ2dhYmxlJywgZmFsc2UpO1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRPdmVybG9hZGVkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2RyYWdnYWJsZScpO1xuXG4gICAgIC8qKlxuICAgICAqIGdldC9zZXQgZHJhZ2dhYmxlIGZsYWdcbiAgICAgKiBAbmFtZSBkcmFnZ2FibGVcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGRyYWdnYWJsZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGRyYWdnYWJsZSBmbGFnXG4gICAgICogdmFyIGRyYWdnYWJsZSA9IG5vZGUuZHJhZ2dhYmxlKCk7XG4gICAgICpcbiAgICAgKiAvLyBlbmFibGUgZHJhZyBhbmQgZHJvcFxuICAgICAqIG5vZGUuZHJhZ2dhYmxlKHRydWUpO1xuICAgICAqXG4gICAgICogLy8gZGlzYWJsZSBkcmFnIGFuZCBkcm9wXG4gICAgICogbm9kZS5kcmFnZ2FibGUoZmFsc2UpO1xuICAgICAqL1xuXG4gICAgdmFyIGh0bWwgPSBLaW5ldGljLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICBodG1sLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBLaW5ldGljLkRELl9lbmREcmFnQmVmb3JlLCB0cnVlKTtcbiAgICBodG1sLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgS2luZXRpYy5ERC5fZW5kRHJhZ0JlZm9yZSwgdHJ1ZSk7XG5cbiAgICBodG1sLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBLaW5ldGljLkRELl9lbmREcmFnQWZ0ZXIsIGZhbHNlKTtcbiAgICBodG1sLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgS2luZXRpYy5ERC5fZW5kRHJhZ0FmdGVyLCBmYWxzZSk7XG5cbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xuICAgIEtpbmV0aWMuVXRpbC5hZGRNZXRob2RzKEtpbmV0aWMuQ29udGFpbmVyLCB7XG4gICAgICAgIF9faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuID0gbmV3IEtpbmV0aWMuQ29sbGVjdGlvbigpO1xuICAgICAgICAgICAgS2luZXRpYy5Ob2RlLmNhbGwodGhpcywgY29uZmlnKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJldHVybnMgYSB7QGxpbmsgS2luZXRpYy5Db2xsZWN0aW9ufSBvZiBkaXJlY3QgZGVzY2VuZGFudCBub2Rlc1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbnRhaW5lci5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZpbHRlckZ1bmNdIGZpbHRlciBmdW5jdGlvblxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5Db2xsZWN0aW9ufVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiAvLyBnZXQgYWxsIGNoaWxkcmVuXG4gICAgICAgICAqIHZhciBjaGlsZHJlbiA9IGxheWVyLmdldENoaWxkcmVuKCk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIGdldCBvbmx5IGNpcmNsZXNcbiAgICAgICAgICogdmFyIGNpcmNsZXMgPSBsYXllci5nZXRDaGlsZHJlbihmdW5jdGlvbihub2RlKXtcbiAgICAgICAgICogICAgcmV0dXJuIG5vZGUuZ2V0Q2xhc3NOYW1lKCkgPT09ICdDaXJjbGUnO1xuICAgICAgICAgKiB9KTtcbiAgICAgICAgICovXG4gICAgICAgIGdldENoaWxkcmVuOiBmdW5jdGlvbihmaWx0ZXJGdW5jKSB7XG4gICAgICAgICAgICBpZiAoIWZpbHRlckZ1bmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSBuZXcgS2luZXRpYy5Db2xsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5lYWNoKGZ1bmN0aW9uKGNoaWxkKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlckZ1bmMoY2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZXRlcm1pbmUgaWYgbm9kZSBoYXMgY2hpbGRyZW5cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250YWluZXIucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgaGFzQ2hpbGRyZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2hpbGRyZW4oKS5sZW5ndGggPiAwO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogcmVtb3ZlIGFsbCBjaGlsZHJlblxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbnRhaW5lci5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZUNoaWxkcmVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IEtpbmV0aWMuQ29sbGVjdGlvbi50b0NvbGxlY3Rpb24odGhpcy5jaGlsZHJlbik7XG4gICAgICAgICAgICB2YXIgY2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICAvLyByZXNldCBwYXJlbnQgdG8gcHJldmVudCBtYW55IF9zZXRDaGlsZHJlbkluZGljZXMgY2FsbHNcbiAgICAgICAgICAgICAgICBkZWxldGUgY2hpbGQucGFyZW50O1xuICAgICAgICAgICAgICAgIGNoaWxkLmluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQuaGFzQ2hpbGRyZW4oKSkge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC5yZW1vdmVDaGlsZHJlbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaGlsZC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgS2luZXRpYy5Db2xsZWN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRlc3Ryb3kgYWxsIGNoaWxkcmVuXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ29udGFpbmVyLnByb3RvdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgZGVzdHJveUNoaWxkcmVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gS2luZXRpYy5Db2xsZWN0aW9uLnRvQ29sbGVjdGlvbih0aGlzLmNoaWxkcmVuKTtcbiAgICAgICAgICAgIHZhciBjaGlsZDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIC8vIHJlc2V0IHBhcmVudCB0byBwcmV2ZW50IG1hbnkgX3NldENoaWxkcmVuSW5kaWNlcyBjYWxsc1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjaGlsZC5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgY2hpbGQuaW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIGNoaWxkLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgS2luZXRpYy5Db2xsZWN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZCBub2RlIG9yIG5vZGVzIHRvIGNvbnRhaW5lci5cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250YWluZXIucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7Li4uS2luZXRpYy5Ob2RlfSBjaGlsZFxuICAgICAgICAgKiBAcmV0dXJucyB7Q29udGFpbmVyfVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBsYXllci5hZGQoc2hhcGUxLCBzaGFwZTIsIHNoYXBlMyk7XG4gICAgICAgICAqL1xuICAgICAgICBhZGQ6IGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZChhcmd1bWVudHNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGlsZC5nZXRQYXJlbnQoKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkLm1vdmVUbyh0aGlzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICAgICAgICB0aGlzLl92YWxpZGF0ZUFkZChjaGlsZCk7XG4gICAgICAgICAgICBjaGlsZC5pbmRleCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgIGNoaWxkLnBhcmVudCA9IHRoaXM7XG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgIHRoaXMuX2ZpcmUoJ2FkZCcsIHtcbiAgICAgICAgICAgICAgICBjaGlsZDogY2hpbGRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBpZiBub2RlIHVuZGVyIGRyYWcgd2UgbmVlZCB0byB1cGRhdGUgZHJhZyBhbmltYXRpb25cbiAgICAgICAgICAgIGlmIChjaGlsZC5pc0RyYWdnaW5nKCkpIHtcbiAgICAgICAgICAgICAgICBLaW5ldGljLkRELmFuaW0uc2V0TGF5ZXJzKGNoaWxkLmdldExheWVyKCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjaGFpbmFibGVcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGRlc3Ryb3kgY2hpbGRyZW5cbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0NoaWxkcmVuKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3lDaGlsZHJlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGhlbiBkZXN0cm95IHNlbGZcbiAgICAgICAgICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogcmV0dXJuIGEge0BsaW5rIEtpbmV0aWMuQ29sbGVjdGlvbn0gb2Ygbm9kZXMgdGhhdCBtYXRjaCB0aGUgc2VsZWN0b3IuICBVc2UgJyMnIGZvciBpZCBzZWxlY3Rpb25zXG4gICAgICAgICAqIGFuZCAnLicgZm9yIG5hbWUgc2VsZWN0aW9ucy4gIFlvdSBjYW4gYWxzbyBzZWxlY3QgYnkgdHlwZSBvciBjbGFzcyBuYW1lLiBQYXNzIG11bHRpcGxlIHNlbGVjdG9yc1xuICAgICAgICAgKiBzZXBhcmF0ZWQgYnkgYSBzcGFjZS5cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250YWluZXIucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICAgICAgICAgKiBAcmV0dXJucyB7Q29sbGVjdGlvbn1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogLy8gc2VsZWN0IG5vZGUgd2l0aCBpZCBmb29cbiAgICAgICAgICogdmFyIG5vZGUgPSBzdGFnZS5maW5kKCcjZm9vJyk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIHNlbGVjdCBub2RlcyB3aXRoIG5hbWUgYmFyIGluc2lkZSBsYXllclxuICAgICAgICAgKiB2YXIgbm9kZXMgPSBsYXllci5maW5kKCcuYmFyJyk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIHNlbGVjdCBhbGwgZ3JvdXBzIGluc2lkZSBsYXllclxuICAgICAgICAgKiB2YXIgbm9kZXMgPSBsYXllci5maW5kKCdHcm91cCcpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBzZWxlY3QgYWxsIHJlY3RhbmdsZXMgaW5zaWRlIGxheWVyXG4gICAgICAgICAqIHZhciBub2RlcyA9IGxheWVyLmZpbmQoJ1JlY3QnKTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gc2VsZWN0IG5vZGUgd2l0aCBhbiBpZCBvZiBmb28gb3IgYSBuYW1lIG9mIGJhciBpbnNpZGUgbGF5ZXJcbiAgICAgICAgICogdmFyIG5vZGVzID0gbGF5ZXIuZmluZCgnI2ZvbywgLmJhcicpO1xuICAgICAgICAgKi9cbiAgICAgICAgZmluZDogZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHZhciByZXRBcnIgPSBbXSxcbiAgICAgICAgICAgICAgICBzZWxlY3RvckFyciA9IHNlbGVjdG9yLnJlcGxhY2UoLyAvZywgJycpLnNwbGl0KCcsJyksXG4gICAgICAgICAgICAgICAgbGVuID0gc2VsZWN0b3JBcnIubGVuZ3RoLFxuICAgICAgICAgICAgICAgIG4sIGksIHNlbCwgYXJyLCBub2RlLCBjaGlsZHJlbiwgY2xlbjtcblxuICAgICAgICAgICAgZm9yIChuID0gMDsgbiA8IGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgc2VsID0gc2VsZWN0b3JBcnJbbl07XG5cbiAgICAgICAgICAgICAgICAvLyBpZCBzZWxlY3RvclxuICAgICAgICAgICAgICAgIGlmKHNlbC5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gdGhpcy5fZ2V0Tm9kZUJ5SWQoc2VsLnNsaWNlKDEpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0QXJyLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gbmFtZSBzZWxlY3RvclxuICAgICAgICAgICAgICAgIGVsc2UgaWYoc2VsLmNoYXJBdCgwKSA9PT0gJy4nKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyciA9IHRoaXMuX2dldE5vZGVzQnlOYW1lKHNlbC5zbGljZSgxKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldEFyciA9IHJldEFyci5jb25jYXQoYXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gdW5yZWNvZ25pemVkIHNlbGVjdG9yLCBwYXNzIHRvIGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gdGhpcy5nZXRDaGlsZHJlbigpO1xuICAgICAgICAgICAgICAgICAgICBjbGVuID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBjbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldEFyciA9IHJldEFyci5jb25jYXQoY2hpbGRyZW5baV0uX2dldChzZWwpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIEtpbmV0aWMuQ29sbGVjdGlvbi50b0NvbGxlY3Rpb24ocmV0QXJyKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldE5vZGVCeUlkOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gS2luZXRpYy5pZHNba2V5XTtcblxuICAgICAgICAgICAgaWYobm9kZSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaXNBbmNlc3Rvck9mKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldE5vZGVzQnlOYW1lOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHZhciBhcnIgPSBLaW5ldGljLm5hbWVzW2tleV0gfHwgW107XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0RGVzY2VuZGFudHMoYXJyKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldDogZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHZhciByZXRBcnIgPSBLaW5ldGljLk5vZGUucHJvdG90eXBlLl9nZXQuY2FsbCh0aGlzLCBzZWxlY3Rvcik7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmdldENoaWxkcmVuKCk7XG4gICAgICAgICAgICB2YXIgbGVuID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgZm9yKHZhciBuID0gMDsgbiA8IGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgcmV0QXJyID0gcmV0QXJyLmNvbmNhdChjaGlsZHJlbltuXS5fZ2V0KHNlbGVjdG9yKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0QXJyO1xuICAgICAgICB9LFxuICAgICAgICAvLyBleHRlbmRlcnNcbiAgICAgICAgdG9PYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IEtpbmV0aWMuTm9kZS5wcm90b3R5cGUudG9PYmplY3QuY2FsbCh0aGlzKTtcblxuICAgICAgICAgICAgb2JqLmNoaWxkcmVuID0gW107XG5cbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuZ2V0Q2hpbGRyZW4oKTtcbiAgICAgICAgICAgIHZhciBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICBmb3IodmFyIG4gPSAwOyBuIDwgbGVuOyBuKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltuXTtcbiAgICAgICAgICAgICAgICBvYmouY2hpbGRyZW4ucHVzaChjaGlsZC50b09iamVjdCgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldERlc2NlbmRhbnRzOiBmdW5jdGlvbihhcnIpIHtcbiAgICAgICAgICAgIHZhciByZXRBcnIgPSBbXTtcbiAgICAgICAgICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgZm9yKHZhciBuID0gMDsgbiA8IGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBhcnJbbl07XG4gICAgICAgICAgICAgICAgaWYodGhpcy5pc0FuY2VzdG9yT2Yobm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0QXJyLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmV0QXJyO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZGV0ZXJtaW5lIGlmIG5vZGUgaXMgYW4gYW5jZXN0b3JcbiAgICAgICAgICogb2YgZGVzY2VuZGFudFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbnRhaW5lci5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtLaW5ldGljLk5vZGV9IG5vZGVcbiAgICAgICAgICovXG4gICAgICAgIGlzQW5jZXN0b3JPZjogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUuZ2V0UGFyZW50KCk7XG4gICAgICAgICAgICB3aGlsZShwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBpZihwYXJlbnQuX2lkID09PSB0aGlzLl9pZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LmdldFBhcmVudCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGNsb25lOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIC8vIGNhbGwgc3VwZXIgbWV0aG9kXG4gICAgICAgICAgICB2YXIgbm9kZSA9IEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLCBvYmopO1xuXG4gICAgICAgICAgICB0aGlzLmdldENoaWxkcmVuKCkuZWFjaChmdW5jdGlvbihubykge1xuICAgICAgICAgICAgICAgIG5vZGUuYWRkKG5vLmNsb25lKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCBhbGwgc2hhcGVzIHRoYXQgaW50ZXJzZWN0IGEgcG9pbnQuICBOb3RlOiBiZWNhdXNlIHRoaXMgbWV0aG9kIG11c3QgY2xlYXIgYSB0ZW1wb3JhcnlcbiAgICAgICAgICogY2FudmFzIGFuZCByZWRyYXcgZXZlcnkgc2hhcGUgaW5zaWRlIHRoZSBjb250YWluZXIsIGl0IHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIHNwZWNpYWwgc2l0YXRpb25zXG4gICAgICAgICAqIGJlY2F1c2UgaXQgcGVyZm9ybXMgdmVyeSBwb29ybHkuICBQbGVhc2UgdXNlIHRoZSB7QGxpbmsgS2luZXRpYy5TdGFnZSNnZXRJbnRlcnNlY3Rpb259IG1ldGhvZCBpZiBhdCBhbGwgcG9zc2libGVcbiAgICAgICAgICogYmVjYXVzZSBpdCBwZXJmb3JtcyBtdWNoIGJldHRlclxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbnRhaW5lci5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHBvc1xuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gcG9zLnhcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvcy55XG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX0gYXJyYXkgb2Ygc2hhcGVzXG4gICAgICAgICAqL1xuICAgICAgICBnZXRBbGxJbnRlcnNlY3Rpb25zOiBmdW5jdGlvbihwb3MpIHtcbiAgICAgICAgICAgIHZhciBhcnIgPSBbXTtcblxuICAgICAgICAgICAgdGhpcy5maW5kKCdTaGFwZScpLmVhY2goZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgICAgICBpZihzaGFwZS5pc1Zpc2libGUoKSAmJiBzaGFwZS5pbnRlcnNlY3RzKHBvcykpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goc2hhcGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICB9LFxuICAgICAgICBfc2V0Q2hpbGRyZW5JbmRpY2VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uZWFjaChmdW5jdGlvbihjaGlsZCwgbikge1xuICAgICAgICAgICAgICAgIGNoaWxkLmluZGV4ID0gbjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBkcmF3U2NlbmU6IGZ1bmN0aW9uKGNhbiwgdG9wKSB7XG4gICAgICAgICAgICB2YXIgbGF5ZXIgPSB0aGlzLmdldExheWVyKCksXG4gICAgICAgICAgICAgICAgY2FudmFzID0gY2FuIHx8IChsYXllciAmJiBsYXllci5nZXRDYW52YXMoKSksXG4gICAgICAgICAgICAgICAgY29udGV4dCA9IGNhbnZhcyAmJiBjYW52YXMuZ2V0Q29udGV4dCgpLFxuICAgICAgICAgICAgICAgIGNhY2hlZENhbnZhcyA9IHRoaXMuX2NhY2hlLmNhbnZhcyxcbiAgICAgICAgICAgICAgICBjYWNoZWRTY2VuZUNhbnZhcyA9IGNhY2hlZENhbnZhcyAmJiBjYWNoZWRDYW52YXMuc2NlbmU7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZFNjZW5lQ2FudmFzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdDYWNoZWRTY2VuZUNhbnZhcyhjb250ZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdDaGlsZHJlbihjYW52YXMsICdkcmF3U2NlbmUnLCB0b3ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBkcmF3SGl0OiBmdW5jdGlvbihjYW4sIHRvcCkge1xuICAgICAgICAgICAgdmFyIGxheWVyID0gdGhpcy5nZXRMYXllcigpLFxuICAgICAgICAgICAgICAgIGNhbnZhcyA9IGNhbiB8fCAobGF5ZXIgJiYgbGF5ZXIuaGl0Q2FudmFzKSxcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gY2FudmFzICYmIGNhbnZhcy5nZXRDb250ZXh0KCksXG4gICAgICAgICAgICAgICAgY2FjaGVkQ2FudmFzID0gdGhpcy5fY2FjaGUuY2FudmFzLFxuICAgICAgICAgICAgICAgIGNhY2hlZEhpdENhbnZhcyA9IGNhY2hlZENhbnZhcyAmJiBjYWNoZWRDYW52YXMuaGl0O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zaG91bGREcmF3SGl0KGNhbnZhcykpIHtcbiAgICAgICAgICAgICAgICBpZiAobGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXIuY2xlYXJIaXRDYWNoZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkSGl0Q2FudmFzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdDYWNoZWRIaXRDYW52YXMoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kcmF3Q2hpbGRyZW4oY2FudmFzLCAnZHJhd0hpdCcsIHRvcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIF9kcmF3Q2hpbGRyZW46IGZ1bmN0aW9uKGNhbnZhcywgZHJhd01ldGhvZCwgdG9wKSB7XG4gICAgICAgICAgICB2YXIgbGF5ZXIgPSB0aGlzLmdldExheWVyKCksXG4gICAgICAgICAgICAgICAgY29udGV4dCA9IGNhbnZhcyAmJiBjYW52YXMuZ2V0Q29udGV4dCgpLFxuICAgICAgICAgICAgICAgIGNsaXBXaWR0aCA9IHRoaXMuZ2V0Q2xpcFdpZHRoKCksXG4gICAgICAgICAgICAgICAgY2xpcEhlaWdodCA9IHRoaXMuZ2V0Q2xpcEhlaWdodCgpLFxuICAgICAgICAgICAgICAgIGhhc0NsaXAgPSBjbGlwV2lkdGggJiYgY2xpcEhlaWdodCxcbiAgICAgICAgICAgICAgICBjbGlwWCwgY2xpcFk7XG5cbiAgICAgICAgICAgIGlmIChoYXNDbGlwICYmIGxheWVyKSB7XG4gICAgICAgICAgICAgICAgY2xpcFggPSB0aGlzLmdldENsaXBYKCk7XG4gICAgICAgICAgICAgICAgY2xpcFkgPSB0aGlzLmdldENsaXBZKCk7XG5cbiAgICAgICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgICAgICBsYXllci5fYXBwbHlUcmFuc2Zvcm0odGhpcywgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlY3QoY2xpcFgsIGNsaXBZLCBjbGlwV2lkdGgsIGNsaXBIZWlnaHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuY2xpcCgpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQucmVzZXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5lYWNoKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRbZHJhd01ldGhvZF0oY2FudmFzLCB0b3ApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChoYXNDbGlwKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNob3VsZERyYXdIaXQ6IGZ1bmN0aW9uKGNhbnZhcykge1xuICAgICAgICAgICAgdmFyIGxheWVyID0gdGhpcy5nZXRMYXllcigpO1xuICAgICAgICAgICAgdmFyIGRkID0gS2luZXRpYy5ERDtcbiAgICAgICAgICAgIHZhciBsYXllclVuZGVyRHJhZyA9IGRkICYmIEtpbmV0aWMuaXNEcmFnZ2luZygpICYmIChLaW5ldGljLkRELmFuaW0uZ2V0TGF5ZXJzKCkuaW5kZXhPZihsYXllcikgIT09IC0xKTtcbiAgICAgICAgICAgIHJldHVybiAgKGNhbnZhcyAmJiBjYW52YXMuaXNDYWNoZSkgfHwgKGxheWVyICYmIGxheWVyLmhpdEdyYXBoRW5hYmxlZCgpKVxuICAgICAgICAgICAgICAgICYmIHRoaXMuaXNWaXNpYmxlKCkgJiYgIWxheWVyVW5kZXJEcmFnO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuQ29udGFpbmVyLCBLaW5ldGljLk5vZGUpO1xuICAgIC8vIGRlcHJlY2F0ZWQgbWV0aG9kc1xuICAgIEtpbmV0aWMuQ29udGFpbmVyLnByb3RvdHlwZS5nZXQgPSBLaW5ldGljLkNvbnRhaW5lci5wcm90b3R5cGUuZmluZDtcblxuICAgIC8vIGFkZCBnZXR0ZXJzIHNldHRlcnNcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkQ29tcG9uZW50c0dldHRlclNldHRlcihLaW5ldGljLkNvbnRhaW5lciwgJ2NsaXAnLCBbJ3gnLCAneScsICd3aWR0aCcsICdoZWlnaHQnXSk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBjbGlwXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBuYW1lIGNsaXBcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250YWluZXIucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNsaXBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY2xpcC54XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNsaXAueVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjbGlwLndpZHRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNsaXAuaGVpZ2h0XG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBjbGlwXG4gICAgICogdmFyIGNsaXAgPSBjb250YWluZXIuY2xpcCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGNsaXBcbiAgICAgKiBjb250YWluZXIuc2V0Q2xpcCh7XG4gICAgICogICB4OiAyMCxcbiAgICAgKiAgIHk6IDIwLFxuICAgICAqICAgd2lkdGg6IDIwLFxuICAgICAqICAgaGVpZ2h0OiAyMFxuICAgICAqIH0pO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkNvbnRhaW5lciwgJ2NsaXBYJyk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBjbGlwIHhcbiAgICAgKiBAbmFtZSBjbGlwWFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250YWluZXIucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGNsaXAgeFxuICAgICAqIHZhciBjbGlwWCA9IGNvbnRhaW5lci5jbGlwWCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGNsaXAgeFxuICAgICAqIGNvbnRhaW5lci5jbGlwWCgxMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuQ29udGFpbmVyLCAnY2xpcFknKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGNsaXAgeVxuICAgICAqIEBuYW1lIGNsaXBZXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbnRhaW5lci5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgY2xpcCB5XG4gICAgICogdmFyIGNsaXBZID0gY29udGFpbmVyLmNsaXBZKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgY2xpcCB5XG4gICAgICogY29udGFpbmVyLmNsaXBZKDEwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Db250YWluZXIsICdjbGlwV2lkdGgnKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGNsaXAgd2lkdGhcbiAgICAgKiBAbmFtZSBjbGlwV2lkdGhcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ29udGFpbmVyLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgY2xpcCB3aWR0aFxuICAgICAqIHZhciBjbGlwV2lkdGggPSBjb250YWluZXIuY2xpcFdpZHRoKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgY2xpcCB3aWR0aFxuICAgICAqIGNvbnRhaW5lci5jbGlwV2lkdGgoMTAwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Db250YWluZXIsICdjbGlwSGVpZ2h0Jyk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBjbGlwIGhlaWdodFxuICAgICAqIEBuYW1lIGNsaXBIZWlnaHRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ29udGFpbmVyLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHRcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGNsaXAgaGVpZ2h0XG4gICAgICogdmFyIGNsaXBIZWlnaHQgPSBjb250YWluZXIuY2xpcEhlaWdodCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGNsaXAgaGVpZ2h0XG4gICAgICogY29udGFpbmVyLmNsaXBIZWlnaHQoMTAwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuQ29udGFpbmVyKTtcbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xuICAgIHZhciBIQVNfU0hBRE9XID0gJ2hhc1NoYWRvdyc7XG5cbiAgICBmdW5jdGlvbiBfZmlsbEZ1bmMoY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX3N0cm9rZUZ1bmMoY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfZmlsbEZ1bmNIaXQoY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX3N0cm9rZUZ1bmNIaXQoY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9jbGVhckhhc1NoYWRvd0NhY2hlKCkge1xuICAgICAgICB0aGlzLl9jbGVhckNhY2hlKEhBU19TSEFET1cpO1xuICAgIH1cblxuICAgIEtpbmV0aWMuVXRpbC5hZGRNZXRob2RzKEtpbmV0aWMuU2hhcGUsIHtcbiAgICAgICAgX19pbml0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZVR5cGUgPSAnU2hhcGUnO1xuICAgICAgICAgICAgdGhpcy5fZmlsbEZ1bmMgPSBfZmlsbEZ1bmM7XG4gICAgICAgICAgICB0aGlzLl9zdHJva2VGdW5jID0gX3N0cm9rZUZ1bmM7XG4gICAgICAgICAgICB0aGlzLl9maWxsRnVuY0hpdCA9IF9maWxsRnVuY0hpdDtcbiAgICAgICAgICAgIHRoaXMuX3N0cm9rZUZ1bmNIaXQgPSBfc3Ryb2tlRnVuY0hpdDtcblxuICAgICAgICAgICAgLy8gc2V0IGNvbG9yS2V5XG4gICAgICAgICAgICB2YXIgc2hhcGVzID0gS2luZXRpYy5zaGFwZXM7XG4gICAgICAgICAgICB2YXIga2V5O1xuXG4gICAgICAgICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgICAgICAgICAga2V5ID0gS2luZXRpYy5VdGlsLmdldFJhbmRvbUNvbG9yKCk7XG4gICAgICAgICAgICAgICAgaWYoa2V5ICYmICEoIGtleSBpbiBzaGFwZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jb2xvcktleSA9IGtleTtcbiAgICAgICAgICAgIHNoYXBlc1trZXldID0gdGhpcztcblxuICAgICAgICAgICAgLy8gY2FsbCBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgS2luZXRpYy5Ob2RlLmNhbGwodGhpcywgY29uZmlnKTtcblxuICAgICAgICAgICAgdGhpcy5vbignc2hhZG93Q29sb3JDaGFuZ2Uua2luZXRpYyBzaGFkb3dCbHVyQ2hhbmdlLmtpbmV0aWMgc2hhZG93T2Zmc2V0Q2hhbmdlLmtpbmV0aWMgc2hhZG93T3BhY2l0eUNoYW5nZS5raW5ldGljIHNoYWRvd0VuYWJsZWRDaGFuZ2Uua2luZXRpYycsIF9jbGVhckhhc1NoYWRvd0NhY2hlKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFzQ2hpbGRyZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBnZXRDaGlsZHJlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgY2FudmFzIGNvbnRleHQgdGllZCB0byB0aGUgbGF5ZXJcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuQ29udGV4dH1cbiAgICAgICAgICovXG4gICAgICAgIGdldENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TGF5ZXIoKS5nZXRDb250ZXh0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgY2FudmFzIHJlbmRlcmVyIHRpZWQgdG8gdGhlIGxheWVyLiAgTm90ZSB0aGF0IHRoaXMgcmV0dXJucyBhIGNhbnZhcyByZW5kZXJlciwgbm90IGEgY2FudmFzIGVsZW1lbnRcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuQ2FudmFzfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0Q2FudmFzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldExheWVyKCkuZ2V0Q2FudmFzKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiByZXR1cm5zIHdoZXRoZXIgb3Igbm90IGEgc2hhZG93IHdpbGwgYmUgcmVuZGVyZWRcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBoYXNTaGFkb3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldENhY2hlKEhBU19TSEFET1csIHRoaXMuX2hhc1NoYWRvdyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9oYXNTaGFkb3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2hhZG93RW5hYmxlZCgpICYmICh0aGlzLmdldFNoYWRvd09wYWNpdHkoKSAhPT0gMCAmJiAhISh0aGlzLmdldFNoYWRvd0NvbG9yKCkgfHwgdGhpcy5nZXRTaGFkb3dCbHVyKCkgfHwgdGhpcy5nZXRTaGFkb3dPZmZzZXRYKCkgfHwgdGhpcy5nZXRTaGFkb3dPZmZzZXRZKCkpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHNoYXBlIHdpbGwgYmUgZmlsbGVkXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgaGFzRmlsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gISEodGhpcy5nZXRGaWxsKCkgfHwgdGhpcy5nZXRGaWxsUGF0dGVybkltYWdlKCkgfHwgdGhpcy5nZXRGaWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzKCkgfHwgdGhpcy5nZXRGaWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzKCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogcmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgc2hhcGUgd2lsbCBiZSBzdHJva2VkXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgaGFzU3Ryb2tlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAhISh0aGlzLnN0cm9rZSgpIHx8IHRoaXMuc3Ryb2tlUmVkKCkgfHwgdGhpcy5zdHJva2VHcmVlbigpIHx8IHRoaXMuc3Ryb2tlQmx1ZSgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRldGVybWluZXMgaWYgcG9pbnQgaXMgaW4gdGhlIHNoYXBlLCByZWdhcmRsZXNzIGlmIG90aGVyIHNoYXBlcyBhcmUgb24gdG9wIG9mIGl0LiAgTm90ZTogYmVjYXVzZVxuICAgICAgICAgKiAgdGhpcyBtZXRob2QgY2xlYXJzIGEgdGVtcG9yYXJ5IGNhbnZhcyBhbmQgdGhlbiByZWRyYXdzIHRoZSBzaGFwZSwgaXQgcGVyZm9ybXMgdmVyeSBwb29ybHkgaWYgZXhlY3V0ZWQgbWFueSB0aW1lc1xuICAgICAgICAgKiAgY29uc2VjdXRpdmVseS4gIFBsZWFzZSB1c2UgdGhlIHtAbGluayBLaW5ldGljLlN0YWdlI2dldEludGVyc2VjdGlvbn0gbWV0aG9kIGlmIGF0IGFsbCBwb3NzaWJsZVxuICAgICAgICAgKiAgYmVjYXVzZSBpdCBwZXJmb3JtcyBtdWNoIGJldHRlclxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnQgXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb2ludC54XG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb2ludC55XG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgaW50ZXJzZWN0czogZnVuY3Rpb24ocG9pbnQpIHtcbiAgICAgICAgICAgIHZhciBzdGFnZSA9IHRoaXMuZ2V0U3RhZ2UoKSxcbiAgICAgICAgICAgICAgICBidWZmZXJIaXRDYW52YXMgPSBzdGFnZS5idWZmZXJIaXRDYW52YXMsXG4gICAgICAgICAgICAgICAgcDtcblxuICAgICAgICAgICAgYnVmZmVySGl0Q2FudmFzLmdldENvbnRleHQoKS5jbGVhcigpO1xuICAgICAgICAgICAgdGhpcy5kcmF3U2NlbmUoYnVmZmVySGl0Q2FudmFzKTtcbiAgICAgICAgICAgIHAgPSBidWZmZXJIaXRDYW52YXMuY29udGV4dC5nZXRJbWFnZURhdGEoTWF0aC5yb3VuZChwb2ludC54KSwgTWF0aC5yb3VuZChwb2ludC55KSwgMSwgMSkuZGF0YTtcbiAgICAgICAgICAgIHJldHVybiBwWzNdID4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZXh0ZW5kcyBOb2RlLnByb3RvdHlwZS5kZXN0cm95IFxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgZGVsZXRlIEtpbmV0aWMuc2hhcGVzW3RoaXMuY29sb3JLZXldO1xuICAgICAgICB9LFxuICAgICAgICBfdXNlQnVmZmVyQ2FudmFzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5oYXNTaGFkb3coKSB8fCB0aGlzLmdldEFic29sdXRlT3BhY2l0eSgpICE9PSAxKSAmJiB0aGlzLmhhc0ZpbGwoKSAmJiB0aGlzLmhhc1N0cm9rZSgpICYmIHRoaXMuZ2V0U3RhZ2UoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZHJhd1NjZW5lOiBmdW5jdGlvbihjYW4sIHRvcCkge1xuICAgICAgICAgICAgdmFyIGxheWVyID0gdGhpcy5nZXRMYXllcigpLFxuICAgICAgICAgICAgICAgIGNhbnZhcyA9IGNhbiB8fCBsYXllci5nZXRDYW52YXMoKSxcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoKSxcbiAgICAgICAgICAgICAgICBjYWNoZWRDYW52YXMgPSB0aGlzLl9jYWNoZS5jYW52YXMsXG4gICAgICAgICAgICAgICAgZHJhd0Z1bmMgPSB0aGlzLnNjZW5lRnVuYygpLFxuICAgICAgICAgICAgICAgIGhhc1NoYWRvdyA9IHRoaXMuaGFzU2hhZG93KCksXG4gICAgICAgICAgICAgICAgc3RhZ2UsIGJ1ZmZlckNhbnZhcywgYnVmZmVyQ29udGV4dDtcblxuICAgICAgICAgICAgaWYodGhpcy5pc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgICAgIGlmIChjYWNoZWRDYW52YXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZHJhd0NhY2hlZFNjZW5lQ2FudmFzKGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkcmF3RnVuYykge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgYnVmZmVyIGNhbnZhcyBpcyBuZWVkZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VzZUJ1ZmZlckNhbnZhcygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFnZSA9IHRoaXMuZ2V0U3RhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlckNhbnZhcyA9IHN0YWdlLmJ1ZmZlckNhbnZhcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlckNvbnRleHQgPSBidWZmZXJDYW52YXMuZ2V0Q29udGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyQ29udGV4dC5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyQ29udGV4dC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJDb250ZXh0Ll9hcHBseUxpbmVKb2luKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGF5ZXIgbWlnaHQgYmUgdW5kZWZpbmVkIGlmIHdlIGFyZSB1c2luZyBjYWNoZSBiZWZvcmUgYWRkaW5nIHRvIGxheWVyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5fYXBwbHlUcmFuc2Zvcm0odGhpcywgYnVmZmVyQ29udGV4dCwgdG9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSB0aGlzLmdldEFic29sdXRlVHJhbnNmb3JtKHRvcCkuZ2V0TWF0cml4KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC50cmFuc2Zvcm0obVswXSwgbVsxXSwgbVsyXSwgbVszXSwgbVs0XSwgbVs1XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYXdGdW5jLmNhbGwodGhpcywgYnVmZmVyQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJDb250ZXh0LnJlc3RvcmUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc1NoYWRvdyAmJiAhY2FudmFzLmhpdENhbnZhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuX2FwcGx5U2hhZG93KHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGJ1ZmZlckNhbnZhcy5fY2FudmFzLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5fYXBwbHlPcGFjaXR5KHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYnVmZmVyQ2FudmFzLl9jYW52YXMsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGJ1ZmZlciBjYW52YXMgaXMgbm90IG5lZWRlZFxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuX2FwcGx5TGluZUpvaW4odGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsYXllciBtaWdodCBiZSB1bmRlZmluZWQgaWYgd2UgYXJlIHVzaW5nIGNhY2hlIGJlZm9yZSBhZGRpbmcgdG8gbGF5ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLl9hcHBseVRyYW5zZm9ybSh0aGlzLCBjb250ZXh0LCB0b3ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHRoaXMuZ2V0QWJzb2x1dGVUcmFuc2Zvcm0odG9wKS5nZXRNYXRyaXgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnRyYW5zZm9ybShvWzBdLCBvWzFdLCBvWzJdLCBvWzNdLCBvWzRdLCBvWzVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc1NoYWRvdyAmJiAhY2FudmFzLmhpdENhbnZhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuX2FwcGx5U2hhZG93KHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYXdGdW5jLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuX2FwcGx5T3BhY2l0eSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYXdGdW5jLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZHJhd0hpdDogZnVuY3Rpb24oY2FuLCB0b3ApIHtcbiAgICAgICAgICAgIHZhciBsYXllciA9IHRoaXMuZ2V0TGF5ZXIoKSxcbiAgICAgICAgICAgICAgICBjYW52YXMgPSBjYW4gfHwgbGF5ZXIuaGl0Q2FudmFzLFxuICAgICAgICAgICAgICAgIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgpLFxuICAgICAgICAgICAgICAgIGRyYXdGdW5jID0gdGhpcy5oaXRGdW5jKCkgfHwgdGhpcy5zY2VuZUZ1bmMoKSxcbiAgICAgICAgICAgICAgICBjYWNoZWRDYW52YXMgPSB0aGlzLl9jYWNoZS5jYW52YXMsXG4gICAgICAgICAgICAgICAgY2FjaGVkSGl0Q2FudmFzID0gY2FjaGVkQ2FudmFzICYmIGNhY2hlZENhbnZhcy5oaXQ7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuc2hvdWxkRHJhd0hpdChjYW52YXMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyLmNsZWFySGl0Q2FjaGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZEhpdENhbnZhcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kcmF3Q2FjaGVkSGl0Q2FudmFzKGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkcmF3RnVuYykge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5fYXBwbHlMaW5lSm9pbih0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllci5fYXBwbHlUcmFuc2Zvcm0odGhpcywgY29udGV4dCwgdG9wKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtID0gdGhpcy5nZXRBYnNvbHV0ZVRyYW5zZm9ybSh0b3ApLmdldE1hdHJpeCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC50cmFuc2Zvcm0obVswXSwgbVsxXSwgbVsyXSwgbVszXSwgbVs0XSwgbVs1XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgZHJhd0Z1bmMuY2FsbCh0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICogZHJhdyBoaXQgZ3JhcGggdXNpbmcgdGhlIGNhY2hlZCBzY2VuZSBjYW52YXNcbiAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICAgICogQHBhcmFtIHtJbnRlZ2VyfSBhbHBoYVRocmVzaG9sZCBhbHBoYSBjaGFubmVsIHRocmVzaG9sZCB0aGF0IGRldGVybWluZXMgd2hldGhlciBvciBub3RcbiAgICAgICAgKiAgYSBwaXhlbCBzaG91bGQgYmUgZHJhd24gb250byB0aGUgaGl0IGdyYXBoLiAgTXVzdCBiZSBhIHZhbHVlIGJldHdlZW4gMCBhbmQgMjU1LiAgXG4gICAgICAgICogIFRoZSBkZWZhdWx0IGlzIDBcbiAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5TaGFwZX1cbiAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAqIHNoYXBlLmNhY2hlKCk7XG4gICAgICAgICogc2hhcGUuZHJhd0hpdEZyb21DYWNoZSgpO1xuICAgICAgICAqL1xuICAgICAgICBkcmF3SGl0RnJvbUNhY2hlOiBmdW5jdGlvbihhbHBoYVRocmVzaG9sZCkge1xuICAgICAgICAgICAgdmFyIHRocmVzaG9sZCA9IGFscGhhVGhyZXNob2xkIHx8IDAsXG4gICAgICAgICAgICAgICAgY2FjaGVkQ2FudmFzID0gdGhpcy5fY2FjaGUuY2FudmFzLFxuICAgICAgICAgICAgICAgIHNjZW5lQ2FudmFzID0gdGhpcy5fZ2V0Q2FjaGVkU2NlbmVDYW52YXMoKSxcbiAgICAgICAgICAgICAgICBzY2VuZUNvbnRleHQgPSBzY2VuZUNhbnZhcy5nZXRDb250ZXh0KCksXG4gICAgICAgICAgICAgICAgaGl0Q2FudmFzID0gY2FjaGVkQ2FudmFzLmhpdCxcbiAgICAgICAgICAgICAgICBoaXRDb250ZXh0ID0gaGl0Q2FudmFzLmdldENvbnRleHQoKSxcbiAgICAgICAgICAgICAgICB3aWR0aCA9IHNjZW5lQ2FudmFzLmdldFdpZHRoKCksXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gc2NlbmVDYW52YXMuZ2V0SGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgc2NlbmVJbWFnZURhdGEsIHNjZW5lRGF0YSwgaGl0SW1hZ2VEYXRhLCBoaXREYXRhLCBsZW4sIHJnYkNvbG9yS2V5LCBpLCBhbHBoYTtcblxuICAgICAgICAgICAgaGl0Q29udGV4dC5jbGVhcigpO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHNjZW5lSW1hZ2VEYXRhID0gc2NlbmVDb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBzY2VuZURhdGEgPSBzY2VuZUltYWdlRGF0YS5kYXRhO1xuICAgICAgICAgICAgICAgIGhpdEltYWdlRGF0YSA9IGhpdENvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgIGhpdERhdGEgPSBoaXRJbWFnZURhdGEuZGF0YTtcbiAgICAgICAgICAgICAgICBsZW4gPSBzY2VuZURhdGEubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHJnYkNvbG9yS2V5ID0gS2luZXRpYy5VdGlsLl9oZXhUb1JnYih0aGlzLmNvbG9yS2V5KTtcblxuICAgICAgICAgICAgICAgIC8vIHJlcGxhY2Ugbm9uIHRyYW5zcGFyZW50IHBpeGVscyB3aXRoIGNvbG9yIGtleVxuICAgICAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFscGhhID0gc2NlbmVEYXRhW2kgKyAzXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFscGhhID4gdGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaXREYXRhW2ldID0gcmdiQ29sb3JLZXkucjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpdERhdGFbaSArIDFdID0gcmdiQ29sb3JLZXkuZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpdERhdGFbaSArIDJdID0gcmdiQ29sb3JLZXkuYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpdERhdGFbaSArIDNdID0gMjU1O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaGl0Q29udGV4dC5wdXRJbWFnZURhdGEoaGl0SW1hZ2VEYXRhLCAwLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgICBLaW5ldGljLlV0aWwud2FybignVW5hYmxlIHRvIGRyYXcgaGl0IGdyYXBoIGZyb20gY2FjaGVkIHNjZW5lIGNhbnZhcy4gJyArIGUubWVzc2FnZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLlNoYXBlLCBLaW5ldGljLk5vZGUpO1xuXG4gICAgLy8gYWRkIGdldHRlcnMgYW5kIHNldHRlcnNcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdzdHJva2UnKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgc3Ryb2tlIGNvbG9yXG4gICAgICogQG5hbWUgc3Ryb2tlXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb2xvclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc3Ryb2tlIGNvbG9yXG4gICAgICogdmFyIHN0cm9rZSA9IHNoYXBlLnN0cm9rZSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHN0cm9rZSBjb2xvciB3aXRoIGNvbG9yIHN0cmluZ1xuICAgICAqIHNoYXBlLnN0cm9rZSgnZ3JlZW4nKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzdHJva2UgY29sb3Igd2l0aCBoZXhcbiAgICAgKiBzaGFwZS5zdHJva2UoJyMwMGZmMDAnKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzdHJva2UgY29sb3Igd2l0aCByZ2JcbiAgICAgKiBzaGFwZS5zdHJva2UoJ3JnYigwLDI1NSwwKScpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHN0cm9rZSBjb2xvciB3aXRoIHJnYmEgYW5kIG1ha2UgaXQgNTAlIG9wYXF1ZVxuICAgICAqIHNoYXBlLnN0cm9rZSgncmdiYSgwLDI1NSwwLDAuNScpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnc3Ryb2tlUmVkJywgMCwgS2luZXRpYy5WYWxpZGF0b3JzLlJHQkNvbXBvbmVudCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHN0cm9rZSByZWQgY29tcG9uZW50XG4gICAgICogQG5hbWUgc3Ryb2tlUmVkXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gcmVkXG4gICAgICogQHJldHVybnMge0ludGVnZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc3Ryb2tlIHJlZCBjb21wb25lbnRcbiAgICAgKiB2YXIgc3Ryb2tlUmVkID0gc2hhcGUuc3Ryb2tlUmVkKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc3Ryb2tlIHJlZCBjb21wb25lbnRcbiAgICAgKiBzaGFwZS5zdHJva2VSZWQoMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdzdHJva2VHcmVlbicsIDAsIEtpbmV0aWMuVmFsaWRhdG9ycy5SR0JDb21wb25lbnQpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBzdHJva2UgZ3JlZW4gY29tcG9uZW50XG4gICAgICogQG5hbWUgc3Ryb2tlR3JlZW5cbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBncmVlblxuICAgICAqIEByZXR1cm5zIHtJbnRlZ2VyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHN0cm9rZSBncmVlbiBjb21wb25lbnRcbiAgICAgKiB2YXIgc3Ryb2tlR3JlZW4gPSBzaGFwZS5zdHJva2VHcmVlbigpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHN0cm9rZSBncmVlbiBjb21wb25lbnRcbiAgICAgKiBzaGFwZS5zdHJva2VHcmVlbigyNTUpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnc3Ryb2tlQmx1ZScsIDAsIEtpbmV0aWMuVmFsaWRhdG9ycy5SR0JDb21wb25lbnQpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBzdHJva2UgYmx1ZSBjb21wb25lbnRcbiAgICAgKiBAbmFtZSBzdHJva2VCbHVlXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gYmx1ZVxuICAgICAqIEByZXR1cm5zIHtJbnRlZ2VyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHN0cm9rZSBibHVlIGNvbXBvbmVudFxuICAgICAqIHZhciBzdHJva2VCbHVlID0gc2hhcGUuc3Ryb2tlQmx1ZSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHN0cm9rZSBibHVlIGNvbXBvbmVudFxuICAgICAqIHNoYXBlLnN0cm9rZUJsdWUoMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdzdHJva2VBbHBoYScsIDEsIEtpbmV0aWMuVmFsaWRhdG9ycy5hbHBoYUNvbXBvbmVudCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHN0cm9rZSBhbHBoYSBjb21wb25lbnQuICBBbHBoYSBpcyBhIHJlYWwgbnVtYmVyIGJldHdlZW4gMCBhbmQgMS4gIFRoZSBkZWZhdWx0XG4gICAgICogIGlzIDEuXG4gICAgICogQG5hbWUgc3Ryb2tlQWxwaGFcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGFscGhhXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBzdHJva2UgYWxwaGEgY29tcG9uZW50XG4gICAgICogdmFyIHN0cm9rZUFscGhhID0gc2hhcGUuc3Ryb2tlQWxwaGEoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzdHJva2UgYWxwaGEgY29tcG9uZW50XG4gICAgICogc2hhcGUuc3Ryb2tlQWxwaGEoMC41KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ3N0cm9rZVdpZHRoJywgMik7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHN0cm9rZSB3aWR0aFxuICAgICAqIEBuYW1lIHN0cm9rZVdpZHRoXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdHJva2VXaWR0aFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc3Ryb2tlIHdpZHRoXG4gICAgICogdmFyIHN0cm9rZVdpZHRoID0gc2hhcGUuc3Ryb2tlV2lkdGgoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzdHJva2Ugd2lkdGhcbiAgICAgKiBzaGFwZS5zdHJva2VXaWR0aCgpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnbGluZUpvaW4nKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgbGluZSBqb2luLiAgQ2FuIGJlIG1pdGVyLCByb3VuZCwgb3IgYmV2ZWwuICBUaGVcbiAgICAgKiAgZGVmYXVsdCBpcyBtaXRlclxuICAgICAqIEBuYW1lIGxpbmVKb2luXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBsaW5lSm9pblxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgbGluZSBqb2luXG4gICAgICogdmFyIGxpbmVKb2luID0gc2hhcGUubGluZUpvaW4oKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBsaW5lIGpvaW5cbiAgICAgKiBzaGFwZS5saW5lSm9pbigncm91bmQnKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2xpbmVDYXAnKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgbGluZSBjYXAuICBDYW4gYmUgYnV0dCwgcm91bmQsIG9yIHNxdWFyZVxuICAgICAqIEBuYW1lIGxpbmVDYXBcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGxpbmVDYXBcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGxpbmUgY2FwXG4gICAgICogdmFyIGxpbmVDYXAgPSBzaGFwZS5saW5lQ2FwKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgbGluZSBjYXBcbiAgICAgKiBzaGFwZS5saW5lQ2FwKCdyb3VuZCcpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnc2NlbmVGdW5jJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHNjZW5lIGRyYXcgZnVuY3Rpb25cbiAgICAgKiBAbmFtZSBzY2VuZUZ1bmNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhd0Z1bmMgZHJhd2luZyBmdW5jdGlvblxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBzY2VuZSBkcmF3IGZ1bmN0aW9uXG4gICAgICogdmFyIHNjZW5lRnVuYyA9IHNoYXBlLnNjZW5lRnVuYygpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHNjZW5lIGRyYXcgZnVuY3Rpb25cbiAgICAgKiBzaGFwZS5zY2VuZUZ1bmMoZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAqICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgKiAgIGNvbnRleHQucmVjdCgwLCAwLCB0aGlzLndpZHRoKCksIHRoaXMuaGVpZ2h0KCkpO1xuICAgICAqICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgKiAgIGNvbnRleHQuZmlsbFN0cm9rZVNoYXBlKHRoaXMpO1xuICAgICAqIH0pO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnaGl0RnVuYycpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBoaXQgZHJhdyBmdW5jdGlvblxuICAgICAqIEBuYW1lIGhpdEZ1bmNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhd0Z1bmMgZHJhd2luZyBmdW5jdGlvblxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBoaXQgZHJhdyBmdW5jdGlvblxuICAgICAqIHZhciBoaXRGdW5jID0gc2hhcGUuaGl0RnVuYygpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGhpdCBkcmF3IGZ1bmN0aW9uXG4gICAgICogc2hhcGUuaGl0RnVuYyhmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICogICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAqICAgY29udGV4dC5yZWN0KDAsIDAsIHRoaXMud2lkdGgoKSwgdGhpcy5oZWlnaHQoKSk7XG4gICAgICogICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAqICAgY29udGV4dC5maWxsU3Ryb2tlU2hhcGUodGhpcyk7XG4gICAgICogfSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdkYXNoJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGRhc2ggYXJyYXkgZm9yIHN0cm9rZS5cbiAgICAgKiBAbmFtZSBkYXNoXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhc2hcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgLy8gYXBwbHkgZGFzaGVkIHN0cm9rZSB0aGF0IGlzIDEwcHggbG9uZyBhbmQgNSBwaXhlbHMgYXBhcnRcbiAgICAgKiAgbGluZS5kYXNoKFsxMCwgNV0pO1xuICAgICAqICBcbiAgICAgKiAgLy8gYXBwbHkgZGFzaGVkIHN0cm9rZSB0aGF0IGlzIG1hZGUgdXAgb2YgYWx0ZXJuYXRpbmcgZGFzaGVkIFxuICAgICAqICAvLyBsaW5lcyB0aGF0IGFyZSAxMHB4IGxvbmcgYW5kIDIwcHggYXBhcnQsIGFuZCBkb3RzIHRoYXQgaGF2ZSBcbiAgICAgKiAgLy8gYSByYWRpdXMgb2YgNXB4IGFuZCBhcmUgMjBweCBhcGFydFxuICAgICAqICBsaW5lLmRhc2goWzEwLCAyMCwgMC4wMDEsIDIwXSk7XG4gICAgICovXG5cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ3NoYWRvd0NvbG9yJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHNoYWRvdyBjb2xvclxuICAgICAqIEBuYW1lIHNoYWRvd0NvbG9yXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb2xvclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc2hhZG93IGNvbG9yXG4gICAgICogdmFyIHNoYWRvdyA9IHNoYXBlLnNoYWRvd0NvbG9yKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc2hhZG93IGNvbG9yIHdpdGggY29sb3Igc3RyaW5nXG4gICAgICogc2hhcGUuc2hhZG93Q29sb3IoJ2dyZWVuJyk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc2hhZG93IGNvbG9yIHdpdGggaGV4XG4gICAgICogc2hhcGUuc2hhZG93Q29sb3IoJyMwMGZmMDAnKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzaGFkb3cgY29sb3Igd2l0aCByZ2JcbiAgICAgKiBzaGFwZS5zaGFkb3dDb2xvcigncmdiKDAsMjU1LDApJyk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc2hhZG93IGNvbG9yIHdpdGggcmdiYSBhbmQgbWFrZSBpdCA1MCUgb3BhcXVlXG4gICAgICogc2hhcGUuc2hhZG93Q29sb3IoJ3JnYmEoMCwyNTUsMCwwLjUnKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ3NoYWRvd1JlZCcsIDAsIEtpbmV0aWMuVmFsaWRhdG9ycy5SR0JDb21wb25lbnQpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBzaGFkb3cgcmVkIGNvbXBvbmVudFxuICAgICAqIEBuYW1lIHNoYWRvd1JlZFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IHJlZFxuICAgICAqIEByZXR1cm5zIHtJbnRlZ2VyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHNoYWRvdyByZWQgY29tcG9uZW50XG4gICAgICogdmFyIHNoYWRvd1JlZCA9IHNoYXBlLnNoYWRvd1JlZCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHNoYWRvdyByZWQgY29tcG9uZW50XG4gICAgICogc2hhcGUuc2hhZG93UmVkKDApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnc2hhZG93R3JlZW4nLCAwLCBLaW5ldGljLlZhbGlkYXRvcnMuUkdCQ29tcG9uZW50KTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgc2hhZG93IGdyZWVuIGNvbXBvbmVudFxuICAgICAqIEBuYW1lIHNoYWRvd0dyZWVuXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gZ3JlZW5cbiAgICAgKiBAcmV0dXJucyB7SW50ZWdlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBzaGFkb3cgZ3JlZW4gY29tcG9uZW50XG4gICAgICogdmFyIHNoYWRvd0dyZWVuID0gc2hhcGUuc2hhZG93R3JlZW4oKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzaGFkb3cgZ3JlZW4gY29tcG9uZW50XG4gICAgICogc2hhcGUuc2hhZG93R3JlZW4oMjU1KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ3NoYWRvd0JsdWUnLCAwLCBLaW5ldGljLlZhbGlkYXRvcnMuUkdCQ29tcG9uZW50KTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgc2hhZG93IGJsdWUgY29tcG9uZW50XG4gICAgICogQG5hbWUgc2hhZG93Qmx1ZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGJsdWVcbiAgICAgKiBAcmV0dXJucyB7SW50ZWdlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBzaGFkb3cgYmx1ZSBjb21wb25lbnRcbiAgICAgKiB2YXIgc2hhZG93Qmx1ZSA9IHNoYXBlLnNoYWRvd0JsdWUoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzaGFkb3cgYmx1ZSBjb21wb25lbnRcbiAgICAgKiBzaGFwZS5zaGFkb3dCbHVlKDApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnc2hhZG93QWxwaGEnLCAxLCBLaW5ldGljLlZhbGlkYXRvcnMuYWxwaGFDb21wb25lbnQpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBzaGFkb3cgYWxwaGEgY29tcG9uZW50LiAgQWxwaGEgaXMgYSByZWFsIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEuICBUaGUgZGVmYXVsdFxuICAgICAqICBpcyAxLlxuICAgICAqIEBuYW1lIHNoYWRvd0FscGhhXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhbHBoYVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc2hhZG93IGFscGhhIGNvbXBvbmVudFxuICAgICAqIHZhciBzaGFkb3dBbHBoYSA9IHNoYXBlLnNoYWRvd0FscGhhKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc2hhZG93IGFscGhhIGNvbXBvbmVudFxuICAgICAqIHNoYXBlLnNoYWRvd0FscGhhKDAuNSk7XG4gICAgICovXG4gICAgIFxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ3NoYWRvd0JsdXInKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgc2hhZG93IGJsdXJcbiAgICAgKiBAbmFtZSBzaGFkb3dCbHVyXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBibHVyXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBzaGFkb3cgYmx1clxuICAgICAqIHZhciBzaGFkb3dCbHVyID0gc2hhcGUuc2hhZG93Qmx1cigpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHNoYWRvdyBibHVyXG4gICAgICogc2hhcGUuc2hhZG93Qmx1cigxMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdzaGFkb3dPcGFjaXR5Jyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHNoYWRvdyBvcGFjaXR5LiAgbXVzdCBiZSBhIHZhbHVlIGJldHdlZW4gMCBhbmQgMVxuICAgICAqIEBuYW1lIHNoYWRvd09wYWNpdHlcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wYWNpdHlcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHNoYWRvdyBvcGFjaXR5XG4gICAgICogdmFyIHNoYWRvd09wYWNpdHkgPSBzaGFwZS5zaGFkb3dPcGFjaXR5KCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc2hhZG93IG9wYWNpdHlcbiAgICAgKiBzaGFwZS5zaGFkb3dPcGFjaXR5KDAuNSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkQ29tcG9uZW50c0dldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnc2hhZG93T2Zmc2V0JywgWyd4JywgJ3knXSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHNoYWRvdyBvZmZzZXRcbiAgICAgKiBAbmFtZSBzaGFkb3dPZmZzZXRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9mZnNldFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQueFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQueVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc2hhZG93IG9mZnNldFxuICAgICAqIHZhciBzaGFkb3dPZmZzZXQgPSBzaGFwZS5zaGFkb3dPZmZzZXQoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzaGFkb3cgb2Zmc2V0XG4gICAgICogc2hhcGUuc2hhZG93T2Zmc2V0KHtcbiAgICAgKiAgIHg6IDIwXG4gICAgICogICB5OiAxMFxuICAgICAqIH0pO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnc2hhZG93T2Zmc2V0WCcsIDApO1xuXG4gICAgIC8qKlxuICAgICAqIGdldC9zZXQgc2hhZG93IG9mZnNldCB4XG4gICAgICogQG5hbWUgc2hhZG93T2Zmc2V0WFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc2hhZG93IG9mZnNldCB4XG4gICAgICogdmFyIHNoYWRvd09mZnNldFggPSBzaGFwZS5zaGFkb3dPZmZzZXRYKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc2hhZG93IG9mZnNldCB4XG4gICAgICogc2hhcGUuc2hhZG93T2Zmc2V0WCg1KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ3NoYWRvd09mZnNldFknLCAwKTtcblxuICAgICAvKipcbiAgICAgKiBnZXQvc2V0IHNoYWRvdyBvZmZzZXQgeVxuICAgICAqIEBuYW1lIHNoYWRvd09mZnNldFlcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHNoYWRvdyBvZmZzZXQgeVxuICAgICAqIHZhciBzaGFkb3dPZmZzZXRZID0gc2hhcGUuc2hhZG93T2Zmc2V0WSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHNoYWRvdyBvZmZzZXQgeVxuICAgICAqIHNoYXBlLnNoYWRvd09mZnNldFkoNSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUGF0dGVybkltYWdlJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcGF0dGVybiBpbWFnZVxuICAgICAqIEBuYW1lIGZpbGxQYXR0ZXJuSW1hZ2VcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtJbWFnZX0gaW1hZ2Ugb2JqZWN0XG4gICAgICogQHJldHVybnMge0ltYWdlfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgcGF0dGVybiBpbWFnZVxuICAgICAqIHZhciBmaWxsUGF0dGVybkltYWdlID0gc2hhcGUuZmlsbFBhdHRlcm5JbWFnZSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgcGF0dGVybiBpbWFnZVxuICAgICAqIHZhciBpbWFnZU9iaiA9IG5ldyBJbWFnZSgpO1xuICAgICAqIGltYWdlT2JqLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAqICAgc2hhcGUuZmlsbFBhdHRlcm5JbWFnZShpbWFnZU9iaik7XG4gICAgICogfTtcbiAgICAgKiBpbWFnZU9iai5zcmMgPSAncGF0aC90by9pbWFnZS9qcGcnO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbCcpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIGNvbG9yXG4gICAgICogQG5hbWUgZmlsbFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29sb3JcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgY29sb3JcbiAgICAgKiB2YXIgZmlsbCA9IHNoYXBlLmZpbGwoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIGNvbG9yIHdpdGggY29sb3Igc3RyaW5nXG4gICAgICogc2hhcGUuZmlsbCgnZ3JlZW4nKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIGNvbG9yIHdpdGggaGV4XG4gICAgICogc2hhcGUuZmlsbCgnIzAwZmYwMCcpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgY29sb3Igd2l0aCByZ2JcbiAgICAgKiBzaGFwZS5maWxsKCdyZ2IoMCwyNTUsMCknKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIGNvbG9yIHdpdGggcmdiYSBhbmQgbWFrZSBpdCA1MCUgb3BhcXVlXG4gICAgICogc2hhcGUuZmlsbCgncmdiYSgwLDI1NSwwLDAuNScpO1xuICAgICAqXG4gICAgICogLy8gc2hhcGUgd2l0aG91dCBmaWxsXG4gICAgICogc2hhcGUuZmlsbChudWxsKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxSZWQnLCAwLCBLaW5ldGljLlZhbGlkYXRvcnMuUkdCQ29tcG9uZW50KTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCByZWQgY29tcG9uZW50XG4gICAgICogQG5hbWUgZmlsbFJlZFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IHJlZFxuICAgICAqIEByZXR1cm5zIHtJbnRlZ2VyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgcmVkIGNvbXBvbmVudFxuICAgICAqIHZhciBmaWxsUmVkID0gc2hhcGUuZmlsbFJlZCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgcmVkIGNvbXBvbmVudFxuICAgICAqIHNoYXBlLmZpbGxSZWQoMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsR3JlZW4nLCAwLCBLaW5ldGljLlZhbGlkYXRvcnMuUkdCQ29tcG9uZW50KTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBncmVlbiBjb21wb25lbnRcbiAgICAgKiBAbmFtZSBmaWxsR3JlZW5cbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBncmVlblxuICAgICAqIEByZXR1cm5zIHtJbnRlZ2VyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgZ3JlZW4gY29tcG9uZW50XG4gICAgICogdmFyIGZpbGxHcmVlbiA9IHNoYXBlLmZpbGxHcmVlbigpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgZ3JlZW4gY29tcG9uZW50XG4gICAgICogc2hhcGUuZmlsbEdyZWVuKDI1NSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsQmx1ZScsIDAsIEtpbmV0aWMuVmFsaWRhdG9ycy5SR0JDb21wb25lbnQpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIGJsdWUgY29tcG9uZW50XG4gICAgICogQG5hbWUgZmlsbEJsdWVcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBibHVlXG4gICAgICogQHJldHVybnMge0ludGVnZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCBibHVlIGNvbXBvbmVudFxuICAgICAqIHZhciBmaWxsQmx1ZSA9IHNoYXBlLmZpbGxCbHVlKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCBibHVlIGNvbXBvbmVudFxuICAgICAqIHNoYXBlLmZpbGxCbHVlKDApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbEFscGhhJywgMSwgS2luZXRpYy5WYWxpZGF0b3JzLmFscGhhQ29tcG9uZW50KTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBhbHBoYSBjb21wb25lbnQuICBBbHBoYSBpcyBhIHJlYWwgbnVtYmVyIGJldHdlZW4gMCBhbmQgMS4gIFRoZSBkZWZhdWx0XG4gICAgICogIGlzIDEuXG4gICAgICogQG5hbWUgZmlsbEFscGhhXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhbHBoYVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCBhbHBoYSBjb21wb25lbnRcbiAgICAgKiB2YXIgZmlsbEFscGhhID0gc2hhcGUuZmlsbEFscGhhKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCBhbHBoYSBjb21wb25lbnRcbiAgICAgKiBzaGFwZS5maWxsQWxwaGEoMC41KTtcbiAgICAgKi9cblxuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbFBhdHRlcm5YJywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcGF0dGVybiB4XG4gICAgICogQG5hbWUgZmlsbFBhdHRlcm5YXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHBhdHRlcm4geFxuICAgICAqIHZhciBmaWxsUGF0dGVyblggPSBzaGFwZS5maWxsUGF0dGVyblgoKTtcbiAgICAgKiBcbiAgICAgKiAvLyBzZXQgZmlsbCBwYXR0ZXJuIHhcbiAgICAgKiBzaGFwZS5maWxsUGF0dGVyblgoMjApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbFBhdHRlcm5ZJywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcGF0dGVybiB5XG4gICAgICogQG5hbWUgZmlsbFBhdHRlcm5ZXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHBhdHRlcm4geVxuICAgICAqIHZhciBmaWxsUGF0dGVyblkgPSBzaGFwZS5maWxsUGF0dGVyblkoKTtcbiAgICAgKiBcbiAgICAgKiAvLyBzZXQgZmlsbCBwYXR0ZXJuIHlcbiAgICAgKiBzaGFwZS5maWxsUGF0dGVyblkoMjApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbExpbmVhckdyYWRpZW50Q29sb3JTdG9wcycpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIGxpbmVhciBncmFkaWVudCBjb2xvciBzdG9wc1xuICAgICAqIEBuYW1lIGZpbGxMaW5lYXJHcmFkaWVudENvbG9yU3RvcHNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtBcnJheX0gY29sb3JTdG9wc1xuICAgICAqIEByZXR1cm5zIHtBcnJheX0gY29sb3JTdG9wc1xuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IGNvbG9yIHN0b3BzXG4gICAgICogdmFyIGNvbG9yU3RvcHMgPSBzaGFwZS5maWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzKCk7XG4gICAgICpcbiAgICAgKiAvLyBjcmVhdGUgYSBsaW5lYXIgZ3JhZGllbnQgdGhhdCBzdGFydHMgd2l0aCByZWQsIGNoYW5nZXMgdG8gYmx1ZSBcbiAgICAgKiAvLyBoYWxmd2F5IHRocm91Z2gsIGFuZCB0aGVuIGNoYW5nZXMgdG8gZ3JlZW5cbiAgICAgKiBzaGFwZS5maWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzKDAsICdyZWQnLCAwLjUsICdibHVlJywgMSwgJ2dyZWVuJyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUmFkaWFsR3JhZGllbnRTdGFydFJhZGl1cycsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIHJhZGlhbCBncmFkaWVudCBzdGFydCByYWRpdXNcbiAgICAgKiBAbmFtZSBmaWxsUmFkaWFsR3JhZGllbnRTdGFydFJhZGl1c1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkaXVzXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCByYWRpYWwgZ3JhZGllbnQgc3RhcnQgcmFkaXVzXG4gICAgICogdmFyIHN0YXJ0UmFkaXVzID0gc2hhcGUuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXMoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCByYWRpYWwgZ3JhZGllbnQgc3RhcnQgcmFkaXVzXG4gICAgICogc2hhcGUuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXMoMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXMnLCAwKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCByYWRpYWwgZ3JhZGllbnQgZW5kIHJhZGl1c1xuICAgICAqIEBuYW1lIGZpbGxSYWRpYWxHcmFkaWVudEVuZFJhZGl1c1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkaXVzXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCByYWRpYWwgZ3JhZGllbnQgZW5kIHJhZGl1c1xuICAgICAqIHZhciBlbmRSYWRpdXMgPSBzaGFwZS5maWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXMoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCByYWRpYWwgZ3JhZGllbnQgZW5kIHJhZGl1c1xuICAgICAqIHNoYXBlLmZpbGxSYWRpYWxHcmFkaWVudEVuZFJhZGl1cygxMDApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbFJhZGlhbEdyYWRpZW50Q29sb3JTdG9wcycpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIHJhZGlhbCBncmFkaWVudCBjb2xvciBzdG9wc1xuICAgICAqIEBuYW1lIGZpbGxSYWRpYWxHcmFkaWVudENvbG9yU3RvcHNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbG9yU3RvcHNcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCByYWRpYWwgZ3JhZGllbnQgY29sb3Igc3RvcHNcbiAgICAgKiB2YXIgY29sb3JTdG9wcyA9IHNoYXBlLmZpbGxSYWRpYWxHcmFkaWVudENvbG9yU3RvcHMoKTtcbiAgICAgKlxuICAgICAqIC8vIGNyZWF0ZSBhIHJhZGlhbCBncmFkaWVudCB0aGF0IHN0YXJ0cyB3aXRoIHJlZCwgY2hhbmdlcyB0byBibHVlIFxuICAgICAqIC8vIGhhbGZ3YXkgdGhyb3VnaCwgYW5kIHRoZW4gY2hhbmdlcyB0byBncmVlblxuICAgICAqIHNoYXBlLmZpbGxSYWRpYWxHcmFkaWVudENvbG9yU3RvcHMoMCwgJ3JlZCcsIDAuNSwgJ2JsdWUnLCAxLCAnZ3JlZW4nKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxQYXR0ZXJuUmVwZWF0JywgJ3JlcGVhdCcpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIHBhdHRlcm4gcmVwZWF0LiAgQ2FuIGJlICdyZXBlYXQnLCAncmVwZWF0LXgnLCAncmVwZWF0LXknLCBvciAnbm8tcmVwZWF0Jy4gIFRoZSBkZWZhdWx0IGlzICdyZXBlYXQnXG4gICAgICogQG5hbWUgZmlsbFBhdHRlcm5SZXBlYXRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcGVhdFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCBwYXR0ZXJuIHJlcGVhdFxuICAgICAqIHZhciByZXBlYXQgPSBzaGFwZS5maWxsUGF0dGVyblJlcGVhdCgpO1xuICAgICAqXG4gICAgICogLy8gcmVwZWF0IHBhdHRlcm4gaW4geCBkaXJlY3Rpb24gb25seVxuICAgICAqIHNoYXBlLmZpbGxQYXR0ZXJuUmVwZWF0KCdyZXBlYXQteCcpO1xuICAgICAqXG4gICAgICogLy8gZG8gbm90IHJlcGVhdCB0aGUgcGF0dGVyblxuICAgICAqIHNoYXBlLmZpbGxQYXR0ZXJuUmVwZWF0KCdubyByZXBlYXQnKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxFbmFibGVkJywgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgZW5hYmxlZCBmbGFnXG4gICAgICogQG5hbWUgZmlsbEVuYWJsZWRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBlbmFibGVkXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCBlbmFibGVkIGZsYWdcbiAgICAgKiB2YXIgZmlsbEVuYWJsZWQgPSBzaGFwZS5maWxsRW5hYmxlZCgpO1xuICAgICAqXG4gICAgICogLy8gZGlzYWJsZSBmaWxsXG4gICAgICogc2hhcGUuZmlsbEVuYWJsZWQoZmFsc2UpO1xuICAgICAqXG4gICAgICogLy8gZW5hYmxlIGZpbGxcbiAgICAgKiBzaGFwZS5maWxsRW5hYmxlZCh0cnVlKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ3N0cm9rZUVuYWJsZWQnLCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgc3Ryb2tlIGVuYWJsZWQgZmxhZ1xuICAgICAqIEBuYW1lIHN0cm9rZUVuYWJsZWRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBlbmFibGVkXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc3Ryb2tlIGVuYWJsZWQgZmxhZ1xuICAgICAqIHZhciBzdHJva2VFbmFibGVkID0gc2hhcGUuc3Ryb2tlRW5hYmxlZCgpO1xuICAgICAqXG4gICAgICogLy8gZGlzYWJsZSBzdHJva2VcbiAgICAgKiBzaGFwZS5zdHJva2VFbmFibGVkKGZhbHNlKTtcbiAgICAgKlxuICAgICAqIC8vIGVuYWJsZSBzdHJva2VcbiAgICAgKiBzaGFwZS5zdHJva2VFbmFibGVkKHRydWUpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnc2hhZG93RW5hYmxlZCcsIHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBzaGFkb3cgZW5hYmxlZCBmbGFnXG4gICAgICogQG5hbWUgc2hhZG93RW5hYmxlZFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuYWJsZWRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBzaGFkb3cgZW5hYmxlZCBmbGFnXG4gICAgICogdmFyIHNoYWRvd0VuYWJsZWQgPSBzaGFwZS5zaGFkb3dFbmFibGVkKCk7XG4gICAgICpcbiAgICAgKiAvLyBkaXNhYmxlIHNoYWRvd1xuICAgICAqIHNoYXBlLnNoYWRvd0VuYWJsZWQoZmFsc2UpO1xuICAgICAqXG4gICAgICogLy8gZW5hYmxlIHNoYWRvd1xuICAgICAqIHNoYXBlLnNoYWRvd0VuYWJsZWQodHJ1ZSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdkYXNoRW5hYmxlZCcsIHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBkYXNoIGVuYWJsZWQgZmxhZ1xuICAgICAqIEBuYW1lIGRhc2hFbmFibGVkXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5hYmxlZFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGRhc2ggZW5hYmxlZCBmbGFnXG4gICAgICogdmFyIGRhc2hFbmFibGVkID0gc2hhcGUuZGFzaEVuYWJsZWQoKTtcbiAgICAgKlxuICAgICAqIC8vIGRpc2FibGUgZGFzaFxuICAgICAqIHNoYXBlLmRhc2hFbmFibGVkKGZhbHNlKTtcbiAgICAgKlxuICAgICAqIC8vIGVuYWJsZSBkYXNoXG4gICAgICogc2hhcGUuZGFzaEVuYWJsZWQodHJ1ZSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdzdHJva2VTY2FsZUVuYWJsZWQnLCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgc3Ryb2tlU2NhbGUgZW5hYmxlZCBmbGFnXG4gICAgICogQG5hbWUgc3Ryb2tlU2NhbGVFbmFibGVkXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5hYmxlZFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHN0cm9rZSBzY2FsZSBlbmFibGVkIGZsYWdcbiAgICAgKiB2YXIgc3Ryb2tlU2NhbGVFbmFibGVkID0gc2hhcGUuc3Ryb2tlU2NhbGVFbmFibGVkKCk7XG4gICAgICpcbiAgICAgKiAvLyBkaXNhYmxlIHN0cm9rZSBzY2FsZVxuICAgICAqIHNoYXBlLnN0cm9rZVNjYWxlRW5hYmxlZChmYWxzZSk7XG4gICAgICpcbiAgICAgKiAvLyBlbmFibGUgc3Ryb2tlIHNjYWxlXG4gICAgICogc2hhcGUuc3Ryb2tlU2NhbGVFbmFibGVkKHRydWUpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbFByaW9yaXR5JywgJ2NvbG9yJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcHJpb3JpdHkuICBjYW4gYmUgY29sb3IsIHBhdHRlcm4sIGxpbmVhci1ncmFkaWVudCwgb3IgcmFkaWFsLWdyYWRpZW50LiAgVGhlIGRlZmF1bHQgaXMgY29sb3IuXG4gICAgICogICBUaGlzIGlzIGhhbmR5IGlmIHlvdSB3YW50IHRvIHRvZ2dsZSBiZXR3ZWVuIGRpZmZlcmVudCBmaWxsIHR5cGVzLlxuICAgICAqIEBuYW1lIGZpbGxQcmlvcml0eVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJpb3JpdHlcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgcHJpb3JpdHlcbiAgICAgKiB2YXIgZmlsbFByaW9yaXR5ID0gc2hhcGUuZmlsbFByaW9yaXR5KCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCBwcmlvcml0eVxuICAgICAqIHNoYXBlLmZpbGxQcmlvcml0eSgnbGluZWFyLWdyYWRpZW50Jyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkQ29tcG9uZW50c0dldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbFBhdHRlcm5PZmZzZXQnLCBbJ3gnLCAneSddKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBwYXR0ZXJuIG9mZnNldFxuICAgICAqIEBuYW1lIGZpbGxQYXR0ZXJuT2Zmc2V0XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvZmZzZXRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0LnhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0LnlcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgcGF0dGVybiBvZmZzZXRcbiAgICAgKiB2YXIgcGF0dGVybk9mZnNldCA9IHNoYXBlLmZpbGxQYXR0ZXJuT2Zmc2V0KCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCBwYXR0ZXJuIG9mZnNldFxuICAgICAqIHNoYXBlLmZpbGxQYXR0ZXJuT2Zmc2V0KHtcbiAgICAgKiAgIHg6IDIwXG4gICAgICogICB5OiAxMFxuICAgICAqIH0pO1xuICAgICAqL1xuXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUGF0dGVybk9mZnNldFgnLCAwKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcGF0dGVybiBvZmZzZXQgeFxuICAgICAqIEBuYW1lIGZpbGxQYXR0ZXJuT2Zmc2V0WFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCBwYXR0ZXJuIG9mZnNldCB4XG4gICAgICogdmFyIHBhdHRlcm5PZmZzZXRYID0gc2hhcGUuZmlsbFBhdHRlcm5PZmZzZXRYKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCBwYXR0ZXJuIG9mZnNldCB4XG4gICAgICogc2hhcGUuZmlsbFBhdHRlcm5PZmZzZXRYKDIwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxQYXR0ZXJuT2Zmc2V0WScsIDApO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBwYXR0ZXJuIG9mZnNldCB5XG4gICAgICogQG5hbWUgZmlsbFBhdHRlcm5PZmZzZXRZXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHBhdHRlcm4gb2Zmc2V0IHlcbiAgICAgKiB2YXIgcGF0dGVybk9mZnNldFkgPSBzaGFwZS5maWxsUGF0dGVybk9mZnNldFkoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIHBhdHRlcm4gb2Zmc2V0IHlcbiAgICAgKiBzaGFwZS5maWxsUGF0dGVybk9mZnNldFkoMTApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZENvbXBvbmVudHNHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxQYXR0ZXJuU2NhbGUnLCBbJ3gnLCAneSddKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBwYXR0ZXJuIHNjYWxlXG4gICAgICogQG5hbWUgZmlsbFBhdHRlcm5TY2FsZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc2NhbGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUueFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZS55XG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHBhdHRlcm4gc2NhbGVcbiAgICAgKiB2YXIgcGF0dGVyblNjYWxlID0gc2hhcGUuZmlsbFBhdHRlcm5TY2FsZSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgcGF0dGVybiBzY2FsZVxuICAgICAqIHNoYXBlLmZpbGxQYXR0ZXJuU2NhbGUoe1xuICAgICAqICAgeDogMlxuICAgICAqICAgeTogMlxuICAgICAqIH0pO1xuICAgICAqL1xuXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUGF0dGVyblNjYWxlWCcsIDEpO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBwYXR0ZXJuIHNjYWxlIHhcbiAgICAgKiBAbmFtZSBmaWxsUGF0dGVyblNjYWxlWFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCBwYXR0ZXJuIHNjYWxlIHhcbiAgICAgKiB2YXIgcGF0dGVyblNjYWxlWCA9IHNoYXBlLmZpbGxQYXR0ZXJuU2NhbGVYKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCBwYXR0ZXJuIHNjYWxlIHhcbiAgICAgKiBzaGFwZS5maWxsUGF0dGVyblNjYWxlWCgyKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxQYXR0ZXJuU2NhbGVZJywgMSk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIHBhdHRlcm4gc2NhbGUgeVxuICAgICAqIEBuYW1lIGZpbGxQYXR0ZXJuU2NhbGVZXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHBhdHRlcm4gc2NhbGUgeVxuICAgICAqIHZhciBwYXR0ZXJuU2NhbGVZID0gc2hhcGUuZmlsbFBhdHRlcm5TY2FsZVkoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIHBhdHRlcm4gc2NhbGUgeVxuICAgICAqIHNoYXBlLmZpbGxQYXR0ZXJuU2NhbGVZKDIpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZENvbXBvbmVudHNHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnQnLCBbJ3gnLCAneSddKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBsaW5lYXIgZ3JhZGllbnQgc3RhcnQgcG9pbnRcbiAgICAgKiBAbmFtZSBmaWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFydFBvaW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0UG9pbnQueFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydFBvaW50LnlcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IHN0YXJ0IHBvaW50XG4gICAgICogdmFyIHN0YXJ0UG9pbnQgPSBzaGFwZS5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50KCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCBsaW5lYXIgZ3JhZGllbnQgc3RhcnQgcG9pbnRcbiAgICAgKiBzaGFwZS5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50KHtcbiAgICAgKiAgIHg6IDIwXG4gICAgICogICB5OiAxMFxuICAgICAqIH0pO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFgnLCAwKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IHN0YXJ0IHBvaW50IHhcbiAgICAgKiBAbmFtZSBmaWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCBsaW5lYXIgZ3JhZGllbnQgc3RhcnQgcG9pbnQgeFxuICAgICAqIHZhciBzdGFydFBvaW50WCA9IHNoYXBlLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRYKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCBsaW5lYXIgZ3JhZGllbnQgc3RhcnQgcG9pbnQgeFxuICAgICAqIHNoYXBlLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRYKDIwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRZJywgMCk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIGxpbmVhciBncmFkaWVudCBzdGFydCBwb2ludCB5XG4gICAgICogQG5hbWUgZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFlcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IHN0YXJ0IHBvaW50IHlcbiAgICAgKiB2YXIgc3RhcnRQb2ludFkgPSBzaGFwZS5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IHN0YXJ0IHBvaW50IHlcbiAgICAgKiBzaGFwZS5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WSgyMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkQ29tcG9uZW50c0dldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnQnLCBbJ3gnLCAneSddKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBsaW5lYXIgZ3JhZGllbnQgZW5kIHBvaW50XG4gICAgICogQG5hbWUgZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVuZFBvaW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGVuZFBvaW50LnhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZW5kUG9pbnQueVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCBsaW5lYXIgZ3JhZGllbnQgZW5kIHBvaW50XG4gICAgICogdmFyIGVuZFBvaW50ID0gc2hhcGUuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnQoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIGxpbmVhciBncmFkaWVudCBlbmQgcG9pbnRcbiAgICAgKiBzaGFwZS5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludCh7XG4gICAgICogICB4OiAyMFxuICAgICAqICAgeTogMTBcbiAgICAgKiB9KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WCcsIDApO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBsaW5lYXIgZ3JhZGllbnQgZW5kIHBvaW50IHhcbiAgICAgKiBAbmFtZSBmaWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFhcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IGVuZCBwb2ludCB4XG4gICAgICogdmFyIGVuZFBvaW50WCA9IHNoYXBlLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IGVuZCBwb2ludCB4XG4gICAgICogc2hhcGUuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRYKDIwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WScsIDApO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBsaW5lYXIgZ3JhZGllbnQgZW5kIHBvaW50IHlcbiAgICAgKiBAbmFtZSBmaWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFlcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IGVuZCBwb2ludCB5XG4gICAgICogdmFyIGVuZFBvaW50WSA9IHNoYXBlLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IGVuZCBwb2ludCB5XG4gICAgICogc2hhcGUuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRZKDIwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRDb21wb25lbnRzR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50JywgWyd4JywgJ3knXSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcmFkaWFsIGdyYWRpZW50IHN0YXJ0IHBvaW50XG4gICAgICogQG5hbWUgZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhcnRQb2ludFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydFBvaW50LnhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnRQb2ludC55XG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHJhZGlhbCBncmFkaWVudCBzdGFydCBwb2ludFxuICAgICAqIHZhciBzdGFydFBvaW50ID0gc2hhcGUuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgcmFkaWFsIGdyYWRpZW50IHN0YXJ0IHBvaW50XG4gICAgICogc2hhcGUuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludCh7XG4gICAgICogICB4OiAyMFxuICAgICAqICAgeTogMTBcbiAgICAgKiB9KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRYJywgMCk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIHJhZGlhbCBncmFkaWVudCBzdGFydCBwb2ludCB4XG4gICAgICogQG5hbWUgZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFhcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgcmFkaWFsIGdyYWRpZW50IHN0YXJ0IHBvaW50IHhcbiAgICAgKiB2YXIgc3RhcnRQb2ludFggPSBzaGFwZS5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgcmFkaWFsIGdyYWRpZW50IHN0YXJ0IHBvaW50IHhcbiAgICAgKiBzaGFwZS5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WCgyMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WScsIDApO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCByYWRpYWwgZ3JhZGllbnQgc3RhcnQgcG9pbnQgeVxuICAgICAqIEBuYW1lIGZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRZXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHJhZGlhbCBncmFkaWVudCBzdGFydCBwb2ludCB5XG4gICAgICogdmFyIHN0YXJ0UG9pbnRZID0gc2hhcGUuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFkoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIHJhZGlhbCBncmFkaWVudCBzdGFydCBwb2ludCB5XG4gICAgICogc2hhcGUuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFkoMjApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZENvbXBvbmVudHNHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50JywgWyd4JywgJ3knXSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcmFkaWFsIGdyYWRpZW50IGVuZCBwb2ludFxuICAgICAqIEBuYW1lIGZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbmRQb2ludFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbmRQb2ludC54XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGVuZFBvaW50LnlcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgcmFkaWFsIGdyYWRpZW50IGVuZCBwb2ludFxuICAgICAqIHZhciBlbmRQb2ludCA9IHNoYXBlLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50KCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCByYWRpYWwgZ3JhZGllbnQgZW5kIHBvaW50XG4gICAgICogc2hhcGUuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnQoe1xuICAgICAqICAgeDogMjBcbiAgICAgKiAgIHk6IDEwXG4gICAgICogfSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFgnLCAwKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcmFkaWFsIGdyYWRpZW50IGVuZCBwb2ludCB4XG4gICAgICogQG5hbWUgZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRYXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHJhZGlhbCBncmFkaWVudCBlbmQgcG9pbnQgeFxuICAgICAqIHZhciBlbmRQb2ludFggPSBzaGFwZS5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFgoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIHJhZGlhbCBncmFkaWVudCBlbmQgcG9pbnQgeFxuICAgICAqIHNoYXBlLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WCgyMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFknLCAwKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcmFkaWFsIGdyYWRpZW50IGVuZCBwb2ludCB5XG4gICAgICogQG5hbWUgZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRZXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHJhZGlhbCBncmFkaWVudCBlbmQgcG9pbnQgeVxuICAgICAqIHZhciBlbmRQb2ludFkgPSBzaGFwZS5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFkoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIHJhZGlhbCBncmFkaWVudCBlbmQgcG9pbnQgeVxuICAgICAqIHNoYXBlLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WSgyMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUGF0dGVyblJvdGF0aW9uJywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcGF0dGVybiByb3RhdGlvbiBpbiBkZWdyZWVzXG4gICAgICogQG5hbWUgZmlsbFBhdHRlcm5Sb3RhdGlvblxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcm90YXRpb25cbiAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5TaGFwZX1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHBhdHRlcm4gcm90YXRpb25cbiAgICAgKiB2YXIgcGF0dGVyblJvdGF0aW9uID0gc2hhcGUuZmlsbFBhdHRlcm5Sb3RhdGlvbigpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgcGF0dGVybiByb3RhdGlvblxuICAgICAqIHNoYXBlLmZpbGxQYXR0ZXJuUm90YXRpb24oMjApO1xuICAgICAqL1xuXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYmFja0NvbXBhdChLaW5ldGljLlNoYXBlLCB7XG4gICAgICAgIGRhc2hBcnJheTogJ2Rhc2gnLFxuICAgICAgICBnZXREYXNoQXJyYXk6ICdnZXREYXNoJyxcbiAgICAgICAgc2V0RGFzaEFycmF5OiAnZ2V0RGFzaCcsXG5cbiAgICAgICAgZHJhd0Z1bmM6ICdzY2VuZUZ1bmMnLFxuICAgICAgICBnZXREcmF3RnVuYzogJ2dldFNjZW5lRnVuYycsXG4gICAgICAgIHNldERyYXdGdW5jOiAnc2V0U2NlbmVGdW5jJyxcblxuICAgICAgICBkcmF3SGl0RnVuYzogJ2hpdEZ1bmMnLFxuICAgICAgICBnZXREcmF3SGl0RnVuYzogJ2dldEhpdEZ1bmMnLFxuICAgICAgICBzZXREcmF3SGl0RnVuYzogJ3NldEhpdEZ1bmMnXG4gICAgfSk7XG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLlNoYXBlKTtcbn0pKCk7XG47Lypqc2hpbnQgdW51c2VkOmZhbHNlICovXG4oZnVuY3Rpb24oKSB7XG4gICAgLy8gQ09OU1RBTlRTXG4gICAgdmFyIFNUQUdFID0gJ1N0YWdlJyxcbiAgICAgICAgU1RSSU5HID0gJ3N0cmluZycsXG4gICAgICAgIFBYID0gJ3B4JyxcblxuICAgICAgICBNT1VTRU9VVCA9ICdtb3VzZW91dCcsXG4gICAgICAgIE1PVVNFTEVBVkUgPSAnbW91c2VsZWF2ZScsXG4gICAgICAgIE1PVVNFT1ZFUiA9ICdtb3VzZW92ZXInLFxuICAgICAgICBNT1VTRUVOVEVSID0gJ21vdXNlZW50ZXInLFxuICAgICAgICBNT1VTRU1PVkUgPSAnbW91c2Vtb3ZlJyxcbiAgICAgICAgTU9VU0VET1dOID0gJ21vdXNlZG93bicsXG4gICAgICAgIE1PVVNFVVAgPSAnbW91c2V1cCcsXG4gICAgICAgIENMSUNLID0gJ2NsaWNrJyxcbiAgICAgICAgREJMX0NMSUNLID0gJ2RibGNsaWNrJyxcbiAgICAgICAgVE9VQ0hTVEFSVCA9ICd0b3VjaHN0YXJ0JyxcbiAgICAgICAgVE9VQ0hFTkQgPSAndG91Y2hlbmQnLFxuICAgICAgICBUQVAgPSAndGFwJyxcbiAgICAgICAgREJMX1RBUCA9ICdkYmx0YXAnLFxuICAgICAgICBUT1VDSE1PVkUgPSAndG91Y2htb3ZlJyxcbiAgICAgICAgRE9NTU9VU0VTQ1JPTEwgPSAnRE9NTW91c2VTY3JvbGwnLFxuICAgICAgICBNT1VTRVdIRUVMID0gJ21vdXNld2hlZWwnLFxuICAgICAgICBXSEVFTCA9ICd3aGVlbCcsXG5cbiAgICAgICAgQ09OVEVOVF9NT1VTRU9VVCA9ICdjb250ZW50TW91c2VvdXQnLFxuICAgICAgICBDT05URU5UX01PVVNFT1ZFUiA9ICdjb250ZW50TW91c2VvdmVyJyxcbiAgICAgICAgQ09OVEVOVF9NT1VTRU1PVkUgPSAnY29udGVudE1vdXNlbW92ZScsXG4gICAgICAgIENPTlRFTlRfTU9VU0VET1dOID0gJ2NvbnRlbnRNb3VzZWRvd24nLFxuICAgICAgICBDT05URU5UX01PVVNFVVAgPSAnY29udGVudE1vdXNldXAnLFxuICAgICAgICBDT05URU5UX0NMSUNLID0gJ2NvbnRlbnRDbGljaycsXG4gICAgICAgIENPTlRFTlRfREJMX0NMSUNLID0gJ2NvbnRlbnREYmxjbGljaycsXG4gICAgICAgIENPTlRFTlRfVE9VQ0hTVEFSVCA9ICdjb250ZW50VG91Y2hzdGFydCcsXG4gICAgICAgIENPTlRFTlRfVE9VQ0hFTkQgPSAnY29udGVudFRvdWNoZW5kJyxcbiAgICAgICAgQ09OVEVOVF9EQkxfVEFQID0gJ2NvbnRlbnREYmx0YXAnLFxuICAgICAgICBDT05URU5UX1RPVUNITU9WRSA9ICdjb250ZW50VG91Y2htb3ZlJyxcblxuICAgICAgICBESVYgPSAnZGl2JyxcbiAgICAgICAgUkVMQVRJVkUgPSAncmVsYXRpdmUnLFxuICAgICAgICBJTkxJTkVfQkxPQ0sgPSAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgS0lORVRJQ0pTX0NPTlRFTlQgPSAna2luZXRpY2pzLWNvbnRlbnQnLFxuICAgICAgICBTUEFDRSA9ICcgJyxcbiAgICAgICAgVU5ERVJTQ09SRSA9ICdfJyxcbiAgICAgICAgQ09OVEFJTkVSID0gJ2NvbnRhaW5lcicsXG4gICAgICAgIEVNUFRZX1NUUklORyA9ICcnLFxuICAgICAgICBFVkVOVFMgPSBbTU9VU0VET1dOLCBNT1VTRU1PVkUsIE1PVVNFVVAsIE1PVVNFT1VULCBUT1VDSFNUQVJULCBUT1VDSE1PVkUsIFRPVUNIRU5ELCBNT1VTRU9WRVIsIERPTU1PVVNFU0NST0xMLCBNT1VTRVdIRUVMLCBXSEVFTF0sXG5cbiAgICAgICAgLy8gY2FjaGVkIHZhcmlhYmxlc1xuICAgICAgICBldmVudHNMZW5ndGggPSBFVkVOVFMubGVuZ3RoO1xuXG4gICAgZnVuY3Rpb24gYWRkRXZlbnQoY3R4LCBldmVudE5hbWUpIHtcbiAgICAgICAgY3R4LmNvbnRlbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgY3R4W1VOREVSU0NPUkUgKyBldmVudE5hbWVdKGV2dCk7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBLaW5ldGljLlV0aWwuYWRkTWV0aG9kcyhLaW5ldGljLlN0YWdlLCB7XG4gICAgICAgIF9fX2luaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5ub2RlVHlwZSA9IFNUQUdFO1xuICAgICAgICAgICAgLy8gY2FsbCBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgS2luZXRpYy5Db250YWluZXIuY2FsbCh0aGlzLCBjb25maWcpO1xuICAgICAgICAgICAgdGhpcy5faWQgPSBLaW5ldGljLmlkQ291bnRlcisrO1xuICAgICAgICAgICAgdGhpcy5fYnVpbGRET00oKTtcbiAgICAgICAgICAgIHRoaXMuX2JpbmRDb250ZW50RXZlbnRzKCk7XG4gICAgICAgICAgICB0aGlzLl9lbmFibGVOZXN0ZWRUcmFuc2Zvcm1zID0gZmFsc2U7XG4gICAgICAgICAgICBLaW5ldGljLnN0YWdlcy5wdXNoKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICBfdmFsaWRhdGVBZGQ6IGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQuZ2V0VHlwZSgpICE9PSAnTGF5ZXInKSB7XG4gICAgICAgICAgICAgICAgS2luZXRpYy5VdGlsLmVycm9yKCdZb3UgbWF5IG9ubHkgYWRkIGxheWVycyB0byB0aGUgc3RhZ2UuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXQgY29udGFpbmVyIGRvbSBlbGVtZW50IHdoaWNoIGNvbnRhaW5zIHRoZSBzdGFnZSB3cmFwcGVyIGRpdiBlbGVtZW50XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3RhZ2UucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7RG9tRWxlbWVudH0gY29udGFpbmVyIGNhbiBwYXNzIGluIGEgZG9tIGVsZW1lbnQgb3IgaWQgc3RyaW5nXG4gICAgICAgICAqL1xuICAgICAgICBzZXRDb250YWluZXI6IGZ1bmN0aW9uKGNvbnRhaW5lcikge1xuICAgICAgICAgICAgaWYoIHR5cGVvZiBjb250YWluZXIgPT09IFNUUklORykge1xuICAgICAgICAgICAgICAgIHZhciBpZCA9IGNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICBjb250YWluZXIgPSBLaW5ldGljLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ0NhbiBub3QgZmluZCBjb250YWluZXIgaW4gZG9jdW1lbnQgd2l0aCBpZCAnICsgaWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc2V0QXR0cihDT05UQUlORVIsIGNvbnRhaW5lcik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgc2hvdWxkRHJhd0hpdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZHJhdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLmRyYXcuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZHJhdyBsYXllciBzY2VuZSBncmFwaHNcbiAgICAgICAgICogQG5hbWUgZHJhd1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YWdlLnByb3RvdHlwZVxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogZHJhdyBsYXllciBoaXQgZ3JhcGhzXG4gICAgICAgICAqIEBuYW1lIGRyYXdIaXRcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TdGFnZS5wcm90b3R5cGVcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNldCBoZWlnaHRcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TdGFnZS5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICAgICAgICAgKi9cbiAgICAgICAgc2V0SGVpZ2h0OiBmdW5jdGlvbihoZWlnaHQpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuc2V0SGVpZ2h0LmNhbGwodGhpcywgaGVpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZURPTSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXQgd2lkdGhcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TdGFnZS5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXG4gICAgICAgICAqL1xuICAgICAgICBzZXRXaWR0aDogZnVuY3Rpb24od2lkdGgpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuc2V0V2lkdGguY2FsbCh0aGlzLCB3aWR0aCk7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemVET00oKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogY2xlYXIgYWxsIGxheWVyc1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YWdlLnByb3RvdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGxheWVycyA9IHRoaXMuY2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgbGVuID0gbGF5ZXJzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBuO1xuXG4gICAgICAgICAgICBmb3IobiA9IDA7IG4gPCBsZW47IG4rKykge1xuICAgICAgICAgICAgICAgIGxheWVyc1tuXS5jbGVhcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGNsb25lOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIGlmICghb2JqKSB7XG4gICAgICAgICAgICAgICAgb2JqID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmouY29udGFpbmVyID0gS2luZXRpYy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KERJVik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBLaW5ldGljLkNvbnRhaW5lci5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLCBvYmopO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZGVzdHJveSBzdGFnZVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YWdlLnByb3RvdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHRoaXMuY29udGVudDtcbiAgICAgICAgICAgIEtpbmV0aWMuQ29udGFpbmVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG5cbiAgICAgICAgICAgIGlmKGNvbnRlbnQgJiYgS2luZXRpYy5VdGlsLl9pc0luRG9jdW1lbnQoY29udGVudCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdldENvbnRhaW5lcigpLnJlbW92ZUNoaWxkKGNvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluZGV4ID0gS2luZXRpYy5zdGFnZXMuaW5kZXhPZih0aGlzKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgS2luZXRpYy5zdGFnZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCBwb2ludGVyIHBvc2l0aW9uIHdoaWNoIGNhbiBiZSBhIHRvdWNoIHBvc2l0aW9uIG9yIG1vdXNlIHBvc2l0aW9uXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3RhZ2UucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRQb2ludGVyUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9pbnRlclBvcztcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0U3RhZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgc3RhZ2UgY29udGVudCBkaXYgZWxlbWVudCB3aGljaCBoYXMgdGhlXG4gICAgICAgICAqICB0aGUgY2xhc3MgbmFtZSBcImtpbmV0aWNqcy1jb250ZW50XCJcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TdGFnZS5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIGdldENvbnRlbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBjb21wb3NpdGUgZGF0YSBVUkwgYW5kIHJlcXVpcmVzIGEgY2FsbGJhY2sgYmVjYXVzZSB0aGUgY29tcG9zaXRlIGlzIGdlbmVyYXRlZCBhc3luY2hyb25vdXNseS5cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TdGFnZS5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25maWcuY2FsbGJhY2sgZnVuY3Rpb24gZXhlY3V0ZWQgd2hlbiB0aGUgY29tcG9zaXRlIGhhcyBjb21wbGV0ZWRcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubWltZVR5cGVdIGNhbiBiZSBcImltYWdlL3BuZ1wiIG9yIFwiaW1hZ2UvanBlZ1wiLlxuICAgICAgICAgKiAgXCJpbWFnZS9wbmdcIiBpcyB0aGUgZGVmYXVsdFxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XSB4IHBvc2l0aW9uIG9mIGNhbnZhcyBzZWN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldIHkgcG9zaXRpb24gb2YgY2FudmFzIHNlY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdIHdpZHRoIG9mIGNhbnZhcyBzZWN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF0gaGVpZ2h0IG9mIGNhbnZhcyBzZWN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnF1YWxpdHldIGpwZWcgcXVhbGl0eS4gIElmIHVzaW5nIGFuIFwiaW1hZ2UvanBlZ1wiIG1pbWVUeXBlLFxuICAgICAgICAgKiAgeW91IGNhbiBzcGVjaWZ5IHRoZSBxdWFsaXR5IGZyb20gMCB0byAxLCB3aGVyZSAwIGlzIHZlcnkgcG9vciBxdWFsaXR5IGFuZCAxXG4gICAgICAgICAqICBpcyB2ZXJ5IGhpZ2ggcXVhbGl0eVxuICAgICAgICAgKi9cbiAgICAgICAgdG9EYXRhVVJMOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblxuICAgICAgICAgICAgdmFyIG1pbWVUeXBlID0gY29uZmlnLm1pbWVUeXBlIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgcXVhbGl0eSA9IGNvbmZpZy5xdWFsaXR5IHx8IG51bGwsXG4gICAgICAgICAgICAgICAgeCA9IGNvbmZpZy54IHx8IDAsXG4gICAgICAgICAgICAgICAgeSA9IGNvbmZpZy55IHx8IDAsXG4gICAgICAgICAgICAgICAgY2FudmFzID0gbmV3IEtpbmV0aWMuU2NlbmVDYW52YXMoe1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogY29uZmlnLndpZHRoIHx8IHRoaXMuZ2V0V2lkdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBjb25maWcuaGVpZ2h0IHx8IHRoaXMuZ2V0SGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIHBpeGVsUmF0aW86IDFcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBfY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCkuX2NvbnRleHQsXG4gICAgICAgICAgICAgICAgbGF5ZXJzID0gdGhpcy5jaGlsZHJlbjtcblxuICAgICAgICAgICAgaWYoeCB8fCB5KSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQudHJhbnNsYXRlKC0xICogeCwgLTEgKiB5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZHJhd0xheWVyKG4pIHtcbiAgICAgICAgICAgICAgICB2YXIgbGF5ZXIgPSBsYXllcnNbbl0sXG4gICAgICAgICAgICAgICAgICAgIGxheWVyVXJsID0gbGF5ZXIudG9EYXRhVVJMKCksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlT2JqID0gbmV3IEtpbmV0aWMud2luZG93LkltYWdlKCk7XG5cbiAgICAgICAgICAgICAgICBpbWFnZU9iai5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQuZHJhd0ltYWdlKGltYWdlT2JqLCAwLCAwKTtcblxuICAgICAgICAgICAgICAgICAgICBpZihuIDwgbGF5ZXJzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYXdMYXllcihuICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuY2FsbGJhY2soY2FudmFzLnRvRGF0YVVSTChtaW1lVHlwZSwgcXVhbGl0eSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpbWFnZU9iai5zcmMgPSBsYXllclVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRyYXdMYXllcigwKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbnZlcnRzIHN0YWdlIGludG8gYW4gaW1hZ2UuXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3RhZ2UucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uZmlnLmNhbGxiYWNrIGZ1bmN0aW9uIGV4ZWN1dGVkIHdoZW4gdGhlIGNvbXBvc2l0ZSBoYXMgY29tcGxldGVkXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm1pbWVUeXBlXSBjYW4gYmUgXCJpbWFnZS9wbmdcIiBvciBcImltYWdlL2pwZWdcIi5cbiAgICAgICAgICogIFwiaW1hZ2UvcG5nXCIgaXMgdGhlIGRlZmF1bHRcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF0geCBwb3NpdGlvbiBvZiBjYW52YXMgc2VjdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XSB5IHBvc2l0aW9uIG9mIGNhbnZhcyBzZWN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXSB3aWR0aCBvZiBjYW52YXMgc2VjdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdIGhlaWdodCBvZiBjYW52YXMgc2VjdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5xdWFsaXR5XSBqcGVnIHF1YWxpdHkuICBJZiB1c2luZyBhbiBcImltYWdlL2pwZWdcIiBtaW1lVHlwZSxcbiAgICAgICAgICogIHlvdSBjYW4gc3BlY2lmeSB0aGUgcXVhbGl0eSBmcm9tIDAgdG8gMSwgd2hlcmUgMCBpcyB2ZXJ5IHBvb3IgcXVhbGl0eSBhbmQgMVxuICAgICAgICAgKiAgaXMgdmVyeSBoaWdoIHF1YWxpdHlcbiAgICAgICAgICovXG4gICAgICAgIHRvSW1hZ2U6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgdmFyIGNiID0gY29uZmlnLmNhbGxiYWNrO1xuXG4gICAgICAgICAgICBjb25maWcuY2FsbGJhY2sgPSBmdW5jdGlvbihkYXRhVXJsKSB7XG4gICAgICAgICAgICAgICAgS2luZXRpYy5VdGlsLl9nZXRJbWFnZShkYXRhVXJsLCBmdW5jdGlvbihpbWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IoaW1nKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnRvRGF0YVVSTChjb25maWcpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IHZpc2libGUgaW50ZXJzZWN0aW9uIHNoYXBlLiBUaGlzIGlzIHRoZSBwcmVmZXJyZWRcbiAgICAgICAgICogIG1ldGhvZCBmb3IgZGV0ZXJtaW5pbmcgaWYgYSBwb2ludCBpbnRlcnNlY3RzIGEgc2hhcGUgb3Igbm90XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3RhZ2UucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb3NcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvcy54XG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3MueVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5TaGFwZX1cbiAgICAgICAgICovXG4gICAgICAgIGdldEludGVyc2VjdGlvbjogZnVuY3Rpb24ocG9zKSB7XG4gICAgICAgICAgICB2YXIgbGF5ZXJzID0gdGhpcy5nZXRDaGlsZHJlbigpLFxuICAgICAgICAgICAgICAgIGxlbiA9IGxheWVycy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgZW5kID0gbGVuIC0gMSxcbiAgICAgICAgICAgICAgICBuLCBzaGFwZTtcblxuICAgICAgICAgICAgZm9yKG4gPSBlbmQ7IG4gPj0gMDsgbi0tKSB7XG4gICAgICAgICAgICAgICAgc2hhcGUgPSBsYXllcnNbbl0uZ2V0SW50ZXJzZWN0aW9uKHBvcyk7XG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaGFwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBfcmVzaXplRE9NOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKHRoaXMuY29udGVudCkge1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHRoaXMuZ2V0V2lkdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5nZXRIZWlnaHQoKSxcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJzID0gdGhpcy5nZXRDaGlsZHJlbigpLFxuICAgICAgICAgICAgICAgICAgICBsZW4gPSBsYXllcnMubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBuLCBsYXllcjtcblxuICAgICAgICAgICAgICAgIC8vIHNldCBjb250ZW50IGRpbWVuc2lvbnNcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQuc3R5bGUud2lkdGggPSB3aWR0aCArIFBYO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBQWDtcblxuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyQ2FudmFzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXJIaXRDYW52YXMuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIC8vIHNldCBsYXllciBkaW1lbnNpb25zXG4gICAgICAgICAgICAgICAgZm9yKG4gPSAwOyBuIDwgbGVuOyBuKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXIgPSBsYXllcnNbbl07XG4gICAgICAgICAgICAgICAgICAgIGxheWVyLnNldFNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyLmRyYXcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhZGQgbGF5ZXIgb3IgbGF5ZXJzIHRvIHN0YWdlXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3RhZ2UucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7Li4uS2luZXRpYy5MYXllcn0gbGF5ZXJcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogc3RhZ2UuYWRkKGxheWVyMSwgbGF5ZXIyLCBsYXllcjMpO1xuICAgICAgICAgKi9cbiAgICAgICAgYWRkOiBmdW5jdGlvbihsYXllcikge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGQoYXJndW1lbnRzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgS2luZXRpYy5Db250YWluZXIucHJvdG90eXBlLmFkZC5jYWxsKHRoaXMsIGxheWVyKTtcbiAgICAgICAgICAgIGxheWVyLl9zZXRDYW52YXNTaXplKHRoaXMud2lkdGgoKSwgdGhpcy5oZWlnaHQoKSk7XG5cbiAgICAgICAgICAgIC8vIGRyYXcgbGF5ZXIgYW5kIGFwcGVuZCBjYW52YXMgdG8gY29udGFpbmVyXG4gICAgICAgICAgICBsYXllci5kcmF3KCk7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQuYXBwZW5kQ2hpbGQobGF5ZXIuY2FudmFzLl9jYW52YXMpO1xuXG4gICAgICAgICAgICAvLyBjaGFpbmFibGVcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBnZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGdldExheWVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogcmV0dXJucyBhIHtAbGluayBLaW5ldGljLkNvbGxlY3Rpb259IG9mIGxheWVyc1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YWdlLnByb3RvdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TGF5ZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENoaWxkcmVuKCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9iaW5kQ29udGVudEV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IGV2ZW50c0xlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICAgICAgYWRkRXZlbnQodGhpcywgRVZFTlRTW25dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX21vdXNlb3ZlcjogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICBpZiAoIUtpbmV0aWMuVUEubW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0UG9pbnRlclBvc2l0aW9uKGV2dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZShDT05URU5UX01PVVNFT1ZFUiwge2V2dDogZXZ0fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9tb3VzZW91dDogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICBpZiAoIUtpbmV0aWMuVUEubW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0UG9pbnRlclBvc2l0aW9uKGV2dCk7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldFNoYXBlID0gdGhpcy50YXJnZXRTaGFwZTtcblxuICAgICAgICAgICAgICAgIGlmKHRhcmdldFNoYXBlICYmICFLaW5ldGljLmlzRHJhZ2dpbmcoKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTaGFwZS5fZmlyZUFuZEJ1YmJsZShNT1VTRU9VVCwge2V2dDogZXZ0fSk7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFNoYXBlLl9maXJlQW5kQnViYmxlKE1PVVNFTEVBVkUsIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFNoYXBlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyUG9zID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZShDT05URU5UX01PVVNFT1VULCB7ZXZ0OiBldnR9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX21vdXNlbW92ZTogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gd29ya2Fyb3VuZCBmb3IgbW9iaWxlIElFIHRvIGZvcmNlIHRvdWNoIGV2ZW50IHdoZW4gdW5oYW5kbGVkIHBvaW50ZXIgZXZlbnQgZWxldmF0ZXMgaW50byBhIG1vdXNlIGV2ZW50XG4gICAgICAgICAgICBpZiAoS2luZXRpYy5VQS5pZU1vYmlsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90b3VjaG1vdmUoZXZ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gd29ya2Fyb3VuZCBmYWtlIG1vdXNlbW92ZSBldmVudCBpbiBjaHJvbWUgYnJvd3NlciBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTYxNDY0XG4gICAgICAgICAgICBpZiAoKHR5cGVvZiBldnQud2Via2l0TW92ZW1lbnRYICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgZXZ0LndlYmtpdE1vdmVtZW50WSAhPT0gJ3VuZGVmaW5lZCcpICYmIGV2dC53ZWJraXRNb3ZlbWVudFkgPT09IDAgJiYgZXZ0LndlYmtpdE1vdmVtZW50WCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChLaW5ldGljLlVBLm1vYmlsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3NldFBvaW50ZXJQb3NpdGlvbihldnQpO1xuICAgICAgICAgICAgdmFyIGRkID0gS2luZXRpYy5ERCwgc2hhcGU7XG5cbiAgICAgICAgICAgIGlmICghS2luZXRpYy5pc0RyYWdnaW5nKCkpIHtcbiAgICAgICAgICAgICAgICBzaGFwZSA9IHRoaXMuZ2V0SW50ZXJzZWN0aW9uKHRoaXMuZ2V0UG9pbnRlclBvc2l0aW9uKCkpO1xuICAgICAgICAgICAgICAgIGlmKHNoYXBlICYmIHNoYXBlLmlzTGlzdGVuaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoIUtpbmV0aWMuaXNEcmFnZ2luZygpICYmICghdGhpcy50YXJnZXRTaGFwZSB8fCB0aGlzLnRhcmdldFNoYXBlLl9pZCAhPT0gc2hhcGUuX2lkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy50YXJnZXRTaGFwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0U2hhcGUuX2ZpcmVBbmRCdWJibGUoTU9VU0VPVVQsIHtldnQ6IGV2dH0sIHNoYXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFNoYXBlLl9maXJlQW5kQnViYmxlKE1PVVNFTEVBVkUsIHtldnQ6IGV2dH0sIHNoYXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlLl9maXJlQW5kQnViYmxlKE1PVVNFT1ZFUiwge2V2dDogZXZ0fSwgdGhpcy50YXJnZXRTaGFwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFwZS5fZmlyZUFuZEJ1YmJsZShNT1VTRUVOVEVSLCB7ZXZ0OiBldnR9LCB0aGlzLnRhcmdldFNoYXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0U2hhcGUgPSBzaGFwZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlLl9maXJlQW5kQnViYmxlKE1PVVNFTU9WRSwge2V2dDogZXZ0fSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBpZiBubyBzaGFwZSB3YXMgZGV0ZWN0ZWQsIGNsZWFyIHRhcmdldCBzaGFwZSBhbmQgdHJ5XG4gICAgICAgICAgICAgICAgICogdG8gcnVuIG1vdXNlb3V0IGZyb20gcHJldmlvdXMgdGFyZ2V0IHNoYXBlXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMudGFyZ2V0U2hhcGUgJiYgIUtpbmV0aWMuaXNEcmFnZ2luZygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFNoYXBlLl9maXJlQW5kQnViYmxlKE1PVVNFT1VULCB7ZXZ0OiBldnR9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0U2hhcGUuX2ZpcmVBbmRCdWJibGUoTU9VU0VMRUFWRSwge2V2dDogZXZ0fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFNoYXBlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gY29udGVudCBldmVudFxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmUoQ09OVEVOVF9NT1VTRU1PVkUsIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZGQpIHtcbiAgICAgICAgICAgICAgICBkZC5fZHJhZyhldnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBhbHdheXMgY2FsbCBwcmV2ZW50RGVmYXVsdCBmb3IgZGVza3RvcCBldmVudHMgYmVjYXVzZSBzb21lIGJyb3dzZXJzXG4gICAgICAgICAgICAvLyB0cnkgdG8gZHJhZyBhbmQgZHJvcCB0aGUgY2FudmFzIGVsZW1lbnRcbiAgICAgICAgICAgIGlmIChldnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX21vdXNlZG93bjogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gd29ya2Fyb3VuZCBmb3IgbW9iaWxlIElFIHRvIGZvcmNlIHRvdWNoIGV2ZW50IHdoZW4gdW5oYW5kbGVkIHBvaW50ZXIgZXZlbnQgZWxldmF0ZXMgaW50byBhIG1vdXNlIGV2ZW50ICAgICAgIFxuICAgICAgICAgICAgaWYgKEtpbmV0aWMuVUEuaWVNb2JpbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdG91Y2hzdGFydChldnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIUtpbmV0aWMuVUEubW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0UG9pbnRlclBvc2l0aW9uKGV2dCk7XG4gICAgICAgICAgICAgICAgdmFyIHNoYXBlID0gdGhpcy5nZXRJbnRlcnNlY3Rpb24odGhpcy5nZXRQb2ludGVyUG9zaXRpb24oKSk7XG5cbiAgICAgICAgICAgICAgICBLaW5ldGljLmxpc3RlbkNsaWNrVGFwID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGlmIChzaGFwZSAmJiBzaGFwZS5pc0xpc3RlbmluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpY2tTdGFydFNoYXBlID0gc2hhcGU7XG4gICAgICAgICAgICAgICAgICAgIHNoYXBlLl9maXJlQW5kQnViYmxlKE1PVVNFRE9XTiwge2V2dDogZXZ0fSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gY29udGVudCBldmVudFxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmUoQ09OVEVOVF9NT1VTRURPV04sIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBhbHdheXMgY2FsbCBwcmV2ZW50RGVmYXVsdCBmb3IgZGVza3RvcCBldmVudHMgYmVjYXVzZSBzb21lIGJyb3dzZXJzXG4gICAgICAgICAgICAvLyB0cnkgdG8gZHJhZyBhbmQgZHJvcCB0aGUgY2FudmFzIGVsZW1lbnRcbiAgICAgICAgICAgIGlmIChldnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX21vdXNldXA6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBcbiAgICAgICAgICAgIC8vIHdvcmthcm91bmQgZm9yIG1vYmlsZSBJRSB0byBmb3JjZSB0b3VjaCBldmVudCB3aGVuIHVuaGFuZGxlZCBwb2ludGVyIGV2ZW50IGVsZXZhdGVzIGludG8gYSBtb3VzZSBldmVudCAgICAgICBcbiAgICAgICAgICAgIGlmIChLaW5ldGljLlVBLmllTW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RvdWNoZW5kKGV2dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIUtpbmV0aWMuVUEubW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0UG9pbnRlclBvc2l0aW9uKGV2dCk7XG4gICAgICAgICAgICAgICAgdmFyIHNoYXBlID0gdGhpcy5nZXRJbnRlcnNlY3Rpb24odGhpcy5nZXRQb2ludGVyUG9zaXRpb24oKSksXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrU3RhcnRTaGFwZSA9IHRoaXMuY2xpY2tTdGFydFNoYXBlLFxuICAgICAgICAgICAgICAgICAgICBmaXJlRGJsQ2xpY2sgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZGQgPSBLaW5ldGljLkREO1xuXG4gICAgICAgICAgICAgICAgaWYoS2luZXRpYy5pbkRibENsaWNrV2luZG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVEYmxDbGljayA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIEtpbmV0aWMuaW5EYmxDbGlja1dpbmRvdyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBkb24ndCBzZXQgaW5EYmxDbGlja1dpbmRvdyBhZnRlciBkcmFnZ2luZ1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFkZCB8fCAhZGQuanVzdERyYWdnZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgS2luZXRpYy5pbkRibENsaWNrV2luZG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRkLmp1c3REcmFnZ2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgS2luZXRpYy5pbkRibENsaWNrV2luZG93ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSwgS2luZXRpYy5kYmxDbGlja1dpbmRvdyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2hhcGUgJiYgc2hhcGUuaXNMaXN0ZW5pbmcoKSkge1xuICAgICAgICAgICAgICAgICAgICBzaGFwZS5fZmlyZUFuZEJ1YmJsZShNT1VTRVVQLCB7ZXZ0OiBldnR9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBkZXRlY3QgaWYgY2xpY2sgb3IgZG91YmxlIGNsaWNrIG9jY3VycmVkXG4gICAgICAgICAgICAgICAgICAgIGlmKEtpbmV0aWMubGlzdGVuQ2xpY2tUYXAgJiYgY2xpY2tTdGFydFNoYXBlICYmIGNsaWNrU3RhcnRTaGFwZS5faWQgPT09IHNoYXBlLl9pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGUuX2ZpcmVBbmRCdWJibGUoQ0xJQ0ssIHtldnQ6IGV2dH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihmaXJlRGJsQ2xpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFwZS5fZmlyZUFuZEJ1YmJsZShEQkxfQ0xJQ0ssIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGNvbnRlbnQgZXZlbnRzXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZShDT05URU5UX01PVVNFVVAsIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgICAgIGlmIChLaW5ldGljLmxpc3RlbkNsaWNrVGFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmUoQ09OVEVOVF9DTElDSywge2V2dDogZXZ0fSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGZpcmVEYmxDbGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlyZShDT05URU5UX0RCTF9DTElDSywge2V2dDogZXZ0fSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBLaW5ldGljLmxpc3RlbkNsaWNrVGFwID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFsd2F5cyBjYWxsIHByZXZlbnREZWZhdWx0IGZvciBkZXNrdG9wIGV2ZW50cyBiZWNhdXNlIHNvbWUgYnJvd3NlcnNcbiAgICAgICAgICAgIC8vIHRyeSB0byBkcmFnIGFuZCBkcm9wIHRoZSBjYW52YXMgZWxlbWVudFxuICAgICAgICAgICAgaWYgKGV2dC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfdG91Y2hzdGFydDogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRQb2ludGVyUG9zaXRpb24oZXZ0KTtcbiAgICAgICAgICAgIHZhciBzaGFwZSA9IHRoaXMuZ2V0SW50ZXJzZWN0aW9uKHRoaXMuZ2V0UG9pbnRlclBvc2l0aW9uKCkpO1xuXG4gICAgICAgICAgICBLaW5ldGljLmxpc3RlbkNsaWNrVGFwID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKHNoYXBlICYmIHNoYXBlLmlzTGlzdGVuaW5nKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcFN0YXJ0U2hhcGUgPSBzaGFwZTtcbiAgICAgICAgICAgICAgICBzaGFwZS5fZmlyZUFuZEJ1YmJsZShUT1VDSFNUQVJULCB7ZXZ0OiBldnR9KTtcblxuICAgICAgICAgICAgICAgIC8vIG9ubHkgY2FsbCBwcmV2ZW50RGVmYXVsdCBpZiB0aGUgc2hhcGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGUuaXNMaXN0ZW5pbmcoKSAmJiBldnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29udGVudCBldmVudFxuICAgICAgICAgICAgdGhpcy5fZmlyZShDT05URU5UX1RPVUNIU1RBUlQsIHtldnQ6IGV2dH0pO1xuICAgICAgICB9LFxuICAgICAgICBfdG91Y2hlbmQ6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0UG9pbnRlclBvc2l0aW9uKGV2dCk7XG4gICAgICAgICAgICB2YXIgc2hhcGUgPSB0aGlzLmdldEludGVyc2VjdGlvbih0aGlzLmdldFBvaW50ZXJQb3NpdGlvbigpKSxcbiAgICAgICAgICAgICAgICBmaXJlRGJsQ2xpY2sgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYoS2luZXRpYy5pbkRibENsaWNrV2luZG93KSB7XG4gICAgICAgICAgICAgICAgZmlyZURibENsaWNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBLaW5ldGljLmluRGJsQ2xpY2tXaW5kb3cgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIEtpbmV0aWMuaW5EYmxDbGlja1dpbmRvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgS2luZXRpYy5pbkRibENsaWNrV2luZG93ID0gZmFsc2U7XG4gICAgICAgICAgICB9LCBLaW5ldGljLmRibENsaWNrV2luZG93KTtcblxuICAgICAgICAgICAgaWYgKHNoYXBlICYmIHNoYXBlLmlzTGlzdGVuaW5nKCkpIHtcbiAgICAgICAgICAgICAgICBzaGFwZS5fZmlyZUFuZEJ1YmJsZShUT1VDSEVORCwge2V2dDogZXZ0fSk7XG5cbiAgICAgICAgICAgICAgICAvLyBkZXRlY3QgaWYgdGFwIG9yIGRvdWJsZSB0YXAgb2NjdXJyZWRcbiAgICAgICAgICAgICAgICBpZihLaW5ldGljLmxpc3RlbkNsaWNrVGFwICYmIHNoYXBlLl9pZCA9PT0gdGhpcy50YXBTdGFydFNoYXBlLl9pZCkge1xuICAgICAgICAgICAgICAgICAgICBzaGFwZS5fZmlyZUFuZEJ1YmJsZShUQVAsIHtldnQ6IGV2dH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKGZpcmVEYmxDbGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGUuX2ZpcmVBbmRCdWJibGUoREJMX1RBUCwge2V2dDogZXZ0fSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gb25seSBjYWxsIHByZXZlbnREZWZhdWx0IGlmIHRoZSBzaGFwZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xuICAgICAgICAgICAgICAgIGlmIChzaGFwZS5pc0xpc3RlbmluZygpICYmIGV2dC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb250ZW50IGV2ZW50c1xuICAgICAgICAgICAgaWYgKEtpbmV0aWMubGlzdGVuQ2xpY2tUYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlKENPTlRFTlRfVE9VQ0hFTkQsIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgICAgIGlmKGZpcmVEYmxDbGljaykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maXJlKENPTlRFTlRfREJMX1RBUCwge2V2dDogZXZ0fSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBLaW5ldGljLmxpc3RlbkNsaWNrVGFwID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIF90b3VjaG1vdmU6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0UG9pbnRlclBvc2l0aW9uKGV2dCk7XG4gICAgICAgICAgICB2YXIgZGQgPSBLaW5ldGljLkRELFxuICAgICAgICAgICAgICAgIHNoYXBlO1xuICAgICAgICAgICAgaWYgKCFLaW5ldGljLmlzRHJhZ2dpbmcoKSkge1xuICAgICAgICAgICAgICAgIHNoYXBlID0gdGhpcy5nZXRJbnRlcnNlY3Rpb24odGhpcy5nZXRQb2ludGVyUG9zaXRpb24oKSk7XG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlICYmIHNoYXBlLmlzTGlzdGVuaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hhcGUuX2ZpcmVBbmRCdWJibGUoVE9VQ0hNT1ZFLCB7ZXZ0OiBldnR9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gb25seSBjYWxsIHByZXZlbnREZWZhdWx0IGlmIHRoZSBzaGFwZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcGUuaXNMaXN0ZW5pbmcoKSAmJiBldnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmUoQ09OVEVOVF9UT1VDSE1PVkUsIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZGQpIHtcbiAgICAgICAgICAgICAgICBkZC5fZHJhZyhldnQpO1xuICAgICAgICAgICAgICAgIGlmIChLaW5ldGljLmlzRHJhZ2dpbmcoKSkge1xuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9ET01Nb3VzZVNjcm9sbDogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICB0aGlzLl9tb3VzZXdoZWVsKGV2dCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9tb3VzZXdoZWVsOiBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldFBvaW50ZXJQb3NpdGlvbihldnQpO1xuICAgICAgICAgICAgdmFyIHNoYXBlID0gdGhpcy5nZXRJbnRlcnNlY3Rpb24odGhpcy5nZXRQb2ludGVyUG9zaXRpb24oKSk7XG5cbiAgICAgICAgICAgIGlmIChzaGFwZSAmJiBzaGFwZS5pc0xpc3RlbmluZygpKSB7XG4gICAgICAgICAgICAgICAgc2hhcGUuX2ZpcmVBbmRCdWJibGUoTU9VU0VXSEVFTCwge2V2dDogZXZ0fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF93aGVlbDogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICB0aGlzLl9tb3VzZXdoZWVsKGV2dCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zZXRQb2ludGVyUG9zaXRpb246IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRQb3NpdGlvbiA9IHRoaXMuX2dldENvbnRlbnRQb3NpdGlvbigpLFxuICAgICAgICAgICAgICAgIG9mZnNldFggPSBldnQub2Zmc2V0WCxcbiAgICAgICAgICAgICAgICBjbGllbnRYID0gZXZ0LmNsaWVudFgsXG4gICAgICAgICAgICAgICAgeCA9IG51bGwsXG4gICAgICAgICAgICAgICAgeSA9IG51bGwsXG4gICAgICAgICAgICAgICAgdG91Y2g7XG4gICAgICAgICAgICBldnQgPSBldnQgPyBldnQgOiB3aW5kb3cuZXZlbnQ7XG5cbiAgICAgICAgICAgIC8vIHRvdWNoIGV2ZW50c1xuICAgICAgICAgICAgaWYoZXZ0LnRvdWNoZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnRseSwgb25seSBoYW5kbGUgb25lIGZpbmdlclxuICAgICAgICAgICAgICAgIGlmIChldnQudG91Y2hlcy5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdG91Y2ggPSBldnQudG91Y2hlc1swXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIGluZm9ybWF0aW9uIGZvciBmaW5nZXIgIzFcbiAgICAgICAgICAgICAgICAgICAgeCA9IHRvdWNoLmNsaWVudFggLSBjb250ZW50UG9zaXRpb24ubGVmdDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHRvdWNoLmNsaWVudFkgLSBjb250ZW50UG9zaXRpb24udG9wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG1vdXNlIGV2ZW50c1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgb2Zmc2V0WCBpcyBkZWZpbmVkLCBhc3N1bWUgdGhhdCBvZmZzZXRZIGlzIGRlZmluZWQgYXMgd2VsbFxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXRYICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IG9mZnNldFg7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBldnQub2Zmc2V0WTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gd2UgdW5mb3J0dW5hdGVseSBoYXZlIHRvIHVzZSBVQSBkZXRlY3Rpb24gaGVyZSBiZWNhdXNlIGFjY2Vzc2luZ1xuICAgICAgICAgICAgICAgIC8vIHRoZSBsYXllclggb3IgbGF5ZXJZIHByb3BlcnRpZXMgaW4gbmV3ZXIgdmVyc2lvbnMgb2YgQ2hyb21lXG4gICAgICAgICAgICAgICAgLy8gdGhyb3dzIGEgSlMgd2FybmluZy4gIGxheWVyWCBhbmQgbGF5ZXJZIGFyZSByZXF1aXJlZCBmb3IgRkZcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBjb250YWluZXIgaXMgdHJhbnNmb3JtZWQgdmlhIENTUy5cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChLaW5ldGljLlVBLmJyb3dzZXIgPT09ICdtb3ppbGxhJykge1xuICAgICAgICAgICAgICAgICAgICB4ID0gZXZ0LmxheWVyWDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGV2dC5sYXllclk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGlmIGNsaWVudFggaXMgZGVmaW5lZCwgYXNzdW1lIHRoYXQgY2xpZW50WSBpcyBkZWZpbmVkIGFzIHdlbGxcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjbGllbnRYICE9PSB1bmRlZmluZWQgJiYgY29udGVudFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSBjbGllbnRYIC0gY29udGVudFBvc2l0aW9uLmxlZnQ7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBldnQuY2xpZW50WSAtIGNvbnRlbnRQb3NpdGlvbi50b3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoeCAhPT0gbnVsbCAmJiB5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyUG9zID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgICAgICAgICB5OiB5XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2dldENvbnRlbnRQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcmVjdCA9IHRoaXMuY29udGVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgPyB0aGlzLmNvbnRlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiB7IHRvcDogMCwgbGVmdDogMCB9O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0b3A6IHJlY3QudG9wLFxuICAgICAgICAgICAgICAgIGxlZnQ6IHJlY3QubGVmdFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgX2J1aWxkRE9NOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLmdldENvbnRhaW5lcigpO1xuICAgICAgICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoS2luZXRpYy5VdGlsLmlzQnJvd3NlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93ICdTdGFnZSBoYXMgbm8gY29udGFpbmVyLiBBIGNvbnRhaW5lciBpcyByZXF1aXJlZC4nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGF1dG9tYXRpY2FsbHkgY3JlYXRlIGVsZW1lbnQgZm9yIGpzZG9tIGluIG5vZGVqcyBlbnZcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gS2luZXRpYy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KERJVik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2xlYXIgY29udGVudCBpbnNpZGUgY29udGFpbmVyXG4gICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gRU1QVFlfU1RSSU5HO1xuXG4gICAgICAgICAgICAvLyBjb250ZW50XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSBLaW5ldGljLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoRElWKTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5zdHlsZS5wb3NpdGlvbiA9IFJFTEFUSVZFO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50LnN0eWxlLmRpc3BsYXkgPSBJTkxJTkVfQkxPQ0s7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQuY2xhc3NOYW1lID0gS0lORVRJQ0pTX0NPTlRFTlQ7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQuc2V0QXR0cmlidXRlKCdyb2xlJywgJ3ByZXNlbnRhdGlvbicpO1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuY29udGVudCk7XG5cbiAgICAgICAgICAgIC8vIHRoZSBidWZmZXIgY2FudmFzIHBpeGVsIHJhdGlvIG11c3QgYmUgMSBiZWNhdXNlIGl0IGlzIHVzZWQgYXMgYW4gXG4gICAgICAgICAgICAvLyBpbnRlcm1lZGlhdGUgY2FudmFzIGJlZm9yZSBjb3B5aW5nIHRoZSByZXN1bHQgb250byBhIHNjZW5lIGNhbnZhcy5cbiAgICAgICAgICAgIC8vIG5vdCBzZXR0aW5nIGl0IHRvIDEgd2lsbCByZXN1bHQgaW4gYW4gb3ZlciBjb21wZW5zYXRpb25cbiAgICAgICAgICAgIHRoaXMuYnVmZmVyQ2FudmFzID0gbmV3IEtpbmV0aWMuU2NlbmVDYW52YXMoe1xuICAgICAgICAgICAgICAgIHBpeGVsUmF0aW86IDFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5idWZmZXJIaXRDYW52YXMgPSBuZXcgS2luZXRpYy5IaXRDYW52YXMoKTtcblxuICAgICAgICAgICAgdGhpcy5fcmVzaXplRE9NKCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9vbkNvbnRlbnQ6IGZ1bmN0aW9uKHR5cGVzU3RyLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICB2YXIgdHlwZXMgPSB0eXBlc1N0ci5zcGxpdChTUEFDRSksXG4gICAgICAgICAgICAgICAgbGVuID0gdHlwZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIG4sIGJhc2VFdmVudDtcblxuICAgICAgICAgICAgZm9yKG4gPSAwOyBuIDwgbGVuOyBuKyspIHtcbiAgICAgICAgICAgICAgICBiYXNlRXZlbnQgPSB0eXBlc1tuXTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQuYWRkRXZlbnRMaXN0ZW5lcihiYXNlRXZlbnQsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gY3VycmVudGx5IGNhY2hlIGZ1bmN0aW9uIGlzIG5vdyB3b3JraW5nIGZvciBzdGFnZSwgYmVjYXVzZSBzdGFnZSBoYXMgbm8gaXRzIG93biBjYW52YXMgZWxlbWVudFxuICAgICAgICAvLyBUT0RPOiBtYXkgYmUgaXQgaXMgYmV0dGVyIHRvIGNhY2hlIGFsbCBjaGlsZHJlbiBsYXllcnM/XG4gICAgICAgIGNhY2hlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuVXRpbC53YXJuKCdDYWNoZSBmdW5jdGlvbiBpcyBub3QgYWxsb3dlZCBmb3Igc3RhZ2UuIFlvdSBtYXkgdXNlIGNhY2hlIG9ubHkgZm9yIGxheWVycywgZ3JvdXBzIGFuZCBzaGFwZXMuJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGNsZWFyQ2FjaGUgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5TdGFnZSwgS2luZXRpYy5Db250YWluZXIpO1xuXG4gICAgLy8gYWRkIGdldHRlcnMgYW5kIHNldHRlcnNcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyKEtpbmV0aWMuU3RhZ2UsICdjb250YWluZXInKTtcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkT3ZlcmxvYWRlZEdldHRlclNldHRlcihLaW5ldGljLlN0YWdlLCAnY29udGFpbmVyJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQgY29udGFpbmVyIERPTSBlbGVtZW50XG4gICAgICogQG5hbWUgY29udGFpbmVyXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YWdlLnByb3RvdHlwZVxuICAgICAqIEByZXR1cm5zIHtEb21FbGVtZW50fSBjb250YWluZXJcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBjb250YWluZXJcbiAgICAgKiB2YXIgY29udGFpbmVyID0gc3RhZ2UuY29udGFpbmVyKCk7XG4gICAgICogXG4gICAgICogLy8gc2V0IGNvbnRhaW5lclxuICAgICAqIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgKiBib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgICogc3RhZ2UuY29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICovXG5cbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xuICAgIEtpbmV0aWMuVXRpbC5hZGRNZXRob2RzKEtpbmV0aWMuQmFzZUxheWVyLCB7XG4gICAgICAgIF9fX2luaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5ub2RlVHlwZSA9ICdMYXllcic7XG4gICAgICAgICAgICBLaW5ldGljLkNvbnRhaW5lci5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZVBOR1N0cmVhbSA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzLl9jYW52YXMuY3JlYXRlUE5HU3RyZWFtKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgbGF5ZXIgY2FudmFzXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQmFzZUxheWVyLnByb3RvdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0Q2FudmFzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbnZhcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCBsYXllciBoaXQgY2FudmFzXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQmFzZUxheWVyLnByb3RvdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0SGl0Q2FudmFzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhpdENhbnZhcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCBsYXllciBjYW52YXMgY29udGV4dFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkJhc2VMYXllci5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIGdldENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2FudmFzKCkuZ2V0Q29udGV4dCgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogY2xlYXIgc2NlbmUgYW5kIGhpdCBjYW52YXMgY29udGV4dHMgdGllZCB0byB0aGUgbGF5ZXJcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5CYXNlTGF5ZXIucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbYm91bmRzXVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2JvdW5kcy54XVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2JvdW5kcy55XVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2JvdW5kcy53aWR0aF1cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtib3VuZHMuaGVpZ2h0XVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBsYXllci5jbGVhcigpO1xuICAgICAgICAgKiBsYXllci5jbGVhcih7XG4gICAgICAgICAqICAgeCA6IDAsXG4gICAgICAgICAqICAgeSA6IDAsXG4gICAgICAgICAqICAgd2lkdGggOiAxMDAsXG4gICAgICAgICAqICAgaGVpZ2h0IDogMTAwXG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKi9cbiAgICAgICAgY2xlYXI6IGZ1bmN0aW9uKGJvdW5kcykge1xuICAgICAgICAgICAgdGhpcy5nZXRDb250ZXh0KCkuY2xlYXIoYm91bmRzKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0SGl0Q2FudmFzKCkuZ2V0Q29udGV4dCgpLmNsZWFyKGJvdW5kcyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYXJIaXRDYWNoZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLl9oaXRJbWFnZURhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGV4dGVuZCBOb2RlLnByb3RvdHlwZS5zZXRaSW5kZXhcbiAgICAgICAgc2V0WkluZGV4OiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5zZXRaSW5kZXguY2FsbCh0aGlzLCBpbmRleCk7XG4gICAgICAgICAgICB2YXIgc3RhZ2UgPSB0aGlzLmdldFN0YWdlKCk7XG4gICAgICAgICAgICBpZihzdGFnZSkge1xuICAgICAgICAgICAgICAgIHN0YWdlLmNvbnRlbnQucmVtb3ZlQ2hpbGQodGhpcy5nZXRDYW52YXMoKS5fY2FudmFzKTtcblxuICAgICAgICAgICAgICAgIGlmKGluZGV4IDwgc3RhZ2UuZ2V0Q2hpbGRyZW4oKS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWdlLmNvbnRlbnQuaW5zZXJ0QmVmb3JlKHRoaXMuZ2V0Q2FudmFzKCkuX2NhbnZhcywgc3RhZ2UuZ2V0Q2hpbGRyZW4oKVtpbmRleCArIDFdLmdldENhbnZhcygpLl9jYW52YXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhZ2UuY29udGVudC5hcHBlbmRDaGlsZCh0aGlzLmdldENhbnZhcygpLl9jYW52YXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvLyBleHRlbmQgTm9kZS5wcm90b3R5cGUubW92ZVRvVG9wXG4gICAgICAgIG1vdmVUb1RvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLm1vdmVUb1RvcC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdmFyIHN0YWdlID0gdGhpcy5nZXRTdGFnZSgpO1xuICAgICAgICAgICAgaWYoc3RhZ2UpIHtcbiAgICAgICAgICAgICAgICBzdGFnZS5jb250ZW50LnJlbW92ZUNoaWxkKHRoaXMuZ2V0Q2FudmFzKCkuX2NhbnZhcyk7XG4gICAgICAgICAgICAgICAgc3RhZ2UuY29udGVudC5hcHBlbmRDaGlsZCh0aGlzLmdldENhbnZhcygpLl9jYW52YXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyBleHRlbmQgTm9kZS5wcm90b3R5cGUubW92ZVVwXG4gICAgICAgIG1vdmVVcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZihLaW5ldGljLk5vZGUucHJvdG90eXBlLm1vdmVVcC5jYWxsKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YWdlID0gdGhpcy5nZXRTdGFnZSgpO1xuICAgICAgICAgICAgICAgIGlmKHN0YWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWdlLmNvbnRlbnQucmVtb3ZlQ2hpbGQodGhpcy5nZXRDYW52YXMoKS5fY2FudmFzKTtcblxuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmluZGV4IDwgc3RhZ2UuZ2V0Q2hpbGRyZW4oKS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFnZS5jb250ZW50Lmluc2VydEJlZm9yZSh0aGlzLmdldENhbnZhcygpLl9jYW52YXMsIHN0YWdlLmdldENoaWxkcmVuKClbdGhpcy5pbmRleCArIDFdLmdldENhbnZhcygpLl9jYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhZ2UuY29udGVudC5hcHBlbmRDaGlsZCh0aGlzLmdldENhbnZhcygpLl9jYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyBleHRlbmQgTm9kZS5wcm90b3R5cGUubW92ZURvd25cbiAgICAgICAgbW92ZURvd246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYoS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5tb3ZlRG93bi5jYWxsKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YWdlID0gdGhpcy5nZXRTdGFnZSgpO1xuICAgICAgICAgICAgICAgIGlmKHN0YWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHN0YWdlLmdldENoaWxkcmVuKCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YWdlLmNvbnRlbnQucmVtb3ZlQ2hpbGQodGhpcy5nZXRDYW52YXMoKS5fY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhZ2UuY29udGVudC5pbnNlcnRCZWZvcmUodGhpcy5nZXRDYW52YXMoKS5fY2FudmFzLCBjaGlsZHJlblt0aGlzLmluZGV4ICsgMV0uZ2V0Q2FudmFzKCkuX2NhbnZhcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyBleHRlbmQgTm9kZS5wcm90b3R5cGUubW92ZVRvQm90dG9tXG4gICAgICAgIG1vdmVUb0JvdHRvbTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZihLaW5ldGljLk5vZGUucHJvdG90eXBlLm1vdmVUb0JvdHRvbS5jYWxsKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YWdlID0gdGhpcy5nZXRTdGFnZSgpO1xuICAgICAgICAgICAgICAgIGlmKHN0YWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHN0YWdlLmdldENoaWxkcmVuKCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YWdlLmNvbnRlbnQucmVtb3ZlQ2hpbGQodGhpcy5nZXRDYW52YXMoKS5fY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhZ2UuY29udGVudC5pbnNlcnRCZWZvcmUodGhpcy5nZXRDYW52YXMoKS5fY2FudmFzLCBjaGlsZHJlblsxXS5nZXRDYW52YXMoKS5fY2FudmFzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGdldExheWVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIF9jYW52YXMgPSB0aGlzLmdldENhbnZhcygpLl9jYW52YXM7XG5cbiAgICAgICAgICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUucmVtb3ZlLmNhbGwodGhpcyk7XG5cbiAgICAgICAgICAgIGlmKF9jYW52YXMgJiYgX2NhbnZhcy5wYXJlbnROb2RlICYmIEtpbmV0aWMuVXRpbC5faXNJbkRvY3VtZW50KF9jYW52YXMpKSB7XG4gICAgICAgICAgICAgICAgX2NhbnZhcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKF9jYW52YXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFN0YWdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0U2l6ZSA6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQvc2V0IHdpZHRoIG9mIGxheWVyLmdldHRlciByZXR1cm4gd2lkdGggb2Ygc3RhZ2UuIHNldHRlciBkb2luZyBub3RoaW5nLlxuICAgICAgICAgKiBpZiB5b3Ugd2FudCBjaGFuZ2Ugd2lkdGggdXNlIGBzdGFnZS53aWR0aCh2YWx1ZSk7YFxuICAgICAgICAgKiBAbmFtZSB3aWR0aFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkJhc2VMYXllci5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogdmFyIHdpZHRoID0gbGF5ZXIud2lkdGgoKTtcbiAgICAgICAgICovXG4gICAgICAgIGdldFdpZHRoIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0V2lkdGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2V0V2lkdGggOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuVXRpbC53YXJuKCdDYW4gbm90IGNoYW5nZSB3aWR0aCBvZiBsYXllci4gVXNlIFwic3RhZ2Uud2lkdGgodmFsdWUpXCIgZnVuY3Rpb24gaW5zdGVhZC4nKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldC9zZXQgaGVpZ2h0IG9mIGxheWVyLmdldHRlciByZXR1cm4gaGVpZ2h0IG9mIHN0YWdlLiBzZXR0ZXIgZG9pbmcgbm90aGluZy5cbiAgICAgICAgICogaWYgeW91IHdhbnQgY2hhbmdlIGhlaWdodCB1c2UgYHN0YWdlLmhlaWdodCh2YWx1ZSk7YFxuICAgICAgICAgKiBAbmFtZSBoZWlnaHRcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5CYXNlTGF5ZXIucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIHZhciBoZWlnaHQgPSBsYXllci5oZWlnaHQoKTtcbiAgICAgICAgICovXG4gICAgICAgIGdldEhlaWdodCA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmdldEhlaWdodCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZXRIZWlnaHQgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuVXRpbC53YXJuKCdDYW4gbm90IGNoYW5nZSBoZWlnaHQgb2YgbGF5ZXIuIFVzZSBcInN0YWdlLmhlaWdodCh2YWx1ZSlcIiBmdW5jdGlvbiBpbnN0ZWFkLicpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLkJhc2VMYXllciwgS2luZXRpYy5Db250YWluZXIpO1xuXG4gICAgLy8gYWRkIGdldHRlcnMgYW5kIHNldHRlcnNcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuQmFzZUxheWVyLCAnY2xlYXJCZWZvcmVEcmF3JywgdHJ1ZSk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBjbGVhckJlZm9yZURyYXcgZmxhZyB3aGljaCBkZXRlcm1pbmVzIGlmIHRoZSBsYXllciBpcyBjbGVhcmVkIG9yIG5vdFxuICAgICAqICBiZWZvcmUgZHJhd2luZ1xuICAgICAqIEBuYW1lIGNsZWFyQmVmb3JlRHJhd1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5CYXNlTGF5ZXIucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBjbGVhckJlZm9yZURyYXdcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBjbGVhckJlZm9yZURyYXcgZmxhZ1xuICAgICAqIHZhciBjbGVhckJlZm9yZURyYXcgPSBsYXllci5jbGVhckJlZm9yZURyYXcoKTtcbiAgICAgKlxuICAgICAqIC8vIGRpc2FibGUgY2xlYXIgYmVmb3JlIGRyYXdcbiAgICAgKiBsYXllci5jbGVhckJlZm9yZURyYXcoZmFsc2UpO1xuICAgICAqXG4gICAgICogLy8gZW5hYmxlIGNsZWFyIGJlZm9yZSBkcmF3XG4gICAgICogbGF5ZXIuY2xlYXJCZWZvcmVEcmF3KHRydWUpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5CYXNlTGF5ZXIpO1xufSkoKTtcbjsoZnVuY3Rpb24oKSB7XG4gICAgLy8gY29uc3RhbnRzXG4gICAgdmFyIEhBU0ggPSAnIycsXG4gICAgICAgIEJFRk9SRV9EUkFXID0nYmVmb3JlRHJhdycsXG4gICAgICAgIERSQVcgPSAnZHJhdycsXG5cbiAgICAgICAgLypcbiAgICAgICAgICogMiAtIDMgLSA0XG4gICAgICAgICAqIHwgICAgICAgfFxuICAgICAgICAgKiAxIC0gMCAgIDVcbiAgICAgICAgICogICAgICAgICB8XG4gICAgICAgICAqIDggLSA3IC0gNiAgICAgXG4gICAgICAgICAqL1xuICAgICAgICBJTlRFUlNFQ1RJT05fT0ZGU0VUUyA9IFtcbiAgICAgICAgICAgIHt4OiAgMCwgeTogIDB9LCAvLyAwXG4gICAgICAgICAgICB7eDogLTEsIHk6ICAwfSwgLy8gMVxuICAgICAgICAgICAge3g6IC0xLCB5OiAtMX0sIC8vIDJcbiAgICAgICAgICAgIHt4OiAgMCwgeTogLTF9LCAvLyAzXG4gICAgICAgICAgICB7eDogIDEsIHk6IC0xfSwgLy8gNFxuICAgICAgICAgICAge3g6ICAxLCB5OiAgMH0sIC8vIDVcbiAgICAgICAgICAgIHt4OiAgMSwgeTogIDF9LCAvLyA2XG4gICAgICAgICAgICB7eDogIDAsIHk6ICAxfSwgLy8gN1xuICAgICAgICAgICAge3g6IC0xLCB5OiAgMX0gIC8vIDhcbiAgICAgICAgXSxcbiAgICAgICAgSU5URVJTRUNUSU9OX09GRlNFVFNfTEVOID0gSU5URVJTRUNUSU9OX09GRlNFVFMubGVuZ3RoO1xuXG5cbiAgICBLaW5ldGljLlV0aWwuYWRkTWV0aG9kcyhLaW5ldGljLkxheWVyLCB7XG4gICAgICAgIF9fX19pbml0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZVR5cGUgPSAnTGF5ZXInO1xuICAgICAgICAgICAgdGhpcy5jYW52YXMgPSBuZXcgS2luZXRpYy5TY2VuZUNhbnZhcygpO1xuICAgICAgICAgICAgdGhpcy5oaXRDYW52YXMgPSBuZXcgS2luZXRpYy5IaXRDYW52YXMoKTtcbiAgICAgICAgICAgIC8vIGNhbGwgc3VwZXIgY29uc3RydWN0b3JcbiAgICAgICAgICAgIEtpbmV0aWMuQmFzZUxheWVyLmNhbGwodGhpcywgY29uZmlnKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NldENhbnZhc1NpemU6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB0aGlzLmhpdENhbnZhcy5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB9LFxuICAgICAgICBfdmFsaWRhdGVBZGQ6IGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IGNoaWxkLmdldFR5cGUoKTtcbiAgICAgICAgICAgIGlmICh0eXBlICE9PSAnR3JvdXAnICYmIHR5cGUgIT09ICdTaGFwZScpIHtcbiAgICAgICAgICAgICAgICBLaW5ldGljLlV0aWwuZXJyb3IoJ1lvdSBtYXkgb25seSBhZGQgZ3JvdXBzIGFuZCBzaGFwZXMgdG8gYSBsYXllci4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCB2aXNpYmxlIGludGVyc2VjdGlvbiBzaGFwZS4gVGhpcyBpcyB0aGUgcHJlZmVycmVkXG4gICAgICAgICAqIG1ldGhvZCBmb3IgZGV0ZXJtaW5pbmcgaWYgYSBwb2ludCBpbnRlcnNlY3RzIGEgc2hhcGUgb3Igbm90XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTGF5ZXIucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb3NcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvcy54XG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3MueVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5TaGFwZX1cbiAgICAgICAgICovXG4gICAgICAgIGdldEludGVyc2VjdGlvbjogZnVuY3Rpb24ocG9zKSB7XG4gICAgICAgICAgICB2YXIgb2JqLCBpLCBpbnRlcnNlY3Rpb25PZmZzZXQsIHNoYXBlO1xuXG4gICAgICAgICAgICBpZih0aGlzLmhpdEdyYXBoRW5hYmxlZCgpICYmIHRoaXMuaXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBpbiBzb21lIGNhc2VzIGFudGlhbGlhc2VkIGFyZWEgbWF5IGJlIGJpZ2dlciB0aGFuIDFweFxuICAgICAgICAgICAgICAgIC8vIGl0IGlzIHBvc3NpYmxlIGlmIHdlIHdpbGwgY2FjaGUgbm9kZSwgdGhlbiBzY2FsZSBpdCBhIGxvdFxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGNoZWNrIHsgMDsgMCB9IHBvaW50IGJlZm9yZSBsb29wLCBhbmQgcmVtb3ZlIGl0IGZyb20gSU5URVJTRUNUSU9OX09GRlNFVFMuXG4gICAgICAgICAgICAgICAgdmFyIHNwaXJhbFNlYXJjaERpc3RhbmNlID0gMTtcbiAgICAgICAgICAgICAgICB2YXIgY29udGludWVTZWFyY2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGk9MDsgaTxJTlRFUlNFQ1RJT05fT0ZGU0VUU19MRU47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uT2Zmc2V0ID0gSU5URVJTRUNUSU9OX09GRlNFVFNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmogPSB0aGlzLl9nZXRJbnRlcnNlY3Rpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHBvcy54ICsgaW50ZXJzZWN0aW9uT2Zmc2V0LnggKiBzcGlyYWxTZWFyY2hEaXN0YW5jZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBwb3MueSArIGludGVyc2VjdGlvbk9mZnNldC55ICogc3BpcmFsU2VhcmNoRGlzdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGUgPSBvYmouc2hhcGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2hhcGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBzaG91bGQgY29udGludWUgc2VhcmNoIGlmIHdlIGZvdW5kIGFudGlhbGlhc2VkIHBpeGVsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGF0IG1lYW5zIG91ciBub2RlIHNvbWV3aGVyZSB2ZXJ5IGNsb3NlXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChvYmouYW50aWFsaWFzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZVNlYXJjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgbm8gc2hhcGUsIGFuZCBubyBhbnRpYWxpYXNlZCBwaXhlbCwgd2Ugc2hvdWxkIGVuZCBzZWFyY2hpbmcgXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250aW51ZVNlYXJjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3BpcmFsU2VhcmNoRGlzdGFuY2UgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRJbWFnZURhdGE6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IHRoaXMuaGl0Q2FudmFzLndpZHRoIHx8IDEsXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5oaXRDYW52YXMuaGVpZ2h0IHx8IDEsXG4gICAgICAgICAgICAgICAgaW5kZXggPSAoTWF0aC5yb3VuZCh5KSAqIHdpZHRoICkgKyBNYXRoLnJvdW5kKHgpO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2hpdEltYWdlRGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hpdEltYWdlRGF0YSA9IHRoaXMuaGl0Q2FudmFzLmNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIHRoaXMuX2hpdEltYWdlRGF0YS5kYXRhWzQgKiBpbmRleCArIDBdICwgLy8gUmVkXG4gICAgICAgICAgICAgICAgdGhpcy5faGl0SW1hZ2VEYXRhLmRhdGFbNCAqIGluZGV4ICsgMV0sIC8vIEdyZWVuXG4gICAgICAgICAgICAgICAgdGhpcy5faGl0SW1hZ2VEYXRhLmRhdGFbNCAqIGluZGV4ICsgMl0sIC8vIEJsdWVcbiAgICAgICAgICAgICAgICB0aGlzLl9oaXRJbWFnZURhdGEuZGF0YVs0ICogaW5kZXggKyAzXSAvLyBBbHBoYVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldEludGVyc2VjdGlvbjogZnVuY3Rpb24ocG9zKSB7XG4gICAgICAgICAgICB2YXIgcCA9IHRoaXMuaGl0Q2FudmFzLmNvbnRleHQuZ2V0SW1hZ2VEYXRhKHBvcy54LCBwb3MueSwgMSwgMSkuZGF0YSxcbiAgICAgICAgICAgICAgICBwMyA9IHBbM10sXG4gICAgICAgICAgICAgICAgY29sb3JLZXksIHNoYXBlO1xuXG4gICAgICAgICAgICAvLyBmdWxseSBvcGFxdWUgcGl4ZWxcbiAgICAgICAgICAgIGlmKHAzID09PSAyNTUpIHtcbiAgICAgICAgICAgICAgICBjb2xvcktleSA9IEtpbmV0aWMuVXRpbC5fcmdiVG9IZXgocFswXSwgcFsxXSwgcFsyXSk7XG4gICAgICAgICAgICAgICAgc2hhcGUgPSBLaW5ldGljLnNoYXBlc1tIQVNIICsgY29sb3JLZXldO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNoYXBlOiBzaGFwZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhbnRpYWxpYXNlZCBwaXhlbFxuICAgICAgICAgICAgZWxzZSBpZihwMyA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBhbnRpYWxpYXNlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbXB0eSBwaXhlbFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkcmF3U2NlbmU6IGZ1bmN0aW9uKGNhbiwgdG9wKSB7XG4gICAgICAgICAgICB2YXIgbGF5ZXIgPSB0aGlzLmdldExheWVyKCksXG4gICAgICAgICAgICAgICAgY2FudmFzID0gY2FuIHx8IChsYXllciAmJiBsYXllci5nZXRDYW52YXMoKSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2ZpcmUoQkVGT1JFX0RSQVcsIHtcbiAgICAgICAgICAgICAgICBub2RlOiB0aGlzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYodGhpcy5nZXRDbGVhckJlZm9yZURyYXcoKSkge1xuICAgICAgICAgICAgICAgIGNhbnZhcy5nZXRDb250ZXh0KCkuY2xlYXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgS2luZXRpYy5Db250YWluZXIucHJvdG90eXBlLmRyYXdTY2VuZS5jYWxsKHRoaXMsIGNhbnZhcywgdG9wKTtcblxuICAgICAgICAgICAgdGhpcy5fZmlyZShEUkFXLCB7XG4gICAgICAgICAgICAgICAgbm9kZTogdGhpc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvLyB0aGUgYXBwbHkgdHJhbnNmb3JtIG1ldGhvZCBpcyBoYW5kbGVkIGJ5IHRoZSBMYXllciBhbmQgRmFzdExheWVyIGNsYXNzXG4gICAgICAgIC8vIGJlY2F1c2UgaXQgaXMgdXAgdG8gdGhlIGxheWVyIHRvIGRlY2lkZSBpZiBhbiBhYnNvbHV0ZSBvciByZWxhdGl2ZSB0cmFuc2Zvcm1cbiAgICAgICAgLy8gc2hvdWxkIGJlIHVzZWRcbiAgICAgICAgX2FwcGx5VHJhbnNmb3JtOiBmdW5jdGlvbihzaGFwZSwgY29udGV4dCwgdG9wKSB7XG4gICAgICAgICAgICB2YXIgbSA9IHNoYXBlLmdldEFic29sdXRlVHJhbnNmb3JtKHRvcCkuZ2V0TWF0cml4KCk7XG4gICAgICAgICAgICBjb250ZXh0LnRyYW5zZm9ybShtWzBdLCBtWzFdLCBtWzJdLCBtWzNdLCBtWzRdLCBtWzVdKTtcbiAgICAgICAgfSxcbiAgICAgICAgZHJhd0hpdDogZnVuY3Rpb24oY2FuLCB0b3ApIHtcbiAgICAgICAgICAgIHZhciBsYXllciA9IHRoaXMuZ2V0TGF5ZXIoKSxcbiAgICAgICAgICAgICAgICBjYW52YXMgPSBjYW4gfHwgKGxheWVyICYmIGxheWVyLmhpdENhbnZhcyk7XG5cbiAgICAgICAgICAgIGlmKGxheWVyICYmIGxheWVyLmdldENsZWFyQmVmb3JlRHJhdygpKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXIuZ2V0SGl0Q2FudmFzKCkuZ2V0Q29udGV4dCgpLmNsZWFyKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEtpbmV0aWMuQ29udGFpbmVyLnByb3RvdHlwZS5kcmF3SGl0LmNhbGwodGhpcywgY2FudmFzLCB0b3ApO1xuICAgICAgICAgICAgdGhpcy5pbWFnZURhdGEgPSBudWxsOyAvLyBDbGVhciBpbWFnZURhdGEgY2FjaGVcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogY2xlYXIgc2NlbmUgYW5kIGhpdCBjYW52YXMgY29udGV4dHMgdGllZCB0byB0aGUgbGF5ZXJcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5MYXllci5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtib3VuZHNdXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYm91bmRzLnhdXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYm91bmRzLnldXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYm91bmRzLndpZHRoXVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2JvdW5kcy5oZWlnaHRdXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIGxheWVyLmNsZWFyKCk7XG4gICAgICAgICAqIGxheWVyLmNsZWFyKHtcbiAgICAgICAgICogICB4IDogMCxcbiAgICAgICAgICogICB5IDogMCxcbiAgICAgICAgICogICB3aWR0aCA6IDEwMCxcbiAgICAgICAgICogICBoZWlnaHQgOiAxMDBcbiAgICAgICAgICogfSk7XG4gICAgICAgICAqL1xuICAgICAgICBjbGVhcjogZnVuY3Rpb24oYm91bmRzKSB7XG4gICAgICAgICAgICB0aGlzLmdldENvbnRleHQoKS5jbGVhcihib3VuZHMpO1xuICAgICAgICAgICAgdGhpcy5nZXRIaXRDYW52YXMoKS5nZXRDb250ZXh0KCkuY2xlYXIoYm91bmRzKTtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VEYXRhID0gbnVsbDsgLy8gQ2xlYXIgZ2V0SW1hZ2VEYXRhIGNhY2hlXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZXh0ZW5kIE5vZGUucHJvdG90eXBlLnNldFZpc2libGVcbiAgICAgICAgc2V0VmlzaWJsZTogZnVuY3Rpb24odmlzaWJsZSkge1xuICAgICAgICAgICAgS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5zZXRWaXNpYmxlLmNhbGwodGhpcywgdmlzaWJsZSk7XG4gICAgICAgICAgICBpZih2aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRDYW52YXMoKS5fY2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgICAgIHRoaXMuaGl0Q2FudmFzLl9jYW52YXMuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdldENhbnZhcygpLl9jYW52YXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICB0aGlzLmhpdENhbnZhcy5fY2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGVuYWJsZSBoaXQgZ3JhcGhcbiAgICAgICAgICogQG5hbWUgZW5hYmxlSGl0R3JhcGhcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5MYXllci5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0xheWVyfVxuICAgICAgICAgKi9cbiAgICAgICAgZW5hYmxlSGl0R3JhcGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zZXRIaXRHcmFwaEVuYWJsZWQodHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRpc2FibGUgaGl0IGdyYXBoXG4gICAgICAgICAqIEBuYW1lIGRpc2FibGVIaXRHcmFwaFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkxheWVyLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7TGF5ZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBkaXNhYmxlSGl0R3JhcGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zZXRIaXRHcmFwaEVuYWJsZWQoZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFNpemUgOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICBLaW5ldGljLkJhc2VMYXllci5wcm90b3R5cGUuc2V0U2l6ZS5jYWxsKHRoaXMsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy5oaXRDYW52YXMuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5MYXllciwgS2luZXRpYy5CYXNlTGF5ZXIpO1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkxheWVyLCAnaGl0R3JhcGhFbmFibGVkJywgdHJ1ZSk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBoaXRHcmFwaEVuYWJsZWQgZmxhZy4gIERpc2FibGluZyB0aGUgaGl0IGdyYXBoIHdpbGwgZ3JlYXRseSBpbmNyZWFzZVxuICAgICAqICBkcmF3IHBlcmZvcm1hbmNlIGJlY2F1c2UgdGhlIGhpdCBncmFwaCB3aWxsIG5vdCBiZSByZWRyYXduIGVhY2ggdGltZSB0aGUgbGF5ZXIgaXNcbiAgICAgKiAgZHJhd24uICBUaGlzLCBob3dldmVyLCBhbHNvIGRpc2FibGVzIG1vdXNlL3RvdWNoIGV2ZW50IGRldGVjdGlvblxuICAgICAqIEBuYW1lIGhpdEdyYXBoRW5hYmxlZFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5MYXllci5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuYWJsZWRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBoaXRHcmFwaEVuYWJsZWQgZmxhZ1xuICAgICAqIHZhciBoaXRHcmFwaEVuYWJsZWQgPSBsYXllci5oaXRHcmFwaEVuYWJsZWQoKTtcbiAgICAgKlxuICAgICAqIC8vIGRpc2FibGUgaGl0IGdyYXBoXG4gICAgICogbGF5ZXIuaGl0R3JhcGhFbmFibGVkKGZhbHNlKTtcbiAgICAgKlxuICAgICAqIC8vIGVuYWJsZSBoaXQgZ3JhcGhcbiAgICAgKiBsYXllci5oaXRHcmFwaEVuYWJsZWQodHJ1ZSk7XG4gICAgICovXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5MYXllcik7XG59KSgpO1xuOyhmdW5jdGlvbigpIHtcblxuICAgIEtpbmV0aWMuVXRpbC5hZGRNZXRob2RzKEtpbmV0aWMuRmFzdExheWVyLCB7XG4gICAgICAgIF9fX19pbml0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZVR5cGUgPSAnTGF5ZXInO1xuICAgICAgICAgICAgdGhpcy5jYW52YXMgPSBuZXcgS2luZXRpYy5TY2VuZUNhbnZhcygpO1xuICAgICAgICAgICAgLy8gY2FsbCBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgS2luZXRpYy5CYXNlTGF5ZXIuY2FsbCh0aGlzLCBjb25maWcpO1xuICAgICAgICB9LFxuICAgICAgICBfdmFsaWRhdGVBZGQ6IGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IGNoaWxkLmdldFR5cGUoKTtcbiAgICAgICAgICAgIGlmICh0eXBlICE9PSAnU2hhcGUnKSB7XG4gICAgICAgICAgICAgICAgS2luZXRpYy5VdGlsLmVycm9yKCdZb3UgbWF5IG9ubHkgYWRkIHNoYXBlcyB0byBhIGZhc3QgbGF5ZXIuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9zZXRDYW52YXNTaXplOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB9LFxuICAgICAgICBoaXRHcmFwaEVuYWJsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBnZXRJbnRlcnNlY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGRyYXdTY2VuZTogZnVuY3Rpb24oY2FuKSB7XG4gICAgICAgICAgICB2YXIgbGF5ZXIgPSB0aGlzLmdldExheWVyKCksXG4gICAgICAgICAgICAgICAgY2FudmFzID0gY2FuIHx8IChsYXllciAmJiBsYXllci5nZXRDYW52YXMoKSk7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuZ2V0Q2xlYXJCZWZvcmVEcmF3KCkpIHtcbiAgICAgICAgICAgICAgICBjYW52YXMuZ2V0Q29udGV4dCgpLmNsZWFyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEtpbmV0aWMuQ29udGFpbmVyLnByb3RvdHlwZS5kcmF3U2NlbmUuY2FsbCh0aGlzLCBjYW52YXMpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gdGhlIGFwcGx5IHRyYW5zZm9ybSBtZXRob2QgaXMgaGFuZGxlZCBieSB0aGUgTGF5ZXIgYW5kIEZhc3RMYXllciBjbGFzc1xuICAgICAgICAvLyBiZWNhdXNlIGl0IGlzIHVwIHRvIHRoZSBsYXllciB0byBkZWNpZGUgaWYgYW4gYWJzb2x1dGUgb3IgcmVsYXRpdmUgdHJhbnNmb3JtXG4gICAgICAgIC8vIHNob3VsZCBiZSB1c2VkXG4gICAgICAgIF9hcHBseVRyYW5zZm9ybTogZnVuY3Rpb24oc2hhcGUsIGNvbnRleHQsIHRvcCkge1xuICAgICAgICAgICAgaWYgKCF0b3AgfHwgdG9wLl9pZCAhPT0gdGhpcy5faWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbSA9IHNoYXBlLmdldFRyYW5zZm9ybSgpLmdldE1hdHJpeCgpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQudHJhbnNmb3JtKG1bMF0sIG1bMV0sIG1bMl0sIG1bM10sIG1bNF0sIG1bNV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkcmF3OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd1NjZW5lKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNsZWFyIHNjZW5lIGFuZCBoaXQgY2FudmFzIGNvbnRleHRzIHRpZWQgdG8gdGhlIGxheWVyXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRmFzdExheWVyLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gW2JvdW5kc11cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtib3VuZHMueF1cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtib3VuZHMueV1cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtib3VuZHMud2lkdGhdXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYm91bmRzLmhlaWdodF1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogbGF5ZXIuY2xlYXIoKTtcbiAgICAgICAgICogbGF5ZXIuY2xlYXIoe1xuICAgICAgICAgKiAgIHggOiAwLFxuICAgICAgICAgKiAgIHkgOiAwLFxuICAgICAgICAgKiAgIHdpZHRoIDogMTAwLFxuICAgICAgICAgKiAgIGhlaWdodCA6IDEwMFxuICAgICAgICAgKiB9KTtcbiAgICAgICAgICovXG4gICAgICAgIGNsZWFyOiBmdW5jdGlvbihib3VuZHMpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0Q29udGV4dCgpLmNsZWFyKGJvdW5kcyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZXh0ZW5kIE5vZGUucHJvdG90eXBlLnNldFZpc2libGVcbiAgICAgICAgc2V0VmlzaWJsZTogZnVuY3Rpb24odmlzaWJsZSkge1xuICAgICAgICAgICAgS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5zZXRWaXNpYmxlLmNhbGwodGhpcywgdmlzaWJsZSk7XG4gICAgICAgICAgICBpZih2aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRDYW52YXMoKS5fY2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRDYW52YXMoKS5fY2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5GYXN0TGF5ZXIsIEtpbmV0aWMuQmFzZUxheWVyKTtcblxuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuRmFzdExheWVyKTtcbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xuICAgIEtpbmV0aWMuVXRpbC5hZGRNZXRob2RzKEtpbmV0aWMuR3JvdXAsIHtcbiAgICAgICAgX19faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGVUeXBlID0gJ0dyb3VwJztcbiAgICAgICAgICAgIC8vIGNhbGwgc3VwZXIgY29uc3RydWN0b3JcbiAgICAgICAgICAgIEtpbmV0aWMuQ29udGFpbmVyLmNhbGwodGhpcywgY29uZmlnKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3ZhbGlkYXRlQWRkOiBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBjaGlsZC5nZXRUeXBlKCk7XG4gICAgICAgICAgICBpZiAodHlwZSAhPT0gJ0dyb3VwJyAmJiB0eXBlICE9PSAnU2hhcGUnKSB7XG4gICAgICAgICAgICAgICAgS2luZXRpYy5VdGlsLmVycm9yKCdZb3UgbWF5IG9ubHkgYWRkIGdyb3VwcyBhbmQgc2hhcGVzIHRvIGdyb3Vwcy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5Hcm91cCwgS2luZXRpYy5Db250YWluZXIpO1xuXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5Hcm91cCk7XG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBSZWN0IGNvbnN0cnVjdG9yXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgKiBAYXVnbWVudHMgS2luZXRpYy5TaGFwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5jb3JuZXJSYWRpdXNdXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbF0gZmlsbCBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxSZWRdIHNldCBmaWxsIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsR3JlZW5dIHNldCBmaWxsIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxCbHVlXSBzZXQgZmlsbCBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxBbHBoYV0gc2V0IGZpbGwgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ltYWdlfSBbY29uZmlnLmZpbGxQYXR0ZXJuSW1hZ2VdIGZpbGwgcGF0dGVybiBpbWFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5YXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5ZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRZXSBcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5Sb3RhdGlvbl1cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQYXR0ZXJuUmVwZWF0XSBjYW4gYmUgXCJyZXBlYXRcIiwgXCJyZXBlYXQteFwiLCBcInJlcGVhdC15XCIsIG9yIFwibm8tcmVwZWF0XCIuICBUaGUgZGVmYXVsdCBpcyBcIm5vLXJlcGVhdFwiXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFldIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZmlsbEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZmlsbC4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQcmlvcml0eV0gY2FuIGJlIGNvbG9yLCBsaW5lYXItZ3JhZGllbnQsIHJhZGlhbC1ncmFpZGVudCwgb3IgcGF0dGVybi4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGNvbG9yLiAgVGhlIGZpbGxQcmlvcml0eSBwcm9wZXJ0eSBtYWtlcyBpdCByZWFsbHkgZWFzeSB0byB0b2dnbGUgYmV0d2VlbiBkaWZmZXJlbnQgZmlsbCB0eXBlcy4gIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byB0b2dnbGUgYmV0d2VlbiBhIGZpbGwgY29sb3Igc3R5bGUgYW5kIGEgZmlsbCBwYXR0ZXJuIHN0eWxlLCBzaW1wbHkgc2V0IHRoZSBmaWxsIHByb3BlcnR5IGFuZCB0aGUgZmlsbFBhdHRlcm4gcHJvcGVydGllcywgYW5kIHRoZW4gdXNlIHNldEZpbGxQcmlvcml0eSgnY29sb3InKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggYSBjb2xvciBmaWxsLCBvciB1c2Ugc2V0RmlsbFByaW9yaXR5KCdwYXR0ZXJuJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIHRoZSBwYXR0ZXJuIGZpbGwgY29uZmlndXJhdGlvblxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc3Ryb2tlXSBzdHJva2UgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VSZWRdIHNldCBzdHJva2UgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUdyZWVuXSBzZXQgc3Ryb2tlIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUJsdWVdIHNldCBzdHJva2UgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VBbHBoYV0gc2V0IHN0cm9rZSBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnN0cm9rZVdpZHRoXSBzdHJva2Ugd2lkdGhcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VTY2FsZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyBzdHJva2Ugc2NhbGUuICBUaGUgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzdHJva2UuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lSm9pbl0gY2FuIGJlIG1pdGVyLCByb3VuZCwgb3IgYmV2ZWwuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIG1pdGVyXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lQ2FwXSBjYW4gYmUgYnV0dCwgcm91bmQsIG9yIHNxYXJlLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBidXR0XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zaGFkb3dDb2xvcl1cclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dSZWRdIHNldCBzaGFkb3cgY29sb3IgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0dyZWVuXSBzZXQgc2hhZG93IGNvbG9yIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0JsdWVdIHNldCBzaGFkb3cgY29sb3IgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dBbHBoYV0gc2V0IHNoYWRvdyBjb2xvciBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd0JsdXJdXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zaGFkb3dPZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09wYWNpdHldIHNoYWRvdyBvcGFjaXR5LiAgQ2FuIGJlIGFueSByZWFsIG51bWJlclxyXG4gICAgICogIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnNoYWRvd0VuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc2hhZG93LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5kYXNoXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRhc2hFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGRhc2hBcnJheS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcubGlzdGVuaW5nXSB3aGV0aGVyIG9yIG5vdCB0aGUgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuaWRdIHVuaXF1ZSBpZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2NhbGVdIHNldCBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVYXSBzZXQgc2NhbGUgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVZXSBzZXQgc2NhbGUgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucm90YXRpb25dIHJvdGF0aW9uIGluIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLm9mZnNldF0gb2Zmc2V0IGZyb20gY2VudGVyIHBvaW50IGFuZCByb3RhdGlvbiBwb2ludFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WF0gc2V0IG9mZnNldCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRZXSBzZXQgb2Zmc2V0IHlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmFnZ2FibGVdIG1ha2VzIHRoZSBub2RlIGRyYWdnYWJsZS4gIFdoZW4gc3RhZ2VzIGFyZSBkcmFnZ2FibGUsIHlvdSBjYW4gZHJhZyBhbmQgZHJvcFxyXG4gICAgICogIHRoZSBlbnRpcmUgc3RhZ2UgYnkgZHJhZ2dpbmcgYW55IHBvcnRpb24gb2YgdGhlIHN0YWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5kcmFnRGlzdGFuY2VdXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29uZmlnLmRyYWdCb3VuZEZ1bmNdXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgcmVjdCA9IG5ldyBLaW5ldGljLlJlY3Qoe1xuICAgICAqICAgd2lkdGg6IDEwMCxcbiAgICAgKiAgIGhlaWdodDogNTAsXG4gICAgICogICBmaWxsOiAncmVkJyxcbiAgICAgKiAgIHN0cm9rZTogJ2JsYWNrJyxcbiAgICAgKiAgIHN0cm9rZVdpZHRoOiA1XG4gICAgICogfSk7XG4gICAgICovXG4gICAgS2luZXRpYy5SZWN0ID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHRoaXMuX19faW5pdChjb25maWcpO1xuICAgIH07XG5cbiAgICBLaW5ldGljLlJlY3QucHJvdG90eXBlID0ge1xuICAgICAgICBfX19pbml0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuU2hhcGUuY2FsbCh0aGlzLCBjb25maWcpO1xuICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSAnUmVjdCc7XG4gICAgICAgICAgICB0aGlzLnNjZW5lRnVuYyh0aGlzLl9zY2VuZUZ1bmMpO1xuICAgICAgICB9LFxuICAgICAgICBfc2NlbmVGdW5jOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgY29ybmVyUmFkaXVzID0gdGhpcy5nZXRDb3JuZXJSYWRpdXMoKSxcbiAgICAgICAgICAgICAgICB3aWR0aCA9IHRoaXMuZ2V0V2lkdGgoKSxcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLmdldEhlaWdodCgpO1xuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgICAgIGlmKCFjb3JuZXJSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAvLyBzaW1wbGUgcmVjdCAtIGRvbid0IGJvdGhlciBkb2luZyBhbGwgdGhhdCBjb21wbGljYXRlZCBtYXRocyBzdHVmZi5cbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBhcmNUbyB3b3VsZCBiZSBuaWNlciwgYnV0IGJyb3dzZXIgc3VwcG9ydCBpcyBwYXRjaHkgKE9wZXJhKVxuICAgICAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKGNvcm5lclJhZGl1cywgMCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8od2lkdGggLSBjb3JuZXJSYWRpdXMsIDApO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKHdpZHRoIC0gY29ybmVyUmFkaXVzLCBjb3JuZXJSYWRpdXMsIGNvcm5lclJhZGl1cywgTWF0aC5QSSAqIDMgLyAyLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8od2lkdGgsIGhlaWdodCAtIGNvcm5lclJhZGl1cyk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5hcmMod2lkdGggLSBjb3JuZXJSYWRpdXMsIGhlaWdodCAtIGNvcm5lclJhZGl1cywgY29ybmVyUmFkaXVzLCAwLCBNYXRoLlBJIC8gMiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGNvcm5lclJhZGl1cywgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmFyYyhjb3JuZXJSYWRpdXMsIGhlaWdodCAtIGNvcm5lclJhZGl1cywgY29ybmVyUmFkaXVzLCBNYXRoLlBJIC8gMiwgTWF0aC5QSSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKDAsIGNvcm5lclJhZGl1cyk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5hcmMoY29ybmVyUmFkaXVzLCBjb3JuZXJSYWRpdXMsIGNvcm5lclJhZGl1cywgTWF0aC5QSSwgTWF0aC5QSSAqIDMgLyAyLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5maWxsU3Ryb2tlU2hhcGUodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLlJlY3QsIEtpbmV0aWMuU2hhcGUpO1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlJlY3QsICdjb3JuZXJSYWRpdXMnLCAwKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGNvcm5lciByYWRpdXNcbiAgICAgKiBAbmFtZSBjb3JuZXJSYWRpdXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuUmVjdC5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29ybmVyUmFkaXVzXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBjb3JuZXIgcmFkaXVzXG4gICAgICogdmFyIGNvcm5lclJhZGl1cyA9IHJlY3QuY29ybmVyUmFkaXVzKCk7XG4gICAgICogXG4gICAgICogLy8gc2V0IGNvcm5lciByYWRpdXNcbiAgICAgKiByZWN0LmNvcm5lclJhZGl1cygxMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLlJlY3QpO1xufSkoKTtcbjsoZnVuY3Rpb24oKSB7XG4gICAgLy8gdGhlIDAuMDAwMSBvZmZzZXQgZml4ZXMgYSBidWcgaW4gQ2hyb21lIDI3XG4gICAgdmFyIFBJeDIgPSAoTWF0aC5QSSAqIDIpIC0gMC4wMDAxLFxuICAgICAgICBDSVJDTEUgPSAnQ2lyY2xlJztcblxuICAgIC8qKlxuICAgICAqIENpcmNsZSBjb25zdHJ1Y3RvclxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICogQGF1Z21lbnRzIEtpbmV0aWMuU2hhcGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbmZpZy5yYWRpdXNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsXSBmaWxsIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbFJlZF0gc2V0IGZpbGwgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxHcmVlbl0gc2V0IGZpbGwgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEJsdWVdIHNldCBmaWxsIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEFscGhhXSBzZXQgZmlsbCBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW1hZ2V9IFtjb25maWcuZmlsbFBhdHRlcm5JbWFnZV0gZmlsbCBwYXR0ZXJuIGltYWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFldIFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZV0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblJvdGF0aW9uXVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFBhdHRlcm5SZXBlYXRdIGNhbiBiZSBcInJlcGVhdFwiLCBcInJlcGVhdC14XCIsIFwicmVwZWF0LXlcIiwgb3IgXCJuby1yZXBlYXRcIi4gIFRoZSBkZWZhdWx0IGlzIFwibm8tcmVwZWF0XCJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WV0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5maWxsRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBmaWxsLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFByaW9yaXR5XSBjYW4gYmUgY29sb3IsIGxpbmVhci1ncmFkaWVudCwgcmFkaWFsLWdyYWlkZW50LCBvciBwYXR0ZXJuLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgY29sb3IuICBUaGUgZmlsbFByaW9yaXR5IHByb3BlcnR5IG1ha2VzIGl0IHJlYWxseSBlYXN5IHRvIHRvZ2dsZSBiZXR3ZWVuIGRpZmZlcmVudCBmaWxsIHR5cGVzLiAgRm9yIGV4YW1wbGUsIGlmIHlvdSB3YW50IHRvIHRvZ2dsZSBiZXR3ZWVuIGEgZmlsbCBjb2xvciBzdHlsZSBhbmQgYSBmaWxsIHBhdHRlcm4gc3R5bGUsIHNpbXBseSBzZXQgdGhlIGZpbGwgcHJvcGVydHkgYW5kIHRoZSBmaWxsUGF0dGVybiBwcm9wZXJ0aWVzLCBhbmQgdGhlbiB1c2Ugc2V0RmlsbFByaW9yaXR5KCdjb2xvcicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCBhIGNvbG9yIGZpbGwsIG9yIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ3BhdHRlcm4nKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggdGhlIHBhdHRlcm4gZmlsbCBjb25maWd1cmF0aW9uXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zdHJva2VdIHN0cm9rZSBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZVJlZF0gc2V0IHN0cm9rZSByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlR3JlZW5dIHNldCBzdHJva2UgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQmx1ZV0gc2V0IHN0cm9rZSBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUFscGhhXSBzZXQgc3Ryb2tlIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc3Ryb2tlV2lkdGhdIHN0cm9rZSB3aWR0aFxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZVNjYWxlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHN0cm9rZSBzY2FsZS4gIFRoZSBkZWZhdWx0IGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHN0cm9rZS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVKb2luXSBjYW4gYmUgbWl0ZXIsIHJvdW5kLCBvciBiZXZlbC4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgbWl0ZXJcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVDYXBdIGNhbiBiZSBidXR0LCByb3VuZCwgb3Igc3FhcmUuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIGJ1dHRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnNoYWRvd0NvbG9yXVxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd1JlZF0gc2V0IHNoYWRvdyBjb2xvciByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93R3JlZW5dIHNldCBzaGFkb3cgY29sb3IgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93Qmx1ZV0gc2V0IHNoYWRvdyBjb2xvciBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0FscGhhXSBzZXQgc2hhZG93IGNvbG9yIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93Qmx1cl1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNoYWRvd09mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T3BhY2l0eV0gc2hhZG93IG9wYWNpdHkuICBDYW4gYmUgYW55IHJlYWwgbnVtYmVyXHJcbiAgICAgKiAgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc2hhZG93RW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzaGFkb3cuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmRhc2hdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZGFzaEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZGFzaEFycmF5LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcudmlzaWJsZV1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5saXN0ZW5pbmddIHdoZXRoZXIgb3Igbm90IHRoZSBub2RlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5pZF0gdW5pcXVlIGlkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5uYW1lXSBub24tdW5pcXVlIG5hbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9wYWNpdHldIGRldGVybWluZXMgbm9kZSBvcGFjaXR5LiAgQ2FuIGJlIGFueSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zY2FsZV0gc2V0IHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVhdIHNldCBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVldIHNldCBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5yb3RhdGlvbl0gcm90YXRpb24gaW4gZGVncmVlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcub2Zmc2V0XSBvZmZzZXQgZnJvbSBjZW50ZXIgcG9pbnQgYW5kIHJvdGF0aW9uIHBvaW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRYXSBzZXQgb2Zmc2V0IHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFldIHNldCBvZmZzZXQgeVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRyYWdnYWJsZV0gbWFrZXMgdGhlIG5vZGUgZHJhZ2dhYmxlLiAgV2hlbiBzdGFnZXMgYXJlIGRyYWdnYWJsZSwgeW91IGNhbiBkcmFnIGFuZCBkcm9wXHJcbiAgICAgKiAgdGhlIGVudGlyZSBzdGFnZSBieSBkcmFnZ2luZyBhbnkgcG9ydGlvbiBvZiB0aGUgc3RhZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmRyYWdEaXN0YW5jZV1cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb25maWcuZHJhZ0JvdW5kRnVuY11cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGNyZWF0ZSBjaXJjbGVcbiAgICAgKiB2YXIgY2lyY2xlID0gbmV3IEtpbmV0aWMuQ2lyY2xlKHtcbiAgICAgKiAgIHJhZGl1czogNDAsXG4gICAgICogICBmaWxsOiAncmVkJyxcbiAgICAgKiAgIHN0cm9rZTogJ2JsYWNrJ1xuICAgICAqICAgc3Ryb2tlV2lkdGg6IDVcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBLaW5ldGljLkNpcmNsZSA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB0aGlzLl9fX2luaXQoY29uZmlnKTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5DaXJjbGUucHJvdG90eXBlID0ge1xuICAgICAgICBfX19pbml0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIC8vIGNhbGwgc3VwZXIgY29uc3RydWN0b3JcbiAgICAgICAgICAgIEtpbmV0aWMuU2hhcGUuY2FsbCh0aGlzLCBjb25maWcpO1xuICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSBDSVJDTEU7XG4gICAgICAgICAgICB0aGlzLnNjZW5lRnVuYyh0aGlzLl9zY2VuZUZ1bmMpO1xuICAgICAgICB9LFxuICAgICAgICBfc2NlbmVGdW5jOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgdGhpcy5nZXRSYWRpdXMoKSwgMCwgUEl4MiwgZmFsc2UpO1xuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0cm9rZVNoYXBlKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBpbXBsZW1lbnRzIFNoYXBlLnByb3RvdHlwZS5nZXRXaWR0aCgpXG4gICAgICAgIGdldFdpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFJhZGl1cygpICogMjtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW1wbGVtZW50cyBTaGFwZS5wcm90b3R5cGUuZ2V0SGVpZ2h0KClcbiAgICAgICAgZ2V0SGVpZ2h0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFJhZGl1cygpICogMjtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW1wbGVtZW50cyBTaGFwZS5wcm90b3R5cGUuc2V0V2lkdGgoKVxuICAgICAgICBzZXRXaWR0aDogZnVuY3Rpb24od2lkdGgpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuc2V0V2lkdGguY2FsbCh0aGlzLCB3aWR0aCk7XG4gICAgICAgICAgICBpZiAodGhpcy5yYWRpdXMoKSAhPT0gd2lkdGggLyAyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYWRpdXMod2lkdGggLyAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW1wbGVtZW50cyBTaGFwZS5wcm90b3R5cGUuc2V0SGVpZ2h0KClcbiAgICAgICAgc2V0SGVpZ2h0OiBmdW5jdGlvbihoZWlnaHQpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuc2V0SGVpZ2h0LmNhbGwodGhpcywgaGVpZ2h0KTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJhZGl1cygpICE9PSBoZWlnaHQgLyAyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYWRpdXMoaGVpZ2h0IC8gMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNldFJhZGl1cyA6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0QXR0cigncmFkaXVzJywgdmFsKTtcbiAgICAgICAgICAgIHRoaXMuc2V0V2lkdGgodmFsICogMik7XG4gICAgICAgICAgICB0aGlzLnNldEhlaWdodCh2YWwgKiAyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLkNpcmNsZSwgS2luZXRpYy5TaGFwZSk7XG5cbiAgICAvLyBhZGQgZ2V0dGVycyBzZXR0ZXJzXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlcihLaW5ldGljLkNpcmNsZSwgJ3JhZGl1cycsIDApO1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRPdmVybG9hZGVkR2V0dGVyU2V0dGVyKEtpbmV0aWMuQ2lyY2xlLCAncmFkaXVzJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHJhZGl1c1xuICAgICAqIEBuYW1lIHJhZGl1c1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5DaXJjbGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZGl1c1xuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgcmFkaXVzXG4gICAgICogdmFyIHJhZGl1cyA9IGNpcmNsZS5yYWRpdXMoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCByYWRpdXNcbiAgICAgKiBjaXJjbGUucmFkaXVzKDEwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuQ2lyY2xlKTtcbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xuICAgIC8vIHRoZSAwLjAwMDEgb2Zmc2V0IGZpeGVzIGEgYnVnIGluIENocm9tZSAyN1xuICAgIHZhciBQSXgyID0gKE1hdGguUEkgKiAyKSAtIDAuMDAwMSxcbiAgICAgICAgRUxMSVBTRSA9ICdFbGxpcHNlJztcblxuICAgIC8qKlxuICAgICAqIEVsbGlwc2UgY29uc3RydWN0b3JcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAYXVnbWVudHMgS2luZXRpYy5TaGFwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnLnJhZGl1cyBkZWZpbmVzIHggYW5kIHkgcmFkaXVzXG4gICAgICogQEBTaGFwZVBhcmFtc1xuICAgICAqIEBATm9kZVBhcmFtc1xuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIGVsbGlwc2UgPSBuZXcgS2luZXRpYy5FbGxpcHNlKHtcbiAgICAgKiAgIHJhZGl1cyA6IHtcbiAgICAgKiAgICAgeCA6IDUwLFxuICAgICAqICAgICB5IDogNTBcbiAgICAgKiAgIH0sXG4gICAgICogICBmaWxsOiAncmVkJ1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIEtpbmV0aWMuRWxsaXBzZSA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB0aGlzLl9fX2luaXQoY29uZmlnKTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5FbGxpcHNlLnByb3RvdHlwZSA9IHtcbiAgICAgICAgX19faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICAvLyBjYWxsIHN1cGVyIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICBLaW5ldGljLlNoYXBlLmNhbGwodGhpcywgY29uZmlnKTtcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gRUxMSVBTRTtcbiAgICAgICAgICAgIHRoaXMuc2NlbmVGdW5jKHRoaXMuX3NjZW5lRnVuYyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zY2VuZUZ1bmM6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciByeCA9IHRoaXMuZ2V0UmFkaXVzWCgpLFxuICAgICAgICAgICAgICAgIHJ5ID0gdGhpcy5nZXRSYWRpdXNZKCk7XG5cbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgIGlmKHJ4ICE9PSByeSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc2NhbGUoMSwgcnkgLyByeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByeCwgMCwgUEl4MiwgZmFsc2UpO1xuICAgICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5maWxsU3Ryb2tlU2hhcGUodGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGltcGxlbWVudHMgU2hhcGUucHJvdG90eXBlLmdldFdpZHRoKClcbiAgICAgICAgZ2V0V2lkdGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmFkaXVzWCgpICogMjtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW1wbGVtZW50cyBTaGFwZS5wcm90b3R5cGUuZ2V0SGVpZ2h0KClcbiAgICAgICAgZ2V0SGVpZ2h0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFJhZGl1c1koKSAqIDI7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGltcGxlbWVudHMgU2hhcGUucHJvdG90eXBlLnNldFdpZHRoKClcbiAgICAgICAgc2V0V2lkdGg6IGZ1bmN0aW9uKHdpZHRoKSB7XG4gICAgICAgICAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLnNldFdpZHRoLmNhbGwodGhpcywgd2lkdGgpO1xuICAgICAgICAgICAgdGhpcy5zZXRSYWRpdXMoe1xuICAgICAgICAgICAgICAgIHg6IHdpZHRoIC8gMlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGltcGxlbWVudHMgU2hhcGUucHJvdG90eXBlLnNldEhlaWdodCgpXG4gICAgICAgIHNldEhlaWdodDogZnVuY3Rpb24oaGVpZ2h0KSB7XG4gICAgICAgICAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLnNldEhlaWdodC5jYWxsKHRoaXMsIGhlaWdodCk7XG4gICAgICAgICAgICB0aGlzLnNldFJhZGl1cyh7XG4gICAgICAgICAgICAgICAgeTogaGVpZ2h0IC8gMlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5FbGxpcHNlLCBLaW5ldGljLlNoYXBlKTtcblxuICAgIC8vIGFkZCBnZXR0ZXJzIHNldHRlcnNcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkQ29tcG9uZW50c0dldHRlclNldHRlcihLaW5ldGljLkVsbGlwc2UsICdyYWRpdXMnLCBbJ3gnLCAneSddKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgcmFkaXVzXG4gICAgICogQG5hbWUgcmFkaXVzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkVsbGlwc2UucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJhZGl1c1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByYWRpdXMueFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByYWRpdXMueVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgcmFkaXVzXG4gICAgICogdmFyIHJhZGl1cyA9IGVsbGlwc2UucmFkaXVzKCk7XG4gICAgICogXG4gICAgICogLy8gc2V0IHJhZGl1c1xuICAgICAqIGVsbGlwc2UucmFkaXVzKHtcbiAgICAgKiAgIHg6IDIwMCxcbiAgICAgKiAgIHk6IDEwMFxuICAgICAqIH0pO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkVsbGlwc2UsICdyYWRpdXNYJywgMCk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCByYWRpdXMgeFxuICAgICAqIEBuYW1lIHJhZGl1c1hcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRWxsaXBzZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgcmFkaXVzIHhcbiAgICAgKiB2YXIgcmFkaXVzWCA9IGVsbGlwc2UucmFkaXVzWCgpO1xuICAgICAqIFxuICAgICAqIC8vIHNldCByYWRpdXMgeFxuICAgICAqIGVsbGlwc2UucmFkaXVzWCgyMDApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkVsbGlwc2UsICdyYWRpdXNZJywgMCk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCByYWRpdXMgeVxuICAgICAqIEBuYW1lIHJhZGl1c1lcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRWxsaXBzZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgcmFkaXVzIHlcbiAgICAgKiB2YXIgcmFkaXVzWSA9IGVsbGlwc2UucmFkaXVzWSgpO1xuICAgICAqIFxuICAgICAqIC8vIHNldCByYWRpdXMgeVxuICAgICAqIGVsbGlwc2UucmFkaXVzWSgyMDApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5FbGxpcHNlKTtcblxufSkoKTs7KGZ1bmN0aW9uKCkge1xuICAgIC8vIHRoZSAwLjAwMDEgb2Zmc2V0IGZpeGVzIGEgYnVnIGluIENocm9tZSAyN1xuICAgIHZhciBQSXgyID0gKE1hdGguUEkgKiAyKSAtIDAuMDAwMTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBSaW5nIGNvbnN0cnVjdG9yXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGF1Z21lbnRzIEtpbmV0aWMuU2hhcGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbmZpZy5pbm5lclJhZGl1c1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb25maWcub3V0ZXJSYWRpdXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuY2xvY2t3aXNlXVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxdIGZpbGwgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsUmVkXSBzZXQgZmlsbCByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEdyZWVuXSBzZXQgZmlsbCBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQmx1ZV0gc2V0IGZpbGwgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQWxwaGFdIHNldCBmaWxsIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbWFnZX0gW2NvbmZpZy5maWxsUGF0dGVybkltYWdlXSBmaWxsIHBhdHRlcm4gaW1hZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WV0gXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlXSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuUm90YXRpb25dXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUGF0dGVyblJlcGVhdF0gY2FuIGJlIFwicmVwZWF0XCIsIFwicmVwZWF0LXhcIiwgXCJyZXBlYXQteVwiLCBvciBcIm5vLXJlcGVhdFwiLiAgVGhlIGRlZmF1bHQgaXMgXCJuby1yZXBlYXRcIlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRZXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmZpbGxFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGZpbGwuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUHJpb3JpdHldIGNhbiBiZSBjb2xvciwgbGluZWFyLWdyYWRpZW50LCByYWRpYWwtZ3JhaWRlbnQsIG9yIHBhdHRlcm4uICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBjb2xvci4gIFRoZSBmaWxsUHJpb3JpdHkgcHJvcGVydHkgbWFrZXMgaXQgcmVhbGx5IGVhc3kgdG8gdG9nZ2xlIGJldHdlZW4gZGlmZmVyZW50IGZpbGwgdHlwZXMuICBGb3IgZXhhbXBsZSwgaWYgeW91IHdhbnQgdG8gdG9nZ2xlIGJldHdlZW4gYSBmaWxsIGNvbG9yIHN0eWxlIGFuZCBhIGZpbGwgcGF0dGVybiBzdHlsZSwgc2ltcGx5IHNldCB0aGUgZmlsbCBwcm9wZXJ0eSBhbmQgdGhlIGZpbGxQYXR0ZXJuIHByb3BlcnRpZXMsIGFuZCB0aGVuIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ2NvbG9yJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIGEgY29sb3IgZmlsbCwgb3IgdXNlIHNldEZpbGxQcmlvcml0eSgncGF0dGVybicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCB0aGUgcGF0dGVybiBmaWxsIGNvbmZpZ3VyYXRpb25cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnN0cm9rZV0gc3Ryb2tlIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlUmVkXSBzZXQgc3Ryb2tlIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VHcmVlbl0gc2V0IHN0cm9rZSBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VCbHVlXSBzZXQgc3Ryb2tlIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQWxwaGFdIHNldCBzdHJva2UgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zdHJva2VXaWR0aF0gc3Ryb2tlIHdpZHRoXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlU2NhbGVFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgc3Ryb2tlIHNjYWxlLiAgVGhlIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc3Ryb2tlLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUpvaW5dIGNhbiBiZSBtaXRlciwgcm91bmQsIG9yIGJldmVsLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBtaXRlclxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUNhcF0gY2FuIGJlIGJ1dHQsIHJvdW5kLCBvciBzcWFyZS4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgYnV0dFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc2hhZG93Q29sb3JdXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93UmVkXSBzZXQgc2hhZG93IGNvbG9yIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dHcmVlbl0gc2V0IHNoYWRvdyBjb2xvciBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dCbHVlXSBzZXQgc2hhZG93IGNvbG9yIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93QWxwaGFdIHNldCBzaGFkb3cgY29sb3IgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dCbHVyXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2hhZG93T2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPcGFjaXR5XSBzaGFkb3cgb3BhY2l0eS4gIENhbiBiZSBhbnkgcmVhbCBudW1iZXJcclxuICAgICAqICBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zaGFkb3dFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHNoYWRvdy4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZGFzaF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kYXNoRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBkYXNoQXJyYXkuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmxpc3RlbmluZ10gd2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub3BhY2l0eV0gZGV0ZXJtaW5lcyBub2RlIG9wYWNpdHkuICBDYW4gYmUgYW55IG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNjYWxlXSBzZXQgc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWF0gc2V0IHNjYWxlIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWV0gc2V0IHNjYWxlIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnJvdGF0aW9uXSByb3RhdGlvbiBpbiBkZWdyZWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5vZmZzZXRdIG9mZnNldCBmcm9tIGNlbnRlciBwb2ludCBhbmQgcm90YXRpb24gcG9pbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFhdIHNldCBvZmZzZXQgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WV0gc2V0IG9mZnNldCB5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZHJhZ2dhYmxlXSBtYWtlcyB0aGUgbm9kZSBkcmFnZ2FibGUuICBXaGVuIHN0YWdlcyBhcmUgZHJhZ2dhYmxlLCB5b3UgY2FuIGRyYWcgYW5kIGRyb3BcclxuICAgICAqICB0aGUgZW50aXJlIHN0YWdlIGJ5IGRyYWdnaW5nIGFueSBwb3J0aW9uIG9mIHRoZSBzdGFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZHJhZ0Rpc3RhbmNlXVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbmZpZy5kcmFnQm91bmRGdW5jXVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHJpbmcgPSBuZXcgS2luZXRpYy5SaW5nKHtcbiAgICAgKiAgIGlubmVyUmFkaXVzOiA0MCxcbiAgICAgKiAgIG91dGVyUmFkaXVzOiA4MCxcbiAgICAgKiAgIGZpbGw6ICdyZWQnLFxuICAgICAqICAgc3Ryb2tlOiAnYmxhY2snLFxuICAgICAqICAgc3Ryb2tlV2lkdGg6IDVcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBLaW5ldGljLlJpbmcgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdGhpcy5fX19pbml0KGNvbmZpZyk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuUmluZy5wcm90b3R5cGUgPSB7XG4gICAgICAgIF9fX2luaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgLy8gY2FsbCBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgS2luZXRpYy5TaGFwZS5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9ICdSaW5nJztcbiAgICAgICAgICAgIHRoaXMuc2NlbmVGdW5jKHRoaXMuX3NjZW5lRnVuYyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zY2VuZUZ1bmM6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCB0aGlzLmdldElubmVyUmFkaXVzKCksIDAsIFBJeDIsIGZhbHNlKTtcbiAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHRoaXMuZ2V0T3V0ZXJSYWRpdXMoKSwgMCk7XG4gICAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCB0aGlzLmdldE91dGVyUmFkaXVzKCksIFBJeDIsIDAsIHRydWUpO1xuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0cm9rZVNoYXBlKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBpbXBsZW1lbnRzIFNoYXBlLnByb3RvdHlwZS5nZXRXaWR0aCgpXG4gICAgICAgIGdldFdpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE91dGVyUmFkaXVzKCkgKiAyO1xuICAgICAgICB9LFxuICAgICAgICAvLyBpbXBsZW1lbnRzIFNoYXBlLnByb3RvdHlwZS5nZXRIZWlnaHQoKVxuICAgICAgICBnZXRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T3V0ZXJSYWRpdXMoKSAqIDI7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGltcGxlbWVudHMgU2hhcGUucHJvdG90eXBlLnNldFdpZHRoKClcbiAgICAgICAgc2V0V2lkdGg6IGZ1bmN0aW9uKHdpZHRoKSB7XG4gICAgICAgICAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLnNldFdpZHRoLmNhbGwodGhpcywgd2lkdGgpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3V0ZXJSYWRpdXMoKSAhPT0gd2lkdGggLyAyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRPdXRlclJhZGl1cyh3aWR0aCAvIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyBpbXBsZW1lbnRzIFNoYXBlLnByb3RvdHlwZS5zZXRIZWlnaHQoKVxuICAgICAgICBzZXRIZWlnaHQ6IGZ1bmN0aW9uKGhlaWdodCkge1xuICAgICAgICAgICAgS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5zZXRIZWlnaHQuY2FsbCh0aGlzLCBoZWlnaHQpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3V0ZXJSYWRpdXMoKSAhPT0gaGVpZ2h0IC8gMikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0T3V0ZXJSYWRpdXMoaGVpZ2h0IC8gMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNldE91dGVyUmFkaXVzIDogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRBdHRyKCdvdXRlclJhZGl1cycsIHZhbCk7XG4gICAgICAgICAgICB0aGlzLnNldFdpZHRoKHZhbCAqIDIpO1xuICAgICAgICAgICAgdGhpcy5zZXRIZWlnaHQodmFsICogMik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5SaW5nLCBLaW5ldGljLlNoYXBlKTtcblxuICAgIC8vIGFkZCBnZXR0ZXJzIHNldHRlcnNcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuUmluZywgJ2lubmVyUmFkaXVzJywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGlubmVyUmFkaXVzXG4gICAgICogQG5hbWUgaW5uZXJSYWRpdXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuUmluZy5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5uZXJSYWRpdXNcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGlubmVyIHJhZGl1c1xuICAgICAqIHZhciBpbm5lclJhZGl1cyA9IHJpbmcuaW5uZXJSYWRpdXMoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBpbm5lciByYWRpdXNcbiAgICAgKiByaW5nLmlubmVyUmFkaXVzKDIwKTtcbiAgICAgKi9cbiAgICAgXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlcihLaW5ldGljLlJpbmcsICdvdXRlclJhZGl1cycsIDApO1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRPdmVybG9hZGVkR2V0dGVyU2V0dGVyKEtpbmV0aWMuUmluZywgJ291dGVyUmFkaXVzJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IG91dGVyUmFkaXVzXG4gICAgICogQG5hbWUgb3V0ZXJSYWRpdXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuUmluZy5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3V0ZXJSYWRpdXNcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IG91dGVyIHJhZGl1c1xuICAgICAqIHZhciBvdXRlclJhZGl1cyA9IHJpbmcub3V0ZXJSYWRpdXMoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBvdXRlciByYWRpdXNcbiAgICAgKiByaW5nLm91dGVyUmFkaXVzKDIwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuUmluZyk7XG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBXZWRnZSBjb25zdHJ1Y3RvclxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBhdWdtZW50cyBLaW5ldGljLlNoYXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb25maWcuYW5nbGUgaW4gZGVncmVlc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb25maWcucmFkaXVzXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmNsb2Nrd2lzZV1cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsXSBmaWxsIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbFJlZF0gc2V0IGZpbGwgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxHcmVlbl0gc2V0IGZpbGwgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEJsdWVdIHNldCBmaWxsIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEFscGhhXSBzZXQgZmlsbCBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW1hZ2V9IFtjb25maWcuZmlsbFBhdHRlcm5JbWFnZV0gZmlsbCBwYXR0ZXJuIGltYWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFldIFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZV0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblJvdGF0aW9uXVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFBhdHRlcm5SZXBlYXRdIGNhbiBiZSBcInJlcGVhdFwiLCBcInJlcGVhdC14XCIsIFwicmVwZWF0LXlcIiwgb3IgXCJuby1yZXBlYXRcIi4gIFRoZSBkZWZhdWx0IGlzIFwibm8tcmVwZWF0XCJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WV0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5maWxsRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBmaWxsLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFByaW9yaXR5XSBjYW4gYmUgY29sb3IsIGxpbmVhci1ncmFkaWVudCwgcmFkaWFsLWdyYWlkZW50LCBvciBwYXR0ZXJuLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgY29sb3IuICBUaGUgZmlsbFByaW9yaXR5IHByb3BlcnR5IG1ha2VzIGl0IHJlYWxseSBlYXN5IHRvIHRvZ2dsZSBiZXR3ZWVuIGRpZmZlcmVudCBmaWxsIHR5cGVzLiAgRm9yIGV4YW1wbGUsIGlmIHlvdSB3YW50IHRvIHRvZ2dsZSBiZXR3ZWVuIGEgZmlsbCBjb2xvciBzdHlsZSBhbmQgYSBmaWxsIHBhdHRlcm4gc3R5bGUsIHNpbXBseSBzZXQgdGhlIGZpbGwgcHJvcGVydHkgYW5kIHRoZSBmaWxsUGF0dGVybiBwcm9wZXJ0aWVzLCBhbmQgdGhlbiB1c2Ugc2V0RmlsbFByaW9yaXR5KCdjb2xvcicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCBhIGNvbG9yIGZpbGwsIG9yIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ3BhdHRlcm4nKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggdGhlIHBhdHRlcm4gZmlsbCBjb25maWd1cmF0aW9uXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zdHJva2VdIHN0cm9rZSBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZVJlZF0gc2V0IHN0cm9rZSByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlR3JlZW5dIHNldCBzdHJva2UgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQmx1ZV0gc2V0IHN0cm9rZSBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUFscGhhXSBzZXQgc3Ryb2tlIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc3Ryb2tlV2lkdGhdIHN0cm9rZSB3aWR0aFxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZVNjYWxlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHN0cm9rZSBzY2FsZS4gIFRoZSBkZWZhdWx0IGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHN0cm9rZS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVKb2luXSBjYW4gYmUgbWl0ZXIsIHJvdW5kLCBvciBiZXZlbC4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgbWl0ZXJcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVDYXBdIGNhbiBiZSBidXR0LCByb3VuZCwgb3Igc3FhcmUuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIGJ1dHRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnNoYWRvd0NvbG9yXVxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd1JlZF0gc2V0IHNoYWRvdyBjb2xvciByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93R3JlZW5dIHNldCBzaGFkb3cgY29sb3IgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93Qmx1ZV0gc2V0IHNoYWRvdyBjb2xvciBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0FscGhhXSBzZXQgc2hhZG93IGNvbG9yIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93Qmx1cl1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNoYWRvd09mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T3BhY2l0eV0gc2hhZG93IG9wYWNpdHkuICBDYW4gYmUgYW55IHJlYWwgbnVtYmVyXHJcbiAgICAgKiAgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc2hhZG93RW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzaGFkb3cuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmRhc2hdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZGFzaEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZGFzaEFycmF5LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcudmlzaWJsZV1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5saXN0ZW5pbmddIHdoZXRoZXIgb3Igbm90IHRoZSBub2RlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5pZF0gdW5pcXVlIGlkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5uYW1lXSBub24tdW5pcXVlIG5hbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9wYWNpdHldIGRldGVybWluZXMgbm9kZSBvcGFjaXR5LiAgQ2FuIGJlIGFueSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zY2FsZV0gc2V0IHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVhdIHNldCBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVldIHNldCBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5yb3RhdGlvbl0gcm90YXRpb24gaW4gZGVncmVlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcub2Zmc2V0XSBvZmZzZXQgZnJvbSBjZW50ZXIgcG9pbnQgYW5kIHJvdGF0aW9uIHBvaW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRYXSBzZXQgb2Zmc2V0IHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFldIHNldCBvZmZzZXQgeVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRyYWdnYWJsZV0gbWFrZXMgdGhlIG5vZGUgZHJhZ2dhYmxlLiAgV2hlbiBzdGFnZXMgYXJlIGRyYWdnYWJsZSwgeW91IGNhbiBkcmFnIGFuZCBkcm9wXHJcbiAgICAgKiAgdGhlIGVudGlyZSBzdGFnZSBieSBkcmFnZ2luZyBhbnkgcG9ydGlvbiBvZiB0aGUgc3RhZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmRyYWdEaXN0YW5jZV1cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb25maWcuZHJhZ0JvdW5kRnVuY11cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGRyYXcgYSB3ZWRnZSB0aGF0J3MgcG9pbnRpbmcgZG93bndhcmRzXG4gICAgICogdmFyIHdlZGdlID0gbmV3IEtpbmV0aWMuV2VkZ2Uoe1xuICAgICAqICAgcmFkaXVzOiA0MCxcbiAgICAgKiAgIGZpbGw6ICdyZWQnLFxuICAgICAqICAgc3Ryb2tlOiAnYmxhY2snXG4gICAgICogICBzdHJva2VXaWR0aDogNSxcbiAgICAgKiAgIGFuZ2xlRGVnOiA2MCxcbiAgICAgKiAgIHJvdGF0aW9uRGVnOiAtMTIwXG4gICAgICogfSk7XG4gICAgICovXG4gICAgS2luZXRpYy5XZWRnZSA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB0aGlzLl9fX2luaXQoY29uZmlnKTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5XZWRnZS5wcm90b3R5cGUgPSB7XG4gICAgICAgIF9fX2luaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgLy8gY2FsbCBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgS2luZXRpYy5TaGFwZS5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9ICdXZWRnZSc7XG4gICAgICAgICAgICB0aGlzLnNjZW5lRnVuYyh0aGlzLl9zY2VuZUZ1bmMpO1xuICAgICAgICB9LFxuICAgICAgICBfc2NlbmVGdW5jOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgdGhpcy5nZXRSYWRpdXMoKSwgMCwgS2luZXRpYy5nZXRBbmdsZSh0aGlzLmdldEFuZ2xlKCkpLCB0aGlzLmdldENsb2Nrd2lzZSgpKTtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVRvKDAsIDApO1xuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0cm9rZVNoYXBlKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuV2VkZ2UsIEtpbmV0aWMuU2hhcGUpO1xuXG4gICAgLy8gYWRkIGdldHRlcnMgc2V0dGVyc1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5XZWRnZSwgJ3JhZGl1cycsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCByYWRpdXNcbiAgICAgKiBAbmFtZSByYWRpdXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuV2VkZ2UucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZGl1c1xuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgcmFkaXVzXG4gICAgICogdmFyIHJhZGl1cyA9IHdlZGdlLnJhZGl1cygpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHJhZGl1c1xuICAgICAqIHdlZGdlLnJhZGl1cygxMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuV2VkZ2UsICdhbmdsZScsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBhbmdsZSBpbiBkZWdyZWVzXG4gICAgICogQG5hbWUgYW5nbGVcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuV2VkZ2UucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGFuZ2xlXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBhbmdsZVxuICAgICAqIHZhciBhbmdsZSA9IHdlZGdlLmFuZ2xlKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgYW5nbGVcbiAgICAgKiB3ZWRnZS5hbmdsZSgyMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuV2VkZ2UsICdjbG9ja3dpc2UnLCBmYWxzZSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGNsb2Nrd2lzZSBmbGFnXG4gICAgICogQG5hbWUgY2xvY2t3aXNlXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLldlZGdlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjbG9ja3dpc2VcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGNsb2Nrd2lzZSBmbGFnXG4gICAgICogdmFyIGNsb2Nrd2lzZSA9IHdlZGdlLmNsb2Nrd2lzZSgpO1xuICAgICAqXG4gICAgICogLy8gZHJhdyB3ZWRnZSBjb3VudGVyLWNsb2Nrd2lzZVxuICAgICAqIHdlZGdlLmNsb2Nrd2lzZShmYWxzZSk7XG4gICAgICpcbiAgICAgKiAvLyBkcmF3IHdlZGdlIGNsb2Nrd2lzZVxuICAgICAqIHdlZGdlLmNsb2Nrd2lzZSh0cnVlKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5iYWNrQ29tcGF0KEtpbmV0aWMuV2VkZ2UsIHtcbiAgICAgICAgYW5nbGVEZWc6ICdhbmdsZScsXG4gICAgICAgIGdldEFuZ2xlRGVnOiAnZ2V0QW5nbGUnLFxuICAgICAgICBzZXRBbmdsZURlZzogJ3NldEFuZ2xlJ1xuICAgIH0pO1xuXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5XZWRnZSk7XG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBBcmMgY29uc3RydWN0b3JcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAYXVnbWVudHMgS2luZXRpYy5TaGFwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29uZmlnLmFuZ2xlIGluIGRlZ3JlZXNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29uZmlnLmlubmVyUmFkaXVzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbmZpZy5vdXRlclJhZGl1c1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5jbG9ja3dpc2VdXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbF0gZmlsbCBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxSZWRdIHNldCBmaWxsIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsR3JlZW5dIHNldCBmaWxsIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxCbHVlXSBzZXQgZmlsbCBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxBbHBoYV0gc2V0IGZpbGwgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ltYWdlfSBbY29uZmlnLmZpbGxQYXR0ZXJuSW1hZ2VdIGZpbGwgcGF0dGVybiBpbWFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5YXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5ZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRZXSBcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5Sb3RhdGlvbl1cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQYXR0ZXJuUmVwZWF0XSBjYW4gYmUgXCJyZXBlYXRcIiwgXCJyZXBlYXQteFwiLCBcInJlcGVhdC15XCIsIG9yIFwibm8tcmVwZWF0XCIuICBUaGUgZGVmYXVsdCBpcyBcIm5vLXJlcGVhdFwiXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFldIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZmlsbEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZmlsbC4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQcmlvcml0eV0gY2FuIGJlIGNvbG9yLCBsaW5lYXItZ3JhZGllbnQsIHJhZGlhbC1ncmFpZGVudCwgb3IgcGF0dGVybi4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGNvbG9yLiAgVGhlIGZpbGxQcmlvcml0eSBwcm9wZXJ0eSBtYWtlcyBpdCByZWFsbHkgZWFzeSB0byB0b2dnbGUgYmV0d2VlbiBkaWZmZXJlbnQgZmlsbCB0eXBlcy4gIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byB0b2dnbGUgYmV0d2VlbiBhIGZpbGwgY29sb3Igc3R5bGUgYW5kIGEgZmlsbCBwYXR0ZXJuIHN0eWxlLCBzaW1wbHkgc2V0IHRoZSBmaWxsIHByb3BlcnR5IGFuZCB0aGUgZmlsbFBhdHRlcm4gcHJvcGVydGllcywgYW5kIHRoZW4gdXNlIHNldEZpbGxQcmlvcml0eSgnY29sb3InKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggYSBjb2xvciBmaWxsLCBvciB1c2Ugc2V0RmlsbFByaW9yaXR5KCdwYXR0ZXJuJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIHRoZSBwYXR0ZXJuIGZpbGwgY29uZmlndXJhdGlvblxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc3Ryb2tlXSBzdHJva2UgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VSZWRdIHNldCBzdHJva2UgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUdyZWVuXSBzZXQgc3Ryb2tlIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUJsdWVdIHNldCBzdHJva2UgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VBbHBoYV0gc2V0IHN0cm9rZSBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnN0cm9rZVdpZHRoXSBzdHJva2Ugd2lkdGhcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VTY2FsZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyBzdHJva2Ugc2NhbGUuICBUaGUgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzdHJva2UuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lSm9pbl0gY2FuIGJlIG1pdGVyLCByb3VuZCwgb3IgYmV2ZWwuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIG1pdGVyXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lQ2FwXSBjYW4gYmUgYnV0dCwgcm91bmQsIG9yIHNxYXJlLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBidXR0XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zaGFkb3dDb2xvcl1cclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dSZWRdIHNldCBzaGFkb3cgY29sb3IgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0dyZWVuXSBzZXQgc2hhZG93IGNvbG9yIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0JsdWVdIHNldCBzaGFkb3cgY29sb3IgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dBbHBoYV0gc2V0IHNoYWRvdyBjb2xvciBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd0JsdXJdXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zaGFkb3dPZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09wYWNpdHldIHNoYWRvdyBvcGFjaXR5LiAgQ2FuIGJlIGFueSByZWFsIG51bWJlclxyXG4gICAgICogIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnNoYWRvd0VuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc2hhZG93LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5kYXNoXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRhc2hFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGRhc2hBcnJheS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcubGlzdGVuaW5nXSB3aGV0aGVyIG9yIG5vdCB0aGUgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuaWRdIHVuaXF1ZSBpZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2NhbGVdIHNldCBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVYXSBzZXQgc2NhbGUgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVZXSBzZXQgc2NhbGUgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucm90YXRpb25dIHJvdGF0aW9uIGluIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLm9mZnNldF0gb2Zmc2V0IGZyb20gY2VudGVyIHBvaW50IGFuZCByb3RhdGlvbiBwb2ludFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WF0gc2V0IG9mZnNldCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRZXSBzZXQgb2Zmc2V0IHlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmFnZ2FibGVdIG1ha2VzIHRoZSBub2RlIGRyYWdnYWJsZS4gIFdoZW4gc3RhZ2VzIGFyZSBkcmFnZ2FibGUsIHlvdSBjYW4gZHJhZyBhbmQgZHJvcFxyXG4gICAgICogIHRoZSBlbnRpcmUgc3RhZ2UgYnkgZHJhZ2dpbmcgYW55IHBvcnRpb24gb2YgdGhlIHN0YWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5kcmFnRGlzdGFuY2VdXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29uZmlnLmRyYWdCb3VuZEZ1bmNdXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBkcmF3IGEgQXJjIHRoYXQncyBwb2ludGluZyBkb3dud2FyZHNcbiAgICAgKiB2YXIgYXJjID0gbmV3IEtpbmV0aWMuQXJjKHtcbiAgICAgKiAgIGlubmVyUmFkaXVzOiA0MCxcbiAgICAgKiAgIG91dGVyUmFkaXVzOiA4MCxcbiAgICAgKiAgIGZpbGw6ICdyZWQnLFxuICAgICAqICAgc3Ryb2tlOiAnYmxhY2snXG4gICAgICogICBzdHJva2VXaWR0aDogNSxcbiAgICAgKiAgIGFuZ2xlOiA2MCxcbiAgICAgKiAgIHJvdGF0aW9uRGVnOiAtMTIwXG4gICAgICogfSk7XG4gICAgICovXG4gICAgS2luZXRpYy5BcmMgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdGhpcy5fX19pbml0KGNvbmZpZyk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuQXJjLnByb3RvdHlwZSA9IHtcbiAgICAgICAgX19faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICAvLyBjYWxsIHN1cGVyIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICBLaW5ldGljLlNoYXBlLmNhbGwodGhpcywgY29uZmlnKTtcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ0FyYyc7XG4gICAgICAgICAgICB0aGlzLnNjZW5lRnVuYyh0aGlzLl9zY2VuZUZ1bmMpO1xuICAgICAgICB9LFxuICAgICAgICBfc2NlbmVGdW5jOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgYW5nbGUgPSBLaW5ldGljLmdldEFuZ2xlKHRoaXMuYW5nbGUoKSksXG4gICAgICAgICAgICAgICAgY2xvY2t3aXNlID0gdGhpcy5jbG9ja3dpc2UoKTtcblxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHRoaXMuZ2V0T3V0ZXJSYWRpdXMoKSwgMCwgYW5nbGUsIGNsb2Nrd2lzZSk7XG4gICAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCB0aGlzLmdldElubmVyUmFkaXVzKCksIGFuZ2xlLCAwLCAhY2xvY2t3aXNlKTtcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLkFyYywgS2luZXRpYy5TaGFwZSk7XG5cbiAgICAvLyBhZGQgZ2V0dGVycyBzZXR0ZXJzXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkFyYywgJ2lubmVyUmFkaXVzJywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGlubmVyUmFkaXVzXG4gICAgICogQG5hbWUgaW5uZXJSYWRpdXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQXJjLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbm5lclJhZGl1c1xuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgaW5uZXIgcmFkaXVzXG4gICAgICogdmFyIGlubmVyUmFkaXVzID0gYXJjLmlubmVyUmFkaXVzKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgaW5uZXIgcmFkaXVzXG4gICAgICogYXJjLmlubmVyUmFkaXVzKDIwKTtcbiAgICAgKi9cbiAgICAgXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkFyYywgJ291dGVyUmFkaXVzJywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IG91dGVyUmFkaXVzXG4gICAgICogQG5hbWUgb3V0ZXJSYWRpdXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQXJjLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvdXRlclJhZGl1c1xuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgb3V0ZXIgcmFkaXVzXG4gICAgICogdmFyIG91dGVyUmFkaXVzID0gYXJjLm91dGVyUmFkaXVzKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgb3V0ZXIgcmFkaXVzXG4gICAgICogYXJjLm91dGVyUmFkaXVzKDIwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5BcmMsICdhbmdsZScsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBhbmdsZSBpbiBkZWdyZWVzXG4gICAgICogQG5hbWUgYW5nbGVcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQXJjLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhbmdsZVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgYW5nbGVcbiAgICAgKiB2YXIgYW5nbGUgPSBhcmMuYW5nbGUoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBhbmdsZVxuICAgICAqIGFyYy5hbmdsZSgyMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuQXJjLCAnY2xvY2t3aXNlJywgZmFsc2UpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBjbG9ja3dpc2UgZmxhZ1xuICAgICAqIEBuYW1lIGNsb2Nrd2lzZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5BcmMucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBjbG9ja3dpc2VcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBjbG9ja3dpc2UgZmxhZ1xuICAgICAqIHZhciBjbG9ja3dpc2UgPSBhcmMuY2xvY2t3aXNlKCk7XG4gICAgICpcbiAgICAgKiAvLyBkcmF3IGFyYyBjb3VudGVyLWNsb2Nrd2lzZVxuICAgICAqIGFyYy5jbG9ja3dpc2UoZmFsc2UpO1xuICAgICAqXG4gICAgICogLy8gZHJhdyBhcmMgY2xvY2t3aXNlXG4gICAgICogYXJjLmNsb2Nrd2lzZSh0cnVlKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuQXJjKTtcbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gQ09OU1RBTlRTXG4gICAgdmFyIElNQUdFID0gJ0ltYWdlJztcblxuICAgIC8qKlxuICAgICAqIEltYWdlIGNvbnN0cnVjdG9yXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgKiBAYXVnbWVudHMgS2luZXRpYy5TaGFwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKiBAcGFyYW0ge0ltYWdlfSBjb25maWcuaW1hZ2VcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5jcm9wXVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxdIGZpbGwgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsUmVkXSBzZXQgZmlsbCByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEdyZWVuXSBzZXQgZmlsbCBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQmx1ZV0gc2V0IGZpbGwgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQWxwaGFdIHNldCBmaWxsIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbWFnZX0gW2NvbmZpZy5maWxsUGF0dGVybkltYWdlXSBmaWxsIHBhdHRlcm4gaW1hZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WV0gXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlXSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuUm90YXRpb25dXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUGF0dGVyblJlcGVhdF0gY2FuIGJlIFwicmVwZWF0XCIsIFwicmVwZWF0LXhcIiwgXCJyZXBlYXQteVwiLCBvciBcIm5vLXJlcGVhdFwiLiAgVGhlIGRlZmF1bHQgaXMgXCJuby1yZXBlYXRcIlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRZXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmZpbGxFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGZpbGwuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUHJpb3JpdHldIGNhbiBiZSBjb2xvciwgbGluZWFyLWdyYWRpZW50LCByYWRpYWwtZ3JhaWRlbnQsIG9yIHBhdHRlcm4uICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBjb2xvci4gIFRoZSBmaWxsUHJpb3JpdHkgcHJvcGVydHkgbWFrZXMgaXQgcmVhbGx5IGVhc3kgdG8gdG9nZ2xlIGJldHdlZW4gZGlmZmVyZW50IGZpbGwgdHlwZXMuICBGb3IgZXhhbXBsZSwgaWYgeW91IHdhbnQgdG8gdG9nZ2xlIGJldHdlZW4gYSBmaWxsIGNvbG9yIHN0eWxlIGFuZCBhIGZpbGwgcGF0dGVybiBzdHlsZSwgc2ltcGx5IHNldCB0aGUgZmlsbCBwcm9wZXJ0eSBhbmQgdGhlIGZpbGxQYXR0ZXJuIHByb3BlcnRpZXMsIGFuZCB0aGVuIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ2NvbG9yJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIGEgY29sb3IgZmlsbCwgb3IgdXNlIHNldEZpbGxQcmlvcml0eSgncGF0dGVybicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCB0aGUgcGF0dGVybiBmaWxsIGNvbmZpZ3VyYXRpb25cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnN0cm9rZV0gc3Ryb2tlIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlUmVkXSBzZXQgc3Ryb2tlIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VHcmVlbl0gc2V0IHN0cm9rZSBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VCbHVlXSBzZXQgc3Ryb2tlIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQWxwaGFdIHNldCBzdHJva2UgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zdHJva2VXaWR0aF0gc3Ryb2tlIHdpZHRoXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlU2NhbGVFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgc3Ryb2tlIHNjYWxlLiAgVGhlIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc3Ryb2tlLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUpvaW5dIGNhbiBiZSBtaXRlciwgcm91bmQsIG9yIGJldmVsLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBtaXRlclxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUNhcF0gY2FuIGJlIGJ1dHQsIHJvdW5kLCBvciBzcWFyZS4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgYnV0dFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc2hhZG93Q29sb3JdXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93UmVkXSBzZXQgc2hhZG93IGNvbG9yIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dHcmVlbl0gc2V0IHNoYWRvdyBjb2xvciBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dCbHVlXSBzZXQgc2hhZG93IGNvbG9yIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93QWxwaGFdIHNldCBzaGFkb3cgY29sb3IgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dCbHVyXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2hhZG93T2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPcGFjaXR5XSBzaGFkb3cgb3BhY2l0eS4gIENhbiBiZSBhbnkgcmVhbCBudW1iZXJcclxuICAgICAqICBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zaGFkb3dFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHNoYWRvdy4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZGFzaF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kYXNoRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBkYXNoQXJyYXkuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmxpc3RlbmluZ10gd2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub3BhY2l0eV0gZGV0ZXJtaW5lcyBub2RlIG9wYWNpdHkuICBDYW4gYmUgYW55IG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNjYWxlXSBzZXQgc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWF0gc2V0IHNjYWxlIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWV0gc2V0IHNjYWxlIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnJvdGF0aW9uXSByb3RhdGlvbiBpbiBkZWdyZWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5vZmZzZXRdIG9mZnNldCBmcm9tIGNlbnRlciBwb2ludCBhbmQgcm90YXRpb24gcG9pbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFhdIHNldCBvZmZzZXQgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WV0gc2V0IG9mZnNldCB5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZHJhZ2dhYmxlXSBtYWtlcyB0aGUgbm9kZSBkcmFnZ2FibGUuICBXaGVuIHN0YWdlcyBhcmUgZHJhZ2dhYmxlLCB5b3UgY2FuIGRyYWcgYW5kIGRyb3BcclxuICAgICAqICB0aGUgZW50aXJlIHN0YWdlIGJ5IGRyYWdnaW5nIGFueSBwb3J0aW9uIG9mIHRoZSBzdGFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZHJhZ0Rpc3RhbmNlXVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbmZpZy5kcmFnQm91bmRGdW5jXVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIGltYWdlT2JqID0gbmV3IEltYWdlKCk7XG4gICAgICogaW1hZ2VPYmoub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICogICB2YXIgaW1hZ2UgPSBuZXcgS2luZXRpYy5JbWFnZSh7XG4gICAgICogICAgIHg6IDIwMCxcbiAgICAgKiAgICAgeTogNTAsXG4gICAgICogICAgIGltYWdlOiBpbWFnZU9iaixcbiAgICAgKiAgICAgd2lkdGg6IDEwMCxcbiAgICAgKiAgICAgaGVpZ2h0OiAxMDBcbiAgICAgKiAgIH0pO1xuICAgICAqIH07XG4gICAgICogaW1hZ2VPYmouc3JjID0gJy9wYXRoL3RvL2ltYWdlLmpwZydcbiAgICAgKi9cbiAgICBLaW5ldGljLkltYWdlID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHRoaXMuX19faW5pdChjb25maWcpO1xuICAgIH07XG5cbiAgICBLaW5ldGljLkltYWdlLnByb3RvdHlwZSA9IHtcbiAgICAgICAgX19faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICAvLyBjYWxsIHN1cGVyIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICBLaW5ldGljLlNoYXBlLmNhbGwodGhpcywgY29uZmlnKTtcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gSU1BR0U7XG4gICAgICAgICAgICB0aGlzLnNjZW5lRnVuYyh0aGlzLl9zY2VuZUZ1bmMpO1xuICAgICAgICAgICAgdGhpcy5oaXRGdW5jKHRoaXMuX2hpdEZ1bmMpO1xuICAgICAgICB9LFxuICAgICAgICBfdXNlQnVmZmVyQ2FudmFzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5oYXNTaGFkb3coKSB8fCB0aGlzLmdldEFic29sdXRlT3BhY2l0eSgpICE9PSAxKSAmJiB0aGlzLmhhc1N0cm9rZSgpICYmIHRoaXMuZ2V0U3RhZ2UoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NjZW5lRnVuYzogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5nZXRXaWR0aCgpLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuZ2V0SGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgaW1hZ2UgPSB0aGlzLmdldEltYWdlKCksXG4gICAgICAgICAgICAgICAgY3JvcFdpZHRoLCBjcm9wSGVpZ2h0LCBwYXJhbXM7XG5cbiAgICAgICAgICAgIGlmIChpbWFnZSkge1xuICAgICAgICAgICAgICAgIGNyb3BXaWR0aCA9IHRoaXMuZ2V0Q3JvcFdpZHRoKCk7XG4gICAgICAgICAgICAgICAgY3JvcEhlaWdodCA9IHRoaXMuZ2V0Q3JvcEhlaWdodCgpO1xuICAgICAgICAgICAgICAgIGlmIChjcm9wV2lkdGggJiYgY3JvcEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSBbaW1hZ2UsIHRoaXMuZ2V0Q3JvcFgoKSwgdGhpcy5nZXRDcm9wWSgpLCBjcm9wV2lkdGgsIGNyb3BIZWlnaHQsIDAsIDAsIHdpZHRoLCBoZWlnaHRdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IFtpbWFnZSwgMCwgMCwgd2lkdGgsIGhlaWdodF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5oYXNGaWxsKCkgfHwgdGhpcy5oYXNTdHJva2UoKSB8fCB0aGlzLmhhc1NoYWRvdygpKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGltYWdlKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UuYXBwbHkoY29udGV4dCwgcGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2hpdEZ1bmM6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IHRoaXMuZ2V0V2lkdGgoKSxcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLmdldEhlaWdodCgpO1xuXG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5yZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0cm9rZVNoYXBlKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRXaWR0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaW1hZ2UgPSB0aGlzLmdldEltYWdlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRycy53aWR0aCB8fCAoaW1hZ2UgPyBpbWFnZS53aWR0aCA6IDApO1xuICAgICAgICB9LFxuICAgICAgICBnZXRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGltYWdlID0gdGhpcy5nZXRJbWFnZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cnMuaGVpZ2h0IHx8IChpbWFnZSA/IGltYWdlLmhlaWdodCA6IDApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuSW1hZ2UsIEtpbmV0aWMuU2hhcGUpO1xuXG4gICAgLy8gYWRkIGdldHRlcnMgc2V0dGVyc1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5JbWFnZSwgJ2ltYWdlJyk7XG5cbiAgICAvKipcbiAgICAgKiBzZXQgaW1hZ2VcbiAgICAgKiBAbmFtZSBzZXRJbWFnZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5JbWFnZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0ltYWdlfSBpbWFnZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogZ2V0IGltYWdlXG4gICAgICogQG5hbWUgZ2V0SW1hZ2VcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuSW1hZ2UucHJvdG90eXBlXG4gICAgICogQHJldHVybnMge0ltYWdlfVxuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZENvbXBvbmVudHNHZXR0ZXJTZXR0ZXIoS2luZXRpYy5JbWFnZSwgJ2Nyb3AnLCBbJ3gnLCAneScsICd3aWR0aCcsICdoZWlnaHQnXSk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBjcm9wXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBuYW1lIGNyb3BcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5JbWFnZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY3JvcCBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY3JvcC54XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNyb3AueVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjcm9wLndpZHRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNyb3AuaGVpZ2h0XG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBjcm9wXG4gICAgICogdmFyIGNyb3AgPSBpbWFnZS5jcm9wKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgY3JvcFxuICAgICAqIGltYWdlLmNyb3Aoe1xuICAgICAqICAgeDogMjAsXG4gICAgICogICB5OiAyMCxcbiAgICAgKiAgIHdpZHRoOiAyMCxcbiAgICAgKiAgIGhlaWdodDogMjBcbiAgICAgKiB9KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5JbWFnZSwgJ2Nyb3BYJywgMCk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBjcm9wIHhcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG5hbWUgY3JvcFhcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5JbWFnZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgY3JvcCB4XG4gICAgICogdmFyIGNyb3BYID0gaW1hZ2UuY3JvcFgoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBjcm9wIHhcbiAgICAgKiBpbWFnZS5jcm9wWCgyMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuSW1hZ2UsICdjcm9wWScsIDApO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgY3JvcCB5XG4gICAgICogQG5hbWUgY3JvcFlcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuSW1hZ2UucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGNyb3AgeVxuICAgICAqIHZhciBjcm9wWSA9IGltYWdlLmNyb3BZKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgY3JvcCB5XG4gICAgICogaW1hZ2UuY3JvcFkoMjApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkltYWdlLCAnY3JvcFdpZHRoJywgMCk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBjcm9wIHdpZHRoXG4gICAgICogQG5hbWUgY3JvcFdpZHRoXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkltYWdlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgY3JvcCB3aWR0aFxuICAgICAqIHZhciBjcm9wV2lkdGggPSBpbWFnZS5jcm9wV2lkdGgoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBjcm9wIHdpZHRoXG4gICAgICogaW1hZ2UuY3JvcFdpZHRoKDIwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5JbWFnZSwgJ2Nyb3BIZWlnaHQnLCAwKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGNyb3AgaGVpZ2h0XG4gICAgICogQG5hbWUgY3JvcEhlaWdodFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5JbWFnZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBjcm9wIGhlaWdodFxuICAgICAqIHZhciBjcm9wSGVpZ2h0ID0gaW1hZ2UuY3JvcEhlaWdodCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGNyb3AgaGVpZ2h0XG4gICAgICogaW1hZ2UuY3JvcEhlaWdodCgyMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLkltYWdlKTtcbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xuICAgIC8vIGNvbnN0YW50c1xuICAgIHZhciBBVVRPID0gJ2F1dG8nLFxuICAgICAgICAvL0NBTlZBUyA9ICdjYW52YXMnLFxuICAgICAgICBDRU5URVIgPSAnY2VudGVyJyxcbiAgICAgICAgQ0hBTkdFX0tJTkVUSUMgPSAnQ2hhbmdlLmtpbmV0aWMnLFxuICAgICAgICBDT05URVhUXzJEID0gJzJkJyxcbiAgICAgICAgREFTSCA9ICctJyxcbiAgICAgICAgRU1QVFlfU1RSSU5HID0gJycsXG4gICAgICAgIExFRlQgPSAnbGVmdCcsXG4gICAgICAgIFRFWFQgPSAndGV4dCcsXG4gICAgICAgIFRFWFRfVVBQRVIgPSAnVGV4dCcsXG4gICAgICAgIE1JRERMRSA9ICdtaWRkbGUnLFxuICAgICAgICBOT1JNQUwgPSAnbm9ybWFsJyxcbiAgICAgICAgUFhfU1BBQ0UgPSAncHggJyxcbiAgICAgICAgU1BBQ0UgPSAnICcsXG4gICAgICAgIFJJR0hUID0gJ3JpZ2h0JyxcbiAgICAgICAgV09SRCA9ICd3b3JkJyxcbiAgICAgICAgQ0hBUiA9ICdjaGFyJyxcbiAgICAgICAgTk9ORSA9ICdub25lJyxcbiAgICAgICAgQVRUUl9DSEFOR0VfTElTVCA9IFsnZm9udEZhbWlseScsICdmb250U2l6ZScsICdmb250U3R5bGUnLCAnZm9udFZhcmlhbnQnLCAncGFkZGluZycsICdhbGlnbicsICdsaW5lSGVpZ2h0JywgJ3RleHQnLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ3dyYXAnXSxcblxuICAgICAgICAvLyBjYWNoZWQgdmFyaWFibGVzXG4gICAgICAgIGF0dHJDaGFuZ2VMaXN0TGVuID0gQVRUUl9DSEFOR0VfTElTVC5sZW5ndGgsXG4gICAgICAgIGR1bW15Q29udGV4dCA9IEtpbmV0aWMuVXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCkuZ2V0Q29udGV4dChDT05URVhUXzJEKTtcblxuICAgIC8qKlxuICAgICAqIFRleHQgY29uc3RydWN0b3JcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAqIEBhdWdtZW50cyBLaW5ldGljLlNoYXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZvbnRGYW1pbHldIGRlZmF1bHQgaXMgQXJpYWxcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5mb250U2l6ZV0gaW4gcGl4ZWxzLiAgRGVmYXVsdCBpcyAxMlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZvbnRTdHlsZV0gY2FuIGJlIG5vcm1hbCwgYm9sZCwgb3IgaXRhbGljLiAgRGVmYXVsdCBpcyBub3JtYWxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5mb250VmFyaWFudF0gY2FuIGJlIG5vcm1hbCBvciBzbWFsbC1jYXBzLiAgRGVmYXVsdCBpcyBub3JtYWxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29uZmlnLnRleHRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5hbGlnbl0gY2FuIGJlIGxlZnQsIGNlbnRlciwgb3IgcmlnaHRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5wYWRkaW5nXVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXSBkZWZhdWx0IGlzIGF1dG9cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdIGRlZmF1bHQgaXMgYXV0b1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmxpbmVIZWlnaHRdIGRlZmF1bHQgaXMgMVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLndyYXBdIGNhbiBiZSB3b3JkLCBjaGFyLCBvciBub25lLiBEZWZhdWx0IGlzIHdvcmRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsXSBmaWxsIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbFJlZF0gc2V0IGZpbGwgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxHcmVlbl0gc2V0IGZpbGwgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEJsdWVdIHNldCBmaWxsIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEFscGhhXSBzZXQgZmlsbCBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW1hZ2V9IFtjb25maWcuZmlsbFBhdHRlcm5JbWFnZV0gZmlsbCBwYXR0ZXJuIGltYWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFldIFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZV0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblJvdGF0aW9uXVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFBhdHRlcm5SZXBlYXRdIGNhbiBiZSBcInJlcGVhdFwiLCBcInJlcGVhdC14XCIsIFwicmVwZWF0LXlcIiwgb3IgXCJuby1yZXBlYXRcIi4gIFRoZSBkZWZhdWx0IGlzIFwibm8tcmVwZWF0XCJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WV0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5maWxsRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBmaWxsLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFByaW9yaXR5XSBjYW4gYmUgY29sb3IsIGxpbmVhci1ncmFkaWVudCwgcmFkaWFsLWdyYWlkZW50LCBvciBwYXR0ZXJuLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgY29sb3IuICBUaGUgZmlsbFByaW9yaXR5IHByb3BlcnR5IG1ha2VzIGl0IHJlYWxseSBlYXN5IHRvIHRvZ2dsZSBiZXR3ZWVuIGRpZmZlcmVudCBmaWxsIHR5cGVzLiAgRm9yIGV4YW1wbGUsIGlmIHlvdSB3YW50IHRvIHRvZ2dsZSBiZXR3ZWVuIGEgZmlsbCBjb2xvciBzdHlsZSBhbmQgYSBmaWxsIHBhdHRlcm4gc3R5bGUsIHNpbXBseSBzZXQgdGhlIGZpbGwgcHJvcGVydHkgYW5kIHRoZSBmaWxsUGF0dGVybiBwcm9wZXJ0aWVzLCBhbmQgdGhlbiB1c2Ugc2V0RmlsbFByaW9yaXR5KCdjb2xvcicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCBhIGNvbG9yIGZpbGwsIG9yIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ3BhdHRlcm4nKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggdGhlIHBhdHRlcm4gZmlsbCBjb25maWd1cmF0aW9uXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zdHJva2VdIHN0cm9rZSBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZVJlZF0gc2V0IHN0cm9rZSByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlR3JlZW5dIHNldCBzdHJva2UgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQmx1ZV0gc2V0IHN0cm9rZSBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUFscGhhXSBzZXQgc3Ryb2tlIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc3Ryb2tlV2lkdGhdIHN0cm9rZSB3aWR0aFxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZVNjYWxlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHN0cm9rZSBzY2FsZS4gIFRoZSBkZWZhdWx0IGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHN0cm9rZS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVKb2luXSBjYW4gYmUgbWl0ZXIsIHJvdW5kLCBvciBiZXZlbC4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgbWl0ZXJcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVDYXBdIGNhbiBiZSBidXR0LCByb3VuZCwgb3Igc3FhcmUuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIGJ1dHRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnNoYWRvd0NvbG9yXVxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd1JlZF0gc2V0IHNoYWRvdyBjb2xvciByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93R3JlZW5dIHNldCBzaGFkb3cgY29sb3IgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93Qmx1ZV0gc2V0IHNoYWRvdyBjb2xvciBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0FscGhhXSBzZXQgc2hhZG93IGNvbG9yIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93Qmx1cl1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNoYWRvd09mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T3BhY2l0eV0gc2hhZG93IG9wYWNpdHkuICBDYW4gYmUgYW55IHJlYWwgbnVtYmVyXHJcbiAgICAgKiAgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc2hhZG93RW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzaGFkb3cuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmRhc2hdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZGFzaEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZGFzaEFycmF5LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcudmlzaWJsZV1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5saXN0ZW5pbmddIHdoZXRoZXIgb3Igbm90IHRoZSBub2RlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5pZF0gdW5pcXVlIGlkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5uYW1lXSBub24tdW5pcXVlIG5hbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9wYWNpdHldIGRldGVybWluZXMgbm9kZSBvcGFjaXR5LiAgQ2FuIGJlIGFueSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zY2FsZV0gc2V0IHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVhdIHNldCBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVldIHNldCBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5yb3RhdGlvbl0gcm90YXRpb24gaW4gZGVncmVlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcub2Zmc2V0XSBvZmZzZXQgZnJvbSBjZW50ZXIgcG9pbnQgYW5kIHJvdGF0aW9uIHBvaW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRYXSBzZXQgb2Zmc2V0IHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFldIHNldCBvZmZzZXQgeVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRyYWdnYWJsZV0gbWFrZXMgdGhlIG5vZGUgZHJhZ2dhYmxlLiAgV2hlbiBzdGFnZXMgYXJlIGRyYWdnYWJsZSwgeW91IGNhbiBkcmFnIGFuZCBkcm9wXHJcbiAgICAgKiAgdGhlIGVudGlyZSBzdGFnZSBieSBkcmFnZ2luZyBhbnkgcG9ydGlvbiBvZiB0aGUgc3RhZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmRyYWdEaXN0YW5jZV1cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb25maWcuZHJhZ0JvdW5kRnVuY11cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciB0ZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG4gICAgICogICB4OiAxMCxcbiAgICAgKiAgIHk6IDE1LFxuICAgICAqICAgdGV4dDogJ1NpbXBsZSBUZXh0JyxcbiAgICAgKiAgIGZvbnRTaXplOiAzMCxcbiAgICAgKiAgIGZvbnRGYW1pbHk6ICdDYWxpYnJpJyxcbiAgICAgKiAgIGZpbGw6ICdncmVlbidcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBLaW5ldGljLlRleHQgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdGhpcy5fX19pbml0KGNvbmZpZyk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBfZmlsbEZ1bmMoY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KHRoaXMucGFydGlhbFRleHQsIDAsIDApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfc3Ryb2tlRnVuYyhjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlVGV4dCh0aGlzLnBhcnRpYWxUZXh0LCAwLCAwKTtcbiAgICB9XG5cbiAgICBLaW5ldGljLlRleHQucHJvdG90eXBlID0ge1xuICAgICAgICBfX19pbml0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgICAgICAgIGNvbmZpZy5maWxsID0gY29uZmlnLmZpbGwgfHwgJ2JsYWNrJztcblxuICAgICAgICAgICAgaWYgKGNvbmZpZy53aWR0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLndpZHRoID0gQVVUTztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWcuaGVpZ2h0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuaGVpZ2h0ID0gQVVUTztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY2FsbCBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgS2luZXRpYy5TaGFwZS5jYWxsKHRoaXMsIGNvbmZpZyk7XG5cbiAgICAgICAgICAgIHRoaXMuX2ZpbGxGdW5jID0gX2ZpbGxGdW5jO1xuICAgICAgICAgICAgdGhpcy5fc3Ryb2tlRnVuYyA9IF9zdHJva2VGdW5jO1xuICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSBURVhUX1VQUEVSO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgdGV4dCBkYXRhIGZvciBjZXJ0YWluIGF0dHIgY2hhbmdlc1xuICAgICAgICAgICAgZm9yKHZhciBuID0gMDsgbiA8IGF0dHJDaGFuZ2VMaXN0TGVuOyBuKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uKEFUVFJfQ0hBTkdFX0xJU1Rbbl0gKyBDSEFOR0VfS0lORVRJQywgdGhpcy5fc2V0VGV4dERhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9zZXRUZXh0RGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5zY2VuZUZ1bmModGhpcy5fc2NlbmVGdW5jKTtcbiAgICAgICAgICAgIHRoaXMuaGl0RnVuYyh0aGlzLl9oaXRGdW5jKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NjZW5lRnVuYzogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIHAgPSB0aGlzLmdldFBhZGRpbmcoKSxcbiAgICAgICAgICAgICAgICB0ZXh0SGVpZ2h0ID0gdGhpcy5nZXRUZXh0SGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodFB4ID0gdGhpcy5nZXRMaW5lSGVpZ2h0KCkgKiB0ZXh0SGVpZ2h0LFxuICAgICAgICAgICAgICAgIHRleHRBcnIgPSB0aGlzLnRleHRBcnIsXG4gICAgICAgICAgICAgICAgdGV4dEFyckxlbiA9IHRleHRBcnIubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHRvdGFsV2lkdGggPSB0aGlzLmdldFdpZHRoKCksXG4gICAgICAgICAgICAgICAgbjtcblxuICAgICAgICAgICAgY29udGV4dC5zZXRBdHRyKCdmb250JywgdGhpcy5fZ2V0Q29udGV4dEZvbnQoKSk7XG4gICAgICAgICAgICBjb250ZXh0LnNldEF0dHIoJ3RleHRCYXNlbGluZScsIE1JRERMRSk7XG4gICAgICAgICAgICBjb250ZXh0LnNldEF0dHIoJ3RleHRBbGlnbicsIExFRlQpO1xuICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZShwLCAwKTtcbiAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKDAsIHAgKyB0ZXh0SGVpZ2h0IC8gMik7XG5cbiAgICAgICAgICAgIC8vIGRyYXcgdGV4dCBsaW5lc1xuICAgICAgICAgICAgZm9yKG4gPSAwOyBuIDwgdGV4dEFyckxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IHRleHRBcnJbbl0sXG4gICAgICAgICAgICAgICAgICAgIHRleHQgPSBvYmoudGV4dCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBvYmoud2lkdGg7XG5cbiAgICAgICAgICAgICAgICAvLyBob3Jpem9udGFsIGFsaWdubWVudFxuICAgICAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuZ2V0QWxpZ24oKSA9PT0gUklHSFQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC50cmFuc2xhdGUodG90YWxXaWR0aCAtIHdpZHRoIC0gcCAqIDIsIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKHRoaXMuZ2V0QWxpZ24oKSA9PT0gQ0VOVEVSKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKCh0b3RhbFdpZHRoIC0gd2lkdGggLSBwICogMikgLyAyLCAwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnBhcnRpYWxUZXh0ID0gdGV4dDtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZSgwLCBsaW5lSGVpZ2h0UHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9oaXRGdW5jOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmdldFdpZHRoKCksXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5nZXRIZWlnaHQoKTtcblxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQucmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGV4dDogZnVuY3Rpb24odGV4dCkge1xuICAgICAgICAgICAgdmFyIHN0ciA9IEtpbmV0aWMuVXRpbC5faXNTdHJpbmcodGV4dCkgPyB0ZXh0IDogdGV4dC50b1N0cmluZygpO1xuICAgICAgICAgICAgdGhpcy5fc2V0QXR0cihURVhULCBzdHIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgd2lkdGggb2YgdGV4dCBhcmVhLCB3aGljaCBpbmNsdWRlcyBwYWRkaW5nXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dC5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIGdldFdpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF0dHJzLndpZHRoID09PSBBVVRPID8gdGhpcy5nZXRUZXh0V2lkdGgoKSArIHRoaXMuZ2V0UGFkZGluZygpICogMiA6IHRoaXMuYXR0cnMud2lkdGg7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgdGhlIGhlaWdodCBvZiB0aGUgdGV4dCBhcmVhLCB3aGljaCB0YWtlcyBpbnRvIGFjY291bnQgbXVsdGktbGluZSB0ZXh0LCBsaW5lIGhlaWdodHMsIGFuZCBwYWRkaW5nXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dC5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIGdldEhlaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRycy5oZWlnaHQgPT09IEFVVE8gPyAodGhpcy5nZXRUZXh0SGVpZ2h0KCkgKiB0aGlzLnRleHRBcnIubGVuZ3RoICogdGhpcy5nZXRMaW5lSGVpZ2h0KCkpICsgdGhpcy5nZXRQYWRkaW5nKCkgKiAyIDogdGhpcy5hdHRycy5oZWlnaHQ7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgdGV4dCB3aWR0aFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHQucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRUZXh0V2lkdGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dFdpZHRoO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IHRleHQgaGVpZ2h0XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dC5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIGdldFRleHRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dEhlaWdodDtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldFRleHRTaXplOiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICAgICAgICB2YXIgX2NvbnRleHQgPSBkdW1teUNvbnRleHQsXG4gICAgICAgICAgICAgICAgZm9udFNpemUgPSB0aGlzLmdldEZvbnRTaXplKCksXG4gICAgICAgICAgICAgICAgbWV0cmljcztcblxuICAgICAgICAgICAgX2NvbnRleHQuc2F2ZSgpO1xuICAgICAgICAgICAgX2NvbnRleHQuZm9udCA9IHRoaXMuX2dldENvbnRleHRGb250KCk7XG5cbiAgICAgICAgICAgIG1ldHJpY3MgPSBfY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KTtcbiAgICAgICAgICAgIF9jb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IG1ldHJpY3Mud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBwYXJzZUludChmb250U2l6ZSwgMTApXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBfZ2V0Q29udGV4dEZvbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rm9udFN0eWxlKCkgKyBTUEFDRSArIHRoaXMuZ2V0Rm9udFZhcmlhbnQoKSArIFNQQUNFICsgdGhpcy5nZXRGb250U2l6ZSgpICsgUFhfU1BBQ0UgKyB0aGlzLmdldEZvbnRGYW1pbHkoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2FkZFRleHRMaW5lOiBmdW5jdGlvbiAobGluZSwgd2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHRBcnIucHVzaCh7dGV4dDogbGluZSwgd2lkdGg6IHdpZHRofSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRUZXh0V2lkdGg6IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gZHVtbXlDb250ZXh0Lm1lYXN1cmVUZXh0KHRleHQpLndpZHRoO1xuICAgICAgICB9LFxuICAgICAgICBfc2V0VGV4dERhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBsaW5lcyA9IHRoaXMuZ2V0VGV4dCgpLnNwbGl0KCdcXG4nKSxcbiAgICAgICAgICAgICAgICBmb250U2l6ZSA9ICt0aGlzLmdldEZvbnRTaXplKCksXG4gICAgICAgICAgICAgICAgdGV4dFdpZHRoID0gMCxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0UHggPSB0aGlzLmdldExpbmVIZWlnaHQoKSAqIGZvbnRTaXplLFxuICAgICAgICAgICAgICAgIHdpZHRoID0gdGhpcy5hdHRycy53aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLmF0dHJzLmhlaWdodCxcbiAgICAgICAgICAgICAgICBmaXhlZFdpZHRoID0gd2lkdGggIT09IEFVVE8sXG4gICAgICAgICAgICAgICAgZml4ZWRIZWlnaHQgPSBoZWlnaHQgIT09IEFVVE8sXG4gICAgICAgICAgICAgICAgcGFkZGluZyA9IHRoaXMuZ2V0UGFkZGluZygpLFxuICAgICAgICAgICAgICAgIG1heFdpZHRoID0gd2lkdGggLSBwYWRkaW5nICogMixcbiAgICAgICAgICAgICAgICBtYXhIZWlnaHRQeCA9IGhlaWdodCAtIHBhZGRpbmcgKiAyLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRIZWlnaHRQeCA9IDAsXG4gICAgICAgICAgICAgICAgd3JhcCA9IHRoaXMuZ2V0V3JhcCgpLFxuICAgICAgICAgICAgICAgIHNob3VsZFdyYXAgPSB3cmFwICE9PSBOT05FLFxuICAgICAgICAgICAgICAgIHdyYXBBdFdvcmQgPSB3cmFwICE9PSAgQ0hBUiAmJiBzaG91bGRXcmFwO1xuXG4gICAgICAgICAgICB0aGlzLnRleHRBcnIgPSBbXTtcbiAgICAgICAgICAgIGR1bW15Q29udGV4dC5zYXZlKCk7XG4gICAgICAgICAgICBkdW1teUNvbnRleHQuZm9udCA9IHRoaXMuX2dldENvbnRleHRGb250KCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbWF4ID0gbGluZXMubGVuZ3RoOyBpIDwgbWF4OyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGluZSA9IGxpbmVzW2ldLFxuICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGggPSB0aGlzLl9nZXRUZXh0V2lkdGgobGluZSk7XG4gICAgICAgICAgICAgICAgaWYgKGZpeGVkV2lkdGggJiYgbGluZVdpZHRoID4gbWF4V2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICogaWYgd2lkdGggaXMgZml4ZWQgYW5kIGxpbmUgZG9lcyBub3QgZml0IGVudGlyZWx5XG4gICAgICAgICAgICAgICAgICAgICAqIGJyZWFrIHRoZSBsaW5lIGludG8gbXVsdGlwbGUgZml0dGluZyBsaW5lc1xuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIHVzZSBiaW5hcnkgc2VhcmNoIHRvIGZpbmQgdGhlIGxvbmdlc3Qgc3Vic3RyaW5nIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIHRoYXQgd291bGQgZml0IGluIHRoZSBzcGVjaWZpZWQgd2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBsaW5lLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9ICcnLCBtYXRjaFdpZHRoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic3RyID0gbGluZS5zbGljZSgwLCBtaWQgKyAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic3RyV2lkdGggPSB0aGlzLl9nZXRUZXh0V2lkdGgoc3Vic3RyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic3RyV2lkdGggPD0gbWF4V2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBzdWJzdHI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoV2lkdGggPSBzdWJzdHJXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiAnbG93JyBpcyBub3cgdGhlIGluZGV4IG9mIHRoZSBzdWJzdHJpbmcgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiAnbWF0Y2gnIGlzIHRoZSBzdWJzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAqICdtYXRjaFdpZHRoJyBpcyB0aGUgc3Vic3RyaW5nIHdpZHRoIGluIHB4XG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgZml0dGluZyBzdWJzdHJpbmcgd2FzIGZvdW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdyYXBBdFdvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJ5IHRvIGZpbmQgYSBzcGFjZSBvciBkYXNoIHdoZXJlIHdyYXBwaW5nIGNvdWxkIGJlIGRvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdyYXBJbmRleCA9IE1hdGgubWF4KG1hdGNoLmxhc3RJbmRleE9mKFNQQUNFKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaC5sYXN0SW5kZXhPZihEQVNIKSkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod3JhcEluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmUtY3V0IHRoZSBzdWJzdHJpbmcgZm91bmQgYXQgdGhlIHNwYWNlL2Rhc2ggcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvdyA9IHdyYXBJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gbWF0Y2guc2xpY2UoMCwgbG93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoV2lkdGggPSB0aGlzLl9nZXRUZXh0V2lkdGgobWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZFRleHRMaW5lKG1hdGNoLCBtYXRjaFdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0V2lkdGggPSBNYXRoLm1heCh0ZXh0V2lkdGgsIG1hdGNoV2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRIZWlnaHRQeCArPSBsaW5lSGVpZ2h0UHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzaG91bGRXcmFwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmaXhlZEhlaWdodCAmJiBjdXJyZW50SGVpZ2h0UHggKyBsaW5lSGVpZ2h0UHggPiBtYXhIZWlnaHRQeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogc3RvcCB3cmFwcGluZyBpZiB3cmFwcGluZyBpcyBkaXNhYmxlZCBvciBpZiBhZGRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogb25lIG1vcmUgbGluZSB3b3VsZCBvdmVyZmxvdyB0aGUgZml4ZWQgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZSA9IGxpbmUuc2xpY2UobG93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSByZW1haW5pbmcgdGV4dCB3b3VsZCBmaXQgb24gb25lIGxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoID0gdGhpcy5fZ2V0VGV4dFdpZHRoKGxpbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZVdpZHRoIDw9IG1heFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBpdCBkb2VzLCBhZGQgdGhlIGxpbmUgYW5kIGJyZWFrIG91dCBvZiB0aGUgbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkVGV4dExpbmUobGluZSwgbGluZVdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRIZWlnaHRQeCArPSBsaW5lSGVpZ2h0UHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0V2lkdGggPSBNYXRoLm1heCh0ZXh0V2lkdGgsIGxpbmVXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm90IGV2ZW4gb25lIGNoYXJhY3RlciBjb3VsZCBmaXQgaW4gdGhlIGVsZW1lbnQsIGFib3J0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBlbGVtZW50IHdpZHRoIGlzIGF1dG9tYXRpY2FsbHkgYWRqdXN0ZWQgdG8gbWF4IGxpbmUgd2lkdGhcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkVGV4dExpbmUobGluZSwgbGluZVdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEhlaWdodFB4ICs9IGxpbmVIZWlnaHRQeDtcbiAgICAgICAgICAgICAgICAgICAgdGV4dFdpZHRoID0gTWF0aC5tYXgodGV4dFdpZHRoLCBsaW5lV2lkdGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBpZiBlbGVtZW50IGhlaWdodCBpcyBmaXhlZCwgYWJvcnQgaWYgYWRkaW5nIG9uZSBtb3JlIGxpbmUgd291bGQgb3ZlcmZsb3dcbiAgICAgICAgICAgICAgICBpZiAoZml4ZWRIZWlnaHQgJiYgY3VycmVudEhlaWdodFB4ICsgbGluZUhlaWdodFB4ID4gbWF4SGVpZ2h0UHgpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZHVtbXlDb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgICAgIHRoaXMudGV4dEhlaWdodCA9IGZvbnRTaXplO1xuICAgICAgICAgICAgdGhpcy50ZXh0V2lkdGggPSB0ZXh0V2lkdGg7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5UZXh0LCBLaW5ldGljLlNoYXBlKTtcblxuICAgIC8vIGFkZCBnZXR0ZXJzIHNldHRlcnNcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuVGV4dCwgJ2ZvbnRGYW1pbHknLCAnQXJpYWwnKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZm9udCBmYW1pbHlcbiAgICAgKiBAbmFtZSBmb250RmFtaWx5XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHQucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZvbnRGYW1pbHlcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZvbnQgZmFtaWx5XG4gICAgICogdmFyIGZvbnRGYW1pbHkgPSB0ZXh0LmZvbnRGYW1pbHkoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmb250IGZhbWlseVxuICAgICAqIHRleHQuZm9udEZhbWlseSgnQXJpYWwnKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5UZXh0LCAnZm9udFNpemUnLCAxMik7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZvbnQgc2l6ZSBpbiBwaXhlbHNcbiAgICAgKiBAbmFtZSBmb250U2l6ZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0LnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBmb250U2l6ZVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZm9udCBzaXplXG4gICAgICogdmFyIGZvbnRTaXplID0gdGV4dC5mb250U2l6ZSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZvbnQgc2l6ZSB0byAyMnB4XG4gICAgICogdGV4dC5mb250U2l6ZSgyMik7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuVGV4dCwgJ2ZvbnRTdHlsZScsIE5PUk1BTCk7XG5cbiAgICAvKipcbiAgICAgKiBzZXQgZm9udCBzdHlsZS4gIENhbiBiZSAnbm9ybWFsJywgJ2l0YWxpYycsIG9yICdib2xkJy4gICdub3JtYWwnIGlzIHRoZSBkZWZhdWx0LlxuICAgICAqIEBuYW1lIGZvbnRTdHlsZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0LnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmb250U3R5bGVcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZvbnQgc3R5bGVcbiAgICAgKiB2YXIgZm9udFN0eWxlID0gdGV4dC5mb250U3R5bGUoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmb250IHN0eWxlXG4gICAgICogdGV4dC5mb250U3R5bGUoJ2JvbGQnKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5UZXh0LCAnZm9udFZhcmlhbnQnLCBOT1JNQUwpO1xuXG4gICAgLyoqXG4gICAgICogc2V0IGZvbnQgdmFyaWFudC4gIENhbiBiZSAnbm9ybWFsJyBvciAnc21hbGwtY2FwcycuICAnbm9ybWFsJyBpcyB0aGUgZGVmYXVsdC5cbiAgICAgKiBAbmFtZSBmb250VmFyaWFudFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0LnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmb250VmFyaWFudFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZm9udCB2YXJpYW50XG4gICAgICogdmFyIGZvbnRWYXJpYW50ID0gdGV4dC5mb250VmFyaWFudCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZvbnQgdmFyaWFudFxuICAgICAqIHRleHQuZm9udFZhcmlhbnQoJ3NtYWxsLWNhcHMnKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5UZXh0LCAncGFkZGluZycsIDApO1xuXG4gICAgLyoqXG4gICAgICogc2V0IHBhZGRpbmdcbiAgICAgKiBAbmFtZSBwYWRkaW5nXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHQucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHBhZGRpbmdcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHBhZGRpbmdcbiAgICAgKiB2YXIgcGFkZGluZyA9IHRleHQucGFkZGluZygpO1xuICAgICAqIFxuICAgICAqIC8vIHNldCBwYWRkaW5nIHRvIDEwIHBpeGVsc1xuICAgICAqIHRleHQucGFkZGluZygxMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuVGV4dCwgJ2FsaWduJywgTEVGVCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGhvcml6b250YWwgYWxpZ24gb2YgdGV4dC4gIENhbiBiZSAnbGVmdCcsICdjZW50ZXInLCBvciAncmlnaHQnXG4gICAgICogQG5hbWUgYWxpZ25cbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dC5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYWxpZ25cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHRleHQgYWxpZ25cbiAgICAgKiB2YXIgYWxpZ24gPSB0ZXh0LmFsaWduKCk7XG4gICAgICpcbiAgICAgKiAvLyBjZW50ZXIgdGV4dFxuICAgICAqIHRleHQuYWxpZ24oJ2NlbnRlcicpO1xuICAgICAqXG4gICAgICogLy8gYWxpZ24gdGV4dCB0byByaWdodFxuICAgICAqIHRleHQuYWxpZ24oJ3JpZ2h0Jyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuVGV4dCwgJ2xpbmVIZWlnaHQnLCAxKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgbGluZSBoZWlnaHQuICBUaGUgZGVmYXVsdCBpcyAxLlxuICAgICAqIEBuYW1lIGxpbmVIZWlnaHRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dC5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUhlaWdodFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGUgXG4gICAgICogLy8gZ2V0IGxpbmUgaGVpZ2h0XG4gICAgICogdmFyIGxpbmVIZWlnaHQgPSB0ZXh0LmxpbmVIZWlnaHQoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCB0aGUgbGluZSBoZWlnaHRcbiAgICAgKiB0ZXh0LmxpbmVIZWlnaHQoMik7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuVGV4dCwgJ3dyYXAnLCBXT1JEKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgd3JhcC4gIENhbiBiZSB3b3JkLCBjaGFyLCBvciBub25lLiBEZWZhdWx0IGlzIHdvcmQuXG4gICAgICogQG5hbWUgd3JhcFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0LnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB3cmFwXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCB3cmFwXG4gICAgICogdmFyIHdyYXAgPSB0ZXh0LndyYXAoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCB3cmFwXG4gICAgICogdGV4dC53cmFwKCd3b3JkJyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyKEtpbmV0aWMuVGV4dCwgJ3RleHQnLCBFTVBUWV9TVFJJTkcpO1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRPdmVybG9hZGVkR2V0dGVyU2V0dGVyKEtpbmV0aWMuVGV4dCwgJ3RleHQnKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgdGV4dFxuICAgICAqIEBuYW1lIGdldFRleHRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dC5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgdGV4dFxuICAgICAqIHZhciB0ZXh0ID0gdGV4dC50ZXh0KCk7XG4gICAgICogXG4gICAgICogLy8gc2V0IHRleHRcbiAgICAgKiB0ZXh0LnRleHQoJ0hlbGxvIHdvcmxkIScpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5UZXh0KTtcbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xuICAgIC8qKlxuICAgICAqIExpbmUgY29uc3RydWN0b3IuJm5ic3A7IExpbmVzIGFyZSBkZWZpbmVkIGJ5IGFuIGFycmF5IG9mIHBvaW50cyBhbmRcbiAgICAgKiAgYSB0ZW5zaW9uXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgKiBAYXVnbWVudHMgS2luZXRpYy5TaGFwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBjb25maWcucG9pbnRzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcudGVuc2lvbl0gSGlnaGVyIHZhbHVlcyB3aWxsIHJlc3VsdCBpbiBhIG1vcmUgY3VydnkgbGluZS4gIEEgdmFsdWUgb2YgMCB3aWxsIHJlc3VsdCBpbiBubyBpbnRlcnBvbGF0aW9uLlxuICAgICAqICAgVGhlIGRlZmF1bHQgaXMgMFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5jbG9zZWRdIGRlZmluZXMgd2hldGhlciBvciBub3QgdGhlIGxpbmUgc2hhcGUgaXMgY2xvc2VkLCBjcmVhdGluZyBhIHBvbHlnb24gb3IgYmxvYiBcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsXSBmaWxsIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbFJlZF0gc2V0IGZpbGwgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxHcmVlbl0gc2V0IGZpbGwgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEJsdWVdIHNldCBmaWxsIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEFscGhhXSBzZXQgZmlsbCBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW1hZ2V9IFtjb25maWcuZmlsbFBhdHRlcm5JbWFnZV0gZmlsbCBwYXR0ZXJuIGltYWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFldIFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZV0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblJvdGF0aW9uXVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFBhdHRlcm5SZXBlYXRdIGNhbiBiZSBcInJlcGVhdFwiLCBcInJlcGVhdC14XCIsIFwicmVwZWF0LXlcIiwgb3IgXCJuby1yZXBlYXRcIi4gIFRoZSBkZWZhdWx0IGlzIFwibm8tcmVwZWF0XCJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WV0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5maWxsRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBmaWxsLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFByaW9yaXR5XSBjYW4gYmUgY29sb3IsIGxpbmVhci1ncmFkaWVudCwgcmFkaWFsLWdyYWlkZW50LCBvciBwYXR0ZXJuLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgY29sb3IuICBUaGUgZmlsbFByaW9yaXR5IHByb3BlcnR5IG1ha2VzIGl0IHJlYWxseSBlYXN5IHRvIHRvZ2dsZSBiZXR3ZWVuIGRpZmZlcmVudCBmaWxsIHR5cGVzLiAgRm9yIGV4YW1wbGUsIGlmIHlvdSB3YW50IHRvIHRvZ2dsZSBiZXR3ZWVuIGEgZmlsbCBjb2xvciBzdHlsZSBhbmQgYSBmaWxsIHBhdHRlcm4gc3R5bGUsIHNpbXBseSBzZXQgdGhlIGZpbGwgcHJvcGVydHkgYW5kIHRoZSBmaWxsUGF0dGVybiBwcm9wZXJ0aWVzLCBhbmQgdGhlbiB1c2Ugc2V0RmlsbFByaW9yaXR5KCdjb2xvcicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCBhIGNvbG9yIGZpbGwsIG9yIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ3BhdHRlcm4nKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggdGhlIHBhdHRlcm4gZmlsbCBjb25maWd1cmF0aW9uXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zdHJva2VdIHN0cm9rZSBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZVJlZF0gc2V0IHN0cm9rZSByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlR3JlZW5dIHNldCBzdHJva2UgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQmx1ZV0gc2V0IHN0cm9rZSBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUFscGhhXSBzZXQgc3Ryb2tlIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc3Ryb2tlV2lkdGhdIHN0cm9rZSB3aWR0aFxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZVNjYWxlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHN0cm9rZSBzY2FsZS4gIFRoZSBkZWZhdWx0IGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHN0cm9rZS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVKb2luXSBjYW4gYmUgbWl0ZXIsIHJvdW5kLCBvciBiZXZlbC4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgbWl0ZXJcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVDYXBdIGNhbiBiZSBidXR0LCByb3VuZCwgb3Igc3FhcmUuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIGJ1dHRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnNoYWRvd0NvbG9yXVxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd1JlZF0gc2V0IHNoYWRvdyBjb2xvciByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93R3JlZW5dIHNldCBzaGFkb3cgY29sb3IgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93Qmx1ZV0gc2V0IHNoYWRvdyBjb2xvciBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0FscGhhXSBzZXQgc2hhZG93IGNvbG9yIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93Qmx1cl1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNoYWRvd09mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T3BhY2l0eV0gc2hhZG93IG9wYWNpdHkuICBDYW4gYmUgYW55IHJlYWwgbnVtYmVyXHJcbiAgICAgKiAgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc2hhZG93RW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzaGFkb3cuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmRhc2hdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZGFzaEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZGFzaEFycmF5LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcudmlzaWJsZV1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5saXN0ZW5pbmddIHdoZXRoZXIgb3Igbm90IHRoZSBub2RlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5pZF0gdW5pcXVlIGlkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5uYW1lXSBub24tdW5pcXVlIG5hbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9wYWNpdHldIGRldGVybWluZXMgbm9kZSBvcGFjaXR5LiAgQ2FuIGJlIGFueSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zY2FsZV0gc2V0IHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVhdIHNldCBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVldIHNldCBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5yb3RhdGlvbl0gcm90YXRpb24gaW4gZGVncmVlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcub2Zmc2V0XSBvZmZzZXQgZnJvbSBjZW50ZXIgcG9pbnQgYW5kIHJvdGF0aW9uIHBvaW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRYXSBzZXQgb2Zmc2V0IHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFldIHNldCBvZmZzZXQgeVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRyYWdnYWJsZV0gbWFrZXMgdGhlIG5vZGUgZHJhZ2dhYmxlLiAgV2hlbiBzdGFnZXMgYXJlIGRyYWdnYWJsZSwgeW91IGNhbiBkcmFnIGFuZCBkcm9wXHJcbiAgICAgKiAgdGhlIGVudGlyZSBzdGFnZSBieSBkcmFnZ2luZyBhbnkgcG9ydGlvbiBvZiB0aGUgc3RhZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmRyYWdEaXN0YW5jZV1cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb25maWcuZHJhZ0JvdW5kRnVuY11cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBsaW5lID0gbmV3IEtpbmV0aWMuTGluZSh7XG4gICAgICogICB4OiAxMDAsXG4gICAgICogICB5OiA1MCxcbiAgICAgKiAgIHBvaW50czogWzczLCA3MCwgMzQwLCAyMywgNDUwLCA2MCwgNTAwLCAyMF0sXG4gICAgICogICBzdHJva2U6ICdyZWQnLFxuICAgICAqICAgdGVuc2lvbjogMVxuICAgICAqIH0pO1xuICAgICAqL1xuICAgIEtpbmV0aWMuTGluZSA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB0aGlzLl9fX2luaXQoY29uZmlnKTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5MaW5lLnByb3RvdHlwZSA9IHtcbiAgICAgICAgX19faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICAvLyBjYWxsIHN1cGVyIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICBLaW5ldGljLlNoYXBlLmNhbGwodGhpcywgY29uZmlnKTtcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ0xpbmUnO1xuXG4gICAgICAgICAgICB0aGlzLm9uKCdwb2ludHNDaGFuZ2Uua2luZXRpYyB0ZW5zaW9uQ2hhbmdlLmtpbmV0aWMgY2xvc2VkQ2hhbmdlLmtpbmV0aWMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGVhckNhY2hlKCd0ZW5zaW9uUG9pbnRzJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5zY2VuZUZ1bmModGhpcy5fc2NlbmVGdW5jKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NjZW5lRnVuYzogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIHBvaW50cyA9IHRoaXMuZ2V0UG9pbnRzKCksXG4gICAgICAgICAgICAgICAgbGVuZ3RoID0gcG9pbnRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICB0ZW5zaW9uID0gdGhpcy5nZXRUZW5zaW9uKCksXG4gICAgICAgICAgICAgICAgY2xvc2VkID0gdGhpcy5nZXRDbG9zZWQoKSxcbiAgICAgICAgICAgICAgICB0cCwgbGVuLCBuO1xuXG4gICAgICAgICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXSwgcG9pbnRzWzFdKTtcblxuICAgICAgICAgICAgLy8gdGVuc2lvblxuICAgICAgICAgICAgaWYodGVuc2lvbiAhPT0gMCAmJiBsZW5ndGggPiA0KSB7XG4gICAgICAgICAgICAgICAgdHAgPSB0aGlzLmdldFRlbnNpb25Qb2ludHMoKTtcbiAgICAgICAgICAgICAgICBsZW4gPSB0cC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgbiA9IGNsb3NlZCA/IDAgOiA0O1xuXG4gICAgICAgICAgICAgICAgaWYgKCFjbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKHRwWzBdLCB0cFsxXSwgdHBbMl0sIHRwWzNdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3aGlsZShuIDwgbGVuIC0gMikge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmJlemllckN1cnZlVG8odHBbbisrXSwgdHBbbisrXSwgdHBbbisrXSwgdHBbbisrXSwgdHBbbisrXSwgdHBbbisrXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFjbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKHRwW2xlbi0yXSwgdHBbbGVuLTFdLCBwb2ludHNbbGVuZ3RoLTJdLCBwb2ludHNbbGVuZ3RoLTFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBubyB0ZW5zaW9uXG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IobiA9IDI7IG4gPCBsZW5ndGg7IG4rPTIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8ocG9pbnRzW25dLCBwb2ludHNbbisxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjbG9zZWQgZS5nLiBwb2x5Z29ucyBhbmQgYmxvYnNcbiAgICAgICAgICAgIGlmIChjbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0cm9rZVNoYXBlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gb3BlbiBlLmcuIGxpbmVzIGFuZCBzcGxpbmVzXG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVNoYXBlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZXRUZW5zaW9uUG9pbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRDYWNoZSgndGVuc2lvblBvaW50cycsIHRoaXMuX2dldFRlbnNpb25Qb2ludHMpO1xuICAgICAgICB9LFxuICAgICAgICBfZ2V0VGVuc2lvblBvaW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRDbG9zZWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRUZW5zaW9uUG9pbnRzQ2xvc2VkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gS2luZXRpYy5VdGlsLl9leHBhbmRQb2ludHModGhpcy5nZXRQb2ludHMoKSwgdGhpcy5nZXRUZW5zaW9uKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZ2V0VGVuc2lvblBvaW50c0Nsb3NlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcCA9IHRoaXMuZ2V0UG9pbnRzKCksXG4gICAgICAgICAgICAgICAgbGVuID0gcC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgdGVuc2lvbiA9IHRoaXMuZ2V0VGVuc2lvbigpLFxuICAgICAgICAgICAgICAgIHV0aWwgPSBLaW5ldGljLlV0aWwsXG4gICAgICAgICAgICAgICAgZmlyc3RDb250cm9sUG9pbnRzID0gdXRpbC5fZ2V0Q29udHJvbFBvaW50cyhcbiAgICAgICAgICAgICAgICAgICAgcFtsZW4tMl0sXG4gICAgICAgICAgICAgICAgICAgIHBbbGVuLTFdLFxuICAgICAgICAgICAgICAgICAgICBwWzBdLFxuICAgICAgICAgICAgICAgICAgICBwWzFdLFxuICAgICAgICAgICAgICAgICAgICBwWzJdLFxuICAgICAgICAgICAgICAgICAgICBwWzNdLFxuICAgICAgICAgICAgICAgICAgICB0ZW5zaW9uXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBsYXN0Q29udHJvbFBvaW50cyA9IHV0aWwuX2dldENvbnRyb2xQb2ludHMoXG4gICAgICAgICAgICAgICAgICAgIHBbbGVuLTRdLFxuICAgICAgICAgICAgICAgICAgICBwW2xlbi0zXSxcbiAgICAgICAgICAgICAgICAgICAgcFtsZW4tMl0sXG4gICAgICAgICAgICAgICAgICAgIHBbbGVuLTFdLFxuICAgICAgICAgICAgICAgICAgICBwWzBdLFxuICAgICAgICAgICAgICAgICAgICBwWzFdLFxuICAgICAgICAgICAgICAgICAgICB0ZW5zaW9uXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBtaWRkbGUgPSBLaW5ldGljLlV0aWwuX2V4cGFuZFBvaW50cyhwLCB0ZW5zaW9uKSxcbiAgICAgICAgICAgICAgICB0cCA9IFtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RDb250cm9sUG9pbnRzWzJdLFxuICAgICAgICAgICAgICAgICAgICBmaXJzdENvbnRyb2xQb2ludHNbM11cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgLmNvbmNhdChtaWRkbGUpXG4gICAgICAgICAgICAgICAgLmNvbmNhdChbXG4gICAgICAgICAgICAgICAgICAgIGxhc3RDb250cm9sUG9pbnRzWzBdLFxuICAgICAgICAgICAgICAgICAgICBsYXN0Q29udHJvbFBvaW50c1sxXSxcbiAgICAgICAgICAgICAgICAgICAgcFtsZW4tMl0sXG4gICAgICAgICAgICAgICAgICAgIHBbbGVuLTFdLFxuICAgICAgICAgICAgICAgICAgICBsYXN0Q29udHJvbFBvaW50c1syXSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdENvbnRyb2xQb2ludHNbM10sXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0Q29udHJvbFBvaW50c1swXSxcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RDb250cm9sUG9pbnRzWzFdLFxuICAgICAgICAgICAgICAgICAgICBwWzBdLFxuICAgICAgICAgICAgICAgICAgICBwWzFdXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRwO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuTGluZSwgS2luZXRpYy5TaGFwZSk7XG5cbiAgICAvLyBhZGQgZ2V0dGVycyBzZXR0ZXJzXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkxpbmUsICdjbG9zZWQnLCBmYWxzZSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGNsb3NlZCBmbGFnLiAgVGhlIGRlZmF1bHQgaXMgZmFsc2VcbiAgICAgKiBAbmFtZSBjbG9zZWRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTGluZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNsb3NlZFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGNsb3NlZCBmbGFnXG4gICAgICogdmFyIGNsb3NlZCA9IGxpbmUuY2xvc2VkKCk7XG4gICAgICpcbiAgICAgKiAvLyBjbG9zZSB0aGUgc2hhcGVcbiAgICAgKiBsaW5lLmNsb3NlZCh0cnVlKTtcbiAgICAgKlxuICAgICAqIC8vIG9wZW4gdGhlIHNoYXBlXG4gICAgICogbGluZS5jbG9zZWQoZmFsc2UpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkxpbmUsICd0ZW5zaW9uJywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHRlbnNpb25cbiAgICAgKiBAbmFtZSB0ZW5zaW9uXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkxpbmUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IEhpZ2hlciB2YWx1ZXMgd2lsbCByZXN1bHQgaW4gYSBtb3JlIGN1cnZ5IGxpbmUuICBBIHZhbHVlIG9mIDAgd2lsbCByZXN1bHQgaW4gbm8gaW50ZXJwb2xhdGlvbi5cbiAgICAgKiAgIFRoZSBkZWZhdWx0IGlzIDBcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHRlbnNpb25cbiAgICAgKiB2YXIgdGVuc2lvbiA9IGxpbmUudGVuc2lvbigpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHRlbnNpb25cbiAgICAgKiBsaW5lLnRlbnNpb24oMyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTGluZSwgJ3BvaW50cycsIFtdKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHBvaW50cyBhcnJheVxuICAgICAqIEBuYW1lIHBvaW50c1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5MaW5lLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBvaW50c1xuICAgICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBwb2ludHNcbiAgICAgKiB2YXIgcG9pbnRzID0gbGluZS5wb2ludHMoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBwb2ludHNcbiAgICAgKiBsaW5lLnBvaW50cyhbMTAsIDIwLCAzMCwgNDAsIDUwLCA2MF0pO1xuICAgICAqXG4gICAgICogLy8gcHVzaCBhIG5ldyBwb2ludFxuICAgICAqIGxpbmUucG9pbnRzKGxpbmUucG9pbnRzKCkuY29uY2F0KFs3MCwgODBdKSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLkxpbmUpO1xufSkoKTs7KGZ1bmN0aW9uKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBTcHJpdGUgY29uc3RydWN0b3JcclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWNcclxuICAgICAqIEBhdWdtZW50cyBLaW5ldGljLlNoYXBlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29uZmlnLmFuaW1hdGlvbiBhbmltYXRpb24ga2V5XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnLmFuaW1hdGlvbnMgYW5pbWF0aW9uIG1hcFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZyYW1lSW5kZXhdIGFuaW1hdGlvbiBmcmFtZSBpbmRleFxyXG4gICAgICogQHBhcmFtIHtJbWFnZX0gY29uZmlnLmltYWdlIGltYWdlIG9iamVjdFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbF0gZmlsbCBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxSZWRdIHNldCBmaWxsIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsR3JlZW5dIHNldCBmaWxsIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxCbHVlXSBzZXQgZmlsbCBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxBbHBoYV0gc2V0IGZpbGwgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ltYWdlfSBbY29uZmlnLmZpbGxQYXR0ZXJuSW1hZ2VdIGZpbGwgcGF0dGVybiBpbWFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5YXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5ZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRZXSBcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5Sb3RhdGlvbl1cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQYXR0ZXJuUmVwZWF0XSBjYW4gYmUgXCJyZXBlYXRcIiwgXCJyZXBlYXQteFwiLCBcInJlcGVhdC15XCIsIG9yIFwibm8tcmVwZWF0XCIuICBUaGUgZGVmYXVsdCBpcyBcIm5vLXJlcGVhdFwiXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFldIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZmlsbEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZmlsbC4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQcmlvcml0eV0gY2FuIGJlIGNvbG9yLCBsaW5lYXItZ3JhZGllbnQsIHJhZGlhbC1ncmFpZGVudCwgb3IgcGF0dGVybi4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGNvbG9yLiAgVGhlIGZpbGxQcmlvcml0eSBwcm9wZXJ0eSBtYWtlcyBpdCByZWFsbHkgZWFzeSB0byB0b2dnbGUgYmV0d2VlbiBkaWZmZXJlbnQgZmlsbCB0eXBlcy4gIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byB0b2dnbGUgYmV0d2VlbiBhIGZpbGwgY29sb3Igc3R5bGUgYW5kIGEgZmlsbCBwYXR0ZXJuIHN0eWxlLCBzaW1wbHkgc2V0IHRoZSBmaWxsIHByb3BlcnR5IGFuZCB0aGUgZmlsbFBhdHRlcm4gcHJvcGVydGllcywgYW5kIHRoZW4gdXNlIHNldEZpbGxQcmlvcml0eSgnY29sb3InKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggYSBjb2xvciBmaWxsLCBvciB1c2Ugc2V0RmlsbFByaW9yaXR5KCdwYXR0ZXJuJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIHRoZSBwYXR0ZXJuIGZpbGwgY29uZmlndXJhdGlvblxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc3Ryb2tlXSBzdHJva2UgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VSZWRdIHNldCBzdHJva2UgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUdyZWVuXSBzZXQgc3Ryb2tlIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUJsdWVdIHNldCBzdHJva2UgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VBbHBoYV0gc2V0IHN0cm9rZSBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnN0cm9rZVdpZHRoXSBzdHJva2Ugd2lkdGhcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VTY2FsZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyBzdHJva2Ugc2NhbGUuICBUaGUgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzdHJva2UuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lSm9pbl0gY2FuIGJlIG1pdGVyLCByb3VuZCwgb3IgYmV2ZWwuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIG1pdGVyXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lQ2FwXSBjYW4gYmUgYnV0dCwgcm91bmQsIG9yIHNxYXJlLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBidXR0XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zaGFkb3dDb2xvcl1cclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dSZWRdIHNldCBzaGFkb3cgY29sb3IgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0dyZWVuXSBzZXQgc2hhZG93IGNvbG9yIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0JsdWVdIHNldCBzaGFkb3cgY29sb3IgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dBbHBoYV0gc2V0IHNoYWRvdyBjb2xvciBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd0JsdXJdXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zaGFkb3dPZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09wYWNpdHldIHNoYWRvdyBvcGFjaXR5LiAgQ2FuIGJlIGFueSByZWFsIG51bWJlclxyXG4gICAgICogIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnNoYWRvd0VuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc2hhZG93LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5kYXNoXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRhc2hFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGRhc2hBcnJheS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcudmlzaWJsZV1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5saXN0ZW5pbmddIHdoZXRoZXIgb3Igbm90IHRoZSBub2RlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5pZF0gdW5pcXVlIGlkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5uYW1lXSBub24tdW5pcXVlIG5hbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9wYWNpdHldIGRldGVybWluZXMgbm9kZSBvcGFjaXR5LiAgQ2FuIGJlIGFueSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zY2FsZV0gc2V0IHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVhdIHNldCBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVldIHNldCBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5yb3RhdGlvbl0gcm90YXRpb24gaW4gZGVncmVlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcub2Zmc2V0XSBvZmZzZXQgZnJvbSBjZW50ZXIgcG9pbnQgYW5kIHJvdGF0aW9uIHBvaW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRYXSBzZXQgb2Zmc2V0IHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFldIHNldCBvZmZzZXQgeVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRyYWdnYWJsZV0gbWFrZXMgdGhlIG5vZGUgZHJhZ2dhYmxlLiAgV2hlbiBzdGFnZXMgYXJlIGRyYWdnYWJsZSwgeW91IGNhbiBkcmFnIGFuZCBkcm9wXHJcbiAgICAgKiAgdGhlIGVudGlyZSBzdGFnZSBieSBkcmFnZ2luZyBhbnkgcG9ydGlvbiBvZiB0aGUgc3RhZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmRyYWdEaXN0YW5jZV1cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb25maWcuZHJhZ0JvdW5kRnVuY11cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiB2YXIgaW1hZ2VPYmogPSBuZXcgSW1hZ2UoKTtcclxuICAgICAqIGltYWdlT2JqLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICogICB2YXIgc3ByaXRlID0gbmV3IEtpbmV0aWMuU3ByaXRlKHtcclxuICAgICAqICAgICB4OiAyMDAsXHJcbiAgICAgKiAgICAgeTogMTAwLFxyXG4gICAgICogICAgIGltYWdlOiBpbWFnZU9iaixcclxuICAgICAqICAgICBhbmltYXRpb246ICdzdGFuZGluZycsXHJcbiAgICAgKiAgICAgYW5pbWF0aW9uczoge1xyXG4gICAgICogICAgICAgc3RhbmRpbmc6IFtcclxuICAgICAqICAgICAgICAgLy8geCwgeSwgd2lkdGgsIGhlaWdodCAoNiBmcmFtZXMpXHJcbiAgICAgKiAgICAgICAgIDAsIDAsIDQ5LCAxMDksXHJcbiAgICAgKiAgICAgICAgIDUyLCAwLCA0OSwgMTA5LFxyXG4gICAgICogICAgICAgICAxMDUsIDAsIDQ5LCAxMDksXHJcbiAgICAgKiAgICAgICAgIDE1OCwgMCwgNDksIDEwOSxcclxuICAgICAqICAgICAgICAgMjEwLCAwLCA0OSwgMTA5LFxyXG4gICAgICogICAgICAgICAyNjIsIDAsIDQ5LCAxMDlcclxuICAgICAqICAgICAgIF0sXHJcbiAgICAgKiAgICAgICBraWNraW5nOiBbXHJcbiAgICAgKiAgICAgICAgIC8vIHgsIHksIHdpZHRoLCBoZWlnaHQgKDYgZnJhbWVzKVxyXG4gICAgICogICAgICAgICAwLCAxMDksIDQ1LCA5OCxcclxuICAgICAqICAgICAgICAgNDUsIDEwOSwgNDUsIDk4LFxyXG4gICAgICogICAgICAgICA5NSwgMTA5LCA2MywgOTgsXHJcbiAgICAgKiAgICAgICAgIDE1NiwgMTA5LCA3MCwgOTgsXHJcbiAgICAgKiAgICAgICAgIDIyOSwgMTA5LCA2MCwgOTgsXHJcbiAgICAgKiAgICAgICAgIDI4NywgMTA5LCA0MSwgOThcclxuICAgICAqICAgICAgIF0gICAgICAgICAgXHJcbiAgICAgKiAgICAgfSxcclxuICAgICAqICAgICBmcmFtZVJhdGU6IDcsXHJcbiAgICAgKiAgICAgZnJhbWVJbmRleDogMFxyXG4gICAgICogICB9KTtcclxuICAgICAqIH07XHJcbiAgICAgKiBpbWFnZU9iai5zcmMgPSAnL3BhdGgvdG8vaW1hZ2UuanBnJ1xyXG4gICAgICovXHJcbiAgICBLaW5ldGljLlNwcml0ZSA9IGZ1bmN0aW9uKGNvbmZpZykge1xyXG4gICAgICAgIHRoaXMuX19faW5pdChjb25maWcpO1xyXG4gICAgfTtcclxuXHJcbiAgICBLaW5ldGljLlNwcml0ZS5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgX19faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XHJcbiAgICAgICAgICAgIC8vIGNhbGwgc3VwZXIgY29uc3RydWN0b3JcclxuICAgICAgICAgICAgS2luZXRpYy5TaGFwZS5jYWxsKHRoaXMsIGNvbmZpZyk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1Nwcml0ZSc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW0gPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBkb24ndCBuZWVkIHRvIHJlZHJhdyBsYXllciB3ZSBzaG91bGQgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZCA9IHRoYXQuX3VwZGF0ZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGF0Ll91cGRhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMub24oJ2FuaW1hdGlvbkNoYW5nZS5raW5ldGljJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAvLyByZXNldCBpbmRleCB3aGVuIGFuaW1hdGlvbiBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lSW5kZXgoMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLm9uKCdmcmFtZUluZGV4Q2hhbmdlLmtpbmV0aWMnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gc21vb3RoIGNoYW5nZSBmb3IgZnJhbWVSYXRlXHJcbiAgICAgICAgICAgIHRoaXMub24oJ2ZyYW1lUmF0ZUNoYW5nZS5raW5ldGljJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYW5pbS5pc1J1bm5pbmcoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRJbnRlcnZhbCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2NlbmVGdW5jKHRoaXMuX3NjZW5lRnVuYyk7XHJcbiAgICAgICAgICAgIHRoaXMuaGl0RnVuYyh0aGlzLl9oaXRGdW5jKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9zY2VuZUZ1bmM6IGZ1bmN0aW9uKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgdmFyIGFuaW0gPSB0aGlzLmdldEFuaW1hdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLmZyYW1lSW5kZXgoKSxcclxuICAgICAgICAgICAgICAgIGl4NCA9IGluZGV4ICogNCxcclxuICAgICAgICAgICAgICAgIHNldCA9IHRoaXMuZ2V0QW5pbWF0aW9ucygpW2FuaW1dLFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0cyA9IHRoaXMuZnJhbWVPZmZzZXRzKCksXHJcbiAgICAgICAgICAgICAgICB4ID0gICAgICBzZXRbaXg0ICsgMF0sXHJcbiAgICAgICAgICAgICAgICB5ID0gICAgICBzZXRbaXg0ICsgMV0sXHJcbiAgICAgICAgICAgICAgICB3aWR0aCA9ICBzZXRbaXg0ICsgMl0sXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBzZXRbaXg0ICsgM10sXHJcbiAgICAgICAgICAgICAgICBpbWFnZSA9IHRoaXMuZ2V0SW1hZ2UoKTtcclxuXHJcbiAgICAgICAgICAgIGlmKGltYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBvZmZzZXRzW2FuaW1dLFxyXG4gICAgICAgICAgICAgICAgICAgIGl4MiA9IGluZGV4ICogMjtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgb2Zmc2V0W2l4MiArIDBdLCBvZmZzZXRbaXgyICsgMV0sIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIF9oaXRGdW5jOiBmdW5jdGlvbihjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIHZhciBhbmltID0gdGhpcy5nZXRBbmltYXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5mcmFtZUluZGV4KCksXHJcbiAgICAgICAgICAgICAgICBpeDQgPSBpbmRleCAqIDQsXHJcbiAgICAgICAgICAgICAgICBzZXQgPSB0aGlzLmdldEFuaW1hdGlvbnMoKVthbmltXSxcclxuICAgICAgICAgICAgICAgIG9mZnNldHMgPSB0aGlzLmZyYW1lT2Zmc2V0cygpLFxyXG4gICAgICAgICAgICAgICAgd2lkdGggPSAgc2V0W2l4NCArIDJdLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gc2V0W2l4NCArIDNdO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgaWYgKG9mZnNldHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBvZmZzZXRzW2FuaW1dO1xyXG4gICAgICAgICAgICAgICAgdmFyIGl4MiA9IGluZGV4ICogMjtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQucmVjdChvZmZzZXRbaXgyICsgMF0sIG9mZnNldFtpeDIgKyAxXSwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsU2hhcGUodGhpcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfdXNlQnVmZmVyQ2FudmFzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmhhc1NoYWRvdygpIHx8IHRoaXMuZ2V0QWJzb2x1dGVPcGFjaXR5KCkgIT09IDEpICYmIHRoaXMuaGFzU3Ryb2tlKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfc2V0SW50ZXJ2YWw6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQuX3VwZGF0ZUluZGV4KCk7XHJcbiAgICAgICAgICAgIH0sIDEwMDAgLyB0aGlzLmdldEZyYW1lUmF0ZSgpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHN0YXJ0IHNwcml0ZSBhbmltYXRpb25cclxuICAgICAgICAgKiBAbWV0aG9kXHJcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3ByaXRlLnByb3RvdHlwZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGxheWVyID0gdGhpcy5nZXRMYXllcigpO1xyXG5cclxuICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICogYW5pbWF0aW9uIG9iamVjdCBoYXMgbm8gZXhlY3V0YWJsZSBmdW5jdGlvbiBiZWNhdXNlXHJcbiAgICAgICAgICAgICAqICB0aGUgdXBkYXRlcyBhcmUgZG9uZSB3aXRoIGEgZml4ZWQgRlBTIHdpdGggdGhlIHNldEludGVydmFsXHJcbiAgICAgICAgICAgICAqICBiZWxvdy4gIFRoZSBhbmltIG9iamVjdCBvbmx5IG5lZWRzIHRoZSBsYXllciByZWZlcmVuY2UgZm9yXHJcbiAgICAgICAgICAgICAqICByZWRyYXdcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRoaXMuYW5pbS5zZXRMYXllcnMobGF5ZXIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRJbnRlcnZhbCgpO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW0uc3RhcnQoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHN0b3Agc3ByaXRlIGFuaW1hdGlvblxyXG4gICAgICAgICAqIEBtZXRob2RcclxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TcHJpdGUucHJvdG90eXBlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbS5zdG9wKCk7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBkZXRlcm1pbmUgaWYgYW5pbWF0aW9uIG9mIHNwcml0ZSBpcyBydW5uaW5nIG9yIG5vdC4gIHJldHVybnMgdHJ1ZSBvciBmYWxzZVxyXG4gICAgICAgICAqIEBtZXRob2RcclxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5BbmltYXRpb24ucHJvdG90eXBlXHJcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXNSdW5uaW5nOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbS5pc1J1bm5pbmcoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF91cGRhdGVJbmRleDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuZnJhbWVJbmRleCgpLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gdGhpcy5nZXRBbmltYXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbnMgPSB0aGlzLmdldEFuaW1hdGlvbnMoKSxcclxuICAgICAgICAgICAgICAgIGFuaW0gPSBhbmltYXRpb25zW2FuaW1hdGlvbl0sXHJcbiAgICAgICAgICAgICAgICBsZW4gPSBhbmltLmxlbmd0aCAvIDQ7XHJcblxyXG4gICAgICAgICAgICBpZihpbmRleCA8IGxlbiAtIDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVJbmRleChpbmRleCArIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mcmFtZUluZGV4KDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5TcHJpdGUsIEtpbmV0aWMuU2hhcGUpO1xyXG5cclxuICAgIC8vIGFkZCBnZXR0ZXJzIHNldHRlcnNcclxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TcHJpdGUsICdhbmltYXRpb24nKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGdldC9zZXQgYW5pbWF0aW9uIGtleVxyXG4gICAgICogQG5hbWUgYW5pbWF0aW9uXHJcbiAgICAgKiBAbWV0aG9kXHJcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TcHJpdGUucHJvdG90eXBlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYW5pbSBhbmltYXRpb24ga2V5XHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIC8vIGdldCBhbmltYXRpb24ga2V5XHJcbiAgICAgKiB2YXIgYW5pbWF0aW9uID0gc3ByaXRlLmFuaW1hdGlvbigpO1xyXG4gICAgICpcclxuICAgICAqIC8vIHNldCBhbmltYXRpb24ga2V5XHJcbiAgICAgKiBzcHJpdGUuYW5pbWF0aW9uKCdraWNraW5nJyk7XHJcbiAgICAgKi9cclxuXHJcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU3ByaXRlLCAnYW5pbWF0aW9ucycpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogZ2V0L3NldCBhbmltYXRpb25zIG1hcFxyXG4gICAgICogQG5hbWUgYW5pbWF0aW9uc1xyXG4gICAgICogQG1ldGhvZFxyXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3ByaXRlLnByb3RvdHlwZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFuaW1hdGlvbnNcclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogLy8gZ2V0IGFuaW1hdGlvbnMgbWFwXHJcbiAgICAgKiB2YXIgYW5pbWF0aW9ucyA9IHNwcml0ZS5hbmltYXRpb25zKCk7XHJcbiAgICAgKiBcclxuICAgICAqIC8vIHNldCBhbmltYXRpb25zIG1hcFxyXG4gICAgICogc3ByaXRlLmFuaW1hdGlvbnMoe1xyXG4gICAgICogICBzdGFuZGluZzogW1xyXG4gICAgICogICAgIC8vIHgsIHksIHdpZHRoLCBoZWlnaHQgKDYgZnJhbWVzKVxyXG4gICAgICogICAgIDAsIDAsIDQ5LCAxMDksXHJcbiAgICAgKiAgICAgNTIsIDAsIDQ5LCAxMDksXHJcbiAgICAgKiAgICAgMTA1LCAwLCA0OSwgMTA5LFxyXG4gICAgICogICAgIDE1OCwgMCwgNDksIDEwOSxcclxuICAgICAqICAgICAyMTAsIDAsIDQ5LCAxMDksXHJcbiAgICAgKiAgICAgMjYyLCAwLCA0OSwgMTA5XHJcbiAgICAgKiAgIF0sXHJcbiAgICAgKiAgIGtpY2tpbmc6IFtcclxuICAgICAqICAgICAvLyB4LCB5LCB3aWR0aCwgaGVpZ2h0ICg2IGZyYW1lcylcclxuICAgICAqICAgICAwLCAxMDksIDQ1LCA5OCxcclxuICAgICAqICAgICA0NSwgMTA5LCA0NSwgOTgsXHJcbiAgICAgKiAgICAgOTUsIDEwOSwgNjMsIDk4LFxyXG4gICAgICogICAgIDE1NiwgMTA5LCA3MCwgOTgsXHJcbiAgICAgKiAgICAgMjI5LCAxMDksIDYwLCA5OCxcclxuICAgICAqICAgICAyODcsIDEwOSwgNDEsIDk4XHJcbiAgICAgKiAgIF0gICAgICAgICAgXHJcbiAgICAgKiB9KTtcclxuICAgICAqL1xyXG5cclxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TcHJpdGUsICdmcmFtZU9mZnNldHMnKTtcclxuXHJcbiAgICAvKipcclxuICAgICogZ2V0L3NldCBvZmZzZXRzIG1hcFxyXG4gICAgKiBAbmFtZSBvZmZzZXRzXHJcbiAgICAqIEBtZXRob2RcclxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3ByaXRlLnByb3RvdHlwZVxyXG4gICAgKiBAcGFyYW0ge09iamVjdH0gb2Zmc2V0c1xyXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgKiBAZXhhbXBsZVxyXG4gICAgKiAvLyBnZXQgb2Zmc2V0cyBtYXBcclxuICAgICogdmFyIG9mZnNldHMgPSBzcHJpdGUub2Zmc2V0cygpO1xyXG4gICAgKlxyXG4gICAgKiAvLyBzZXQgb2Zmc2V0cyBtYXBcclxuICAgICogc3ByaXRlLm9mZnNldHMoe1xyXG4gICAgKiAgIHN0YW5kaW5nOiBbXHJcbiAgICAqICAgICAvLyB4LCB5ICg2IGZyYW1lcylcclxuICAgICogICAgIDAsIDAsXHJcbiAgICAqICAgICAwLCAwLFxyXG4gICAgKiAgICAgNSwgMCxcclxuICAgICogICAgIDAsIDAsXHJcbiAgICAqICAgICAwLCAzLFxyXG4gICAgKiAgICAgMiwgMFxyXG4gICAgKiAgIF0sXHJcbiAgICAqICAga2lja2luZzogW1xyXG4gICAgKiAgICAgLy8geCwgeSAoNiBmcmFtZXMpXHJcbiAgICAqICAgICAwLCA1LFxyXG4gICAgKiAgICAgNSwgMCxcclxuICAgICogICAgIDEwLCAwLFxyXG4gICAgKiAgICAgMCwgMCxcclxuICAgICogICAgIDIsIDEsXHJcbiAgICAqICAgICAwLCAwXHJcbiAgICAqICAgXVxyXG4gICAgKiB9KTtcclxuICAgICovXHJcbiBcclxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TcHJpdGUsICdpbWFnZScpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogZ2V0L3NldCBpbWFnZVxyXG4gICAgICogQG5hbWUgaW1hZ2VcclxuICAgICAqIEBtZXRob2RcclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNwcml0ZS5wcm90b3R5cGVcclxuICAgICAqIEBwYXJhbSB7SW1hZ2V9IGltYWdlXHJcbiAgICAgKiBAcmV0dXJucyB7SW1hZ2V9XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogLy8gZ2V0IGltYWdlXHJcbiAgICAgKiB2YXIgaW1hZ2UgPSBzcHJpdGUuaW1hZ2UoKTtcclxuICAgICAqXHJcbiAgICAgKiAvLyBzZXQgaW1hZ2VcclxuICAgICAqIHNwcml0ZS5pbWFnZShpbWFnZU9iaik7XHJcbiAgICAgKi9cclxuXHJcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU3ByaXRlLCAnZnJhbWVJbmRleCcsIDApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogc2V0L3NldCBhbmltYXRpb24gZnJhbWUgaW5kZXhcclxuICAgICAqIEBuYW1lIGZyYW1lSW5kZXhcclxuICAgICAqIEBtZXRob2RcclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNwcml0ZS5wcm90b3R5cGVcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gZnJhbWVJbmRleFxyXG4gICAgICogQHJldHVybnMge0ludGVnZXJ9XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogLy8gZ2V0IGFuaW1hdGlvbiBmcmFtZSBpbmRleFxyXG4gICAgICogdmFyIGZyYW1lSW5kZXggPSBzcHJpdGUuZnJhbWVJbmRleCgpO1xyXG4gICAgICpcclxuICAgICAqIC8vIHNldCBhbmltYXRpb24gZnJhbWUgaW5kZXhcclxuICAgICAqIHNwcml0ZS5mcmFtZUluZGV4KDMpO1xyXG4gICAgICovXHJcblxyXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNwcml0ZSwgJ2ZyYW1lUmF0ZScsIDE3KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGdldC9zZXQgZnJhbWUgcmF0ZSBpbiBmcmFtZXMgcGVyIHNlY29uZC4gIEluY3JlYXNlIHRoaXMgbnVtYmVyIHRvIG1ha2UgdGhlIHNwcml0ZVxyXG4gICAgICogIGFuaW1hdGlvbiBydW4gZmFzdGVyLCBhbmQgZGVjcmVhc2UgdGhlIG51bWJlciB0byBtYWtlIHRoZSBzcHJpdGUgYW5pbWF0aW9uIHJ1biBzbG93ZXJcclxuICAgICAqICBUaGUgZGVmYXVsdCBpcyAxNyBmcmFtZXMgcGVyIHNlY29uZFxyXG4gICAgICogQG5hbWUgZnJhbWVSYXRlXHJcbiAgICAgKiBAbWV0aG9kXHJcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TcHJpdGUucHJvdG90eXBlXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGZyYW1lUmF0ZVxyXG4gICAgICogQHJldHVybnMge0ludGVnZXJ9XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogLy8gZ2V0IGZyYW1lIHJhdGVcclxuICAgICAqIHZhciBmcmFtZVJhdGUgPSBzcHJpdGUuZnJhbWVSYXRlKCk7XHJcbiAgICAgKlxyXG4gICAgICogLy8gc2V0IGZyYW1lIHJhdGUgdG8gMiBmcmFtZXMgcGVyIHNlY29uZFxyXG4gICAgICogc3ByaXRlLmZyYW1lUmF0ZSgyKTtcclxuICAgICAqL1xyXG5cclxuICAgIEtpbmV0aWMuRmFjdG9yeS5iYWNrQ29tcGF0KEtpbmV0aWMuU3ByaXRlLCB7XHJcbiAgICAgICAgaW5kZXg6ICdmcmFtZUluZGV4JyxcclxuICAgICAgICBnZXRJbmRleDogJ2dldEZyYW1lSW5kZXgnLFxyXG4gICAgICAgIHNldEluZGV4OiAnc2V0RnJhbWVJbmRleCdcclxuICAgIH0pO1xyXG5cclxuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuU3ByaXRlKTtcclxufSkoKTtcclxuOyhmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogUGF0aCBjb25zdHJ1Y3Rvci5cbiAgICAgKiBAYXV0aG9yIEphc29uIEZvbGxhc1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICogQGF1Z21lbnRzIEtpbmV0aWMuU2hhcGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbmZpZy5kYXRhIFNWRyBkYXRhIHN0cmluZ1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxdIGZpbGwgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsUmVkXSBzZXQgZmlsbCByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEdyZWVuXSBzZXQgZmlsbCBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQmx1ZV0gc2V0IGZpbGwgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQWxwaGFdIHNldCBmaWxsIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbWFnZX0gW2NvbmZpZy5maWxsUGF0dGVybkltYWdlXSBmaWxsIHBhdHRlcm4gaW1hZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WV0gXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlXSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuUm90YXRpb25dXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUGF0dGVyblJlcGVhdF0gY2FuIGJlIFwicmVwZWF0XCIsIFwicmVwZWF0LXhcIiwgXCJyZXBlYXQteVwiLCBvciBcIm5vLXJlcGVhdFwiLiAgVGhlIGRlZmF1bHQgaXMgXCJuby1yZXBlYXRcIlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRZXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmZpbGxFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGZpbGwuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUHJpb3JpdHldIGNhbiBiZSBjb2xvciwgbGluZWFyLWdyYWRpZW50LCByYWRpYWwtZ3JhaWRlbnQsIG9yIHBhdHRlcm4uICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBjb2xvci4gIFRoZSBmaWxsUHJpb3JpdHkgcHJvcGVydHkgbWFrZXMgaXQgcmVhbGx5IGVhc3kgdG8gdG9nZ2xlIGJldHdlZW4gZGlmZmVyZW50IGZpbGwgdHlwZXMuICBGb3IgZXhhbXBsZSwgaWYgeW91IHdhbnQgdG8gdG9nZ2xlIGJldHdlZW4gYSBmaWxsIGNvbG9yIHN0eWxlIGFuZCBhIGZpbGwgcGF0dGVybiBzdHlsZSwgc2ltcGx5IHNldCB0aGUgZmlsbCBwcm9wZXJ0eSBhbmQgdGhlIGZpbGxQYXR0ZXJuIHByb3BlcnRpZXMsIGFuZCB0aGVuIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ2NvbG9yJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIGEgY29sb3IgZmlsbCwgb3IgdXNlIHNldEZpbGxQcmlvcml0eSgncGF0dGVybicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCB0aGUgcGF0dGVybiBmaWxsIGNvbmZpZ3VyYXRpb25cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnN0cm9rZV0gc3Ryb2tlIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlUmVkXSBzZXQgc3Ryb2tlIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VHcmVlbl0gc2V0IHN0cm9rZSBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VCbHVlXSBzZXQgc3Ryb2tlIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQWxwaGFdIHNldCBzdHJva2UgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zdHJva2VXaWR0aF0gc3Ryb2tlIHdpZHRoXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlU2NhbGVFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgc3Ryb2tlIHNjYWxlLiAgVGhlIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc3Ryb2tlLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUpvaW5dIGNhbiBiZSBtaXRlciwgcm91bmQsIG9yIGJldmVsLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBtaXRlclxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUNhcF0gY2FuIGJlIGJ1dHQsIHJvdW5kLCBvciBzcWFyZS4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgYnV0dFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc2hhZG93Q29sb3JdXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93UmVkXSBzZXQgc2hhZG93IGNvbG9yIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dHcmVlbl0gc2V0IHNoYWRvdyBjb2xvciBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dCbHVlXSBzZXQgc2hhZG93IGNvbG9yIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93QWxwaGFdIHNldCBzaGFkb3cgY29sb3IgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dCbHVyXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2hhZG93T2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPcGFjaXR5XSBzaGFkb3cgb3BhY2l0eS4gIENhbiBiZSBhbnkgcmVhbCBudW1iZXJcclxuICAgICAqICBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zaGFkb3dFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHNoYWRvdy4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZGFzaF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kYXNoRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBkYXNoQXJyYXkuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmxpc3RlbmluZ10gd2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub3BhY2l0eV0gZGV0ZXJtaW5lcyBub2RlIG9wYWNpdHkuICBDYW4gYmUgYW55IG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNjYWxlXSBzZXQgc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWF0gc2V0IHNjYWxlIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWV0gc2V0IHNjYWxlIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnJvdGF0aW9uXSByb3RhdGlvbiBpbiBkZWdyZWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5vZmZzZXRdIG9mZnNldCBmcm9tIGNlbnRlciBwb2ludCBhbmQgcm90YXRpb24gcG9pbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFhdIHNldCBvZmZzZXQgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WV0gc2V0IG9mZnNldCB5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZHJhZ2dhYmxlXSBtYWtlcyB0aGUgbm9kZSBkcmFnZ2FibGUuICBXaGVuIHN0YWdlcyBhcmUgZHJhZ2dhYmxlLCB5b3UgY2FuIGRyYWcgYW5kIGRyb3BcclxuICAgICAqICB0aGUgZW50aXJlIHN0YWdlIGJ5IGRyYWdnaW5nIGFueSBwb3J0aW9uIG9mIHRoZSBzdGFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZHJhZ0Rpc3RhbmNlXVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbmZpZy5kcmFnQm91bmRGdW5jXVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHBhdGggPSBuZXcgS2luZXRpYy5QYXRoKHtcbiAgICAgKiAgIHg6IDI0MCxcbiAgICAgKiAgIHk6IDQwLFxuICAgICAqICAgZGF0YTogJ00xMi41ODIsOS41NTFDMy4yNTEsMTYuMjM3LDAuOTIxLDI5LjAyMSw3LjA4LDM4LjU2NGwtMi4zNiwxLjY4OWw0Ljg5MywyLjI2Mmw0Ljg5MywyLjI2MmwtMC41NjgtNS4zNmwtMC41NjctNS4zNTlsLTIuMzY1LDEuNjk0Yy00LjY1Ny03LjM3NS0yLjgzLTE3LjE4NSw0LjM1Mi0yMi4zM2M3LjQ1MS01LjMzOCwxNy44MTctMy42MjUsMjMuMTU2LDMuODI0YzUuMzM3LDcuNDQ5LDMuNjI1LDE3LjgxMy0zLjgyMSwyMy4xNTJsMi44NTcsMy45ODhjOS42MTctNi44OTMsMTEuODI3LTIwLjI3Nyw0LjkzNS0yOS44OTZDMzUuNTkxLDQuODcsMjIuMjA0LDIuNjU4LDEyLjU4Miw5LjU1MXonLFxuICAgICAqICAgZmlsbDogJ2dyZWVuJyxcbiAgICAgKiAgIHNjYWxlOiAyXG4gICAgICogfSk7XG4gICAgICovXG4gICAgS2luZXRpYy5QYXRoID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICB0aGlzLl9fX2luaXQoY29uZmlnKTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5QYXRoLnByb3RvdHlwZSA9IHtcbiAgICAgICAgX19faW5pdDogZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5kYXRhQXJyYXkgPSBbXTtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgLy8gY2FsbCBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgS2luZXRpYy5TaGFwZS5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9ICdQYXRoJztcblxuICAgICAgICAgICAgdGhpcy5kYXRhQXJyYXkgPSBLaW5ldGljLlBhdGgucGFyc2VQYXRoRGF0YSh0aGlzLmdldERhdGEoKSk7XG4gICAgICAgICAgICB0aGlzLm9uKCdkYXRhQ2hhbmdlLmtpbmV0aWMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5kYXRhQXJyYXkgPSBLaW5ldGljLlBhdGgucGFyc2VQYXRoRGF0YSh0aGlzLmdldERhdGEoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5zY2VuZUZ1bmModGhpcy5fc2NlbmVGdW5jKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NjZW5lRnVuYzogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGNhID0gdGhpcy5kYXRhQXJyYXksXG4gICAgICAgICAgICAgICAgY2xvc2VkUGF0aCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAvLyBjb250ZXh0IHBvc2l0aW9uXG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBjYS5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgICAgIHZhciBjID0gY2Fbbl0uY29tbWFuZDtcbiAgICAgICAgICAgICAgICB2YXIgcCA9IGNhW25dLnBvaW50cztcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhwWzBdLCBwWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBbMF0sIHBbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHBbMF0sIHBbMV0sIHBbMl0sIHBbM10sIHBbNF0sIHBbNV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKHBbMF0sIHBbMV0sIHBbMl0sIHBbM10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0EnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN4ID0gcFswXSwgY3kgPSBwWzFdLCByeCA9IHBbMl0sIHJ5ID0gcFszXSwgdGhldGEgPSBwWzRdLCBkVGhldGEgPSBwWzVdLCBwc2kgPSBwWzZdLCBmcyA9IHBbN107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gKHJ4ID4gcnkpID8gcnggOiByeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY2FsZVggPSAocnggPiByeSkgPyAxIDogcnggLyByeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY2FsZVkgPSAocnggPiByeSkgPyByeSAvIHJ4IDogMTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC50cmFuc2xhdGUoY3gsIGN5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQucm90YXRlKHBzaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNjYWxlKHNjYWxlWCwgc2NhbGVZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIsIHRoZXRhLCB0aGV0YSArIGRUaGV0YSwgMSAtIGZzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2NhbGUoMSAvIHNjYWxlWCwgMSAvIHNjYWxlWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJvdGF0ZSgtcHNpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKC1jeCwgLWN5KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3onOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlZFBhdGggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2xvc2VkUGF0aCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0cm9rZVNoYXBlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLlBhdGgsIEtpbmV0aWMuU2hhcGUpO1xuXG4gICAgS2luZXRpYy5QYXRoLmdldExpbmVMZW5ndGggPSBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KCh4MiAtIHgxKSAqICh4MiAtIHgxKSArICh5MiAtIHkxKSAqICh5MiAtIHkxKSk7XG4gICAgfTtcbiAgICBLaW5ldGljLlBhdGguZ2V0UG9pbnRPbkxpbmUgPSBmdW5jdGlvbihkaXN0LCBQMXgsIFAxeSwgUDJ4LCBQMnksIGZyb21YLCBmcm9tWSkge1xuICAgICAgICBpZihmcm9tWCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmcm9tWCA9IFAxeDtcbiAgICAgICAgfVxuICAgICAgICBpZihmcm9tWSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmcm9tWSA9IFAxeTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtID0gKFAyeSAtIFAxeSkgLyAoKFAyeCAtIFAxeCkgKyAwLjAwMDAwMDAxKTtcbiAgICAgICAgdmFyIHJ1biA9IE1hdGguc3FydChkaXN0ICogZGlzdCAvICgxICsgbSAqIG0pKTtcbiAgICAgICAgaWYoUDJ4IDwgUDF4KSB7XG4gICAgICAgICAgICBydW4gKj0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJpc2UgPSBtICogcnVuO1xuICAgICAgICB2YXIgcHQ7XG5cbiAgICAgICAgaWYgKFAyeCA9PT0gUDF4KSB7IC8vIHZlcnRpY2FsIGxpbmVcbiAgICAgICAgICAgIHB0ID0ge1xuICAgICAgICAgICAgICAgIHg6IGZyb21YLFxuICAgICAgICAgICAgICAgIHk6IGZyb21ZICsgcmlzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmKChmcm9tWSAtIFAxeSkgLyAoKGZyb21YIC0gUDF4KSArIDAuMDAwMDAwMDEpID09PSBtKSB7XG4gICAgICAgICAgICBwdCA9IHtcbiAgICAgICAgICAgICAgICB4OiBmcm9tWCArIHJ1bixcbiAgICAgICAgICAgICAgICB5OiBmcm9tWSArIHJpc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgaXgsIGl5O1xuXG4gICAgICAgICAgICB2YXIgbGVuID0gdGhpcy5nZXRMaW5lTGVuZ3RoKFAxeCwgUDF5LCBQMngsIFAyeSk7XG4gICAgICAgICAgICBpZihsZW4gPCAwLjAwMDAwMDAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB1ID0gKCgoZnJvbVggLSBQMXgpICogKFAyeCAtIFAxeCkpICsgKChmcm9tWSAtIFAxeSkgKiAoUDJ5IC0gUDF5KSkpO1xuICAgICAgICAgICAgdSA9IHUgLyAobGVuICogbGVuKTtcbiAgICAgICAgICAgIGl4ID0gUDF4ICsgdSAqIChQMnggLSBQMXgpO1xuICAgICAgICAgICAgaXkgPSBQMXkgKyB1ICogKFAyeSAtIFAxeSk7XG5cbiAgICAgICAgICAgIHZhciBwUmlzZSA9IHRoaXMuZ2V0TGluZUxlbmd0aChmcm9tWCwgZnJvbVksIGl4LCBpeSk7XG4gICAgICAgICAgICB2YXIgcFJ1biA9IE1hdGguc3FydChkaXN0ICogZGlzdCAtIHBSaXNlICogcFJpc2UpO1xuICAgICAgICAgICAgcnVuID0gTWF0aC5zcXJ0KHBSdW4gKiBwUnVuIC8gKDEgKyBtICogbSkpO1xuICAgICAgICAgICAgaWYoUDJ4IDwgUDF4KSB7XG4gICAgICAgICAgICAgICAgcnVuICo9IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmlzZSA9IG0gKiBydW47XG4gICAgICAgICAgICBwdCA9IHtcbiAgICAgICAgICAgICAgICB4OiBpeCArIHJ1bixcbiAgICAgICAgICAgICAgICB5OiBpeSArIHJpc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHQ7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuUGF0aC5nZXRQb2ludE9uQ3ViaWNCZXppZXIgPSBmdW5jdGlvbihwY3QsIFAxeCwgUDF5LCBQMngsIFAyeSwgUDN4LCBQM3ksIFA0eCwgUDR5KSB7XG4gICAgICAgIGZ1bmN0aW9uIENCMSh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdCAqIHQgKiB0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIENCMih0KSB7XG4gICAgICAgICAgICByZXR1cm4gMyAqIHQgKiB0ICogKDEgLSB0KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBDQjModCkge1xuICAgICAgICAgICAgcmV0dXJuIDMgKiB0ICogKDEgLSB0KSAqICgxIC0gdCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gQ0I0KHQpIHtcbiAgICAgICAgICAgIHJldHVybiAoMSAtIHQpICogKDEgLSB0KSAqICgxIC0gdCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHggPSBQNHggKiBDQjEocGN0KSArIFAzeCAqIENCMihwY3QpICsgUDJ4ICogQ0IzKHBjdCkgKyBQMXggKiBDQjQocGN0KTtcbiAgICAgICAgdmFyIHkgPSBQNHkgKiBDQjEocGN0KSArIFAzeSAqIENCMihwY3QpICsgUDJ5ICogQ0IzKHBjdCkgKyBQMXkgKiBDQjQocGN0KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgIHk6IHlcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIEtpbmV0aWMuUGF0aC5nZXRQb2ludE9uUXVhZHJhdGljQmV6aWVyID0gZnVuY3Rpb24ocGN0LCBQMXgsIFAxeSwgUDJ4LCBQMnksIFAzeCwgUDN5KSB7XG4gICAgICAgIGZ1bmN0aW9uIFFCMSh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdCAqIHQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gUUIyKHQpIHtcbiAgICAgICAgICAgIHJldHVybiAyICogdCAqICgxIC0gdCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gUUIzKHQpIHtcbiAgICAgICAgICAgIHJldHVybiAoMSAtIHQpICogKDEgLSB0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgeCA9IFAzeCAqIFFCMShwY3QpICsgUDJ4ICogUUIyKHBjdCkgKyBQMXggKiBRQjMocGN0KTtcbiAgICAgICAgdmFyIHkgPSBQM3kgKiBRQjEocGN0KSArIFAyeSAqIFFCMihwY3QpICsgUDF5ICogUUIzKHBjdCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBLaW5ldGljLlBhdGguZ2V0UG9pbnRPbkVsbGlwdGljYWxBcmMgPSBmdW5jdGlvbihjeCwgY3ksIHJ4LCByeSwgdGhldGEsIHBzaSkge1xuICAgICAgICB2YXIgY29zUHNpID0gTWF0aC5jb3MocHNpKSwgc2luUHNpID0gTWF0aC5zaW4ocHNpKTtcbiAgICAgICAgdmFyIHB0ID0ge1xuICAgICAgICAgICAgeDogcnggKiBNYXRoLmNvcyh0aGV0YSksXG4gICAgICAgICAgICB5OiByeSAqIE1hdGguc2luKHRoZXRhKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogY3ggKyAocHQueCAqIGNvc1BzaSAtIHB0LnkgKiBzaW5Qc2kpLFxuICAgICAgICAgICAgeTogY3kgKyAocHQueCAqIHNpblBzaSArIHB0LnkgKiBjb3NQc2kpXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKlxuICAgICAqIGdldCBwYXJzZWQgZGF0YSBhcnJheSBmcm9tIHRoZSBkYXRhXG4gICAgICogIHN0cmluZy4gIFYsIHYsIEgsIGgsIGFuZCBsIGRhdGEgYXJlIGNvbnZlcnRlZCB0b1xuICAgICAqICBMIGRhdGEgZm9yIHRoZSBwdXJwb3NlIG9mIGhpZ2ggcGVyZm9ybWFuY2UgUGF0aFxuICAgICAqICByZW5kZXJpbmdcbiAgICAgKi9cbiAgICBLaW5ldGljLlBhdGgucGFyc2VQYXRoRGF0YSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgLy8gUGF0aCBEYXRhIFNlZ21lbnQgbXVzdCBiZWdpbiB3aXRoIGEgbW92ZVRvXG4gICAgICAgIC8vbSAoeCB5KSsgIFJlbGF0aXZlIG1vdmVUbyAoc3Vic2VxdWVudCBwb2ludHMgYXJlIHRyZWF0ZWQgYXMgbGluZVRvKVxuICAgICAgICAvL00gKHggeSkrICBBYnNvbHV0ZSBtb3ZlVG8gKHN1YnNlcXVlbnQgcG9pbnRzIGFyZSB0cmVhdGVkIGFzIGxpbmVUbylcbiAgICAgICAgLy9sICh4IHkpKyAgUmVsYXRpdmUgbGluZVRvXG4gICAgICAgIC8vTCAoeCB5KSsgIEFic29sdXRlIExpbmVUb1xuICAgICAgICAvL2ggKHgpKyAgICBSZWxhdGl2ZSBob3Jpem9udGFsIGxpbmVUb1xuICAgICAgICAvL0ggKHgpKyAgICBBYnNvbHV0ZSBob3Jpem9udGFsIGxpbmVUb1xuICAgICAgICAvL3YgKHkpKyAgICBSZWxhdGl2ZSB2ZXJ0aWNhbCBsaW5lVG9cbiAgICAgICAgLy9WICh5KSsgICAgQWJzb2x1dGUgdmVydGljYWwgbGluZVRvXG4gICAgICAgIC8veiAoY2xvc2VwYXRoKVxuICAgICAgICAvL1ogKGNsb3NlcGF0aClcbiAgICAgICAgLy9jICh4MSB5MSB4MiB5MiB4IHkpKyBSZWxhdGl2ZSBCZXppZXIgY3VydmVcbiAgICAgICAgLy9DICh4MSB5MSB4MiB5MiB4IHkpKyBBYnNvbHV0ZSBCZXppZXIgY3VydmVcbiAgICAgICAgLy9xICh4MSB5MSB4IHkpKyAgICAgICBSZWxhdGl2ZSBRdWFkcmF0aWMgQmV6aWVyXG4gICAgICAgIC8vUSAoeDEgeTEgeCB5KSsgICAgICAgQWJzb2x1dGUgUXVhZHJhdGljIEJlemllclxuICAgICAgICAvL3QgKHggeSkrICAgIFNob3J0aGFuZC9TbW9vdGggUmVsYXRpdmUgUXVhZHJhdGljIEJlemllclxuICAgICAgICAvL1QgKHggeSkrICAgIFNob3J0aGFuZC9TbW9vdGggQWJzb2x1dGUgUXVhZHJhdGljIEJlemllclxuICAgICAgICAvL3MgKHgyIHkyIHggeSkrICAgICAgIFNob3J0aGFuZC9TbW9vdGggUmVsYXRpdmUgQmV6aWVyIGN1cnZlXG4gICAgICAgIC8vUyAoeDIgeTIgeCB5KSsgICAgICAgU2hvcnRoYW5kL1Ntb290aCBBYnNvbHV0ZSBCZXppZXIgY3VydmVcbiAgICAgICAgLy9hIChyeCByeSB4LWF4aXMtcm90YXRpb24gbGFyZ2UtYXJjLWZsYWcgc3dlZXAtZmxhZyB4IHkpKyAgICAgUmVsYXRpdmUgRWxsaXB0aWNhbCBBcmNcbiAgICAgICAgLy9BIChyeCByeSB4LWF4aXMtcm90YXRpb24gbGFyZ2UtYXJjLWZsYWcgc3dlZXAtZmxhZyB4IHkpKyAgQWJzb2x1dGUgRWxsaXB0aWNhbCBBcmNcblxuICAgICAgICAvLyByZXR1cm4gZWFybHkgaWYgZGF0YSBpcyBub3QgZGVmaW5lZFxuICAgICAgICBpZighZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tbWFuZCBzdHJpbmdcbiAgICAgICAgdmFyIGNzID0gZGF0YTtcblxuICAgICAgICAvLyBjb21tYW5kIGNoYXJzXG4gICAgICAgIHZhciBjYyA9IFsnbScsICdNJywgJ2wnLCAnTCcsICd2JywgJ1YnLCAnaCcsICdIJywgJ3onLCAnWicsICdjJywgJ0MnLCAncScsICdRJywgJ3QnLCAnVCcsICdzJywgJ1MnLCAnYScsICdBJ107XG4gICAgICAgIC8vIGNvbnZlcnQgd2hpdGUgc3BhY2VzIHRvIGNvbW1hc1xuICAgICAgICBjcyA9IGNzLnJlcGxhY2UobmV3IFJlZ0V4cCgnICcsICdnJyksICcsJyk7XG4gICAgICAgIC8vIGNyZWF0ZSBwaXBlcyBzbyB0aGF0IHdlIGNhbiBzcGxpdCB0aGUgZGF0YVxuICAgICAgICBmb3IodmFyIG4gPSAwOyBuIDwgY2MubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgIGNzID0gY3MucmVwbGFjZShuZXcgUmVnRXhwKGNjW25dLCAnZycpLCAnfCcgKyBjY1tuXSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY3JlYXRlIGFycmF5XG4gICAgICAgIHZhciBhcnIgPSBjcy5zcGxpdCgnfCcpO1xuICAgICAgICB2YXIgY2EgPSBbXTtcbiAgICAgICAgLy8gaW5pdCBjb250ZXh0IHBvaW50XG4gICAgICAgIHZhciBjcHggPSAwO1xuICAgICAgICB2YXIgY3B5ID0gMDtcbiAgICAgICAgZm9yKCBuID0gMTsgbiA8IGFyci5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgdmFyIHN0ciA9IGFycltuXTtcbiAgICAgICAgICAgIHZhciBjID0gc3RyLmNoYXJBdCgwKTtcbiAgICAgICAgICAgIHN0ciA9IHN0ci5zbGljZSgxKTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSAsLSBmb3IgY29uc2lzdGVuY3lcbiAgICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoJywtJywgJ2cnKSwgJy0nKTtcbiAgICAgICAgICAgIC8vIGFkZCBjb21tYXMgc28gdGhhdCBpdCdzIGVhc3kgdG8gc3BsaXRcbiAgICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoJy0nLCAnZycpLCAnLC0nKTtcbiAgICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoJ2UsLScsICdnJyksICdlLScpO1xuICAgICAgICAgICAgdmFyIHAgPSBzdHIuc3BsaXQoJywnKTtcbiAgICAgICAgICAgIGlmKHAubGVuZ3RoID4gMCAmJiBwWzBdID09PSAnJykge1xuICAgICAgICAgICAgICAgIHAuc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvbnZlcnQgc3RyaW5ncyB0byBmbG9hdHNcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcFtpXSA9IHBhcnNlRmxvYXQocFtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZShwLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZihpc05hTihwWzBdKSkgey8vIGNhc2UgZm9yIGEgdHJhaWxpbmcgY29tbWEgYmVmb3JlIG5leHQgY29tbWFuZFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgY21kID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgcG9pbnRzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0WCA9IGNweCwgc3RhcnRZID0gY3B5O1xuICAgICAgICAgICAgICAgIC8vIE1vdmUgdmFyIGZyb20gd2l0aGluIHRoZSBzd2l0Y2ggdG8gdXAgaGVyZSAoanNoaW50KVxuICAgICAgICAgICAgICAgIHZhciBwcmV2Q21kLCBjdGxQdHgsIGN0bFB0eTsgICAgIC8vIFNzLCBUdFxuICAgICAgICAgICAgICAgIHZhciByeCwgcnksIHBzaSwgZmEsIGZzLCB4MSwgeTE7IC8vIEFhXG5cblxuICAgICAgICAgICAgICAgIC8vIGNvbnZlcnQgbCwgSCwgaCwgViwgYW5kIHYgdG8gTFxuICAgICAgICAgICAgICAgIHN3aXRjaCAoYykge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IEtlZXAgdGhlIGxpbmVUbydzIGFib3ZlIHRoZSBtb3ZlVG8ncyBpbiB0aGlzIHN3aXRjaFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCArPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHkgKz0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY21kID0gJ0wnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3B4LCBjcHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0wnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY3B4ID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B5ID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3B4LCBjcHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gTm90ZTogbGluZVRvIGhhbmRsZXJzIG5lZWQgdG8gYmUgYWJvdmUgdGhpcyBwb2ludFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkeCA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkeSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCArPSBkeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSArPSBkeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9ICdNJztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFmdGVyIGNsb3NpbmcgdGhlIHBhdGggbW92ZSB0aGUgY3VycmVudCBwb3NpdGlvbiBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIHRoZSB0aGUgZmlyc3QgcG9pbnQgb2YgdGhlIHBhdGggKGlmIGFueSkuIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2EubGVuZ3RoPjIgJiYgY2FbY2EubGVuZ3RoLTFdLmNvbW1hbmQ9PT0neicpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaWR4PWNhLmxlbmd0aC0yO2lkeD49MDtpZHgtLSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNhW2lkeF0uY29tbWFuZD09PSdNJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHg9Y2FbaWR4XS5wb2ludHNbMF0rZHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHk9Y2FbaWR4XS5wb2ludHNbMV0rZHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSAnbCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdWJzZXF1ZW50IHBvaW50cyBhcmUgdHJlYXRlZCBhcyByZWxhdGl2ZSBsaW5lVG9cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9ICdNJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSAnTCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdWJzZXF1ZW50IHBvaW50cyBhcmUgdHJlYXRlZCBhcyBhYnNvbHV0ZSBsaW5lVG9cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY3B4ICs9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9ICdMJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdIJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9ICdMJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd2JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSArPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnTCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHkgPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnTCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChwLnNoaWZ0KCksIHAuc2hpZnQoKSwgcC5zaGlmdCgpLCBwLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B4ID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B5ID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3B4LCBjcHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3B4ICsgcC5zaGlmdCgpLCBjcHkgKyBwLnNoaWZ0KCksIGNweCArIHAuc2hpZnQoKSwgY3B5ICsgcC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCArPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHkgKz0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY21kID0gJ0MnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3B4LCBjcHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY3RsUHR4ID0gY3B4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RsUHR5ID0gY3B5O1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldkNtZCA9IGNhW2NhLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYocHJldkNtZC5jb21tYW5kID09PSAnQycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHggPSBjcHggKyAoY3B4IC0gcHJldkNtZC5wb2ludHNbMl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0bFB0eSA9IGNweSArIChjcHkgLSBwcmV2Q21kLnBvaW50c1szXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjdGxQdHgsIGN0bFB0eSwgcC5zaGlmdCgpLCBwLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B4ID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B5ID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY21kID0gJ0MnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3B4LCBjcHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY3RsUHR4ID0gY3B4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RsUHR5ID0gY3B5O1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldkNtZCA9IGNhW2NhLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYocHJldkNtZC5jb21tYW5kID09PSAnQycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHggPSBjcHggKyAoY3B4IC0gcHJldkNtZC5wb2ludHNbMl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0bFB0eSA9IGNweSArIChjcHkgLSBwcmV2Q21kLnBvaW50c1szXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjdGxQdHgsIGN0bFB0eSwgY3B4ICsgcC5zaGlmdCgpLCBjcHkgKyBwLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B4ICs9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSArPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnQyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChwLnNoaWZ0KCksIHAuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHggPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHkgPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjcHggKyBwLnNoaWZ0KCksIGNweSArIHAuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHggKz0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B5ICs9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9ICdRJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdUJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0bFB0eCA9IGNweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0bFB0eSA9IGNweTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZDbWQgPSBjYVtjYS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHByZXZDbWQuY29tbWFuZCA9PT0gJ1EnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RsUHR4ID0gY3B4ICsgKGNweCAtIHByZXZDbWQucG9pbnRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHkgPSBjcHkgKyAoY3B5IC0gcHJldkNtZC5wb2ludHNbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY3B4ID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B5ID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY21kID0gJ1EnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3RsUHR4LCBjdGxQdHksIGNweCwgY3B5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0bFB0eCA9IGNweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0bFB0eSA9IGNweTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZDbWQgPSBjYVtjYS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHByZXZDbWQuY29tbWFuZCA9PT0gJ1EnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RsUHR4ID0gY3B4ICsgKGNweCAtIHByZXZDbWQucG9pbnRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHkgPSBjcHkgKyAoY3B5IC0gcHJldkNtZC5wb2ludHNbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY3B4ICs9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSArPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnUSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjdGxQdHgsIGN0bFB0eSwgY3B4LCBjcHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0EnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcnggPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByeSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBzaSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnMgPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB4MSA9IGNweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxID0gY3B5O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B4ID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B5ID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY21kID0gJ0EnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gdGhpcy5jb252ZXJ0RW5kcG9pbnRUb0NlbnRlclBhcmFtZXRlcml6YXRpb24oeDEsIHkxLCBjcHgsIGNweSwgZmEsIGZzLCByeCwgcnksIHBzaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICByeCA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ5ID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHNpID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmEgPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcyA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxID0gY3B4O1xuICAgICAgICAgICAgICAgICAgICAgICAgeTEgPSBjcHk7IGNweCArPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHkgKz0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY21kID0gJ0EnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gdGhpcy5jb252ZXJ0RW5kcG9pbnRUb0NlbnRlclBhcmFtZXRlcml6YXRpb24oeDEsIHkxLCBjcHgsIGNweSwgZmEsIGZzLCByeCwgcnksIHBzaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjYS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZDogY21kIHx8IGMsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50czogcG9pbnRzLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogc3RhcnRYLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogc3RhcnRZXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHBhdGhMZW5ndGg6IHRoaXMuY2FsY0xlbmd0aChzdGFydFgsIHN0YXJ0WSwgY21kIHx8IGMsIHBvaW50cylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoYyA9PT0gJ3onIHx8IGMgPT09ICdaJykge1xuICAgICAgICAgICAgICAgIGNhLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBjb21tYW5kOiAneicsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50czogW10sXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHBhdGhMZW5ndGg6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjYTtcbiAgICB9O1xuICAgIEtpbmV0aWMuUGF0aC5jYWxjTGVuZ3RoID0gZnVuY3Rpb24oeCwgeSwgY21kLCBwb2ludHMpIHtcbiAgICAgICAgdmFyIGxlbiwgcDEsIHAyLCB0O1xuICAgICAgICB2YXIgcGF0aCA9IEtpbmV0aWMuUGF0aDtcblxuICAgICAgICBzd2l0Y2ggKGNtZCkge1xuICAgICAgICAgICAgY2FzZSAnTCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhdGguZ2V0TGluZUxlbmd0aCh4LCB5LCBwb2ludHNbMF0sIHBvaW50c1sxXSk7XG4gICAgICAgICAgICBjYXNlICdDJzpcbiAgICAgICAgICAgICAgICAvLyBBcHByb3hpbWF0ZXMgYnkgYnJlYWtpbmcgY3VydmUgaW50byAxMDAgbGluZSBzZWdtZW50c1xuICAgICAgICAgICAgICAgIGxlbiA9IDAuMDtcbiAgICAgICAgICAgICAgICBwMSA9IHBhdGguZ2V0UG9pbnRPbkN1YmljQmV6aWVyKDAsIHgsIHksIHBvaW50c1swXSwgcG9pbnRzWzFdLCBwb2ludHNbMl0sIHBvaW50c1szXSwgcG9pbnRzWzRdLCBwb2ludHNbNV0pO1xuICAgICAgICAgICAgICAgIGZvciggdCA9IDAuMDE7IHQgPD0gMTsgdCArPSAwLjAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHAyID0gcGF0aC5nZXRQb2ludE9uQ3ViaWNCZXppZXIodCwgeCwgeSwgcG9pbnRzWzBdLCBwb2ludHNbMV0sIHBvaW50c1syXSwgcG9pbnRzWzNdLCBwb2ludHNbNF0sIHBvaW50c1s1XSk7XG4gICAgICAgICAgICAgICAgICAgIGxlbiArPSBwYXRoLmdldExpbmVMZW5ndGgocDEueCwgcDEueSwgcDIueCwgcDIueSk7XG4gICAgICAgICAgICAgICAgICAgIHAxID0gcDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBsZW47XG4gICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgICAgICAvLyBBcHByb3hpbWF0ZXMgYnkgYnJlYWtpbmcgY3VydmUgaW50byAxMDAgbGluZSBzZWdtZW50c1xuICAgICAgICAgICAgICAgIGxlbiA9IDAuMDtcbiAgICAgICAgICAgICAgICBwMSA9IHBhdGguZ2V0UG9pbnRPblF1YWRyYXRpY0JlemllcigwLCB4LCB5LCBwb2ludHNbMF0sIHBvaW50c1sxXSwgcG9pbnRzWzJdLCBwb2ludHNbM10pO1xuICAgICAgICAgICAgICAgIGZvciggdCA9IDAuMDE7IHQgPD0gMTsgdCArPSAwLjAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHAyID0gcGF0aC5nZXRQb2ludE9uUXVhZHJhdGljQmV6aWVyKHQsIHgsIHksIHBvaW50c1swXSwgcG9pbnRzWzFdLCBwb2ludHNbMl0sIHBvaW50c1szXSk7XG4gICAgICAgICAgICAgICAgICAgIGxlbiArPSBwYXRoLmdldExpbmVMZW5ndGgocDEueCwgcDEueSwgcDIueCwgcDIueSk7XG4gICAgICAgICAgICAgICAgICAgIHAxID0gcDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBsZW47XG4gICAgICAgICAgICBjYXNlICdBJzpcbiAgICAgICAgICAgICAgICAvLyBBcHByb3hpbWF0ZXMgYnkgYnJlYWtpbmcgY3VydmUgaW50byBsaW5lIHNlZ21lbnRzXG4gICAgICAgICAgICAgICAgbGVuID0gMC4wO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IHBvaW50c1s0XTtcbiAgICAgICAgICAgICAgICAvLyA0ID0gdGhldGFcbiAgICAgICAgICAgICAgICB2YXIgZFRoZXRhID0gcG9pbnRzWzVdO1xuICAgICAgICAgICAgICAgIC8vIDUgPSBkVGhldGFcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gcG9pbnRzWzRdICsgZFRoZXRhO1xuICAgICAgICAgICAgICAgIHZhciBpbmMgPSBNYXRoLlBJIC8gMTgwLjA7XG4gICAgICAgICAgICAgICAgLy8gMSBkZWdyZWUgcmVzb2x1dGlvblxuICAgICAgICAgICAgICAgIGlmKE1hdGguYWJzKHN0YXJ0IC0gZW5kKSA8IGluYykge1xuICAgICAgICAgICAgICAgICAgICBpbmMgPSBNYXRoLmFicyhzdGFydCAtIGVuZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE5vdGU6IGZvciBwdXJwb3NlIG9mIGNhbGN1bGF0aW5nIGFyYyBsZW5ndGgsIG5vdCBnb2luZyB0byB3b3JyeSBhYm91dCByb3RhdGluZyBYLWF4aXMgYnkgYW5nbGUgcHNpXG4gICAgICAgICAgICAgICAgcDEgPSBwYXRoLmdldFBvaW50T25FbGxpcHRpY2FsQXJjKHBvaW50c1swXSwgcG9pbnRzWzFdLCBwb2ludHNbMl0sIHBvaW50c1szXSwgc3RhcnQsIDApO1xuICAgICAgICAgICAgICAgIGlmKGRUaGV0YSA8IDApIHsvLyBjbG9ja3dpc2VcbiAgICAgICAgICAgICAgICAgICAgZm9yKCB0ID0gc3RhcnQgLSBpbmM7IHQgPiBlbmQ7IHQgLT0gaW5jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwMiA9IHBhdGguZ2V0UG9pbnRPbkVsbGlwdGljYWxBcmMocG9pbnRzWzBdLCBwb2ludHNbMV0sIHBvaW50c1syXSwgcG9pbnRzWzNdLCB0LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbiArPSBwYXRoLmdldExpbmVMZW5ndGgocDEueCwgcDEueSwgcDIueCwgcDIueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwMSA9IHAyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Ugey8vIGNvdW50ZXItY2xvY2t3aXNlXG4gICAgICAgICAgICAgICAgICAgIGZvciggdCA9IHN0YXJ0ICsgaW5jOyB0IDwgZW5kOyB0ICs9IGluYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBwYXRoLmdldFBvaW50T25FbGxpcHRpY2FsQXJjKHBvaW50c1swXSwgcG9pbnRzWzFdLCBwb2ludHNbMl0sIHBvaW50c1szXSwgdCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZW4gKz0gcGF0aC5nZXRMaW5lTGVuZ3RoKHAxLngsIHAxLnksIHAyLngsIHAyLnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSBwMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwMiA9IHBhdGguZ2V0UG9pbnRPbkVsbGlwdGljYWxBcmMocG9pbnRzWzBdLCBwb2ludHNbMV0sIHBvaW50c1syXSwgcG9pbnRzWzNdLCBlbmQsIDApO1xuICAgICAgICAgICAgICAgIGxlbiArPSBwYXRoLmdldExpbmVMZW5ndGgocDEueCwgcDEueSwgcDIueCwgcDIueSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbGVuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfTtcbiAgICBLaW5ldGljLlBhdGguY29udmVydEVuZHBvaW50VG9DZW50ZXJQYXJhbWV0ZXJpemF0aW9uID0gZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIGZhLCBmcywgcngsIHJ5LCBwc2lEZWcpIHtcbiAgICAgICAgLy8gRGVyaXZlZCBmcm9tOiBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvaW1wbG5vdGUuaHRtbCNBcmNJbXBsZW1lbnRhdGlvbk5vdGVzXG4gICAgICAgIHZhciBwc2kgPSBwc2lEZWcgKiAoTWF0aC5QSSAvIDE4MC4wKTtcbiAgICAgICAgdmFyIHhwID0gTWF0aC5jb3MocHNpKSAqICh4MSAtIHgyKSAvIDIuMCArIE1hdGguc2luKHBzaSkgKiAoeTEgLSB5MikgLyAyLjA7XG4gICAgICAgIHZhciB5cCA9IC0xICogTWF0aC5zaW4ocHNpKSAqICh4MSAtIHgyKSAvIDIuMCArIE1hdGguY29zKHBzaSkgKiAoeTEgLSB5MikgLyAyLjA7XG5cbiAgICAgICAgdmFyIGxhbWJkYSA9ICh4cCAqIHhwKSAvIChyeCAqIHJ4KSArICh5cCAqIHlwKSAvIChyeSAqIHJ5KTtcblxuICAgICAgICBpZihsYW1iZGEgPiAxKSB7XG4gICAgICAgICAgICByeCAqPSBNYXRoLnNxcnQobGFtYmRhKTtcbiAgICAgICAgICAgIHJ5ICo9IE1hdGguc3FydChsYW1iZGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGYgPSBNYXRoLnNxcnQoKCgocnggKiByeCkgKiAocnkgKiByeSkpIC0gKChyeCAqIHJ4KSAqICh5cCAqIHlwKSkgLSAoKHJ5ICogcnkpICogKHhwICogeHApKSkgLyAoKHJ4ICogcngpICogKHlwICogeXApICsgKHJ5ICogcnkpICogKHhwICogeHApKSk7XG5cbiAgICAgICAgaWYoZmEgPT09IGZzKSB7XG4gICAgICAgICAgICBmICo9IC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmKGlzTmFOKGYpKSB7XG4gICAgICAgICAgICBmID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjeHAgPSBmICogcnggKiB5cCAvIHJ5O1xuICAgICAgICB2YXIgY3lwID0gZiAqIC1yeSAqIHhwIC8gcng7XG5cbiAgICAgICAgdmFyIGN4ID0gKHgxICsgeDIpIC8gMi4wICsgTWF0aC5jb3MocHNpKSAqIGN4cCAtIE1hdGguc2luKHBzaSkgKiBjeXA7XG4gICAgICAgIHZhciBjeSA9ICh5MSArIHkyKSAvIDIuMCArIE1hdGguc2luKHBzaSkgKiBjeHAgKyBNYXRoLmNvcyhwc2kpICogY3lwO1xuXG4gICAgICAgIHZhciB2TWFnID0gZnVuY3Rpb24odikge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydCh2WzBdICogdlswXSArIHZbMV0gKiB2WzFdKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHZSYXRpbyA9IGZ1bmN0aW9uKHUsIHYpIHtcbiAgICAgICAgICAgIHJldHVybiAodVswXSAqIHZbMF0gKyB1WzFdICogdlsxXSkgLyAodk1hZyh1KSAqIHZNYWcodikpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgdkFuZ2xlID0gZnVuY3Rpb24odSwgdikge1xuICAgICAgICAgICAgcmV0dXJuICh1WzBdICogdlsxXSA8IHVbMV0gKiB2WzBdID8gLTEgOiAxKSAqIE1hdGguYWNvcyh2UmF0aW8odSwgdikpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgdGhldGEgPSB2QW5nbGUoWzEsIDBdLCBbKHhwIC0gY3hwKSAvIHJ4LCAoeXAgLSBjeXApIC8gcnldKTtcbiAgICAgICAgdmFyIHUgPSBbKHhwIC0gY3hwKSAvIHJ4LCAoeXAgLSBjeXApIC8gcnldO1xuICAgICAgICB2YXIgdiA9IFsoLTEgKiB4cCAtIGN4cCkgLyByeCwgKC0xICogeXAgLSBjeXApIC8gcnldO1xuICAgICAgICB2YXIgZFRoZXRhID0gdkFuZ2xlKHUsIHYpO1xuXG4gICAgICAgIGlmKHZSYXRpbyh1LCB2KSA8PSAtMSkge1xuICAgICAgICAgICAgZFRoZXRhID0gTWF0aC5QSTtcbiAgICAgICAgfVxuICAgICAgICBpZih2UmF0aW8odSwgdikgPj0gMSkge1xuICAgICAgICAgICAgZFRoZXRhID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZihmcyA9PT0gMCAmJiBkVGhldGEgPiAwKSB7XG4gICAgICAgICAgICBkVGhldGEgPSBkVGhldGEgLSAyICogTWF0aC5QSTtcbiAgICAgICAgfVxuICAgICAgICBpZihmcyA9PT0gMSAmJiBkVGhldGEgPCAwKSB7XG4gICAgICAgICAgICBkVGhldGEgPSBkVGhldGEgKyAyICogTWF0aC5QSTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2N4LCBjeSwgcngsIHJ5LCB0aGV0YSwgZFRoZXRhLCBwc2ksIGZzXTtcbiAgICB9O1xuICAgIC8vIGFkZCBnZXR0ZXJzIHNldHRlcnNcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuUGF0aCwgJ2RhdGEnKTtcblxuICAgIC8qKlxuICAgICAqIHNldCBTVkcgcGF0aCBkYXRhIHN0cmluZy4gIFRoaXMgbWV0aG9kXG4gICAgICogIGFsc28gYXV0b21hdGljYWxseSBwYXJzZXMgdGhlIGRhdGEgc3RyaW5nXG4gICAgICogIGludG8gYSBkYXRhIGFycmF5LiAgQ3VycmVudGx5IHN1cHBvcnRlZCBTVkcgZGF0YTpcbiAgICAgKiAgTSwgbSwgTCwgbCwgSCwgaCwgViwgdiwgUSwgcSwgVCwgdCwgQywgYywgUywgcywgQSwgYSwgWiwgelxuICAgICAqIEBuYW1lIHNldERhdGFcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuUGF0aC5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gU1ZHIHBhdGggY29tbWFuZCBzdHJpbmdcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIGdldCBTVkcgcGF0aCBkYXRhIHN0cmluZ1xuICAgICAqIEBuYW1lIGdldERhdGFcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuUGF0aC5wcm90b3R5cGVcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuUGF0aCk7XG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICB2YXIgRU1QVFlfU1RSSU5HID0gJycsXG4gICAgICAgIC8vQ0FMSUJSSSA9ICdDYWxpYnJpJyxcbiAgICAgICAgTk9STUFMID0gJ25vcm1hbCc7XG5cbiAgICAvKipcbiAgICAgKiBQYXRoIGNvbnN0cnVjdG9yLlxuICAgICAqIEBhdXRob3IgSmFzb24gRm9sbGFzXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgKiBAYXVnbWVudHMgS2luZXRpYy5TaGFwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5mb250RmFtaWx5XSBkZWZhdWx0IGlzIENhbGlicmlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5mb250U2l6ZV0gZGVmYXVsdCBpcyAxMlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZvbnRTdHlsZV0gY2FuIGJlIG5vcm1hbCwgYm9sZCwgb3IgaXRhbGljLiAgRGVmYXVsdCBpcyBub3JtYWxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5mb250VmFyaWFudF0gY2FuIGJlIG5vcm1hbCBvciBzbWFsbC1jYXBzLiAgRGVmYXVsdCBpcyBub3JtYWxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29uZmlnLnRleHRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29uZmlnLmRhdGEgU1ZHIGRhdGEgc3RyaW5nXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbF0gZmlsbCBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxSZWRdIHNldCBmaWxsIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsR3JlZW5dIHNldCBmaWxsIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxCbHVlXSBzZXQgZmlsbCBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxBbHBoYV0gc2V0IGZpbGwgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ltYWdlfSBbY29uZmlnLmZpbGxQYXR0ZXJuSW1hZ2VdIGZpbGwgcGF0dGVybiBpbWFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5YXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5ZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRZXSBcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5Sb3RhdGlvbl1cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQYXR0ZXJuUmVwZWF0XSBjYW4gYmUgXCJyZXBlYXRcIiwgXCJyZXBlYXQteFwiLCBcInJlcGVhdC15XCIsIG9yIFwibm8tcmVwZWF0XCIuICBUaGUgZGVmYXVsdCBpcyBcIm5vLXJlcGVhdFwiXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFldIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZmlsbEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZmlsbC4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQcmlvcml0eV0gY2FuIGJlIGNvbG9yLCBsaW5lYXItZ3JhZGllbnQsIHJhZGlhbC1ncmFpZGVudCwgb3IgcGF0dGVybi4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGNvbG9yLiAgVGhlIGZpbGxQcmlvcml0eSBwcm9wZXJ0eSBtYWtlcyBpdCByZWFsbHkgZWFzeSB0byB0b2dnbGUgYmV0d2VlbiBkaWZmZXJlbnQgZmlsbCB0eXBlcy4gIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byB0b2dnbGUgYmV0d2VlbiBhIGZpbGwgY29sb3Igc3R5bGUgYW5kIGEgZmlsbCBwYXR0ZXJuIHN0eWxlLCBzaW1wbHkgc2V0IHRoZSBmaWxsIHByb3BlcnR5IGFuZCB0aGUgZmlsbFBhdHRlcm4gcHJvcGVydGllcywgYW5kIHRoZW4gdXNlIHNldEZpbGxQcmlvcml0eSgnY29sb3InKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggYSBjb2xvciBmaWxsLCBvciB1c2Ugc2V0RmlsbFByaW9yaXR5KCdwYXR0ZXJuJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIHRoZSBwYXR0ZXJuIGZpbGwgY29uZmlndXJhdGlvblxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc3Ryb2tlXSBzdHJva2UgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VSZWRdIHNldCBzdHJva2UgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUdyZWVuXSBzZXQgc3Ryb2tlIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUJsdWVdIHNldCBzdHJva2UgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VBbHBoYV0gc2V0IHN0cm9rZSBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnN0cm9rZVdpZHRoXSBzdHJva2Ugd2lkdGhcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VTY2FsZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyBzdHJva2Ugc2NhbGUuICBUaGUgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzdHJva2UuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lSm9pbl0gY2FuIGJlIG1pdGVyLCByb3VuZCwgb3IgYmV2ZWwuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIG1pdGVyXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lQ2FwXSBjYW4gYmUgYnV0dCwgcm91bmQsIG9yIHNxYXJlLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBidXR0XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zaGFkb3dDb2xvcl1cclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dSZWRdIHNldCBzaGFkb3cgY29sb3IgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0dyZWVuXSBzZXQgc2hhZG93IGNvbG9yIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0JsdWVdIHNldCBzaGFkb3cgY29sb3IgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dBbHBoYV0gc2V0IHNoYWRvdyBjb2xvciBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd0JsdXJdXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zaGFkb3dPZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09wYWNpdHldIHNoYWRvdyBvcGFjaXR5LiAgQ2FuIGJlIGFueSByZWFsIG51bWJlclxyXG4gICAgICogIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnNoYWRvd0VuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc2hhZG93LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5kYXNoXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRhc2hFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGRhc2hBcnJheS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcubGlzdGVuaW5nXSB3aGV0aGVyIG9yIG5vdCB0aGUgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuaWRdIHVuaXF1ZSBpZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2NhbGVdIHNldCBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVYXSBzZXQgc2NhbGUgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVZXSBzZXQgc2NhbGUgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucm90YXRpb25dIHJvdGF0aW9uIGluIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLm9mZnNldF0gb2Zmc2V0IGZyb20gY2VudGVyIHBvaW50IGFuZCByb3RhdGlvbiBwb2ludFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WF0gc2V0IG9mZnNldCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRZXSBzZXQgb2Zmc2V0IHlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmFnZ2FibGVdIG1ha2VzIHRoZSBub2RlIGRyYWdnYWJsZS4gIFdoZW4gc3RhZ2VzIGFyZSBkcmFnZ2FibGUsIHlvdSBjYW4gZHJhZyBhbmQgZHJvcFxyXG4gICAgICogIHRoZSBlbnRpcmUgc3RhZ2UgYnkgZHJhZ2dpbmcgYW55IHBvcnRpb24gb2YgdGhlIHN0YWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5kcmFnRGlzdGFuY2VdXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29uZmlnLmRyYWdCb3VuZEZ1bmNdXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgdGV4dHBhdGggPSBuZXcgS2luZXRpYy5UZXh0UGF0aCh7XG4gICAgICogICB4OiAxMDAsXG4gICAgICogICB5OiA1MCxcbiAgICAgKiAgIGZpbGw6ICcjMzMzJyxcbiAgICAgKiAgIGZvbnRTaXplOiAnMjQnLFxuICAgICAqICAgZm9udEZhbWlseTogJ0FyaWFsJyxcbiAgICAgKiAgIHRleHQ6ICdBbGwgdGhlIHdvcmxkXFwncyBhIHN0YWdlLCBhbmQgYWxsIHRoZSBtZW4gYW5kIHdvbWVuIG1lcmVseSBwbGF5ZXJzLicsXG4gICAgICogICBkYXRhOiAnTTEwLDEwIEMwLDAgMTAsMTUwIDEwMCwxMDAgUzMwMCwxNTAgNDAwLDUwJ1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIEtpbmV0aWMuVGV4dFBhdGggPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdGhpcy5fX19pbml0KGNvbmZpZyk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIF9maWxsRnVuYyhjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQodGhpcy5wYXJ0aWFsVGV4dCwgMCwgMCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9zdHJva2VGdW5jKGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5zdHJva2VUZXh0KHRoaXMucGFydGlhbFRleHQsIDAsIDApO1xuICAgIH1cblxuICAgIEtpbmV0aWMuVGV4dFBhdGgucHJvdG90eXBlID0ge1xuICAgICAgICBfX19pbml0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuZHVtbXlDYW52YXMgPSBLaW5ldGljLlV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xuICAgICAgICAgICAgdGhpcy5kYXRhQXJyYXkgPSBbXTtcblxuICAgICAgICAgICAgLy8gY2FsbCBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgS2luZXRpYy5TaGFwZS5jYWxsKHRoaXMsIGNvbmZpZyk7XG5cbiAgICAgICAgICAgIC8vIG92ZXJyaWRlc1xuICAgICAgICAgICAgLy8gVE9ETzogc2hvdWxkbid0IHRoaXMgYmUgb24gdGhlIHByb3RvdHlwZT9cbiAgICAgICAgICAgIHRoaXMuX2ZpbGxGdW5jID0gX2ZpbGxGdW5jO1xuICAgICAgICAgICAgdGhpcy5fc3Ryb2tlRnVuYyA9IF9zdHJva2VGdW5jO1xuICAgICAgICAgICAgdGhpcy5fZmlsbEZ1bmNIaXQgPSBfZmlsbEZ1bmM7XG4gICAgICAgICAgICB0aGlzLl9zdHJva2VGdW5jSGl0ID0gX3N0cm9rZUZ1bmM7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1RleHRQYXRoJztcblxuICAgICAgICAgICAgdGhpcy5kYXRhQXJyYXkgPSBLaW5ldGljLlBhdGgucGFyc2VQYXRoRGF0YSh0aGlzLmF0dHJzLmRhdGEpO1xuICAgICAgICAgICAgdGhpcy5vbignZGF0YUNoYW5nZS5raW5ldGljJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5kYXRhQXJyYXkgPSBLaW5ldGljLlBhdGgucGFyc2VQYXRoRGF0YSh0aGlzLmF0dHJzLmRhdGEpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0ZXh0IGRhdGEgZm9yIGNlcnRhaW4gYXR0ciBjaGFuZ2VzXG4gICAgICAgICAgICB0aGlzLm9uKCd0ZXh0Q2hhbmdlLmtpbmV0aWMgdGV4dFN0cm9rZS5raW5ldGljIHRleHRTdHJva2VXaWR0aC5raW5ldGljJywgdGhhdC5fc2V0VGV4dERhdGEpO1xuICAgICAgICAgICAgdGhhdC5fc2V0VGV4dERhdGEoKTtcbiAgICAgICAgICAgIHRoaXMuc2NlbmVGdW5jKHRoaXMuX3NjZW5lRnVuYyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zY2VuZUZ1bmM6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgIGNvbnRleHQuc2V0QXR0cignZm9udCcsIHRoaXMuX2dldENvbnRleHRGb250KCkpO1xuICAgICAgICAgICAgY29udGV4dC5zZXRBdHRyKCd0ZXh0QmFzZWxpbmUnLCAnbWlkZGxlJyk7XG4gICAgICAgICAgICBjb250ZXh0LnNldEF0dHIoJ3RleHRBbGlnbicsICdsZWZ0Jyk7XG4gICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcblxuICAgICAgICAgICAgdmFyIGdseXBoSW5mbyA9IHRoaXMuZ2x5cGhJbmZvO1xuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGdseXBoSW5mby5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHAwID0gZ2x5cGhJbmZvW2ldLnAwO1xuXG4gICAgICAgICAgICAgICAgY29udGV4dC50cmFuc2xhdGUocDAueCwgcDAueSk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5yb3RhdGUoZ2x5cGhJbmZvW2ldLnJvdGF0aW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnRpYWxUZXh0ID0gZ2x5cGhJbmZvW2ldLnRleHQ7XG5cbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcblxuICAgICAgICAgICAgICAgIC8vLy8gVG8gYXNzaXN0IHdpdGggZGVidWdnaW5nIHZpc3VhbGx5LCB1bmNvbW1lbnQgZm9sbG93aW5nXG4gICAgICAgICAgICAgICAgLy8gY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAvLyBpZiAoaSAlIDIpXG4gICAgICAgICAgICAgICAgLy8gY29udGV4dC5zdHJva2VTdHlsZSA9ICdjeWFuJztcbiAgICAgICAgICAgICAgICAvLyBlbHNlXG4gICAgICAgICAgICAgICAgLy8gY29udGV4dC5zdHJva2VTdHlsZSA9ICdncmVlbic7XG4gICAgICAgICAgICAgICAgLy8gdmFyIHAxID0gZ2x5cGhJbmZvW2ldLnAxO1xuICAgICAgICAgICAgICAgIC8vIGNvbnRleHQubW92ZVRvKHAwLngsIHAwLnkpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnRleHQubGluZVRvKHAxLngsIHAxLnkpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCB0ZXh0IHdpZHRoIGluIHBpeGVsc1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHRQYXRoLnByb3RvdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0VGV4dFdpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHRXaWR0aDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCB0ZXh0IGhlaWdodCBpbiBwaXhlbHNcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0UGF0aC5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIGdldFRleHRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dEhlaWdodDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNldCB0ZXh0XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dFBhdGgucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0XG4gICAgICAgICAqL1xuICAgICAgICBzZXRUZXh0OiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICAgICAgICBLaW5ldGljLlRleHQucHJvdG90eXBlLnNldFRleHQuY2FsbCh0aGlzLCB0ZXh0KTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldFRleHRTaXplOiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICAgICAgICB2YXIgZHVtbXlDYW52YXMgPSB0aGlzLmR1bW15Q2FudmFzO1xuICAgICAgICAgICAgdmFyIF9jb250ZXh0ID0gZHVtbXlDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgICAgICAgICAgX2NvbnRleHQuc2F2ZSgpO1xuXG4gICAgICAgICAgICBfY29udGV4dC5mb250ID0gdGhpcy5fZ2V0Q29udGV4dEZvbnQoKTtcbiAgICAgICAgICAgIHZhciBtZXRyaWNzID0gX2NvbnRleHQubWVhc3VyZVRleHQodGV4dCk7XG5cbiAgICAgICAgICAgIF9jb250ZXh0LnJlc3RvcmUoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogbWV0cmljcy53aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHBhcnNlSW50KHRoaXMuYXR0cnMuZm9udFNpemUsIDEwKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NldFRleHREYXRhOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHNpemUgPSB0aGlzLl9nZXRUZXh0U2l6ZSh0aGlzLmF0dHJzLnRleHQpO1xuICAgICAgICAgICAgdGhpcy50ZXh0V2lkdGggPSBzaXplLndpZHRoO1xuICAgICAgICAgICAgdGhpcy50ZXh0SGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG5cbiAgICAgICAgICAgIHRoaXMuZ2x5cGhJbmZvID0gW107XG5cbiAgICAgICAgICAgIHZhciBjaGFyQXJyID0gdGhpcy5hdHRycy50ZXh0LnNwbGl0KCcnKTtcblxuICAgICAgICAgICAgdmFyIHAwLCBwMSwgcGF0aENtZDtcblxuICAgICAgICAgICAgdmFyIHBJbmRleCA9IC0xO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRUID0gMDtcblxuICAgICAgICAgICAgdmFyIGdldE5leHRQYXRoU2VnbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgcGF0aERhdGEgPSB0aGF0LmRhdGFBcnJheTtcblxuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IHBJbmRleCArIDE7IGkgPCBwYXRoRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZihwYXRoRGF0YVtpXS5wYXRoTGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcEluZGV4ID0gaTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhdGhEYXRhW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYocGF0aERhdGFbaV0uY29tbWFuZCA9PSAnTScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAwID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHBhdGhEYXRhW2ldLnBvaW50c1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBwYXRoRGF0YVtpXS5wb2ludHNbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGZpbmRTZWdtZW50VG9GaXRDaGFyYWN0ZXIgPSBmdW5jdGlvbihjKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgZ2x5cGhXaWR0aCA9IHRoYXQuX2dldFRleHRTaXplKGMpLndpZHRoO1xuXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJMZW4gPSAwO1xuICAgICAgICAgICAgICAgIHZhciBhdHRlbXB0cyA9IDA7XG5cbiAgICAgICAgICAgICAgICBwMSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB3aGlsZShNYXRoLmFicyhnbHlwaFdpZHRoIC0gY3VyckxlbikgLyBnbHlwaFdpZHRoID4gMC4wMSAmJiBhdHRlbXB0cyA8IDI1KSB7XG4gICAgICAgICAgICAgICAgICAgIGF0dGVtcHRzKys7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdW11bGF0aXZlUGF0aExlbmd0aCA9IGN1cnJMZW47XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKHBhdGhDbWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aENtZCA9IGdldE5leHRQYXRoU2VnbWVudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihwYXRoQ21kICYmIGN1bXVsYXRpdmVQYXRoTGVuZ3RoICsgcGF0aENtZC5wYXRoTGVuZ3RoIDwgZ2x5cGhXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1bXVsYXRpdmVQYXRoTGVuZ3RoICs9IHBhdGhDbWQucGF0aExlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoQ21kID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYocGF0aENtZCA9PT0ge30gfHwgcDAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZWVkTmV3U2VnbWVudCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocGF0aENtZC5jb21tYW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdMJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihLaW5ldGljLlBhdGguZ2V0TGluZUxlbmd0aChwMC54LCBwMC55LCBwYXRoQ21kLnBvaW50c1swXSwgcGF0aENtZC5wb2ludHNbMV0pID4gZ2x5cGhXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMSA9IEtpbmV0aWMuUGF0aC5nZXRQb2ludE9uTGluZShnbHlwaFdpZHRoLCBwMC54LCBwMC55LCBwYXRoQ21kLnBvaW50c1swXSwgcGF0aENtZC5wb2ludHNbMV0sIHAwLngsIHAwLnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aENtZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdBJzpcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IHBhdGhDbWQucG9pbnRzWzRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDQgPSB0aGV0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkVGhldGEgPSBwYXRoQ21kLnBvaW50c1s1XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA1ID0gZFRoZXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuZCA9IHBhdGhDbWQucG9pbnRzWzRdICsgZFRoZXRhO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY3VycmVudFQgPT09IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VCA9IHN0YXJ0ICsgMC4wMDAwMDAwMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSnVzdCBpbiBjYXNlIHN0YXJ0IGlzIDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGdseXBoV2lkdGggPiBjdXJyTGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUICs9IChNYXRoLlBJIC8gMTgwLjApICogZFRoZXRhIC8gTWF0aC5hYnMoZFRoZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUIC09IE1hdGguUEkgLyAzNjAuMCAqIGRUaGV0YSAvIE1hdGguYWJzKGRUaGV0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlZGl0IGZvciBidWcgZml4OiBAdGhlcnRoIGh0dHBzOi8vZ2l0aHViLmNvbS9lcmljZHJvd2VsbC9LaW5ldGljSlMvaXNzdWVzLzI0OVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9sZCBjb2RlIGZhaWxlZCB0byByZW5kZXIgdGV4dCBhbG9uZyBhcmMgb2YgdGhpcyBwYXRoOiBcIk0gNTAgNTAgYSAxNTAgNTAgMCAwIDEgMjUwIDUwIGwgNTAgMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZFRoZXRhIDwgMCAmJiBjdXJyZW50VCA8IGVuZCB8fCBkVGhldGEgPj0gMCAmJiBjdXJyZW50VCA+IGVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VCA9IGVuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVlZE5ld1NlZ21lbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMSA9IEtpbmV0aWMuUGF0aC5nZXRQb2ludE9uRWxsaXB0aWNhbEFyYyhwYXRoQ21kLnBvaW50c1swXSwgcGF0aENtZC5wb2ludHNbMV0sIHBhdGhDbWQucG9pbnRzWzJdLCBwYXRoQ21kLnBvaW50c1szXSwgY3VycmVudFQsIHBhdGhDbWQucG9pbnRzWzZdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnRUID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGdseXBoV2lkdGggPiBwYXRoQ21kLnBhdGhMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUID0gMC4wMDAwMDAwMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUID0gZ2x5cGhXaWR0aCAvIHBhdGhDbWQucGF0aExlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGdseXBoV2lkdGggPiBjdXJyTGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUICs9IChnbHlwaFdpZHRoIC0gY3VyckxlbikgLyBwYXRoQ21kLnBhdGhMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VCAtPSAoY3VyckxlbiAtIGdseXBoV2lkdGgpIC8gcGF0aENtZC5wYXRoTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnRUID4gMS4wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUID0gMS4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkTmV3U2VnbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAxID0gS2luZXRpYy5QYXRoLmdldFBvaW50T25DdWJpY0JlemllcihjdXJyZW50VCwgcGF0aENtZC5zdGFydC54LCBwYXRoQ21kLnN0YXJ0LnksIHBhdGhDbWQucG9pbnRzWzBdLCBwYXRoQ21kLnBvaW50c1sxXSwgcGF0aENtZC5wb2ludHNbMl0sIHBhdGhDbWQucG9pbnRzWzNdLCBwYXRoQ21kLnBvaW50c1s0XSwgcGF0aENtZC5wb2ludHNbNV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY3VycmVudFQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFQgPSBnbHlwaFdpZHRoIC8gcGF0aENtZC5wYXRoTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGdseXBoV2lkdGggPiBjdXJyTGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUICs9IChnbHlwaFdpZHRoIC0gY3VyckxlbikgLyBwYXRoQ21kLnBhdGhMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VCAtPSAoY3VyckxlbiAtIGdseXBoV2lkdGgpIC8gcGF0aENtZC5wYXRoTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnRUID4gMS4wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUID0gMS4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkTmV3U2VnbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAxID0gS2luZXRpYy5QYXRoLmdldFBvaW50T25RdWFkcmF0aWNCZXppZXIoY3VycmVudFQsIHBhdGhDbWQuc3RhcnQueCwgcGF0aENtZC5zdGFydC55LCBwYXRoQ21kLnBvaW50c1swXSwgcGF0aENtZC5wb2ludHNbMV0sIHBhdGhDbWQucG9pbnRzWzJdLCBwYXRoQ21kLnBvaW50c1szXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmKHAxICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJMZW4gPSBLaW5ldGljLlBhdGguZ2V0TGluZUxlbmd0aChwMC54LCBwMC55LCBwMS54LCBwMS55KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmKG5lZWROZXdTZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZWVkTmV3U2VnbWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aENtZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgY2hhckFyci5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgLy8gRmluZCBwMSBzdWNoIHRoYXQgbGluZSBzZWdtZW50IGJldHdlZW4gcDAgYW5kIHAxIGlzIGFwcHJveC4gd2lkdGggb2YgZ2x5cGhcbiAgICAgICAgICAgICAgICBmaW5kU2VnbWVudFRvRml0Q2hhcmFjdGVyKGNoYXJBcnJbaV0pO1xuXG4gICAgICAgICAgICAgICAgaWYocDAgPT09IHVuZGVmaW5lZCB8fCBwMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IEtpbmV0aWMuUGF0aC5nZXRMaW5lTGVuZ3RoKHAwLngsIHAwLnksIHAxLngsIHAxLnkpO1xuXG4gICAgICAgICAgICAgICAgLy8gTm90ZTogU2luY2UgZ2x5cGhzIGFyZSByZW5kZXJlZCBvbmUgYXQgYSB0aW1lLCBhbnkga2VybmluZyBwYWlyIGRhdGEgYnVpbHQgaW50byB0aGUgZm9udCB3aWxsIG5vdCBiZSB1c2VkLlxuICAgICAgICAgICAgICAgIC8vIENhbiBmb3Jlc2VlIGhhdmluZyBhIHJvdWdoIHBhaXIgdGFibGUgYnVpbHQgaW4gdGhhdCB0aGUgZGV2ZWxvcGVyIGNhbiBvdmVycmlkZSBhcyBuZWVkZWQuXG5cbiAgICAgICAgICAgICAgICB2YXIga2VybiA9IDA7XG4gICAgICAgICAgICAgICAgLy8gcGxhY2Vob2xkZXIgZm9yIGZ1dHVyZSBpbXBsZW1lbnRhdGlvblxuXG4gICAgICAgICAgICAgICAgdmFyIG1pZHBvaW50ID0gS2luZXRpYy5QYXRoLmdldFBvaW50T25MaW5lKGtlcm4gKyB3aWR0aCAvIDIuMCwgcDAueCwgcDAueSwgcDEueCwgcDEueSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcm90YXRpb24gPSBNYXRoLmF0YW4yKChwMS55IC0gcDAueSksIChwMS54IC0gcDAueCkpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2x5cGhJbmZvLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0cmFuc3Bvc2VYOiBtaWRwb2ludC54LFxuICAgICAgICAgICAgICAgICAgICB0cmFuc3Bvc2VZOiBtaWRwb2ludC55LFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBjaGFyQXJyW2ldLFxuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogcm90YXRpb24sXG4gICAgICAgICAgICAgICAgICAgIHAwOiBwMCxcbiAgICAgICAgICAgICAgICAgICAgcDE6IHAxXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcDAgPSBwMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBtYXAgVGV4dFBhdGggbWV0aG9kcyB0byBUZXh0XG4gICAgS2luZXRpYy5UZXh0UGF0aC5wcm90b3R5cGUuX2dldENvbnRleHRGb250ID0gS2luZXRpYy5UZXh0LnByb3RvdHlwZS5fZ2V0Q29udGV4dEZvbnQ7XG5cbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuVGV4dFBhdGgsIEtpbmV0aWMuU2hhcGUpO1xuXG4gICAgLy8gYWRkIHNldHRlcnMgYW5kIGdldHRlcnNcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuVGV4dFBhdGgsICdmb250RmFtaWx5JywgJ0FyaWFsJyk7XG5cbiAgICAvKipcbiAgICAgKiBzZXQgZm9udCBmYW1pbHlcbiAgICAgKiBAbmFtZSBzZXRGb250RmFtaWx5XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHRQYXRoLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmb250RmFtaWx5XG4gICAgICovXG5cbiAgICAgLyoqXG4gICAgICogZ2V0IGZvbnQgZmFtaWx5XG4gICAgICogQG5hbWUgZ2V0Rm9udEZhbWlseVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0UGF0aC5wcm90b3R5cGVcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5UZXh0UGF0aCwgJ2ZvbnRTaXplJywgMTIpO1xuXG4gICAgLyoqXG4gICAgICogc2V0IGZvbnQgc2l6ZVxuICAgICAqIEBuYW1lIHNldEZvbnRTaXplXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHRQYXRoLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7aW50fSBmb250U2l6ZVxuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAqIGdldCBmb250IHNpemVcbiAgICAgKiBAbmFtZSBnZXRGb250U2l6ZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0UGF0aC5wcm90b3R5cGVcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5UZXh0UGF0aCwgJ2ZvbnRTdHlsZScsIE5PUk1BTCk7XG5cbiAgICAvKipcbiAgICAgKiBzZXQgZm9udCBzdHlsZS4gIENhbiBiZSAnbm9ybWFsJywgJ2l0YWxpYycsIG9yICdib2xkJy4gICdub3JtYWwnIGlzIHRoZSBkZWZhdWx0LlxuICAgICAqIEBuYW1lIHNldEZvbnRTdHlsZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0UGF0aC5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZm9udFN0eWxlXG4gICAgICovXG5cbiAgICAgLyoqXG4gICAgICogZ2V0IGZvbnQgc3R5bGVcbiAgICAgKiBAbmFtZSBnZXRGb250U3R5bGVcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dFBhdGgucHJvdG90eXBlXG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuVGV4dFBhdGgsICdmb250VmFyaWFudCcsIE5PUk1BTCk7XG5cbiAgICAvKipcbiAgICAgKiBzZXQgZm9udCB2YXJpYW50LiAgQ2FuIGJlICdub3JtYWwnIG9yICdzbWFsbC1jYXBzJy4gICdub3JtYWwnIGlzIHRoZSBkZWZhdWx0LlxuICAgICAqIEBuYW1lIHNldEZvbnRWYXJpYW50XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHRQYXRoLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmb250VmFyaWFudFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQGdldCBmb250IHZhcmlhbnRcbiAgICAgKiBAbmFtZSBnZXRGb250VmFyaWFudFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0UGF0aC5wcm90b3R5cGVcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXIoS2luZXRpYy5UZXh0UGF0aCwgJ3RleHQnLCBFTVBUWV9TVFJJTkcpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0IHRleHRcbiAgICAgKiBAbmFtZSBnZXRUZXh0XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHRQYXRoLnByb3RvdHlwZVxuICAgICAqL1xuXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5UZXh0UGF0aCk7XG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBSZWd1bGFyUG9seWdvbiBjb25zdHJ1Y3Rvci4mbmJzcDsgRXhhbXBsZXMgaW5jbHVkZSB0cmlhbmdsZXMsIHNxdWFyZXMsIHBlbnRhZ29ucywgaGV4YWdvbnMsIGV0Yy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAqIEBhdWdtZW50cyBLaW5ldGljLlNoYXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb25maWcuc2lkZXNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29uZmlnLnJhZGl1c1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxdIGZpbGwgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsUmVkXSBzZXQgZmlsbCByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEdyZWVuXSBzZXQgZmlsbCBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQmx1ZV0gc2V0IGZpbGwgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQWxwaGFdIHNldCBmaWxsIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbWFnZX0gW2NvbmZpZy5maWxsUGF0dGVybkltYWdlXSBmaWxsIHBhdHRlcm4gaW1hZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WV0gXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlXSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuUm90YXRpb25dXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUGF0dGVyblJlcGVhdF0gY2FuIGJlIFwicmVwZWF0XCIsIFwicmVwZWF0LXhcIiwgXCJyZXBlYXQteVwiLCBvciBcIm5vLXJlcGVhdFwiLiAgVGhlIGRlZmF1bHQgaXMgXCJuby1yZXBlYXRcIlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRZXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmZpbGxFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGZpbGwuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUHJpb3JpdHldIGNhbiBiZSBjb2xvciwgbGluZWFyLWdyYWRpZW50LCByYWRpYWwtZ3JhaWRlbnQsIG9yIHBhdHRlcm4uICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBjb2xvci4gIFRoZSBmaWxsUHJpb3JpdHkgcHJvcGVydHkgbWFrZXMgaXQgcmVhbGx5IGVhc3kgdG8gdG9nZ2xlIGJldHdlZW4gZGlmZmVyZW50IGZpbGwgdHlwZXMuICBGb3IgZXhhbXBsZSwgaWYgeW91IHdhbnQgdG8gdG9nZ2xlIGJldHdlZW4gYSBmaWxsIGNvbG9yIHN0eWxlIGFuZCBhIGZpbGwgcGF0dGVybiBzdHlsZSwgc2ltcGx5IHNldCB0aGUgZmlsbCBwcm9wZXJ0eSBhbmQgdGhlIGZpbGxQYXR0ZXJuIHByb3BlcnRpZXMsIGFuZCB0aGVuIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ2NvbG9yJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIGEgY29sb3IgZmlsbCwgb3IgdXNlIHNldEZpbGxQcmlvcml0eSgncGF0dGVybicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCB0aGUgcGF0dGVybiBmaWxsIGNvbmZpZ3VyYXRpb25cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnN0cm9rZV0gc3Ryb2tlIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlUmVkXSBzZXQgc3Ryb2tlIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VHcmVlbl0gc2V0IHN0cm9rZSBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VCbHVlXSBzZXQgc3Ryb2tlIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQWxwaGFdIHNldCBzdHJva2UgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zdHJva2VXaWR0aF0gc3Ryb2tlIHdpZHRoXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlU2NhbGVFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgc3Ryb2tlIHNjYWxlLiAgVGhlIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc3Ryb2tlLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUpvaW5dIGNhbiBiZSBtaXRlciwgcm91bmQsIG9yIGJldmVsLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBtaXRlclxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUNhcF0gY2FuIGJlIGJ1dHQsIHJvdW5kLCBvciBzcWFyZS4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgYnV0dFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc2hhZG93Q29sb3JdXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93UmVkXSBzZXQgc2hhZG93IGNvbG9yIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dHcmVlbl0gc2V0IHNoYWRvdyBjb2xvciBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dCbHVlXSBzZXQgc2hhZG93IGNvbG9yIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93QWxwaGFdIHNldCBzaGFkb3cgY29sb3IgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dCbHVyXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2hhZG93T2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPcGFjaXR5XSBzaGFkb3cgb3BhY2l0eS4gIENhbiBiZSBhbnkgcmVhbCBudW1iZXJcclxuICAgICAqICBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zaGFkb3dFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHNoYWRvdy4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZGFzaF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kYXNoRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBkYXNoQXJyYXkuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmxpc3RlbmluZ10gd2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub3BhY2l0eV0gZGV0ZXJtaW5lcyBub2RlIG9wYWNpdHkuICBDYW4gYmUgYW55IG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNjYWxlXSBzZXQgc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWF0gc2V0IHNjYWxlIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWV0gc2V0IHNjYWxlIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnJvdGF0aW9uXSByb3RhdGlvbiBpbiBkZWdyZWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5vZmZzZXRdIG9mZnNldCBmcm9tIGNlbnRlciBwb2ludCBhbmQgcm90YXRpb24gcG9pbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFhdIHNldCBvZmZzZXQgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WV0gc2V0IG9mZnNldCB5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZHJhZ2dhYmxlXSBtYWtlcyB0aGUgbm9kZSBkcmFnZ2FibGUuICBXaGVuIHN0YWdlcyBhcmUgZHJhZ2dhYmxlLCB5b3UgY2FuIGRyYWcgYW5kIGRyb3BcclxuICAgICAqICB0aGUgZW50aXJlIHN0YWdlIGJ5IGRyYWdnaW5nIGFueSBwb3J0aW9uIG9mIHRoZSBzdGFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZHJhZ0Rpc3RhbmNlXVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbmZpZy5kcmFnQm91bmRGdW5jXVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIGhleGFnb24gPSBuZXcgS2luZXRpYy5SZWd1bGFyUG9seWdvbih7XG4gICAgICogICB4OiAxMDAsXG4gICAgICogICB5OiAyMDAsXG4gICAgICogICBzaWRlczogNixcbiAgICAgKiAgIHJhZGl1czogNzAsXG4gICAgICogICBmaWxsOiAncmVkJyxcbiAgICAgKiAgIHN0cm9rZTogJ2JsYWNrJyxcbiAgICAgKiAgIHN0cm9rZVdpZHRoOiA0XG4gICAgICogfSk7XG4gICAgICovXG4gICAgS2luZXRpYy5SZWd1bGFyUG9seWdvbiA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB0aGlzLl9fX2luaXQoY29uZmlnKTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5SZWd1bGFyUG9seWdvbi5wcm90b3R5cGUgPSB7XG4gICAgICAgIF9fX2luaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgLy8gY2FsbCBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgS2luZXRpYy5TaGFwZS5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9ICdSZWd1bGFyUG9seWdvbic7XG4gICAgICAgICAgICB0aGlzLnNjZW5lRnVuYyh0aGlzLl9zY2VuZUZ1bmMpO1xuICAgICAgICB9LFxuICAgICAgICBfc2NlbmVGdW5jOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgc2lkZXMgPSB0aGlzLmF0dHJzLnNpZGVzLFxuICAgICAgICAgICAgICAgIHJhZGl1cyA9IHRoaXMuYXR0cnMucmFkaXVzLFxuICAgICAgICAgICAgICAgIG4sIHgsIHk7XG5cbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbygwLCAwIC0gcmFkaXVzKTtcblxuICAgICAgICAgICAgZm9yKG4gPSAxOyBuIDwgc2lkZXM7IG4rKykge1xuICAgICAgICAgICAgICAgIHggPSByYWRpdXMgKiBNYXRoLnNpbihuICogMiAqIE1hdGguUEkgLyBzaWRlcyk7XG4gICAgICAgICAgICAgICAgeSA9IC0xICogcmFkaXVzICogTWF0aC5jb3MobiAqIDIgKiBNYXRoLlBJIC8gc2lkZXMpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0cm9rZVNoYXBlKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuUmVndWxhclBvbHlnb24sIEtpbmV0aWMuU2hhcGUpO1xuXG4gICAgLy8gYWRkIGdldHRlcnMgc2V0dGVyc1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5SZWd1bGFyUG9seWdvbiwgJ3JhZGl1cycsIDApO1xuXG4gICAgLyoqXG4gICAgICogc2V0IHJhZGl1c1xuICAgICAqIEBuYW1lIHNldFJhZGl1c1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5SZWd1bGFyUG9seWdvbi5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkaXVzXG4gICAgICovXG5cbiAgICAgLyoqXG4gICAgICogZ2V0IHJhZGl1c1xuICAgICAqIEBuYW1lIGdldFJhZGl1c1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5SZWd1bGFyUG9seWdvbi5wcm90b3R5cGVcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5SZWd1bGFyUG9seWdvbiwgJ3NpZGVzJywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBzZXQgbnVtYmVyIG9mIHNpZGVzXG4gICAgICogQG5hbWUgc2V0U2lkZXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuUmVndWxhclBvbHlnb24ucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtpbnR9IHNpZGVzXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBnZXQgbnVtYmVyIG9mIHNpZGVzXG4gICAgICogQG5hbWUgZ2V0U2lkZXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuUmVndWxhclBvbHlnb24ucHJvdG90eXBlXG4gICAgICovXG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLlJlZ3VsYXJQb2x5Z29uKTtcbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xuICAgIC8qKlxuICAgICAqIFN0YXIgY29uc3RydWN0b3JcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAqIEBhdWdtZW50cyBLaW5ldGljLlNoYXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gY29uZmlnLm51bVBvaW50c1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb25maWcuaW5uZXJSYWRpdXNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29uZmlnLm91dGVyUmFkaXVzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbF0gZmlsbCBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxSZWRdIHNldCBmaWxsIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsR3JlZW5dIHNldCBmaWxsIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxCbHVlXSBzZXQgZmlsbCBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxBbHBoYV0gc2V0IGZpbGwgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ltYWdlfSBbY29uZmlnLmZpbGxQYXR0ZXJuSW1hZ2VdIGZpbGwgcGF0dGVybiBpbWFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5YXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5ZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRZXSBcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5Sb3RhdGlvbl1cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQYXR0ZXJuUmVwZWF0XSBjYW4gYmUgXCJyZXBlYXRcIiwgXCJyZXBlYXQteFwiLCBcInJlcGVhdC15XCIsIG9yIFwibm8tcmVwZWF0XCIuICBUaGUgZGVmYXVsdCBpcyBcIm5vLXJlcGVhdFwiXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFldIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZmlsbEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZmlsbC4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQcmlvcml0eV0gY2FuIGJlIGNvbG9yLCBsaW5lYXItZ3JhZGllbnQsIHJhZGlhbC1ncmFpZGVudCwgb3IgcGF0dGVybi4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGNvbG9yLiAgVGhlIGZpbGxQcmlvcml0eSBwcm9wZXJ0eSBtYWtlcyBpdCByZWFsbHkgZWFzeSB0byB0b2dnbGUgYmV0d2VlbiBkaWZmZXJlbnQgZmlsbCB0eXBlcy4gIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byB0b2dnbGUgYmV0d2VlbiBhIGZpbGwgY29sb3Igc3R5bGUgYW5kIGEgZmlsbCBwYXR0ZXJuIHN0eWxlLCBzaW1wbHkgc2V0IHRoZSBmaWxsIHByb3BlcnR5IGFuZCB0aGUgZmlsbFBhdHRlcm4gcHJvcGVydGllcywgYW5kIHRoZW4gdXNlIHNldEZpbGxQcmlvcml0eSgnY29sb3InKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggYSBjb2xvciBmaWxsLCBvciB1c2Ugc2V0RmlsbFByaW9yaXR5KCdwYXR0ZXJuJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIHRoZSBwYXR0ZXJuIGZpbGwgY29uZmlndXJhdGlvblxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc3Ryb2tlXSBzdHJva2UgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VSZWRdIHNldCBzdHJva2UgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUdyZWVuXSBzZXQgc3Ryb2tlIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUJsdWVdIHNldCBzdHJva2UgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VBbHBoYV0gc2V0IHN0cm9rZSBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnN0cm9rZVdpZHRoXSBzdHJva2Ugd2lkdGhcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VTY2FsZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyBzdHJva2Ugc2NhbGUuICBUaGUgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzdHJva2UuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lSm9pbl0gY2FuIGJlIG1pdGVyLCByb3VuZCwgb3IgYmV2ZWwuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIG1pdGVyXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lQ2FwXSBjYW4gYmUgYnV0dCwgcm91bmQsIG9yIHNxYXJlLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBidXR0XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zaGFkb3dDb2xvcl1cclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dSZWRdIHNldCBzaGFkb3cgY29sb3IgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0dyZWVuXSBzZXQgc2hhZG93IGNvbG9yIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0JsdWVdIHNldCBzaGFkb3cgY29sb3IgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dBbHBoYV0gc2V0IHNoYWRvdyBjb2xvciBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd0JsdXJdXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zaGFkb3dPZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09wYWNpdHldIHNoYWRvdyBvcGFjaXR5LiAgQ2FuIGJlIGFueSByZWFsIG51bWJlclxyXG4gICAgICogIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnNoYWRvd0VuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc2hhZG93LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5kYXNoXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRhc2hFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGRhc2hBcnJheS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcubGlzdGVuaW5nXSB3aGV0aGVyIG9yIG5vdCB0aGUgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuaWRdIHVuaXF1ZSBpZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2NhbGVdIHNldCBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVYXSBzZXQgc2NhbGUgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVZXSBzZXQgc2NhbGUgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucm90YXRpb25dIHJvdGF0aW9uIGluIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLm9mZnNldF0gb2Zmc2V0IGZyb20gY2VudGVyIHBvaW50IGFuZCByb3RhdGlvbiBwb2ludFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WF0gc2V0IG9mZnNldCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRZXSBzZXQgb2Zmc2V0IHlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmFnZ2FibGVdIG1ha2VzIHRoZSBub2RlIGRyYWdnYWJsZS4gIFdoZW4gc3RhZ2VzIGFyZSBkcmFnZ2FibGUsIHlvdSBjYW4gZHJhZyBhbmQgZHJvcFxyXG4gICAgICogIHRoZSBlbnRpcmUgc3RhZ2UgYnkgZHJhZ2dpbmcgYW55IHBvcnRpb24gb2YgdGhlIHN0YWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5kcmFnRGlzdGFuY2VdXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29uZmlnLmRyYWdCb3VuZEZ1bmNdXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgc3RhciA9IG5ldyBLaW5ldGljLlN0YXIoe1xuICAgICAqICAgeDogMTAwLFxuICAgICAqICAgeTogMjAwLFxuICAgICAqICAgbnVtUG9pbnRzOiA1LFxuICAgICAqICAgaW5uZXJSYWRpdXM6IDcwLFxuICAgICAqICAgb3V0ZXJSYWRpdXM6IDcwLFxuICAgICAqICAgZmlsbDogJ3JlZCcsXG4gICAgICogICBzdHJva2U6ICdibGFjaycsXG4gICAgICogICBzdHJva2VXaWR0aDogNFxuICAgICAqIH0pO1xuICAgICAqL1xuICAgIEtpbmV0aWMuU3RhciA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB0aGlzLl9fX2luaXQoY29uZmlnKTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5TdGFyLnByb3RvdHlwZSA9IHtcbiAgICAgICAgX19faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICAvLyBjYWxsIHN1cGVyIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICBLaW5ldGljLlNoYXBlLmNhbGwodGhpcywgY29uZmlnKTtcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1N0YXInO1xuICAgICAgICAgICAgdGhpcy5zY2VuZUZ1bmModGhpcy5fc2NlbmVGdW5jKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NjZW5lRnVuYzogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGlubmVyUmFkaXVzID0gdGhpcy5pbm5lclJhZGl1cygpLFxuICAgICAgICAgICAgICAgIG91dGVyUmFkaXVzID0gdGhpcy5vdXRlclJhZGl1cygpLFxuICAgICAgICAgICAgICAgIG51bVBvaW50cyA9IHRoaXMubnVtUG9pbnRzKCk7XG5cbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbygwLCAwIC0gb3V0ZXJSYWRpdXMpO1xuXG4gICAgICAgICAgICBmb3IodmFyIG4gPSAxOyBuIDwgbnVtUG9pbnRzICogMjsgbisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhZGl1cyA9IG4gJSAyID09PSAwID8gb3V0ZXJSYWRpdXMgOiBpbm5lclJhZGl1cztcbiAgICAgICAgICAgICAgICB2YXIgeCA9IHJhZGl1cyAqIE1hdGguc2luKG4gKiBNYXRoLlBJIC8gbnVtUG9pbnRzKTtcbiAgICAgICAgICAgICAgICB2YXIgeSA9IC0xICogcmFkaXVzICogTWF0aC5jb3MobiAqIE1hdGguUEkgLyBudW1Qb2ludHMpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgICAgICAgICAgY29udGV4dC5maWxsU3Ryb2tlU2hhcGUodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5TdGFyLCBLaW5ldGljLlNoYXBlKTtcblxuICAgIC8vIGFkZCBnZXR0ZXJzIHNldHRlcnNcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU3RhciwgJ251bVBvaW50cycsIDUpO1xuXG4gICAgLyoqXG4gICAgICogc2V0IG51bWJlciBvZiBwb2ludHNcbiAgICAgKiBAbmFtZSBzZXROdW1Qb2ludHNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3Rhci5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IHBvaW50c1xuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAqIGdldCBudW1iZXIgb2YgcG9pbnRzXG4gICAgICogQG5hbWUgZ2V0TnVtUG9pbnRzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YXIucHJvdG90eXBlXG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU3RhciwgJ2lubmVyUmFkaXVzJywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBzZXQgaW5uZXIgcmFkaXVzXG4gICAgICogQG5hbWUgc2V0SW5uZXJSYWRpdXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3Rhci5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkaXVzXG4gICAgICovXG5cbiAgICAgLyoqXG4gICAgICogZ2V0IGlubmVyIHJhZGl1c1xuICAgICAqIEBuYW1lIGdldElubmVyUmFkaXVzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YXIucHJvdG90eXBlXG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU3RhciwgJ291dGVyUmFkaXVzJywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBzZXQgb3V0ZXIgcmFkaXVzXG4gICAgICogQG5hbWUgc2V0T3V0ZXJSYWRpdXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3Rhci5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkaXVzXG4gICAgICovXG5cbiAgICAgLyoqXG4gICAgICogZ2V0IG91dGVyIHJhZGl1c1xuICAgICAqIEBuYW1lIGdldE91dGVyUmFkaXVzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YXIucHJvdG90eXBlXG4gICAgICovXG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLlN0YXIpO1xufSkoKTtcbjsoZnVuY3Rpb24oKSB7XG4gICAgLy8gY29uc3RhbnRzXG4gICAgdmFyIEFUVFJfQ0hBTkdFX0xJU1QgPSBbJ2ZvbnRGYW1pbHknLCAnZm9udFNpemUnLCAnZm9udFN0eWxlJywgJ3BhZGRpbmcnLCAnbGluZUhlaWdodCcsICd0ZXh0J10sXG4gICAgICAgIENIQU5HRV9LSU5FVElDID0gJ0NoYW5nZS5raW5ldGljJyxcbiAgICAgICAgTk9ORSA9ICdub25lJyxcbiAgICAgICAgVVAgPSAndXAnLFxuICAgICAgICBSSUdIVCA9ICdyaWdodCcsXG4gICAgICAgIERPV04gPSAnZG93bicsXG4gICAgICAgIExFRlQgPSAnbGVmdCcsXG4gICAgICAgIExBQkVMID0gJ0xhYmVsJyxcblxuICAgICAvLyBjYWNoZWQgdmFyaWFibGVzXG4gICAgIGF0dHJDaGFuZ2VMaXN0TGVuID0gQVRUUl9DSEFOR0VfTElTVC5sZW5ndGg7XG5cbiAgICAvKipcbiAgICAgKiBMYWJlbCBjb25zdHJ1Y3Rvci4mbmJzcDsgTGFiZWxzIGFyZSBncm91cHMgdGhhdCBjb250YWluIGEgVGV4dCBhbmQgVGFnIHNoYXBlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmxpc3RlbmluZ10gd2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub3BhY2l0eV0gZGV0ZXJtaW5lcyBub2RlIG9wYWNpdHkuICBDYW4gYmUgYW55IG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNjYWxlXSBzZXQgc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWF0gc2V0IHNjYWxlIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWV0gc2V0IHNjYWxlIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnJvdGF0aW9uXSByb3RhdGlvbiBpbiBkZWdyZWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5vZmZzZXRdIG9mZnNldCBmcm9tIGNlbnRlciBwb2ludCBhbmQgcm90YXRpb24gcG9pbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFhdIHNldCBvZmZzZXQgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WV0gc2V0IG9mZnNldCB5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZHJhZ2dhYmxlXSBtYWtlcyB0aGUgbm9kZSBkcmFnZ2FibGUuICBXaGVuIHN0YWdlcyBhcmUgZHJhZ2dhYmxlLCB5b3UgY2FuIGRyYWcgYW5kIGRyb3BcclxuICAgICAqICB0aGUgZW50aXJlIHN0YWdlIGJ5IGRyYWdnaW5nIGFueSBwb3J0aW9uIG9mIHRoZSBzdGFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZHJhZ0Rpc3RhbmNlXVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbmZpZy5kcmFnQm91bmRGdW5jXVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gY3JlYXRlIGxhYmVsXG4gICAgICogdmFyIGxhYmVsID0gbmV3IEtpbmV0aWMuTGFiZWwoe1xuICAgICAqICAgeDogMTAwLFxuICAgICAqICAgeTogMTAwLCBcbiAgICAgKiAgIGRyYWdnYWJsZTogdHJ1ZVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogLy8gYWRkIGEgdGFnIHRvIHRoZSBsYWJlbFxuICAgICAqIGxhYmVsLmFkZChuZXcgS2luZXRpYy5UYWcoe1xuICAgICAqICAgZmlsbDogJyNiYmInLFxuICAgICAqICAgc3Ryb2tlOiAnIzMzMycsXG4gICAgICogICBzaGFkb3dDb2xvcjogJ2JsYWNrJyxcbiAgICAgKiAgIHNoYWRvd0JsdXI6IDEwLFxuICAgICAqICAgc2hhZG93T2Zmc2V0OiBbMTAsIDEwXSxcbiAgICAgKiAgIHNoYWRvd09wYWNpdHk6IDAuMixcbiAgICAgKiAgIGxpbmVKb2luOiAncm91bmQnLFxuICAgICAqICAgcG9pbnRlckRpcmVjdGlvbjogJ3VwJyxcbiAgICAgKiAgIHBvaW50ZXJXaWR0aDogMjAsXG4gICAgICogICBwb2ludGVySGVpZ2h0OiAyMCxcbiAgICAgKiAgIGNvcm5lclJhZGl1czogNVxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIGFkZCB0ZXh0IHRvIHRoZSBsYWJlbFxuICAgICAqIGxhYmVsLmFkZChuZXcgS2luZXRpYy5UZXh0KHtcbiAgICAgKiAgIHRleHQ6ICdIZWxsbyBXb3JsZCEnLFxuICAgICAqICAgZm9udFNpemU6IDUwLFxuICAgICAqICAgbGluZUhlaWdodDogMS4yLFxuICAgICAqICAgcGFkZGluZzogMTAsXG4gICAgICogICBmaWxsOiAnZ3JlZW4nXG4gICAgICogIH0pKTtcbiAgICAgKi9cbiAgICBLaW5ldGljLkxhYmVsID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHRoaXMuX19fX2luaXQoY29uZmlnKTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5MYWJlbC5wcm90b3R5cGUgPSB7XG4gICAgICAgIF9fX19pbml0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgS2luZXRpYy5Hcm91cC5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IExBQkVMO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLm9uKCdhZGQua2luZXRpYycsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgICAgIHRoYXQuX2FkZExpc3RlbmVycyhldnQuY2hpbGQpO1xuICAgICAgICAgICAgICAgIHRoYXQuX3N5bmMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IFRleHQgc2hhcGUgZm9yIHRoZSBsYWJlbC4gIFlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgVGV4dCBzaGFwZSBpbiBvcmRlciB0byB1cGRhdGVcbiAgICAgICAgICogdGhlIHRleHQgcHJvcGVydGllc1xuICAgICAgICAgKiBAbmFtZSBnZXRUZXh0XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTGFiZWwucHJvdG90eXBlXG4gICAgICAgICAqL1xuICAgICAgICBnZXRUZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmQoJ1RleHQnKVswXTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCBUYWcgc2hhcGUgZm9yIHRoZSBsYWJlbC4gIFlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgVGFnIHNoYXBlIGluIG9yZGVyIHRvIHVwZGF0ZVxuICAgICAgICAgKiB0aGUgcG9pbnRlciBwcm9wZXJ0aWVzIGFuZCB0aGUgY29ybmVyIHJhZGl1c1xuICAgICAgICAgKiBAbmFtZSBnZXRUYWdcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5MYWJlbC5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIGdldFRhZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maW5kKCdUYWcnKVswXTtcbiAgICAgICAgfSxcbiAgICAgICAgX2FkZExpc3RlbmVyczogZnVuY3Rpb24odGV4dCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIG47XG4gICAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3N5bmMoKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgdGV4dCBkYXRhIGZvciBjZXJ0YWluIGF0dHIgY2hhbmdlc1xuICAgICAgICAgICAgZm9yKG4gPSAwOyBuIDwgYXR0ckNoYW5nZUxpc3RMZW47IG4rKykge1xuICAgICAgICAgICAgICAgIHRleHQub24oQVRUUl9DSEFOR0VfTElTVFtuXSArIENIQU5HRV9LSU5FVElDLCBmdW5jKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0V2lkdGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGV4dCgpLmdldFdpZHRoKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEhlaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRUZXh0KCkuZ2V0SGVpZ2h0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zeW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gdGhpcy5nZXRUZXh0KCksXG4gICAgICAgICAgICAgICAgdGFnID0gdGhpcy5nZXRUYWcoKSxcbiAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0LCBwb2ludGVyRGlyZWN0aW9uLCBwb2ludGVyV2lkdGgsIHgsIHksIHBvaW50ZXJIZWlnaHQ7XG5cbiAgICAgICAgICAgIGlmICh0ZXh0ICYmIHRhZykge1xuICAgICAgICAgICAgICAgIHdpZHRoID0gdGV4dC5nZXRXaWR0aCgpO1xuICAgICAgICAgICAgICAgIGhlaWdodCA9IHRleHQuZ2V0SGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgcG9pbnRlckRpcmVjdGlvbiA9IHRhZy5nZXRQb2ludGVyRGlyZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgcG9pbnRlcldpZHRoID0gdGFnLmdldFBvaW50ZXJXaWR0aCgpO1xuICAgICAgICAgICAgICAgIHBvaW50ZXJIZWlnaHQgPSB0YWcuZ2V0UG9pbnRlckhlaWdodCgpO1xuICAgICAgICAgICAgICAgIHggPSAwO1xuICAgICAgICAgICAgICAgIHkgPSAwO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoKHBvaW50ZXJEaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBVUDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSB3aWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gLTEgKiBwb2ludGVySGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUklHSFQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gd2lkdGggKyBwb2ludGVyV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIERPV046XG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gd2lkdGggLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGhlaWdodCArIHBvaW50ZXJIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBMRUZUOlxuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IC0xICogcG9pbnRlcldpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0YWcuc2V0QXR0cnMoe1xuICAgICAgICAgICAgICAgICAgICB4OiAtMSAqIHgsXG4gICAgICAgICAgICAgICAgICAgIHk6IC0xICogeSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGV4dC5zZXRBdHRycyh7XG4gICAgICAgICAgICAgICAgICAgIHg6IC0xICogeCxcbiAgICAgICAgICAgICAgICAgICAgeTogLTEgKiB5XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLkxhYmVsLCBLaW5ldGljLkdyb3VwKTtcblxuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuTGFiZWwpO1xuXG4gICAgLyoqXG4gICAgICogVGFnIGNvbnN0cnVjdG9yLiZuYnNwOyBBIFRhZyBjYW4gYmUgY29uZmlndXJlZFxuICAgICAqICB0byBoYXZlIGEgcG9pbnRlciBlbGVtZW50IHRoYXQgcG9pbnRzIHVwLCByaWdodCwgZG93biwgb3IgbGVmdFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnBvaW50ZXJEaXJlY3Rpb25dIGNhbiBiZSB1cCwgcmlnaHQsIGRvd24sIGxlZnQsIG9yIG5vbmU7IHRoZSBkZWZhdWx0XG4gICAgICogIGlzIG5vbmUuICBXaGVuIGEgcG9pbnRlciBpcyBwcmVzZW50LCB0aGUgcG9zaXRpb25pbmcgb2YgdGhlIGxhYmVsIGlzIHJlbGF0aXZlIHRvIHRoZSB0aXAgb2YgdGhlIHBvaW50ZXIuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucG9pbnRlcldpZHRoXVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnBvaW50ZXJIZWlnaHRdXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY29ybmVyUmFkaXVzXVxuICAgICAqL1xuICAgIEtpbmV0aWMuVGFnID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHRoaXMuX19faW5pdChjb25maWcpO1xuICAgIH07XG5cbiAgICBLaW5ldGljLlRhZy5wcm90b3R5cGUgPSB7XG4gICAgICAgIF9fX2luaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgS2luZXRpYy5TaGFwZS5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9ICdUYWcnO1xuICAgICAgICAgICAgdGhpcy5zY2VuZUZ1bmModGhpcy5fc2NlbmVGdW5jKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NjZW5lRnVuYzogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5nZXRXaWR0aCgpLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuZ2V0SGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgcG9pbnRlckRpcmVjdGlvbiA9IHRoaXMuZ2V0UG9pbnRlckRpcmVjdGlvbigpLFxuICAgICAgICAgICAgICAgIHBvaW50ZXJXaWR0aCA9IHRoaXMuZ2V0UG9pbnRlcldpZHRoKCksXG4gICAgICAgICAgICAgICAgcG9pbnRlckhlaWdodCA9IHRoaXMuZ2V0UG9pbnRlckhlaWdodCgpLFxuICAgICAgICAgICAgICAgIGNvcm5lclJhZGl1cyA9IHRoaXMuZ2V0Q29ybmVyUmFkaXVzKCk7XG5cbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbygwLDApO1xuXG4gICAgICAgICAgICBpZiAocG9pbnRlckRpcmVjdGlvbiA9PT0gVVApIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbygod2lkdGggLSBwb2ludGVyV2lkdGgpLzIsIDApO1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHdpZHRoLzIsIC0xICogcG9pbnRlckhlaWdodCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oKHdpZHRoICsgcG9pbnRlcldpZHRoKS8yLCAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIWNvcm5lclJhZGl1cykge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHdpZHRoLCAwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8od2lkdGggLSBjb3JuZXJSYWRpdXMsIDApO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKHdpZHRoIC0gY29ybmVyUmFkaXVzLCBjb3JuZXJSYWRpdXMsIGNvcm5lclJhZGl1cywgTWF0aC5QSSAqIDMgLyAyLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChwb2ludGVyRGlyZWN0aW9uID09PSBSSUdIVCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHdpZHRoLCAoaGVpZ2h0IC0gcG9pbnRlckhlaWdodCkvMik7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8od2lkdGggKyBwb2ludGVyV2lkdGgsIGhlaWdodC8yKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyh3aWR0aCwgKGhlaWdodCArIHBvaW50ZXJIZWlnaHQpLzIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZighY29ybmVyUmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8od2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHdpZHRoLCBoZWlnaHQgLSBjb3JuZXJSYWRpdXMpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKHdpZHRoIC0gY29ybmVyUmFkaXVzLCBoZWlnaHQgLSBjb3JuZXJSYWRpdXMsIGNvcm5lclJhZGl1cywgMCwgTWF0aC5QSSAvIDIsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBvaW50ZXJEaXJlY3Rpb24gPT09IERPV04pIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbygod2lkdGggKyBwb2ludGVyV2lkdGgpLzIsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8od2lkdGgvMiwgaGVpZ2h0ICsgcG9pbnRlckhlaWdodCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oKHdpZHRoIC0gcG9pbnRlcldpZHRoKS8yLCBoZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZighY29ybmVyUmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oMCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oY29ybmVyUmFkaXVzLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKGNvcm5lclJhZGl1cywgaGVpZ2h0IC0gY29ybmVyUmFkaXVzLCBjb3JuZXJSYWRpdXMsIE1hdGguUEkgLyAyLCBNYXRoLlBJLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwb2ludGVyRGlyZWN0aW9uID09PSBMRUZUKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oMCwgKGhlaWdodCArIHBvaW50ZXJIZWlnaHQpLzIpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKC0xICogcG9pbnRlcldpZHRoLCBoZWlnaHQvMik7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oMCwgKGhlaWdodCAtIHBvaW50ZXJIZWlnaHQpLzIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihjb3JuZXJSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbygwLCBjb3JuZXJSYWRpdXMpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKGNvcm5lclJhZGl1cywgY29ybmVyUmFkaXVzLCBjb3JuZXJSYWRpdXMsIE1hdGguUEksIE1hdGguUEkgKiAzIC8gMiwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5maWxsU3Ryb2tlU2hhcGUodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLlRhZywgS2luZXRpYy5TaGFwZSk7XG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlRhZywgJ3BvaW50ZXJEaXJlY3Rpb24nLCBOT05FKTtcblxuICAgIC8qKlxuICAgICAqIHNldCBwb2ludGVyIERpcmVjdGlvblxuICAgICAqIEBuYW1lIHNldFBvaW50ZXJEaXJlY3Rpb25cbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGFnLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwb2ludGVyRGlyZWN0aW9uIGNhbiBiZSB1cCwgcmlnaHQsIGRvd24sIGxlZnQsIG9yIG5vbmUuICBUaGVcbiAgICAgKiAgZGVmYXVsdCBpcyBub25lXG4gICAgICovXG5cbiAgICAgLyoqXG4gICAgICogZ2V0IHBvaW50ZXIgRGlyZWN0aW9uXG4gICAgICogQG5hbWUgZ2V0UG9pbnRlckRpcmVjdGlvblxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UYWcucHJvdG90eXBlXG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuVGFnLCAncG9pbnRlcldpZHRoJywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBzZXQgcG9pbnRlciB3aWR0aFxuICAgICAqIEBuYW1lIHNldFBvaW50ZXJXaWR0aFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UYWcucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvaW50ZXJXaWR0aFxuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAqIGdldCBwb2ludGVyIHdpZHRoXG4gICAgICogQG5hbWUgZ2V0UG9pbnRlcldpZHRoXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRhZy5wcm90b3R5cGVcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5UYWcsICdwb2ludGVySGVpZ2h0JywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBzZXQgcG9pbnRlciBoZWlnaHRcbiAgICAgKiBAbmFtZSBzZXRQb2ludGVySGVpZ2h0XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRhZy5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcG9pbnRlckhlaWdodFxuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAqIGdldCBwb2ludGVyIGhlaWdodFxuICAgICAqIEBuYW1lIGdldFBvaW50ZXJIZWlnaHRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGFnLnByb3RvdHlwZVxuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlRhZywgJ2Nvcm5lclJhZGl1cycsIDApO1xuXG4gICAgLyoqXG4gICAgICogc2V0IGNvcm5lciByYWRpdXNcbiAgICAgKiBAbmFtZSBzZXRDb3JuZXJSYWRpdXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGFnLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb3JuZXIgcmFkaXVzXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBnZXQgY29ybmVyIHJhZGl1c1xuICAgICAqIEBuYW1lIGdldENvcm5lclJhZGl1c1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UYWcucHJvdG90eXBlXG4gICAgICovXG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLlRhZyk7XG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBBcnJvdyBjb25zdHJ1Y3RvclxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICogQGF1Z21lbnRzIEtpbmV0aWMuU2hhcGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICogQHBhcmFtIHtBcnJheX0gY29uZmlnLnBvaW50c1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnRlbnNpb25dIEhpZ2hlciB2YWx1ZXMgd2lsbCByZXN1bHQgaW4gYSBtb3JlIGN1cnZ5IGxpbmUuICBBIHZhbHVlIG9mIDAgd2lsbCByZXN1bHQgaW4gbm8gaW50ZXJwb2xhdGlvbi5cbiAgICAgKiAgIFRoZSBkZWZhdWx0IGlzIDBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29uZmlnLnBvaW50ZXJMZW5ndGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29uZmlnLnBvaW50ZXJXaWR0aFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxdIGZpbGwgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsUmVkXSBzZXQgZmlsbCByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEdyZWVuXSBzZXQgZmlsbCBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQmx1ZV0gc2V0IGZpbGwgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQWxwaGFdIHNldCBmaWxsIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbWFnZX0gW2NvbmZpZy5maWxsUGF0dGVybkltYWdlXSBmaWxsIHBhdHRlcm4gaW1hZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WV0gXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlXSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuUm90YXRpb25dXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUGF0dGVyblJlcGVhdF0gY2FuIGJlIFwicmVwZWF0XCIsIFwicmVwZWF0LXhcIiwgXCJyZXBlYXQteVwiLCBvciBcIm5vLXJlcGVhdFwiLiAgVGhlIGRlZmF1bHQgaXMgXCJuby1yZXBlYXRcIlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRZXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmZpbGxFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGZpbGwuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUHJpb3JpdHldIGNhbiBiZSBjb2xvciwgbGluZWFyLWdyYWRpZW50LCByYWRpYWwtZ3JhaWRlbnQsIG9yIHBhdHRlcm4uICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBjb2xvci4gIFRoZSBmaWxsUHJpb3JpdHkgcHJvcGVydHkgbWFrZXMgaXQgcmVhbGx5IGVhc3kgdG8gdG9nZ2xlIGJldHdlZW4gZGlmZmVyZW50IGZpbGwgdHlwZXMuICBGb3IgZXhhbXBsZSwgaWYgeW91IHdhbnQgdG8gdG9nZ2xlIGJldHdlZW4gYSBmaWxsIGNvbG9yIHN0eWxlIGFuZCBhIGZpbGwgcGF0dGVybiBzdHlsZSwgc2ltcGx5IHNldCB0aGUgZmlsbCBwcm9wZXJ0eSBhbmQgdGhlIGZpbGxQYXR0ZXJuIHByb3BlcnRpZXMsIGFuZCB0aGVuIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ2NvbG9yJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIGEgY29sb3IgZmlsbCwgb3IgdXNlIHNldEZpbGxQcmlvcml0eSgncGF0dGVybicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCB0aGUgcGF0dGVybiBmaWxsIGNvbmZpZ3VyYXRpb25cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnN0cm9rZV0gc3Ryb2tlIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlUmVkXSBzZXQgc3Ryb2tlIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VHcmVlbl0gc2V0IHN0cm9rZSBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VCbHVlXSBzZXQgc3Ryb2tlIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQWxwaGFdIHNldCBzdHJva2UgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zdHJva2VXaWR0aF0gc3Ryb2tlIHdpZHRoXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlU2NhbGVFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgc3Ryb2tlIHNjYWxlLiAgVGhlIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc3Ryb2tlLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUpvaW5dIGNhbiBiZSBtaXRlciwgcm91bmQsIG9yIGJldmVsLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBtaXRlclxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUNhcF0gY2FuIGJlIGJ1dHQsIHJvdW5kLCBvciBzcWFyZS4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgYnV0dFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc2hhZG93Q29sb3JdXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93UmVkXSBzZXQgc2hhZG93IGNvbG9yIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dHcmVlbl0gc2V0IHNoYWRvdyBjb2xvciBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dCbHVlXSBzZXQgc2hhZG93IGNvbG9yIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93QWxwaGFdIHNldCBzaGFkb3cgY29sb3IgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dCbHVyXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2hhZG93T2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPcGFjaXR5XSBzaGFkb3cgb3BhY2l0eS4gIENhbiBiZSBhbnkgcmVhbCBudW1iZXJcclxuICAgICAqICBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zaGFkb3dFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHNoYWRvdy4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZGFzaF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kYXNoRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBkYXNoQXJyYXkuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmxpc3RlbmluZ10gd2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub3BhY2l0eV0gZGV0ZXJtaW5lcyBub2RlIG9wYWNpdHkuICBDYW4gYmUgYW55IG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNjYWxlXSBzZXQgc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWF0gc2V0IHNjYWxlIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWV0gc2V0IHNjYWxlIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnJvdGF0aW9uXSByb3RhdGlvbiBpbiBkZWdyZWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5vZmZzZXRdIG9mZnNldCBmcm9tIGNlbnRlciBwb2ludCBhbmQgcm90YXRpb24gcG9pbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFhdIHNldCBvZmZzZXQgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WV0gc2V0IG9mZnNldCB5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZHJhZ2dhYmxlXSBtYWtlcyB0aGUgbm9kZSBkcmFnZ2FibGUuICBXaGVuIHN0YWdlcyBhcmUgZHJhZ2dhYmxlLCB5b3UgY2FuIGRyYWcgYW5kIGRyb3BcclxuICAgICAqICB0aGUgZW50aXJlIHN0YWdlIGJ5IGRyYWdnaW5nIGFueSBwb3J0aW9uIG9mIHRoZSBzdGFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZHJhZ0Rpc3RhbmNlXVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbmZpZy5kcmFnQm91bmRGdW5jXVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIGxpbmUgPSBuZXcgS2luZXRpYy5MaW5lKHtcbiAgICAgKiAgIHBvaW50czogWzczLCA3MCwgMzQwLCAyMywgNDUwLCA2MCwgNTAwLCAyMF0sXG4gICAgICogICBzdHJva2U6ICdyZWQnLFxuICAgICAqICAgdGVuc2lvbjogMSxcbiAgICAgKiAgIHBvaW50ZXJMZW5ndGggOiAxMCxcbiAgICAgKiAgIHBvaW50ZXJXaWR0aCA6IDEyXG4gICAgICogfSk7XG4gICAgICovXG4gICAgS2luZXRpYy5BcnJvdyA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB0aGlzLl9fX19pbml0KGNvbmZpZyk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuQXJyb3cucHJvdG90eXBlID0ge1xuICAgICAgICBfX19faW5pdCA6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgLy8gY2FsbCBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgS2luZXRpYy5MaW5lLmNhbGwodGhpcywgY29uZmlnKTtcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ0Fycm93JztcbiAgICAgICAgfSxcbiAgICAgICAgX3NjZW5lRnVuYyA6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgICAgICAgdmFyIFBJMiA9IE1hdGguUEkgKiAyO1xuICAgICAgICAgICAgdmFyIHBvaW50cyA9IHRoaXMucG9pbnRzKCk7XG4gICAgICAgICAgICB2YXIgbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgZHggPSBwb2ludHNbbi0yXSAtIHBvaW50c1tuLTRdO1xuICAgICAgICAgICAgdmFyIGR5ID0gcG9pbnRzW24tMV0gLSBwb2ludHNbbi0zXTtcbiAgICAgICAgICAgIHZhciByYWRpYW5zID0gKE1hdGguYXRhbjIoZHksIGR4KSArIFBJMikgJSBQSTI7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gdGhpcy5wb2ludGVyTGVuZ3RoKCk7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLnBvaW50ZXJXaWR0aCgpO1xuXG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShwb2ludHNbbi0yXSwgcG9pbnRzW24tMV0pO1xuICAgICAgICAgICAgY3R4LnJvdGF0ZShyYWRpYW5zKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oMCwgMCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKC1sZW5ndGgsIHdpZHRoIC8gMik7XG4gICAgICAgICAgICBjdHgubGluZVRvKC1sZW5ndGgsIC13aWR0aCAvIDIpO1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckF0QmVnaW5uaW5nKCkpIHtcbiAgICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUocG9pbnRzWzBdLCBwb2ludHNbMV0pO1xuICAgICAgICAgICAgICAgIGR4ID0gcG9pbnRzWzJdIC0gcG9pbnRzWzBdO1xuICAgICAgICAgICAgICAgIGR5ID0gcG9pbnRzWzNdIC0gcG9pbnRzWzFdO1xuICAgICAgICAgICAgICAgIGN0eC5yb3RhdGUoKE1hdGguYXRhbjIoLWR5LCAtZHgpICsgUEkyKSAlIFBJMik7XG4gICAgICAgICAgICAgICAgY3R4Lm1vdmVUbygwLCAwKTtcbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKC0xMCwgNik7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVUbygtMTAsIC02KTtcbiAgICAgICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3R4LmZpbGxTdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgICAgICAgIEtpbmV0aWMuTGluZS5wcm90b3R5cGUuX3NjZW5lRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5BcnJvdywgS2luZXRpYy5MaW5lKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHBvaW50ZXJMZW5ndGhcbiAgICAgKiBAbmFtZSBwb2ludGVyTGVuZ3RoXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkFycm93LnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBMZW5ndGggb2YgcG9pbnRlciBvZiBhcnJvdy5cbiAgICAgKiAgIFRoZSBkZWZhdWx0IGlzIDEwLlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgdGVuc2lvblxuICAgICAqIHZhciBwb2ludGVyTGVuZ3RoID0gbGluZS5wb2ludGVyTGVuZ3RoKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgdGVuc2lvblxuICAgICAqIGxpbmUucG9pbnRlckxlbmd0aCgxNSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuQXJyb3csICdwb2ludGVyTGVuZ3RoJywgMTApO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgcG9pbnRlcldpZHRoXG4gICAgICogQG5hbWUgcG9pbnRlcldpZHRoXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkFycm93LnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBXaWR0aCBvZiBwb2ludGVyIG9mIGFycm93LlxuICAgICAqICAgVGhlIGRlZmF1bHQgaXMgMTAuXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCB0ZW5zaW9uXG4gICAgICogdmFyIHBvaW50ZXJXaWR0aCA9IGxpbmUucG9pbnRlcldpZHRoKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgdGVuc2lvblxuICAgICAqIGxpbmUucG9pbnRlcldpZHRoKDE1KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5BcnJvdywgJ3BvaW50ZXJXaWR0aCcsIDEwKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHBvaW50ZXJBdEJlZ2lubmluZ1xuICAgICAqIEBuYW1lIHBvaW50ZXJBdEJlZ2lubmluZ1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5BcnJvdy5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gU2hvdWxkIHBvaW50ZXIgZGlzcGxheWVkIGF0IGJlZ2lubmluZyBvZiBhcnJvdy5cbiAgICAgKiAgIFRoZSBkZWZhdWx0IGlzIGZhbHNlLlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHRlbnNpb25cbiAgICAgKiB2YXIgcG9pbnRlckF0QmVnaW5uaW5nID0gbGluZS5wb2ludGVyQXRCZWdpbm5pbmcoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCB0ZW5zaW9uXG4gICAgICogbGluZS5wb2ludGVyQXRCZWdpbm5pbmcodHJ1ZSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuQXJyb3csICdwb2ludGVyQXRCZWdpbm5pbmcnLCBmYWxzZSk7XG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5BcnJvdyk7XG5cbn0pKCk7XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3Qga2luZXRpYyA9IHJlcXVpcmUoJ2tpbmV0aWMnKTtcblxuY2xhc3MgQmxvY2sge1xuXG5cdGNvbnN0cnVjdG9yKHJvdywgY29sdW1uLCBnZW5lcmF0ZUtleSwgc3BhY2UsIGJsb2NrU2l6ZSkge1xuXHRcdHRoaXMucm93ID0gcm93O1xuXHRcdHRoaXMuY29sdW1uID0gY29sdW1uO1xuXHRcdHRoaXMuZ2VuZXJhdGVLZXkgPSBnZW5lcmF0ZUtleTtcblx0XHR0aGlzLnNwYWNlID0gc3BhY2U7XG5cdFx0dGhpcy5ibG9ja1NpemUgPSBibG9ja1NpemU7XG5cblx0XHR0aGlzLnggPSB0aGlzLnJvdyAqICh0aGlzLnNwYWNlICogMiArIHRoaXMuYmxvY2tTaXplKSArIHRoaXMuc3BhY2U7XG5cdFx0dGhpcy55ID0gdGhpcy5jb2x1bW4gKiAodGhpcy5zcGFjZSAqIDIgKyB0aGlzLmJsb2NrU2l6ZSkgKyB0aGlzLnNwYWNlO1xuXHRcdHRoaXMudXAgPSBmYWxzZTtcblx0XHR0aGlzLmxlZnQgPSBmYWxzZTtcblx0XHR0aGlzLmRvd24gPSBmYWxzZTtcblx0XHR0aGlzLnJpZ2h0ID0gZmFsc2U7XG5cdFx0dGhpcy5rZXkgPSB0aGlzLmdlbmVyYXRlS2V5O1xuXHRcdHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG5cdFx0dGhpcy5yb3RhdGlvbiA9IDA7XG5cdFx0dGhpcy5hbmltYXRpb25Jc1J1bm5pbmcgPSBmYWxzZTtcblx0fVxuXG5cdGluaXQob25DbGlja0V2ZW50LCBib3hBbmltYXRpb24sIHdpZHRoLCByb3dzKSB7XG5cdFx0dGhpcy5ib3ggPSBuZXcga2luZXRpYy5Hcm91cCh7XG5cdFx0XHR4OiB0aGlzLnggKyB0aGlzLmJsb2NrU2l6ZSAvIDIgKyAod2lkdGggLSB0aGlzLmJsb2NrU2l6ZSAqIHJvd3MpIC8gMiAtIHRoaXMuYmxvY2tTaXplIC8gMixcblx0XHRcdHk6IHRoaXMueSArIHRoaXMuYmxvY2tTaXplIC8gMixcblx0XHRcdHdpZHRoOiB0aGlzLmJsb2NrU2l6ZSxcblx0XHRcdGhlaWdodDogdGhpcy5ibG9ja1NpemUsXG5cdFx0XHRvZmZzZXQ6IHtcblx0XHRcdFx0eDogdGhpcy5ibG9ja1NpemUgLyAyLFxuXHRcdFx0XHR5OiB0aGlzLmJsb2NrU2l6ZSAvIDJcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMucGlwZXMgPSBuZXcga2luZXRpYy5Hcm91cCh7XG5cdFx0XHR4OiAwLFxuXHRcdFx0eTogMFxuXHRcdH0pO1xuXG5cdFx0dGhpcy5zaGFwZSA9IG5ldyBraW5ldGljLlJlY3Qoe1xuXHRcdFx0eDogMCxcblx0XHRcdHk6IDAsXG5cdFx0XHR3aWR0aDogdGhpcy5ibG9ja1NpemUsXG5cdFx0XHRoZWlnaHQ6IHRoaXMuYmxvY2tTaXplLFxuXHRcdFx0bmFtZTogdGhpcy54ICsgJy0nICsgdGhpcy55LFxuXHRcdFx0ZmlsbDogJ2dyZXknLFxuXHRcdFx0c3Ryb2tlOiAnYmxhY2snLFxuXHRcdFx0c3Ryb2tlV2lkdGg6IHRoaXMuc3BhY2Vcblx0XHR9KTtcblxuXHRcdHZhciBwaXBlVXAgPSBuZXcga2luZXRpYy5MaW5lKHtcblx0XHRcdHBvaW50czogWyB0aGlzLmJsb2NrU2l6ZSAvIDIsIDAsIHRoaXMuYmxvY2tTaXplIC8gMiwgdGhpcy5ibG9ja1NpemUgLyAyIF0sXG5cdFx0XHRzdHJva2U6ICdyZWQnLFxuXHRcdFx0c3Ryb2tlV2lkdGg6IDEzLFxuXHRcdFx0bGluZUNhcDogJ3JvdW5kJyxcblx0XHRcdG5hbWU6ICdwaXBlVXAnXG5cdFx0fSk7XG5cblx0XHR2YXIgcGlwZUxlZnQgPSBuZXcga2luZXRpYy5MaW5lKHtcblx0XHRcdHBvaW50czogWyAwLCB0aGlzLmJsb2NrU2l6ZSAvIDIsIHRoaXMuYmxvY2tTaXplIC8gMiwgdGhpcy5ibG9ja1NpemUgLyAyIF0sXG5cdFx0XHRzdHJva2U6ICdyZWQnLFxuXHRcdFx0c3Ryb2tlV2lkdGg6IDEzLFxuXHRcdFx0bGluZUNhcDogJ3JvdW5kJyxcblx0XHRcdG5hbWU6ICdwaXBlTGVmdCdcblx0XHR9KTtcblxuXHRcdHZhciBwaXBlRG93biA9IG5ldyBraW5ldGljLkxpbmUoe1xuXHRcdFx0cG9pbnRzOiBbIHRoaXMuYmxvY2tTaXplIC8gMiwgdGhpcy5ibG9ja1NpemUsIHRoaXMuYmxvY2tTaXplIC8gMiwgdGhpcy5ibG9ja1NpemUgLyAyIF0sXG5cdFx0XHRzdHJva2U6ICdyZWQnLFxuXHRcdFx0c3Ryb2tlV2lkdGg6IDEzLFxuXHRcdFx0bGluZUNhcDogJ3JvdW5kJyxcblx0XHRcdG5hbWU6ICdwaXBlRG93bidcblx0XHR9KTtcblxuXHRcdHZhciBwaXBlUmlnaHQgPSBuZXcga2luZXRpYy5MaW5lKHtcblx0XHRcdHBvaW50czogWyB0aGlzLmJsb2NrU2l6ZSwgdGhpcy5ibG9ja1NpemUgLyAyLCB0aGlzLmJsb2NrU2l6ZSAvIDIsIHRoaXMuYmxvY2tTaXplIC8gMiBdLFxuXHRcdFx0c3Ryb2tlOiAncmVkJyxcblx0XHRcdHN0cm9rZVdpZHRoOiAxMyxcblx0XHRcdGxpbmVDYXA6ICdyb3VuZCcsXG5cdFx0XHRuYW1lOiAncGlwZVJpZ2h0J1xuXHRcdH0pO1xuXG5cdFx0Ly8gUGxhY2luZyBwaXBlc1xuXHRcdGlmICh0aGlzLnVwKSB7XG5cdFx0XHR0aGlzLnBpcGVzLmFkZChwaXBlVXApO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmxlZnQpIHtcblx0XHRcdHRoaXMucGlwZXMuYWRkKHBpcGVMZWZ0KTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5kb3duKSB7XG5cdFx0XHR0aGlzLnBpcGVzLmFkZChwaXBlRG93bik7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMucmlnaHQpIHtcblx0XHRcdHRoaXMucGlwZXMuYWRkKHBpcGVSaWdodCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5ib3gub24oJ2NsaWNrJywgKCkgPT4gb25DbGlja0V2ZW50KHRoaXMpKTtcblx0XHR0aGlzLm1vdXNlQ2xpY2sgPSBib3hBbmltYXRpb24odGhpcyk7XG5cblx0XHR0aGlzLmJveC5hZGQodGhpcy5zaGFwZSk7XG5cdFx0dGhpcy5ib3guYWRkKHRoaXMucGlwZXMpO1xuXHR9XG5cblx0Y29ubmVjdGlvbkhhbmRsZXIoY29ubmVjdGVkKSB7XG5cdFx0aWYgKGNvbm5lY3RlZCkge1xuXHRcdFx0dGhpcy5waXBlcy5maW5kKCcucGlwZVVwJykuc3Ryb2tlKCdncmVlbicpO1xuXHRcdFx0dGhpcy5waXBlcy5maW5kKCcucGlwZUxlZnQnKS5zdHJva2UoJ2dyZWVuJyk7XG5cdFx0XHR0aGlzLnBpcGVzLmZpbmQoJy5waXBlRG93bicpLnN0cm9rZSgnZ3JlZW4nKTtcblx0XHRcdHRoaXMucGlwZXMuZmluZCgnLnBpcGVSaWdodCcpLnN0cm9rZSgnZ3JlZW4nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5waXBlcy5maW5kKCcucGlwZVVwJykuc3Ryb2tlKCdyZWQnKTtcblx0XHRcdHRoaXMucGlwZXMuZmluZCgnLnBpcGVMZWZ0Jykuc3Ryb2tlKCdyZWQnKTtcblx0XHRcdHRoaXMucGlwZXMuZmluZCgnLnBpcGVEb3duJykuc3Ryb2tlKCdyZWQnKTtcblx0XHRcdHRoaXMucGlwZXMuZmluZCgnLnBpcGVSaWdodCcpLnN0cm9rZSgncmVkJyk7XG5cdFx0fVxuXHR9XG5cblx0c2h1ZmZsZUl0KCkge1xuXHRcdGZvciAodmFyIGsgPSAwOyBrIDwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMyk7IGsrKykge1xuXHRcdFx0aWYgKE1hdGgucmFuZG9tKCkgPCAwLjUpIHtcblx0XHRcdFx0dGhpcy5yb3RhdGVSaWdodCgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5yb3RhdGVMZWZ0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cm90YXRlUmlnaHQoKSB7XG5cdFx0bGV0IHRlbXAgPSB0aGlzLnVwO1xuXG5cdFx0dGhpcy51cCA9IHRoaXMubGVmdDtcblx0XHR0aGlzLmxlZnQgPSB0aGlzLmRvd247XG5cdFx0dGhpcy5kb3duID0gdGhpcy5yaWdodDtcblx0XHR0aGlzLnJpZ2h0ID0gdGVtcDtcblx0fVxuXG5cdHJvdGF0ZUxlZnQoKSB7XG5cdFx0bGV0IHRlbXAgPSB0aGlzLnVwO1xuXG5cdFx0dGhpcy51cCA9IHRoaXMucmlnaHQ7XG5cdFx0dGhpcy5yaWdodCA9IHRoaXMuZG93bjtcblx0XHR0aGlzLmRvd24gPSB0aGlzLmxlZnQ7XG5cdFx0dGhpcy5sZWZ0ID0gdGVtcDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJsb2NrOyIsIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgR2FtZVRpbWVyIHtcblxuXHRjb25zdHJ1Y3Rvcihmb3J3YXJkID0gdHJ1ZSkge1xuXHRcdHRoaXMuZm9yd2FyZCA9IGZvcndhcmQ7XG5cblx0XHR0aGlzLnRpbWUgPSAwO1xuXHRcdHRoaXMudGltZXJPYmogPSBudWxsO1xuXHRcdHRoaXMub25UaW1lc1VwID0gKCkgPT4ge307XG5cdH1cblxuXHRnZXQgbWludXRlcygpIHtcblx0XHRsZXQgbWludXRlcyA9IE1hdGguZmxvb3IodGhpcy50aW1lIC8gNjApO1xuXG5cdFx0cmV0dXJuIG1pbnV0ZXMgPCAxMCA/ICcwJyArIG1pbnV0ZXMgOiBtaW51dGVzO1xuXHR9XG5cblx0Z2V0IHNlY29uZHMoKSB7XG5cdFx0bGV0IHNlY29uZHMgPSB0aGlzLnRpbWUgJSA2MDtcblxuXHRcdHJldHVybiBzZWNvbmRzIDwgMTAgPyAnMCcgKyBzZWNvbmRzIDogc2Vjb25kcztcblx0fVxuXG5cdHN0YXJ0KGluZm9QYW5lbCkge1xuXHRcdGlmICh0aGlzLmZvcndhcmQpIHtcblx0XHRcdHRoaXMudGltZXJPYmogPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRcdHRoaXMudGltZSsrO1xuXHRcdFx0XHR0aGlzLnVwZGF0ZVRpbWVyKGluZm9QYW5lbCk7XG5cdFx0XHR9LCAxMDAwKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy50aW1lck9iaiA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdFx0dGhpcy50aW1lLS07XG5cdFx0XHRcdHRoaXMudXBkYXRlVGltZXIoaW5mb1BhbmVsKTtcblxuXHRcdFx0XHRpZiAodGhpcy50aW1lID09PSAwICYmIHR5cGVvZiB0aGlzLm9uVGltZXNVcCA9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0dGhpcy5vblRpbWVzVXAoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgMTAwMCk7XG5cdFx0fVxuXHR9XG5cblx0c3RvcCgpIHtcblx0XHRpZiAodGhpcy50aW1lck9iaiA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNsZWFySW50ZXJ2YWwodGhpcy50aW1lck9iaik7XG5cdH1cblxuXHRyZXNldCgpIHtcblx0XHR0aGlzLnN0b3AoKTtcblx0XHR0aGlzLnRpbWUgPSAwO1xuXHR9XG5cblx0dXBkYXRlVGltZXIoaW5mb1BhbmVsKSB7XG5cdFx0aW5mb1BhbmVsLnVwZGF0ZVRpbWVyKHRoaXMubWludXRlcyArICc6JyArIHRoaXMuc2Vjb25kcyk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHYW1lVGltZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBhdHRyU2VwYXJhdG9yID0gJzsnO1xuY29uc3Qga2V5VmFsdWVTZXBhcmF0b3IgPSAnPSc7XG5cbmNvbnN0IGV4cGlyZXNLZXkgPSAnZXhwaXJlcyc7XG5jb25zdCBwYXRoS2V5ID0gJ3BhdGgnO1xuXG5mdW5jdGlvbiBnZXQoa2V5LCBkZWZhdWx0VmFsdWUgPSBudWxsKSB7XG5cdGxldCBuYW1lID0ga2V5ICsga2V5VmFsdWVTZXBhcmF0b3IsXG5cdFx0ZGVjb2RlZENvb2tpZVN0cmluZyA9IGRlY29kZVVSSUNvbXBvbmVudChkb2N1bWVudC5jb29raWUpLFxuXHRcdGNvb2tpZXMgPSBkZWNvZGVkQ29va2llU3RyaW5nLnNwbGl0KCc7Jyk7XG5cblx0Zm9yIChsZXQgY29va2llIG9mIGNvb2tpZXMpIHtcblx0XHRjb29raWUgPSBjb29raWUudHJpbSgpO1xuXG5cdFx0aWYgKGNvb2tpZS5pbmRleE9mKG5hbWUpID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gY29va2llLnN1YnN0cmluZyhuYW1lLmxlbmd0aCwgY29va2llLmxlbmd0aCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGRlZmF1bHRWYWx1ZTtcbn1cblxuZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUsIGV4cGlyZXMgPSAzNjUsIHBhdGggPSAnLycpIHtcblx0bGV0IGQgPSBuZXcgRGF0ZSgpO1xuXG5cdGQuc2V0VGltZShkLmdldFRpbWUoKSArIGV4cGlyZXMgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcblxuXHRsZXQgY29va2llQXR0ciA9IGtleSArIGtleVZhbHVlU2VwYXJhdG9yICsgdmFsdWUsXG5cdFx0ZXhwaXJlc0F0dHIgPSBleHBpcmVzS2V5ICsga2V5VmFsdWVTZXBhcmF0b3IgKyBkLnRvVVRDU3RyaW5nKCksXG5cdFx0cGF0aEF0dHIgPSBwYXRoS2V5ICsga2V5VmFsdWVTZXBhcmF0b3IgKyBwYXRoO1xuXG5cdGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZUF0dHIgKyBhdHRyU2VwYXJhdG9yICsgZXhwaXJlc0F0dHIgKyBhdHRyU2VwYXJhdG9yICsgcGF0aEF0dHI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRnZXQ6IGdldCxcblx0c2V0OiBzZXRcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBLaW5ldGljICAgPSByZXF1aXJlKCdraW5ldGljJyk7XG5cbmNvbnN0IGNvb2tpZSAgICA9IHJlcXVpcmUoJy4vbW9kdWxlL2Nvb2tpZScpO1xuY29uc3QgQmxvY2sgICAgID0gcmVxdWlyZSgnLi9tb2RlbC9ibG9jaycpO1xuY29uc3QgR2FtZVRpbWVyID0gcmVxdWlyZSgnLi9tb2RlbC9nYW1lLXRpbWVyJyk7XG5cbmxldCB3aWR0aCA9IDEyODAsXG5cdGhlaWdodCA9IDcyMCxcblx0cm93cyA9IDEwLFxuXHRjb2x1bW5zID0gMTAsXG5cdHNwYWNlID0gNSxcblx0bGF5ZXJTaXplID0gNSxcblx0bGV2ZWwgPSAwLFxuXHRibG9ja1NpemUgPSBNYXRoLm1pbih3aWR0aCwgaGVpZ2h0KSAvIE1hdGgubWF4KHJvd3MsIGNvbHVtbnMpIC0gc3BhY2UgKiAyLFxuXHRzdGFydGluZ1BvaW50WCA9IE1hdGguZmxvb3Iocm93cyAvIDIpLFxuXHRzdGFydGluZ1BvaW50WSA9IE1hdGguZmxvb3IoY29sdW1ucyAvIDIpO1xuXG5sZXQgc3RhZ2UsIGdhbWVUeXBlLCBnYW1lRGlmZmljdWx0eSwgbGF5ZXJSb3dzLCBsYXllckNvbHVtbnMsIHRhYmxlLCB0aW1lciwgaW5mb3JtYXRpb24sXG5cdG1lbnVMYXllciwgZGlmZmljdWx0eUxheWVyLCB0aW1lVHJpYWxHYW1lTGF5ZXIsIHNjb3JlQm9hcmRNZW51TGF5ZXIsIGluZm9ybWF0aW9uTWVudUxheWVyLFxuXHRnYW1lTGF5ZXJzLCBibG9ja3M7XG5cbmZ1bmN0aW9uIGxvYWRBcHBsaWNhdGlvbigpIHtcblx0d2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcblx0aGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC0gMjAwO1xuXG5cdHN0YWdlID0gbmV3IEtpbmV0aWMuU3RhZ2Uoe1xuXHRcdGNvbnRhaW5lcjogJ3RhYmxlJyxcblx0XHR3aWR0aDogd2lkdGgsXG5cdFx0aGVpZ2h0OiBoZWlnaHRcblx0fSk7XG5cblx0bWFpbk1lbnUoKTtcbn1cblxuZnVuY3Rpb24gc3RhcnROZXdDbGFzc2ljR2FtZSgpIHtcblxuXHRpZiAoc3RhZ2UuaGFzQ2hpbGRyZW4oKSkge1xuXHRcdHN0YWdlLmRlc3Ryb3lDaGlsZHJlbigpO1xuXHR9XG5cblx0Z2FtZVR5cGUgPSAnY2xhc3NpYyc7XG5cblx0c3dpdGNoIChnYW1lRGlmZmljdWx0eSkge1xuXHRcdGNhc2UgJ2Vhc3knOlxuXHRcdFx0cm93cyA9IDU7XG5cdFx0XHRjb2x1bW5zID0gNTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ21lZGl1bSc6XG5cdFx0XHRyb3dzID0gMTA7XG5cdFx0XHRjb2x1bW5zID0gMTA7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdoYXJkJzpcblx0XHRcdHJvd3MgPSAxNTtcblx0XHRcdGNvbHVtbnMgPSAxNTtcblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRicmVhaztcblx0fVxuXG5cdHN0YXJ0aW5nUG9pbnRYID0gTWF0aC5mbG9vcihyb3dzIC8gMik7XG5cdHN0YXJ0aW5nUG9pbnRZID0gTWF0aC5mbG9vcihjb2x1bW5zIC8gMik7XG5cdGxheWVyUm93cyA9IE1hdGguZmxvb3Iocm93cyAvIGxheWVyU2l6ZSkgKyAxO1xuXHRsYXllckNvbHVtbnMgPSBNYXRoLmZsb29yKGNvbHVtbnMgLyBsYXllclNpemUpICsgMTtcblx0YmxvY2tTaXplID0gTWF0aC5taW4od2lkdGgsIGhlaWdodCkgLyBNYXRoLm1heChyb3dzLCBjb2x1bW5zKSAtIHNwYWNlICogMjtcblxuXHR0YWJsZSA9IG5ldyBHYW1lVGFibGUoKTtcblx0dGFibGUuZ2VuZXJhdGVGaWVsZHMoKTtcblx0dGFibGUuc2h1ZmZsZSgpO1xuXHR0YWJsZS5kcmF3R2FtZSgpO1xuXG5cdGNyZWF0ZVRpbWVyKHRydWUpO1xuXHRpbmZvcm1hdGlvbiA9IG5ldyBJbmZvcm1hdGlvblBhbmVsKCk7XG5cblx0dGltZXIuc3RhcnQoaW5mb3JtYXRpb24pO1xuXG5cdGluZm9ybWF0aW9uLmluaXRQYW5lbCgpO1xuXHRpbmZvcm1hdGlvbi51cGRhdGVTY29yZShjb29raWUuZ2V0KCdjbGFzc2ljX2hpZ2hfc2NvcmVfJyArIGdhbWVEaWZmaWN1bHR5LCAnLS0vLS0nKSk7XG5cdGluZm9ybWF0aW9uLmhpZGVMZXZlbCgpO1xufVxuXG5mdW5jdGlvbiBzdGFydE5ld1RpbWVUcmlhbEdhbWUoKSB7XG5cdGlmIChzdGFnZS5oYXNDaGlsZHJlbigpKSB7XG5cdFx0c3RhZ2UuZGVzdHJveUNoaWxkcmVuKCk7XG5cdH1cblxuXHRnYW1lVHlwZSA9ICd0aW1lLXRyaWFsJztcblxuXHRsZXZlbCA9IDE7XG5cblx0cm93cyA9IDQgKyBsZXZlbDtcblx0Y29sdW1ucyA9IDQgKyBsZXZlbDtcblxuXHRzdGFydGluZ1BvaW50WCA9IE1hdGguZmxvb3Iocm93cyAvIDIpO1xuXHRzdGFydGluZ1BvaW50WSA9IE1hdGguZmxvb3IoY29sdW1ucyAvIDIpO1xuXHRsYXllclJvd3MgPSBNYXRoLmZsb29yKHJvd3MgLyBsYXllclNpemUpICsgMTtcblx0bGF5ZXJDb2x1bW5zID0gTWF0aC5mbG9vcihjb2x1bW5zIC8gbGF5ZXJTaXplKSArIDE7XG5cdGJsb2NrU2l6ZSA9IE1hdGgubWluKHdpZHRoLCBoZWlnaHQpIC8gTWF0aC5tYXgocm93cywgY29sdW1ucykgLSBzcGFjZSAqIDI7XG5cblx0dGFibGUgPSBuZXcgR2FtZVRhYmxlKCk7XG5cdHRhYmxlLmdlbmVyYXRlRmllbGRzKCk7XG5cdHRhYmxlLnNodWZmbGUoKTtcblx0dGFibGUuZHJhd0dhbWUoKTtcblxuXHRpbmZvcm1hdGlvbiA9IG5ldyBJbmZvcm1hdGlvblBhbmVsKCk7XG5cdGluZm9ybWF0aW9uLmluaXRQYW5lbCgpO1xuXG5cdGNyZWF0ZVRpbWVyKGZhbHNlKTtcblxuXHR0aW1lci5zdGFydChpbmZvcm1hdGlvbik7XG5cdHRpbWVyLnRpbWUgPSAxMjA7XG5cblx0aW5mb3JtYXRpb24udXBkYXRlU2NvcmUoY29va2llLmdldCgndGltZV90cmlhbF9zY29yZScsICctJykpO1xuXHRpbmZvcm1hdGlvbi51cGRhdGVUaW1lcih0aW1lci5taW51dGVzICsgJzonICsgdGltZXIuc2Vjb25kcyk7XG5cdGluZm9ybWF0aW9uLnVwZGF0ZUxldmVsKGxldmVsKTtcbn1cblxuZnVuY3Rpb24gc3RhcnROZXh0VGltZVRyaWFsR2FtZSgpIHtcblx0aWYgKHN0YWdlLmhhc0NoaWxkcmVuKCkpIHtcblx0XHRzdGFnZS5kZXN0cm95Q2hpbGRyZW4oKTtcblx0fVxuXG5cdGdhbWVUeXBlID0gJ3RpbWUtdHJpYWwnO1xuXG5cdGxldmVsKys7XG5cblx0cm93cyA9IDQgKyBsZXZlbDtcblx0Y29sdW1ucyA9IDQgKyBsZXZlbDtcblxuXHRzdGFydGluZ1BvaW50WCA9IE1hdGguZmxvb3Iocm93cyAvIDIpO1xuXHRzdGFydGluZ1BvaW50WSA9IE1hdGguZmxvb3IoY29sdW1ucyAvIDIpO1xuXHRsYXllclJvd3MgPSBNYXRoLmZsb29yKHJvd3MgLyBsYXllclNpemUpICsgMTtcblx0bGF5ZXJDb2x1bW5zID0gTWF0aC5mbG9vcihjb2x1bW5zIC8gbGF5ZXJTaXplKSArIDE7XG5cdGJsb2NrU2l6ZSA9IE1hdGgubWluKHdpZHRoLCBoZWlnaHQpIC8gTWF0aC5tYXgocm93cywgY29sdW1ucykgLSBzcGFjZSAqIDI7XG5cblx0dGFibGUgPSBuZXcgR2FtZVRhYmxlKCk7XG5cdHRhYmxlLmdlbmVyYXRlRmllbGRzKCk7XG5cdHRhYmxlLnNodWZmbGUoKTtcblx0dGFibGUuZHJhd0dhbWUoKTtcblxuXHRpbmZvcm1hdGlvbiA9IG5ldyBJbmZvcm1hdGlvblBhbmVsKCk7XG5cdGluZm9ybWF0aW9uLmluaXRQYW5lbCgpO1xuXG5cdHRpbWVyLnRpbWUgPSB0aW1lci50aW1lICsgMzAgKyBsZXZlbCAqIDEwO1xuXHR0aW1lci5zdGFydChpbmZvcm1hdGlvbik7XG5cblx0aW5mb3JtYXRpb24udXBkYXRlU2NvcmUoY29va2llLmdldCgndGltZV90cmlhbF9zY29yZScsICctJykpO1xuXHRpbmZvcm1hdGlvbi51cGRhdGVUaW1lcih0aW1lci5taW51dGVzICsgJzonICsgdGltZXIuc2Vjb25kcyk7XG5cdGluZm9ybWF0aW9uLnVwZGF0ZUxldmVsKGxldmVsKTtcbn1cblxuLypcbmZ1bmN0aW9uIEdhbWVUaW1lcigpIHtcblx0Ly8gT3B0aW9uc1xuXHR2YXIgaW5jID0gdHJ1ZTtcblx0dmFyIHRpbWVyT2JqID0gbnVsbDtcblxuXHQvLyBTdGF0ZXNcblx0dmFyIGN1cnJlbnRUaW1lID0gMDtcblx0dmFyIGN1cnJlbnRTZWMgPSAwO1xuXHR2YXIgY3VycmVudE1pbiA9IDA7XG5cblx0dGhpcy5zZXRJbmMgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdGluYyA9IHZhbHVlO1xuXHR9O1xuXG5cdHRoaXMuZ2V0Q3VycmVudFRpbWUgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gY3VycmVudFRpbWU7XG5cdH07XG5cblx0dGhpcy5zZXRDdXJyZW50VGltZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0Y3VycmVudFRpbWUgPSB2YWx1ZTtcblx0XHR1cGRhdGVNaW5BbmRTZWMoKTtcblx0fTtcblxuXHR0aGlzLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKGluYykge1xuXHRcdFx0dGltZXJPYmogPSBzZXRJbnRlcnZhbChyZWZyZXNoSW5jVGltZXIsIDEwMDApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aW1lck9iaiA9IHNldEludGVydmFsKHJlZnJlc2hEZWNUaW1lciwgMTAwMCk7XG5cdFx0fVxuXHR9O1xuXG5cdHRoaXMuc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdGNsZWFySW50ZXJ2YWwodGltZXJPYmopO1xuXHR9O1xuXG5cdHRoaXMucmVzZXQgPSBmdW5jdGlvbigpIHtcblx0XHRjdXJyZW50VGltZSA9IDA7XG5cdFx0Y3VycmVudFNlYyA9IDA7XG5cdFx0Y3VycmVudE1pbiA9IDA7XG5cdH07XG5cblx0dGhpcy5nZXRTZWMgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gY3VycmVudFNlYztcblx0fTtcblxuXHR0aGlzLmdldE1pbiA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBjdXJyZW50TWluO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIHJlZnJlc2hJbmNUaW1lcigpIHtcblx0XHRjdXJyZW50VGltZSsrO1xuXHRcdHVwZGF0ZU1pbkFuZFNlYygpO1xuXHRcdGluZm9ybWF0aW9uLnVwZGF0ZVRpbWVyKGN1cnJlbnRNaW4gKyAnOicgKyBjdXJyZW50U2VjKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hEZWNUaW1lcigpIHtcblx0XHRjdXJyZW50VGltZS0tO1xuXHRcdHVwZGF0ZU1pbkFuZFNlYygpO1xuXHRcdGluZm9ybWF0aW9uLnVwZGF0ZVRpbWVyKGN1cnJlbnRNaW4gKyAnOicgKyBjdXJyZW50U2VjKTtcblxuXHRcdGlmIChjdXJyZW50VGltZSA9PT0gMCkge1xuXHRcdFx0dGltZVRyaWFsR2FtZVRpbWVVcCgpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZU1pbkFuZFNlYygpIHtcblx0XHRjdXJyZW50TWluID0gTWF0aC5mbG9vcihjdXJyZW50VGltZSAvIDYwKTtcblx0XHRjdXJyZW50TWluID0gY3VycmVudE1pbiA8IDEwID8gJzAnICsgY3VycmVudE1pbiA6IGN1cnJlbnRNaW47XG5cdFx0Y3VycmVudFNlYyA9IGN1cnJlbnRUaW1lICUgNjA7XG5cdFx0Y3VycmVudFNlYyA9IGN1cnJlbnRTZWMgPCAxMCA/ICcwJyArIGN1cnJlbnRTZWMgOiBjdXJyZW50U2VjO1xuXHR9XG59XG4qL1xuXG5mdW5jdGlvbiBtYWluTWVudSgpIHtcblxuXHRpZiAoc3RhZ2UuaGFzQ2hpbGRyZW4oKSkge1xuXHRcdHN0YWdlLmRlc3Ryb3lDaGlsZHJlbigpO1xuXHR9XG5cblx0dmFyIGNsYXNzaWNHYW1lVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IHdpZHRoIC8gMixcblx0XHR5OiBoZWlnaHQgLyAzIC0gMTAwLFxuXHRcdHRleHQ6ICdDbGFzc2ljIGdhbWUnLFxuXHRcdGZvbnRTaXplOiAzMixcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdGNsYXNzaWNHYW1lVGV4dC5zZXRPZmZzZXQoe1xuXHRcdHg6IGNsYXNzaWNHYW1lVGV4dC5nZXRXaWR0aCgpIC8gMlxuXHR9KTtcblxuXHR2YXIgdGltZVRyaWFsR2FtZVRleHQgPSBuZXcgS2luZXRpYy5UZXh0KHtcblx0XHR4OiB3aWR0aCAvIDIsXG5cdFx0eTogaGVpZ2h0IC8gMyxcblx0XHR0ZXh0OiAnVGltZSB0cmlhbCcsXG5cdFx0Zm9udFNpemU6IDMyLFxuXHRcdGZvbnRGYW1pbHk6ICdDYWxpYnJpJyxcblx0XHRmaWxsOiAnZ3JleSdcblx0fSk7XG5cblx0dGltZVRyaWFsR2FtZVRleHQuc2V0T2Zmc2V0KHtcblx0XHR4OiB0aW1lVHJpYWxHYW1lVGV4dC5nZXRXaWR0aCgpIC8gMlxuXHR9KTtcblxuXHR2YXIgc2NvcmVCb2FyZFRleHQgPSBuZXcgS2luZXRpYy5UZXh0KHtcblx0XHR4OiB3aWR0aCAvIDIsXG5cdFx0eTogaGVpZ2h0IC8gMyArIDEwMCxcblx0XHR0ZXh0OiAnU2NvcmVib2FyZCcsXG5cdFx0Zm9udFNpemU6IDMyLFxuXHRcdGZvbnRGYW1pbHk6ICdDYWxpYnJpJyxcblx0XHRmaWxsOiAnZ3JleSdcblx0fSk7XG5cblx0c2NvcmVCb2FyZFRleHQuc2V0T2Zmc2V0KHtcblx0XHR4OiBzY29yZUJvYXJkVGV4dC5nZXRXaWR0aCgpIC8gMlxuXHR9KTtcblxuXHR2YXIgaW5mb3JtYXRpb25UZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogd2lkdGggLyAyLFxuXHRcdHk6IGhlaWdodCAvIDMgKyAyMDAsXG5cdFx0dGV4dDogJ0luZm9ybWF0aW9uJyxcblx0XHRmb250U2l6ZTogMzIsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHRpbmZvcm1hdGlvblRleHQuc2V0T2Zmc2V0KHtcblx0XHR4OiBpbmZvcm1hdGlvblRleHQuZ2V0V2lkdGgoKSAvIDJcblx0fSk7XG5cblx0bWVudUxheWVyID0gbmV3IEtpbmV0aWMuTGF5ZXIoKTtcblx0bWVudUxheWVyLm5hbWUgPSAnZ2FtZU1lbnUnO1xuXHRtZW51TGF5ZXIuYWRkKGNsYXNzaWNHYW1lVGV4dCk7XG5cdG1lbnVMYXllci5hZGQodGltZVRyaWFsR2FtZVRleHQpO1xuXHRtZW51TGF5ZXIuYWRkKHNjb3JlQm9hcmRUZXh0KTtcblx0bWVudUxheWVyLmFkZChpbmZvcm1hdGlvblRleHQpO1xuXHRzdGFnZS5hZGQobWVudUxheWVyKTtcblxuXHQvLyBFdmVudCBsaXN0ZW5lcnNcblx0dmFyIGNsYXNzaWNHYW1lVGV4dE1vdXNlT3ZlciA9IG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcblx0XHRjbGFzc2ljR2FtZVRleHQuZmlsbCgnYmxhY2snKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgbWVudUxheWVyKTtcblxuXHR2YXIgY2xhc3NpY0dhbWVUZXh0TW91c2VPdXQgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0Y2xhc3NpY0dhbWVUZXh0LmZpbGwoJ2dyZXknKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgbWVudUxheWVyKTtcblxuXHRjbGFzc2ljR2FtZVRleHQub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCkge1xuXHRcdGNsYXNzaWNHYW1lVGV4dE1vdXNlT3Zlci5zdGFydCgpO1xuXHR9KTtcblxuXHRjbGFzc2ljR2FtZVRleHQub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XG5cdFx0Y2xhc3NpY0dhbWVUZXh0TW91c2VPdXQuc3RhcnQoKTtcblx0fSk7XG5cblx0Y2xhc3NpY0dhbWVUZXh0Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuXHRcdGNsYXNzaWNEaWZmaWN1bHR5U2VsZWN0TWVudSgpO1xuXHR9KTtcblxuXHR2YXIgdGltZVRyaWFsR2FtZVRleHRNb3VzZU92ZXIgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0dGltZVRyaWFsR2FtZVRleHQuZmlsbCgnYmxhY2snKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgbWVudUxheWVyKTtcblxuXHR2YXIgdGltZVRyaWFsR2FtZVRleHRNb3VzZU91dCA9IG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcblx0XHR0aW1lVHJpYWxHYW1lVGV4dC5maWxsKCdncmV5Jyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIG1lbnVMYXllcik7XG5cblx0dGltZVRyaWFsR2FtZVRleHQub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCkge1xuXHRcdHRpbWVUcmlhbEdhbWVUZXh0TW91c2VPdmVyLnN0YXJ0KCk7XG5cdH0pO1xuXG5cdHRpbWVUcmlhbEdhbWVUZXh0Lm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkge1xuXHRcdHRpbWVUcmlhbEdhbWVUZXh0TW91c2VPdXQuc3RhcnQoKTtcblx0fSk7XG5cblx0dGltZVRyaWFsR2FtZVRleHQub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cdFx0dGltZVRyaWFsR2FtZU1lbnUoKTtcblx0fSk7XG5cblx0dmFyIHNjb3JlQm9hcmRUZXh0TW91c2VPdmVyID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdHNjb3JlQm9hcmRUZXh0LmZpbGwoJ2JsYWNrJyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIG1lbnVMYXllcik7XG5cblx0dmFyIHNjb3JlQm9hcmRUZXh0TW91c2VPdXQgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0c2NvcmVCb2FyZFRleHQuZmlsbCgnZ3JleScpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBtZW51TGF5ZXIpO1xuXG5cdHNjb3JlQm9hcmRUZXh0Lm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcblx0XHRzY29yZUJvYXJkVGV4dE1vdXNlT3Zlci5zdGFydCgpO1xuXHR9KTtcblxuXHRzY29yZUJvYXJkVGV4dC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcblx0XHRzY29yZUJvYXJkVGV4dE1vdXNlT3V0LnN0YXJ0KCk7XG5cdH0pO1xuXG5cdHNjb3JlQm9hcmRUZXh0Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuXHRcdHNjb3JlQm9hcmRNZW51KCk7XG5cdH0pO1xuXG5cdHZhciBpbmZvcm1hdGlvblRleHRNb3VzZU92ZXIgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0aW5mb3JtYXRpb25UZXh0LmZpbGwoJ2JsYWNrJyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIG1lbnVMYXllcik7XG5cblx0dmFyIGluZm9ybWF0aW9uVGV4dE1vdXNlT3V0ID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdGluZm9ybWF0aW9uVGV4dC5maWxsKCdncmV5Jyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIG1lbnVMYXllcik7XG5cblx0aW5mb3JtYXRpb25UZXh0Lm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcblx0XHRpbmZvcm1hdGlvblRleHRNb3VzZU92ZXIuc3RhcnQoKTtcblx0fSk7XG5cblx0aW5mb3JtYXRpb25UZXh0Lm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkge1xuXHRcdGluZm9ybWF0aW9uVGV4dE1vdXNlT3V0LnN0YXJ0KCk7XG5cdH0pO1xuXG5cdGluZm9ybWF0aW9uVGV4dC5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcblx0XHRpbmZvcm1hdGlvbk1lbnUoKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzaWNEaWZmaWN1bHR5U2VsZWN0TWVudSgpIHtcblxuXHRpZiAoc3RhZ2UuaGFzQ2hpbGRyZW4oKSkge1xuXHRcdHN0YWdlLmRlc3Ryb3lDaGlsZHJlbigpO1xuXHR9XG5cblx0dmFyIGVhc3lUZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogd2lkdGggLyAyLFxuXHRcdHk6IGhlaWdodCAvIDMgLSAxMDAsXG5cdFx0dGV4dDogJ0Vhc3kgKDV4NSknLFxuXHRcdGZvbnRTaXplOiAzMixcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdGVhc3lUZXh0LnNldE9mZnNldCh7XG5cdFx0eDogZWFzeVRleHQuZ2V0V2lkdGgoKSAvIDJcblx0fSk7XG5cblx0dmFyIG1lZGl1bVRleHQgPSBuZXcgS2luZXRpYy5UZXh0KHtcblx0XHR4OiB3aWR0aCAvIDIsXG5cdFx0eTogaGVpZ2h0IC8gMyxcblx0XHR0ZXh0OiAnTWVkaXVtICgxMHgxMCknLFxuXHRcdGZvbnRTaXplOiAzMixcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdG1lZGl1bVRleHQuc2V0T2Zmc2V0KHtcblx0XHR4OiBtZWRpdW1UZXh0LmdldFdpZHRoKCkgLyAyXG5cdH0pO1xuXG5cdHZhciBoYXJkVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IHdpZHRoIC8gMixcblx0XHR5OiBoZWlnaHQgLyAzICsgMTAwLFxuXHRcdHRleHQ6ICdIYXJkICgxNXgxNSknLFxuXHRcdGZvbnRTaXplOiAzMixcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdGhhcmRUZXh0LnNldE9mZnNldCh7XG5cdFx0eDogaGFyZFRleHQuZ2V0V2lkdGgoKSAvIDJcblx0fSk7XG5cblx0dmFyIGJhY2tUZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogd2lkdGggLyAyLFxuXHRcdHk6IGhlaWdodCAvIDMgKyAyMDAsXG5cdFx0dGV4dDogJ0JhY2sgdG8gdGhlIG1lbnUnLFxuXHRcdGZvbnRTaXplOiAzMixcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdGJhY2tUZXh0LnNldE9mZnNldCh7XG5cdFx0eDogYmFja1RleHQuZ2V0V2lkdGgoKSAvIDJcblx0fSk7XG5cblx0Ly8gTGF5ZXIgc2V0dXBcblx0ZGlmZmljdWx0eUxheWVyID0gbmV3IEtpbmV0aWMuTGF5ZXIoKTtcblx0ZGlmZmljdWx0eUxheWVyLm5hbWUgPSAnZGlmZmljdWx0eVNlbGVjdE1lbnUnO1xuXHRkaWZmaWN1bHR5TGF5ZXIuYWRkKGVhc3lUZXh0KTtcblx0ZGlmZmljdWx0eUxheWVyLmFkZChtZWRpdW1UZXh0KTtcblx0ZGlmZmljdWx0eUxheWVyLmFkZChoYXJkVGV4dCk7XG5cdGRpZmZpY3VsdHlMYXllci5hZGQoYmFja1RleHQpO1xuXHRzdGFnZS5hZGQoZGlmZmljdWx0eUxheWVyKTtcblxuXHQvLyBFYXN5IG1lbnVcblx0dmFyIGVhc3lUZXh0TW91c2VPdmVyID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdGVhc3lUZXh0LmZpbGwoJ2JsYWNrJyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIGRpZmZpY3VsdHlMYXllcik7XG5cblx0dmFyIGVhc3lUZXh0TW91c2VPdXQgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0ZWFzeVRleHQuZmlsbCgnZ3JleScpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBkaWZmaWN1bHR5TGF5ZXIpO1xuXG5cdGVhc3lUZXh0Lm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcblx0XHRlYXN5VGV4dE1vdXNlT3Zlci5zdGFydCgpO1xuXHR9KTtcblxuXHRlYXN5VGV4dC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcblx0XHRlYXN5VGV4dE1vdXNlT3V0LnN0YXJ0KCk7XG5cdH0pO1xuXG5cdGVhc3lUZXh0Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuXHRcdGdhbWVEaWZmaWN1bHR5ID0gJ2Vhc3knO1xuXHRcdHN0YXJ0TmV3Q2xhc3NpY0dhbWUoKTtcblx0fSk7XG5cblx0Ly8gTWVkaXVtIG1lbnVcblx0dmFyIG1lZGl1bVRleHRNb3VzZU92ZXIgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0bWVkaXVtVGV4dC5maWxsKCdibGFjaycpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBkaWZmaWN1bHR5TGF5ZXIpO1xuXG5cdHZhciBtZWRpdW1UZXh0TW91c2VPdXQgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0bWVkaXVtVGV4dC5maWxsKCdncmV5Jyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIGRpZmZpY3VsdHlMYXllcik7XG5cblx0bWVkaXVtVGV4dC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oKSB7XG5cdFx0bWVkaXVtVGV4dE1vdXNlT3Zlci5zdGFydCgpO1xuXHR9KTtcblxuXHRtZWRpdW1UZXh0Lm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkge1xuXHRcdG1lZGl1bVRleHRNb3VzZU91dC5zdGFydCgpO1xuXHR9KTtcblxuXHRtZWRpdW1UZXh0Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuXHRcdGdhbWVEaWZmaWN1bHR5ID0gJ21lZGl1bSc7XG5cdFx0c3RhcnROZXdDbGFzc2ljR2FtZSgpO1xuXHR9KTtcblxuXHQvLyBIYXJkIG1lbnVcblx0dmFyIGhhcmRUZXh0TW91c2VPdmVyID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdGhhcmRUZXh0LmZpbGwoJ2JsYWNrJyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIGRpZmZpY3VsdHlMYXllcik7XG5cblx0dmFyIGhhcmRUZXh0TW91c2VPdXQgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0aGFyZFRleHQuZmlsbCgnZ3JleScpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBkaWZmaWN1bHR5TGF5ZXIpO1xuXG5cdGhhcmRUZXh0Lm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcblx0XHRoYXJkVGV4dE1vdXNlT3Zlci5zdGFydCgpO1xuXHR9KTtcblxuXHRoYXJkVGV4dC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcblx0XHRoYXJkVGV4dE1vdXNlT3V0LnN0YXJ0KCk7XG5cdH0pO1xuXG5cdGhhcmRUZXh0Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuXHRcdGdhbWVEaWZmaWN1bHR5ID0gJ2hhcmQnO1xuXHRcdHN0YXJ0TmV3Q2xhc3NpY0dhbWUoKTtcblx0fSk7XG5cblx0Ly8gQmFjayBtZW51XG5cdHZhciBiYWNrVGV4dE1vdXNlT3ZlciA9IG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcblx0XHRiYWNrVGV4dC5maWxsKCdibGFjaycpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBkaWZmaWN1bHR5TGF5ZXIpO1xuXG5cdHZhciBiYWNrVGV4dE1vdXNlT3V0ID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0LmZpbGwoJ2dyZXknKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgZGlmZmljdWx0eUxheWVyKTtcblxuXHRiYWNrVGV4dC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oKSB7XG5cdFx0YmFja1RleHRNb3VzZU92ZXIuc3RhcnQoKTtcblx0fSk7XG5cblx0YmFja1RleHQub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XG5cdFx0YmFja1RleHRNb3VzZU91dC5zdGFydCgpO1xuXHR9KTtcblxuXHRiYWNrVGV4dC5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcblx0XHRtYWluTWVudSgpO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gdGltZVRyaWFsR2FtZU1lbnUoKSB7XG5cblx0aWYgKHN0YWdlLmhhc0NoaWxkcmVuKCkpIHtcblx0XHRzdGFnZS5kZXN0cm95Q2hpbGRyZW4oKTtcblx0fVxuXG5cdHZhciB0aW1lVHJpYWxUZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogd2lkdGggLyAyLFxuXHRcdHk6IGhlaWdodCAvIDMsXG5cdFx0dGV4dDogJ1N0YXJ0aW5nIHRpbWUgdHJpYWwnLFxuXHRcdGZvbnRTaXplOiAzMixcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdHRpbWVUcmlhbFRleHQuc2V0T2Zmc2V0KHtcblx0XHR4OiB0aW1lVHJpYWxUZXh0LmdldFdpZHRoKCkgLyAyXG5cdH0pO1xuXG5cdHZhciBiYWNrVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IHdpZHRoIC8gMixcblx0XHR5OiBoZWlnaHQgLyAzICsgMjAwLFxuXHRcdHRleHQ6ICdCYWNrIHRvIHRoZSBtZW51Jyxcblx0XHRmb250U2l6ZTogMzIsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHRiYWNrVGV4dC5zZXRPZmZzZXQoe1xuXHRcdHg6IGJhY2tUZXh0LmdldFdpZHRoKCkgLyAyXG5cdH0pO1xuXG5cdC8vIExheWVyIHNldHVwXG5cdHRpbWVUcmlhbEdhbWVMYXllciA9IG5ldyBLaW5ldGljLkxheWVyKCk7XG5cdHRpbWVUcmlhbEdhbWVMYXllci5uYW1lID0gJ3RpbWVUcmlhbEdhbWVMYXllcic7XG5cdHRpbWVUcmlhbEdhbWVMYXllci5hZGQodGltZVRyaWFsVGV4dCk7XG5cdHRpbWVUcmlhbEdhbWVMYXllci5hZGQoYmFja1RleHQpO1xuXHRzdGFnZS5hZGQodGltZVRyaWFsR2FtZUxheWVyKTtcblxuXHQvLyBUaW1lIFRyaWFsIG1lbnVcblx0dmFyIHRpbWVUcmlhbFRleHRNb3VzZU92ZXIgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0dGltZVRyaWFsVGV4dC5maWxsKCdibGFjaycpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCB0aW1lVHJpYWxHYW1lTGF5ZXIpO1xuXG5cdHZhciB0aW1lVHJpYWxUZXh0TW91c2VPdXQgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0dGltZVRyaWFsVGV4dC5maWxsKCdncmV5Jyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIHRpbWVUcmlhbEdhbWVMYXllcik7XG5cblx0dGltZVRyaWFsVGV4dC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oKSB7XG5cdFx0dGltZVRyaWFsVGV4dE1vdXNlT3Zlci5zdGFydCgpO1xuXHR9KTtcblxuXHR0aW1lVHJpYWxUZXh0Lm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkge1xuXHRcdHRpbWVUcmlhbFRleHRNb3VzZU91dC5zdGFydCgpO1xuXHR9KTtcblxuXHR0aW1lVHJpYWxUZXh0Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuXHRcdHN0YXJ0TmV3VGltZVRyaWFsR2FtZSgpO1xuXHR9KTtcblxuXHQvLyBCYWNrIG1lbnVcblx0dmFyIGJhY2tUZXh0TW91c2VPdmVyID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0LmZpbGwoJ2JsYWNrJyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIHRpbWVUcmlhbEdhbWVMYXllcik7XG5cblx0dmFyIGJhY2tUZXh0TW91c2VPdXQgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0YmFja1RleHQuZmlsbCgnZ3JleScpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCB0aW1lVHJpYWxHYW1lTGF5ZXIpO1xuXG5cdGJhY2tUZXh0Lm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcblx0XHRiYWNrVGV4dE1vdXNlT3Zlci5zdGFydCgpO1xuXHR9KTtcblxuXHRiYWNrVGV4dC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcblx0XHRiYWNrVGV4dE1vdXNlT3V0LnN0YXJ0KCk7XG5cdH0pO1xuXG5cdGJhY2tUZXh0Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuXHRcdG1haW5NZW51KCk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBzY29yZUJvYXJkTWVudSgpIHtcblx0aWYgKHN0YWdlLmhhc0NoaWxkcmVuKCkpIHtcblx0XHRzdGFnZS5kZXN0cm95Q2hpbGRyZW4oKTtcblx0fVxuXG5cdHZhciBjbGFzc2ljVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IHdpZHRoIC8gMixcblx0XHR5OiBoZWlnaHQgLyAzIC0gMTAwLFxuXHRcdHRleHQ6ICdDbGFzc2ljIGdhbWUnLFxuXHRcdGZvbnRTaXplOiAzMixcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdGNsYXNzaWNUZXh0LnNldE9mZnNldCh7XG5cdFx0eDogY2xhc3NpY1RleHQuZ2V0V2lkdGgoKSAvIDJcblx0fSk7XG5cblx0dmFyIGVhc3lUZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogd2lkdGggLyAyIC0gMTIwLFxuXHRcdHk6IGhlaWdodCAvIDMgLSA0MCxcblx0XHR0ZXh0OiAnRWFzeVxcbicgKyBjb29raWUuZ2V0KCdjbGFzc2ljX2hpZ2hfc2NvcmVfZWFzeScsICc5OTo5OScpLFxuXHRcdGZvbnRTaXplOiAxOCxcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdGVhc3lUZXh0LnNldE9mZnNldCh7XG5cdFx0eDogZWFzeVRleHQuZ2V0V2lkdGgoKSAvIDJcblx0fSk7XG5cblx0dmFyIG1lZGl1bVRleHQgPSBuZXcgS2luZXRpYy5UZXh0KHtcblx0XHR4OiB3aWR0aCAvIDIsXG5cdFx0eTogaGVpZ2h0IC8gMyAtIDQwLFxuXHRcdHRleHQ6ICdNZWRpdW1cXG4nICsgY29va2llLmdldCgnY2xhc3NpY19oaWdoX3Njb3JlX21lZGl1bScsICc5OTo5OScpLFxuXHRcdGZvbnRTaXplOiAxOCxcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdG1lZGl1bVRleHQuc2V0T2Zmc2V0KHtcblx0XHR4OiBtZWRpdW1UZXh0LmdldFdpZHRoKCkgLyAyXG5cdH0pO1xuXG5cdHZhciBoYXJkVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IHdpZHRoIC8gMiArIDEyMCxcblx0XHR5OiBoZWlnaHQgLyAzIC0gNDAsXG5cdFx0dGV4dDogJ0hhcmRcXG4nICsgY29va2llLmdldCgnY2xhc3NpY19oaWdoX3Njb3JlX2hhcmQnLCAnOTk6OTknKSxcblx0XHRmb250U2l6ZTogMTgsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHRoYXJkVGV4dC5zZXRPZmZzZXQoe1xuXHRcdHg6IGhhcmRUZXh0LmdldFdpZHRoKCkgLyAyXG5cdH0pO1xuXG5cdHZhciB0aW1lVHJpYWxUZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogd2lkdGggLyAyLFxuXHRcdHk6IGhlaWdodCAvIDMgKyA0MCxcblx0XHR0ZXh0OiAnVGltZSB0cmlhbCcsXG5cdFx0Zm9udFNpemU6IDMyLFxuXHRcdGZvbnRGYW1pbHk6ICdDYWxpYnJpJyxcblx0XHRmaWxsOiAnZ3JleSdcblx0fSk7XG5cblx0dGltZVRyaWFsVGV4dC5zZXRPZmZzZXQoe1xuXHRcdHg6IHRpbWVUcmlhbFRleHQuZ2V0V2lkdGgoKSAvIDJcblx0fSk7XG5cblx0dmFyIGxldmVsVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IHdpZHRoIC8gMixcblx0XHR5OiBoZWlnaHQgLyAzICsgMTAwLFxuXHRcdHRleHQ6IGNvb2tpZS5nZXQoJ3RpbWVfdHJpYWxfc2NvcmUnLCAnMCcpICsgJy4gbGV2ZWwnLFxuXHRcdGZvbnRTaXplOiAxOCxcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdGxldmVsVGV4dC5zZXRPZmZzZXQoe1xuXHRcdHg6IGxldmVsVGV4dC5nZXRXaWR0aCgpIC8gMlxuXHR9KTtcblxuXHR2YXIgYmFja1RleHQgPSBuZXcgS2luZXRpYy5UZXh0KHtcblx0XHR4OiB3aWR0aCAvIDIsXG5cdFx0eTogaGVpZ2h0IC8gMyArIDIwMCxcblx0XHR0ZXh0OiAnQmFjayB0byB0aGUgbWVudScsXG5cdFx0Zm9udFNpemU6IDMyLFxuXHRcdGZvbnRGYW1pbHk6ICdDYWxpYnJpJyxcblx0XHRmaWxsOiAnZ3JleSdcblx0fSk7XG5cblx0YmFja1RleHQuc2V0T2Zmc2V0KHtcblx0XHR4OiBiYWNrVGV4dC5nZXRXaWR0aCgpIC8gMlxuXHR9KTtcblxuXHQvLyBMYXllciBzZXR1cFxuXHRzY29yZUJvYXJkTWVudUxheWVyID0gbmV3IEtpbmV0aWMuTGF5ZXIoKTtcblx0c2NvcmVCb2FyZE1lbnVMYXllci5uYW1lID0gJ3Njb3JlQm9hcmRNZW51TGF5ZXInO1xuXHRzY29yZUJvYXJkTWVudUxheWVyLmFkZChjbGFzc2ljVGV4dCk7XG5cdHNjb3JlQm9hcmRNZW51TGF5ZXIuYWRkKGVhc3lUZXh0KTtcblx0c2NvcmVCb2FyZE1lbnVMYXllci5hZGQobWVkaXVtVGV4dCk7XG5cdHNjb3JlQm9hcmRNZW51TGF5ZXIuYWRkKGhhcmRUZXh0KTtcblx0c2NvcmVCb2FyZE1lbnVMYXllci5hZGQodGltZVRyaWFsVGV4dCk7XG5cdHNjb3JlQm9hcmRNZW51TGF5ZXIuYWRkKGxldmVsVGV4dCk7XG5cdHNjb3JlQm9hcmRNZW51TGF5ZXIuYWRkKGJhY2tUZXh0KTtcblx0c3RhZ2UuYWRkKHNjb3JlQm9hcmRNZW51TGF5ZXIpO1xuXG5cdC8vIEJhY2sgbWVudVxuXHR2YXIgYmFja1RleHRNb3VzZU92ZXIgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0YmFja1RleHQuZmlsbCgnYmxhY2snKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgc2NvcmVCb2FyZE1lbnVMYXllcik7XG5cblx0dmFyIGJhY2tUZXh0TW91c2VPdXQgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0YmFja1RleHQuZmlsbCgnZ3JleScpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBzY29yZUJvYXJkTWVudUxheWVyKTtcblxuXHRiYWNrVGV4dC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oKSB7XG5cdFx0YmFja1RleHRNb3VzZU92ZXIuc3RhcnQoKTtcblx0fSk7XG5cblx0YmFja1RleHQub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XG5cdFx0YmFja1RleHRNb3VzZU91dC5zdGFydCgpO1xuXHR9KTtcblxuXHRiYWNrVGV4dC5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcblx0XHRtYWluTWVudSgpO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gaW5mb3JtYXRpb25NZW51KCkge1xuXG5cdGlmIChzdGFnZS5oYXNDaGlsZHJlbigpKSB7XG5cdFx0c3RhZ2UuZGVzdHJveUNoaWxkcmVuKCk7XG5cdH1cblxuXHR2YXIgaW5mb3JtYXRpb25UZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogd2lkdGggLyAyLFxuXHRcdHk6IGhlaWdodCAvIDMgLSAxMDAsXG5cdFx0dGV4dDogJycsXG5cdFx0Zm9udFNpemU6IDE4LFxuXHRcdGZvbnRGYW1pbHk6ICdDYWxpYnJpJyxcblx0XHRmaWxsOiAnZ3JleSdcblx0fSk7XG5cblx0bGV0IGluZm9UZXh0ID0gJ0dhbWUgZ29hbDpcXG5UdXJuIGFsbCB0aGUgcGlwZXMgaW50byB0aGUgY29ycmVjdCBwb3NpdGlvbiwgc28gZXZlcnkgcGlwZSBjb25uZWN0ZWQgdG8gZWFjaCBvdGhlciFcXG4nO1xuXG5cdGluZm9UZXh0ICs9ICdJbiBjbGFzc2ljIGdhbWUgeW91IGNhbiBjaG9vc2UgYmV0d2VlbiB0aHJlZSBkaWZmZXJlbnQgZGlmZmljdWx0eSwgd2hpbGUgaW4gdGltZSB0cmlhbCB0aGUgZGlmZmljdWx0eSBpcyBpbmNyZW1lbnRhbHkgaW5jcmVhc2luZy5cXG4nO1xuXHRpbmZvVGV4dCArPSAnVGltZSBpcyBrZXksIHNvIGRvblxcJ3QgaGVzaXRhdGUgdG9vIG11Y2ghXFxuJztcblx0aW5mb1RleHQgKz0gJ1lvdSBjYW4gY2hlY2sgeW91ciByYW5rIGF0IHRoZSBzY29yZWJvYXJkIVxcblxcbk1hZGUgYnk6IFdoaXRlIFJhYmJpdCAoVGFtw6FzIFJ1c3prYSkgKEMpIDIwMTQsXFxuTWFpbDogcnVzemthIGRvdCB0YW1hcyBhdCBnbWFpbCBkb3QgY29tJztcblxuXHRpbmZvcm1hdGlvblRleHQuc2V0VGV4dChpbmZvVGV4dCk7XG5cblx0aW5mb3JtYXRpb25UZXh0LnNldE9mZnNldCh7XG5cdFx0eDogaW5mb3JtYXRpb25UZXh0LmdldFdpZHRoKCkgLyAyID4gMCA/IGluZm9ybWF0aW9uVGV4dC5nZXRXaWR0aCgpIC8gMiA6IDBcblx0fSk7XG5cblx0dmFyIGJhY2tUZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogd2lkdGggLyAyLFxuXHRcdHk6IGhlaWdodCAvIDMgKyAyMDAsXG5cdFx0dGV4dDogJ0JhY2sgdG8gdGhlIG1lbnUnLFxuXHRcdGZvbnRTaXplOiAzMixcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdGJhY2tUZXh0LnNldE9mZnNldCh7XG5cdFx0eDogYmFja1RleHQuZ2V0V2lkdGgoKSAvIDJcblx0fSk7XG5cblx0Ly8gTGF5ZXIgc2V0dXBcblx0aW5mb3JtYXRpb25NZW51TGF5ZXIgPSBuZXcgS2luZXRpYy5MYXllcigpO1xuXHRpbmZvcm1hdGlvbk1lbnVMYXllci5uYW1lID0gJ2luZm9ybWF0aW9uTWVudUxheWVyJztcblx0aW5mb3JtYXRpb25NZW51TGF5ZXIuYWRkKGluZm9ybWF0aW9uVGV4dCk7XG5cdGluZm9ybWF0aW9uTWVudUxheWVyLmFkZChiYWNrVGV4dCk7XG5cdHN0YWdlLmFkZChpbmZvcm1hdGlvbk1lbnVMYXllcik7XG5cblx0Ly8gQmFjayBtZW51XG5cdHZhciBiYWNrVGV4dE1vdXNlT3ZlciA9IG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcblx0XHRiYWNrVGV4dC5maWxsKCdibGFjaycpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBpbmZvcm1hdGlvbk1lbnVMYXllcik7XG5cblx0dmFyIGJhY2tUZXh0TW91c2VPdXQgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0YmFja1RleHQuZmlsbCgnZ3JleScpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBpbmZvcm1hdGlvbk1lbnVMYXllcik7XG5cblx0YmFja1RleHQub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0TW91c2VPdmVyLnN0YXJ0KCk7XG5cdH0pO1xuXG5cdGJhY2tUZXh0Lm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0TW91c2VPdXQuc3RhcnQoKTtcblx0fSk7XG5cblx0YmFja1RleHQub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cdFx0bWFpbk1lbnUoKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIEdhbWVUYWJsZSgpIHtcblx0Z2FtZUxheWVycyA9IFtdO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXJSb3dzOyBpKyspIHtcblx0XHRnYW1lTGF5ZXJzW2ldID0gbmV3IEFycmF5KGxheWVyQ29sdW1ucyk7XG5cdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBsYXllckNvbHVtbnM7IGorKykge1xuXHRcdFx0Z2FtZUxheWVyc1tpXVtqXSA9IG5ldyBLaW5ldGljLkxheWVyKCk7XG5cdFx0fVxuXHR9XG5cblx0YmxvY2tzID0gW107XG5cblx0dGhpcy5nZW5lcmF0ZUZpZWxkcyA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBncmVhdGVyID0gMDtcblx0XHR2YXIgc21hbGxlciA9IDA7XG5cblx0XHR2YXIgZ2VuZXJhdGVJdCA9IHRydWU7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuXHRcdFx0YmxvY2tzW2ldID0gbmV3IEFycmF5KGNvbHVtbnMpO1xuXHRcdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBjb2x1bW5zOyBqKyspIHtcblx0XHRcdFx0YmxvY2tzW2ldW2pdID0gbmV3IEJsb2NrKGksIGosIGkgKiBjb2x1bW5zICsgaiwgc3BhY2UsIGJsb2NrU2l6ZSk7XG5cdFx0XHRcdC8vIGJsb2Nrc1tpXVtqXS5pbml0KG9uQ2xpY2tCbG9jaywgYm94QW5pbWF0aW9uKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR3aGlsZSAoZ2VuZXJhdGVJdCkge1xuXHRcdFx0bGV0IHggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByb3dzKSxcblx0XHRcdFx0eSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvbHVtbnMpLFxuXHRcdFx0XHRjdXJyZW50QmxvY2sgPSBibG9ja3NbeF1beV07XG5cblx0XHRcdGdlbmVyYXRlSXQgPSBmYWxzZTtcblxuXHRcdFx0aWYgKGN1cnJlbnRCbG9jay5rZXkgIT09IDApIHtcblx0XHRcdFx0dmFyIGRpcmVjdGlvbiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQgKyAwKTtcblxuXHRcdFx0XHRzd2l0Y2ggKGRpcmVjdGlvbikge1xuXHRcdFx0XHRcdGNhc2UgMDpcblx0XHRcdFx0XHRcdGlmICh4ICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdGxldCBsZWZ0QmxvY2sgPSBibG9ja3NbeCAtIDFdW3ldO1xuXG5cdFx0XHRcdFx0XHRcdC8vIExlZnRcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBsZWZ0QmxvY2sgIT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY3VycmVudEJsb2NrLmtleSAhPT0gbGVmdEJsb2NrLmtleSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudEJsb2NrLmxlZnQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdFx0bGVmdEJsb2NrLnJpZ2h0ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRcdGdyZWF0ZXIgPSBjdXJyZW50QmxvY2sua2V5ID4gbGVmdEJsb2NrLmtleSA/IGN1cnJlbnRCbG9jay5rZXkgOiBsZWZ0QmxvY2sua2V5O1xuXHRcdFx0XHRcdFx0XHRcdFx0c21hbGxlciA9IGN1cnJlbnRCbG9jay5rZXkgPCBsZWZ0QmxvY2sua2V5ID8gY3VycmVudEJsb2NrLmtleSA6IGxlZnRCbG9jay5rZXk7XG5cdFx0XHRcdFx0XHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGNvbHVtbnM7IGorKykge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChjdXJyZW50QmxvY2sua2V5ID09PSBncmVhdGVyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50QmxvY2sua2V5ID0gc21hbGxlcjtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHRcdGlmICh5ICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdGxldCB1cEJsb2NrID0gYmxvY2tzW3hdW3kgLSAxXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBVcFxuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIHVwQmxvY2sgIT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY3VycmVudEJsb2NrLmtleSAhPT0gdXBCbG9jay5rZXkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRCbG9jay51cCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0XHR1cEJsb2NrLmRvd24gPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdFx0Z3JlYXRlciA9IGN1cnJlbnRCbG9jay5rZXkgPiB1cEJsb2NrLmtleSA/IGN1cnJlbnRCbG9jay5rZXkgOiB1cEJsb2NrLmtleTtcblx0XHRcdFx0XHRcdFx0XHRcdHNtYWxsZXIgPSBjdXJyZW50QmxvY2sua2V5IDwgdXBCbG9jay5rZXkgPyBjdXJyZW50QmxvY2sua2V5IDogdXBCbG9jay5rZXk7XG5cdFx0XHRcdFx0XHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGNvbHVtbnM7IGorKykge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChibG9ja3NbaV1bal0ua2V5ID09PSBncmVhdGVyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRibG9ja3NbaV1bal0ua2V5ID0gc21hbGxlcjtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdGlmICh4ICE9PSBjb2x1bW5zIC0gMSkge1xuXHRcdFx0XHRcdFx0XHRsZXQgcmlnaHRCbG9jayA9IGJsb2Nrc1t4ICsgMV1beV07XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmlnaHRcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiByaWdodEJsb2NrICE9ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGN1cnJlbnRCbG9jay5rZXkgIT09IHJpZ2h0QmxvY2sua2V5KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50QmxvY2sucmlnaHQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdFx0cmlnaHRCbG9jay5sZWZ0ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRcdGdyZWF0ZXIgPSBjdXJyZW50QmxvY2sua2V5ID4gcmlnaHRCbG9jay5rZXkgPyBjdXJyZW50QmxvY2sua2V5IDogcmlnaHRCbG9jay5rZXk7XG5cdFx0XHRcdFx0XHRcdFx0XHRzbWFsbGVyID0gY3VycmVudEJsb2NrLmtleSA8IHJpZ2h0QmxvY2sua2V5ID8gY3VycmVudEJsb2NrLmtleSA6IHJpZ2h0QmxvY2sua2V5O1xuXHRcdFx0XHRcdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBjb2x1bW5zOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoYmxvY2tzW2ldW2pdLmtleSA9PT0gZ3JlYXRlcikge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YmxvY2tzW2ldW2pdLmtleSA9IHNtYWxsZXI7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0XHRpZiAoeSAhPT0gcm93cyAtIDEpIHtcblx0XHRcdFx0XHRcdFx0bGV0IGRvd25CbG9jayA9IGJsb2Nrc1t4XVt5ICsgMV07XG5cblx0XHRcdFx0XHRcdFx0Ly8gRG93blxuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGRvd25CbG9jayAhPSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChjdXJyZW50QmxvY2sua2V5ICE9PSBkb3duQmxvY2sua2V5KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50QmxvY2suZG93biA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0XHRkb3duQmxvY2sudXAgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdFx0Z3JlYXRlciA9IGN1cnJlbnRCbG9jay5rZXkgPiBkb3duQmxvY2sua2V5ID8gY3VycmVudEJsb2NrLmtleSA6IGRvd25CbG9jay5rZXk7XG5cdFx0XHRcdFx0XHRcdFx0XHRzbWFsbGVyID0gY3VycmVudEJsb2NrLmtleSA8IGRvd25CbG9jay5rZXkgPyBjdXJyZW50QmxvY2sua2V5IDogZG93bkJsb2NrLmtleTtcblx0XHRcdFx0XHRcdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKGJsb2Nrc1tpXVtqXS5rZXkgPT09IGdyZWF0ZXIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJsb2Nrc1tpXVtqXS5rZXkgPSBzbWFsbGVyO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuXHRcdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGNvbHVtbnM7IGorKykge1xuXHRcdFx0XHRcdGlmIChibG9ja3NbaV1bal0ua2V5ID4gMCkge1xuXHRcdFx0XHRcdFx0Z2VuZXJhdGVJdCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIGJsb2Nrc1tzdGFydGluZ1BvaW50WF1bc3RhcnRpbmdQb2ludFldLmNvbm5lY3RlZCA9IHRydWU7XG5cdFx0Ly8gYmxvY2tzW3N0YXJ0aW5nUG9pbnRYXVtzdGFydGluZ1BvaW50WV0uY29ubmVjdGlvbkhhbmRsZXIodHJ1ZSk7XG5cdH07XG5cblx0dGhpcy5zaHVmZmxlID0gZnVuY3Rpb24oKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XG5cdFx0XHRcdGJsb2Nrc1tpXVtqXS5zaHVmZmxlSXQoKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0dGhpcy5kcmF3R2FtZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcblx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XG5cdFx0XHRcdGJsb2Nrc1tpXVtqXS5pbml0KG9uQ2xpY2tCbG9jaywgYm94QW5pbWF0aW9uLCB3aWR0aCwgcm93cyk7XG5cblx0XHRcdFx0Z2FtZUxheWVyc1tNYXRoLmZsb29yKGkgLyBsYXllclNpemUpXVtNYXRoLmZsb29yKGogLyBsYXllclNpemUpXS5hZGQoYmxvY2tzW2ldW2pdLmJveCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0YmxvY2tzW3N0YXJ0aW5nUG9pbnRYXVtzdGFydGluZ1BvaW50WV0uY29ubmVjdGVkID0gdHJ1ZTtcblx0XHRibG9ja3Nbc3RhcnRpbmdQb2ludFhdW3N0YXJ0aW5nUG9pbnRZXS5jb25uZWN0aW9uSGFuZGxlcih0cnVlKTtcblxuXHRcdHRoaXMuY2hlY2tQaXBlQ29ubmVjdGlvbnMoKTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxheWVyUm93czsgaSsrKSB7XG5cdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGxheWVyQ29sdW1uczsgaisrKSB7XG5cdFx0XHRcdHN0YWdlLmFkZChnYW1lTGF5ZXJzW2ldW2pdKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0dGhpcy5jaGVja1BpcGVDb25uZWN0aW9ucyA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpID0gMDtcblx0XHR2YXIgaiA9IDA7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XG5cdFx0XHRcdGJsb2Nrc1tpXVtqXS5jb25uZWN0ZWQgPSBmYWxzZTtcblx0XHRcdFx0YmxvY2tzW2ldW2pdLmNvbm5lY3Rpb25IYW5kbGVyKGZhbHNlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0YmxvY2tzW3N0YXJ0aW5nUG9pbnRYXVtzdGFydGluZ1BvaW50WV0uY29ubmVjdGVkID0gdHJ1ZTtcblx0XHRibG9ja3Nbc3RhcnRpbmdQb2ludFhdW3N0YXJ0aW5nUG9pbnRZXS5jb25uZWN0aW9uSGFuZGxlcih0cnVlKTtcblxuXHRcdC8vIEl0ZXJhdGUgdGhyb3VnaHQgdGhlIG1hdHJpeFxuXHRcdGZvciAoaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcblx0XHRcdGZvciAoaiA9IDA7IGogPCBjb2x1bW5zOyBqKyspIHtcblx0XHRcdFx0Ly8gSWYgY3VycmVudCBlbGVtZW50IGlzIGNvbm5lY3Rpbmdcblx0XHRcdFx0aWYgKGJsb2Nrc1tpXVtqXS5jb25uZWN0ZWQpIHtcblx0XHRcdFx0XHR2YXIgdXBkYXRlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdC8vIExlZnRcblxuXHRcdFx0XHRcdGlmIChpICE9PSAwICYmICF1cGRhdGVkKSB7XG5cdFx0XHRcdFx0XHRpZiAoYmxvY2tzW2ldW2pdLmxlZnQgJiYgYmxvY2tzW2kgLSAxXVtqXS5yaWdodCkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIWJsb2Nrc1tpIC0gMV1bal0uY29ubmVjdGVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0YmxvY2tzW2kgLSAxXVtqXS5jb25uZWN0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdGJsb2Nrc1tpIC0gMV1bal0uY29ubmVjdGlvbkhhbmRsZXIodHJ1ZSk7XG5cdFx0XHRcdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0aiA9IC0xO1xuXHRcdFx0XHRcdFx0XHRcdHVwZGF0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIFJpZ2h0XG5cdFx0XHRcdFx0aWYgKGkgIT09IHJvd3MgLSAxICYmICF1cGRhdGVkKSB7XG5cdFx0XHRcdFx0XHRpZiAoYmxvY2tzW2ldW2pdLnJpZ2h0ICYmIGJsb2Nrc1tpICsgMV1bal0ubGVmdCkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIWJsb2Nrc1tpICsgMV1bal0uY29ubmVjdGVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0YmxvY2tzW2kgKyAxXVtqXS5jb25uZWN0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdGJsb2Nrc1tpICsgMV1bal0uY29ubmVjdGlvbkhhbmRsZXIodHJ1ZSk7XG5cdFx0XHRcdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0aiA9IC0xO1xuXHRcdFx0XHRcdFx0XHRcdHVwZGF0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIFVwXG5cdFx0XHRcdFx0aWYgKGogIT09IDAgJiYgIXVwZGF0ZWQpIHtcblx0XHRcdFx0XHRcdGlmIChibG9ja3NbaV1bal0udXAgJiYgYmxvY2tzW2ldW2ogLSAxXS5kb3duKSB7XG5cdFx0XHRcdFx0XHRcdGlmICghYmxvY2tzW2ldW2ogLSAxXS5jb25uZWN0ZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRibG9ja3NbaV1baiAtIDFdLmNvbm5lY3RlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0YmxvY2tzW2ldW2ogLSAxXS5jb25uZWN0aW9uSGFuZGxlcih0cnVlKTtcblx0XHRcdFx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHRcdFx0XHRqID0gLTE7XG5cdFx0XHRcdFx0XHRcdFx0dXBkYXRlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gRG93blxuXHRcdFx0XHRcdGlmIChqICE9PSBjb2x1bW5zIC0gMSAmJiAhdXBkYXRlZCkge1xuXHRcdFx0XHRcdFx0aWYgKGJsb2Nrc1tpXVtqXS5kb3duICYmIGJsb2Nrc1tpXVtqICsgMV0udXApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCFibG9ja3NbaV1baiArIDFdLmNvbm5lY3RlZCkge1xuXHRcdFx0XHRcdFx0XHRcdGJsb2Nrc1tpXVtqICsgMV0uY29ubmVjdGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRibG9ja3NbaV1baiArIDFdLmNvbm5lY3Rpb25IYW5kbGVyKHRydWUpO1xuXHRcdFx0XHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdFx0XHRcdGogPSAtMTtcblx0XHRcdFx0XHRcdFx0XHR1cGRhdGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gSW5mb3JtYXRpb25QYW5lbCgpIHtcblxuXHR2YXIgeCA9IHdpZHRoIC8gMiArIHJvd3MgKiBibG9ja1NpemUgLyAyICsgcm93cyAqIChzcGFjZSAqIDIpO1xuXHR2YXIgeSA9IDA7XG5cdHZhciBwYW5lbFdpZHRoID0gd2lkdGggLSAoeCArIHJvd3MgKiBzcGFjZSAqIDIpO1xuXHR2YXIgcGFuZWxIZWlnaHQgPSBoZWlnaHQ7XG5cblx0dmFyIGluZm9ybWF0aW9uTGF5ZXIgPSBuZXcgS2luZXRpYy5MYXllcigpO1xuXG5cdHZhciBwYW5lbCA9IG5ldyBLaW5ldGljLkdyb3VwKHtcblx0XHR4OiB4LFxuXHRcdHk6IHksXG5cdFx0d2lkdGg6IHBhbmVsV2lkdGgsXG5cdFx0aGVpZ2h0OiBwYW5lbEhlaWdodFxuXHR9KTtcblxuXHR2YXIgdGltZXJHcm91cCA9IG5ldyBLaW5ldGljLkdyb3VwKHtcblx0XHR4OiAwLFxuXHRcdHk6IDAsXG5cdFx0d2lkdGg6IHggLSB3aWR0aCxcblx0XHRoZWlnaHQ6IGhlaWdodFxuXHR9KTtcblxuXHR2YXIgc2NvcmUgPSBuZXcgS2luZXRpYy5Hcm91cCh7XG5cdFx0eDogMCxcblx0XHR5OiAwLFxuXHRcdHdpZHRoOiB4IC0gd2lkdGgsXG5cdFx0aGVpZ2h0OiBoZWlnaHRcblx0fSk7XG5cblx0dmFyIGxldmVsR3JvdXAgPSBuZXcgS2luZXRpYy5Hcm91cCh7XG5cdFx0eDogMCxcblx0XHR5OiAwLFxuXHRcdHdpZHRoOiB4IC0gd2lkdGgsXG5cdFx0aGVpZ2h0OiBoZWlnaHRcblx0fSk7XG5cblx0dmFyIGJhY2tUZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogMjAwLFxuXHRcdHk6IDIwMCxcblx0XHR0ZXh0OiAnQmFjaycsXG5cdFx0Zm9udFNpemU6IDQ4LFxuXHRcdGZvbnRGYW1pbHk6ICdDYWxpYnJpJyxcblx0XHRmaWxsOiAnZ3JleSdcblx0fSk7XG5cblx0dmFyIHRpbWVyVGl0bGVUZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogMzAsXG5cdFx0eTogNTAsXG5cdFx0dGV4dDogJ1RpbWU6Jyxcblx0XHRmb250U2l6ZTogMzIsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHR2YXIgdGltZXJUZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogMzAsXG5cdFx0eTogMTAwLFxuXHRcdHRleHQ6ICcwMDowMCcsXG5cdFx0Zm9udFNpemU6IDQ4LFxuXHRcdGZvbnRGYW1pbHk6ICdDYWxpYnJpJyxcblx0XHRmaWxsOiAnZ3JleSdcblx0fSk7XG5cblx0dmFyIHNjb3JlVGl0bGVUZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogMjAwLFxuXHRcdHk6IDUwLFxuXHRcdHRleHQ6ICdQcmV2aW91cyByZWNvcmQ6Jyxcblx0XHRmb250U2l6ZTogMzIsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHR2YXIgc2NvcmVUZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogMjAwLFxuXHRcdHk6IDEwMCxcblx0XHR0ZXh0OiAnMDA6MDAnLFxuXHRcdGZvbnRTaXplOiA0OCxcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdHZhciBsZXZlbFRpdGxlVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IDMwLFxuXHRcdHk6IDIwMCxcblx0XHR0ZXh0OiAnQWN0dWFsIGxldmVsOicsXG5cdFx0Zm9udFNpemU6IDMyLFxuXHRcdGZvbnRGYW1pbHk6ICdDYWxpYnJpJyxcblx0XHRmaWxsOiAnZ3JleSdcblx0fSk7XG5cblx0dmFyIGxldmVsVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IDMwLFxuXHRcdHk6IDI1MCxcblx0XHR0ZXh0OiAnMScsXG5cdFx0Zm9udFNpemU6IDY0LFxuXHRcdGZvbnRGYW1pbHk6ICdDYWxpYnJpJyxcblx0XHRmaWxsOiAnZ3JleSdcblx0fSk7XG5cblx0dGhpcy5pbml0UGFuZWwgPSBmdW5jdGlvbigpIHtcblx0XHR0aW1lckdyb3VwLmFkZCh0aW1lclRpdGxlVGV4dCk7XG5cdFx0dGltZXJHcm91cC5hZGQodGltZXJUZXh0KTtcblx0XHRzY29yZS5hZGQoc2NvcmVUaXRsZVRleHQpO1xuXHRcdHNjb3JlLmFkZChzY29yZVRleHQpO1xuXHRcdHNjb3JlLmFkZChiYWNrVGV4dCk7XG5cdFx0bGV2ZWxHcm91cC5hZGQobGV2ZWxUaXRsZVRleHQpO1xuXHRcdGxldmVsR3JvdXAuYWRkKGxldmVsVGV4dCk7XG5cdFx0cGFuZWwuYWRkKHRpbWVyR3JvdXApO1xuXHRcdHBhbmVsLmFkZChzY29yZSk7XG5cdFx0cGFuZWwuYWRkKGxldmVsR3JvdXApO1xuXHRcdGluZm9ybWF0aW9uTGF5ZXIuYWRkKHBhbmVsKTtcblx0XHRzdGFnZS5hZGQoaW5mb3JtYXRpb25MYXllcik7XG5cdH07XG5cblx0dGhpcy5zaG93VGltZXIgPSBmdW5jdGlvbigpIHtcblx0XHR0aW1lckdyb3VwLnNob3coKTtcblx0XHRpbmZvcm1hdGlvbkxheWVyLmRyYXcoKTtcblx0fTtcblxuXHR0aGlzLmhpZGVUaW1lciA9IGZ1bmN0aW9uKCkge1xuXHRcdHRpbWVyR3JvdXAuaGlkZSgpO1xuXHRcdGluZm9ybWF0aW9uTGF5ZXIuZHJhdygpO1xuXHR9O1xuXG5cdHRoaXMuc2hvd1Njb3JlID0gZnVuY3Rpb24oKSB7XG5cdFx0c2NvcmUuc2hvdygpO1xuXHRcdGluZm9ybWF0aW9uTGF5ZXIuZHJhdygpO1xuXHR9O1xuXG5cdHRoaXMuc2NvcmVUaW1lciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNjb3JlLmhpZGUoKTtcblx0XHRpbmZvcm1hdGlvbkxheWVyLmRyYXcoKTtcblx0fTtcblxuXHR0aGlzLnNob3dMZXZlbCA9IGZ1bmN0aW9uKCkge1xuXHRcdGxldmVsR3JvdXAuc2hvdygpO1xuXHRcdGluZm9ybWF0aW9uTGF5ZXIuZHJhdygpO1xuXHR9O1xuXG5cdHRoaXMuaGlkZUxldmVsID0gZnVuY3Rpb24oKSB7XG5cdFx0bGV2ZWxHcm91cC5oaWRlKCk7XG5cdFx0aW5mb3JtYXRpb25MYXllci5kcmF3KCk7XG5cdH07XG5cblx0dGhpcy51cGRhdGVUaW1lciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0dGltZXJUZXh0LnNldFRleHQodmFsdWUpO1xuXHRcdGluZm9ybWF0aW9uTGF5ZXIuZHJhdygpO1xuXHR9O1xuXG5cdHRoaXMudXBkYXRlU2NvcmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHNjb3JlVGV4dC5zZXRUZXh0KHZhbHVlKTtcblx0XHRpbmZvcm1hdGlvbkxheWVyLmRyYXcoKTtcblx0fTtcblxuXHR0aGlzLnVwZGF0ZUxldmVsID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRsZXZlbFRleHQuc2V0VGV4dCh2YWx1ZSk7XG5cdFx0aW5mb3JtYXRpb25MYXllci5kcmF3KCk7XG5cdH07XG5cblx0dmFyIGJhY2tUZXh0TW91c2VPdmVyID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0LmZpbGwoJ2JsYWNrJyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIGluZm9ybWF0aW9uTGF5ZXIpO1xuXG5cdHZhciBiYWNrVGV4dE1vdXNlT3V0ID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0LmZpbGwoJ2dyZXknKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgaW5mb3JtYXRpb25MYXllcik7XG5cblx0YmFja1RleHQub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0TW91c2VPdmVyLnN0YXJ0KCk7XG5cdH0pO1xuXG5cdGJhY2tUZXh0Lm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0TW91c2VPdXQuc3RhcnQoKTtcblx0fSk7XG5cblx0YmFja1RleHQub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cdFx0bWFpbk1lbnUoKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzaWNHYW1lRmluaXNoZWQoKSB7XG5cdHRpbWVyLnN0b3AoKTtcblxuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIG5ld1JlY29yZCA9IGZhbHNlO1xuXG5cdFx0aWYgKGNvb2tpZS5nZXQoJ2NsYXNzaWNfaGlnaF9zY29yZV8nICsgZ2FtZURpZmZpY3VsdHkpID09PSBudWxsKSB7XG5cdFx0XHRuZXdSZWNvcmQgPSB0cnVlO1xuXHRcdH0gZWxzZSBpZiAoY29va2llLmdldCgnY2xhc3NpY19oaWdoX3Njb3JlXycgKyBnYW1lRGlmZmljdWx0eSkgPiB0aW1lci5taW51dGVzICsgJyA6ICcgKyB0aW1lci5zZWNvbmRzKSB7XG5cdFx0XHRuZXdSZWNvcmQgPSB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hbGVydFxuXHRcdGFsZXJ0KCdDb25ncmF0dWxhdGlvbiwgeW91IHNvbHZlZCB0aGUgbGV2ZWwhIFxcbllvdXIgdGltZTogJyArIHRpbWVyLm1pbnV0ZXMgKyAnIDogJyArIHRpbWVyLnNlY29uZHMgKyAobmV3UmVjb3JkID8gJ1xcbk5ldyByZWNvcmQhJyA6ICcnKSk7XG5cdFx0aWYgKG5ld1JlY29yZCkge1xuXHRcdFx0Y29va2llLnNldCgnY2xhc3NpY19oaWdoX3Njb3JlXycgKyBnYW1lRGlmZmljdWx0eSwgdGltZXIubWludXRlcyArICcgOiAnICsgdGltZXIuc2Vjb25kcyk7XG5cdFx0fVxuXG5cdFx0bWFpbk1lbnUoKTtcblxuXHR9LCAzMDApO1xufVxuXG5mdW5jdGlvbiB0aW1lVHJpYWxHYW1lRmluaXNoZWQoKSB7XG5cdHRpbWVyLnN0b3AoKTtcblxuXHRzdGFydE5leHRUaW1lVHJpYWxHYW1lKCk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrR2FtZVN0YXR1cygpIHtcblx0dmFyIGZpbmlzaGVkID0gdHJ1ZTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuXHRcdGZvciAobGV0IGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XG5cdFx0XHRpZiAoIWJsb2Nrc1tpXVtqXS5jb25uZWN0ZWQpIHtcblx0XHRcdFx0ZmluaXNoZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoZmluaXNoZWQpIHtcblx0XHRpZiAoZ2FtZVR5cGUgPT09ICdjbGFzc2ljJykge1xuXHRcdFx0Y2xhc3NpY0dhbWVGaW5pc2hlZCgpO1xuXHRcdH0gZWxzZSBpZiAoZ2FtZVR5cGUgPT09ICd0aW1lLXRyaWFsJykge1xuXHRcdFx0dGltZVRyaWFsR2FtZUZpbmlzaGVkKCk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXJSb3dzOyBpKyspIHtcblx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgbGF5ZXJDb2x1bW5zOyBqKyspIHtcblx0XHRcdFx0Z2FtZUxheWVyc1tpXVtqXS5kcmF3KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIG9uQ2xpY2tCbG9jayhpbnN0YW5jZSkge1xuXHRpZiAoIWluc3RhbmNlLm1vdXNlQ2xpY2suaXNSdW5uaW5nKCkgJiYgIWluc3RhbmNlLmFuaW1hdGlvbklzUnVubmluZykge1xuXHRcdGluc3RhbmNlLnJvdGF0ZVJpZ2h0KCk7XG5cdFx0aW5zdGFuY2UubW91c2VDbGljay5zdGFydCgpO1xuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHR0YWJsZS5jaGVja1BpcGVDb25uZWN0aW9ucygpO1xuXHRcdFx0Y2hlY2tHYW1lU3RhdHVzKCk7XG5cdFx0fSwgMTAwKTtcblx0fVxufVxuXG5mdW5jdGlvbiBib3hBbmltYXRpb24oaW5zdGFuY2UpIHtcblx0cmV0dXJuIG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcblx0XHRpbnN0YW5jZS5hbmltYXRpb25Jc1J1bm5pbmcgPSB0cnVlO1xuXHRcdGluc3RhbmNlLmJveC5yb3RhdGUoNSk7XG5cdFx0aWYgKGluc3RhbmNlLmJveC5yb3RhdGlvbigpID49IGluc3RhbmNlLnJvdGF0aW9uICsgOTApIHtcblx0XHRcdGluc3RhbmNlLmJveC5yb3RhdGlvbihpbnN0YW5jZS5yb3RhdGlvbiArIDkwKTtcblx0XHRcdGluc3RhbmNlLnJvdGF0aW9uID0gaW5zdGFuY2UuYm94LnJvdGF0aW9uKCk7XG5cblx0XHRcdHZhciBmaW5pc2hlZCA9IHRydWU7XG5cblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG5cdFx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XG5cdFx0XHRcdFx0aWYgKCFibG9ja3NbaV1bal0uY29ubmVjdGVkKSB7XG5cdFx0XHRcdFx0XHRmaW5pc2hlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5zdG9wKCk7XG5cdFx0XHRpbnN0YW5jZS5hbmltYXRpb25Jc1J1bm5pbmcgPSBmYWxzZTtcblx0XHRcdGlmIChmaW5pc2hlZCkge1xuXHRcdFx0XHRpZiAoZ2FtZVR5cGUgPT09ICdjbGFzc2ljJykge1xuXHRcdFx0XHRcdGNsYXNzaWNHYW1lRmluaXNoZWQoKTtcblx0XHRcdFx0fSBlbHNlIGlmIChnYW1lVHlwZSA9PT0gJ3RpbWUtdHJpYWwnKSB7XG5cdFx0XHRcdFx0dGltZVRyaWFsR2FtZUZpbmlzaGVkKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXJSb3dzOyBpKyspIHtcblx0XHRcdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGxheWVyQ29sdW1uczsgaisrKSB7XG5cdFx0XHRcdFx0XHRnYW1lTGF5ZXJzW2ldW2pdLmRyYXcoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sIGdhbWVMYXllcnNbTWF0aC5mbG9vcihpbnN0YW5jZS5yb3cgLyBsYXllclNpemUpXVtNYXRoLmZsb29yKGluc3RhbmNlLmNvbHVtbiAvIGxheWVyU2l6ZSldKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGltZXIoZm9yd2FyZCkge1xuXHRpZiAodHlwZW9mIHRpbWVyICE9ICd1bmRlZmluZWQnKSB7XG5cdFx0dGltZXIucmVzZXQoKTtcblxuXHRcdHJldHVybjtcblx0fVxuXG5cdHRpbWVyID0gbmV3IEdhbWVUaW1lcihmb3J3YXJkKTtcblx0dGltZXIub25UaW1lc1VwID0gKCkgPT4ge1xuXHRcdHRpbWVyLnN0b3AoKTtcblxuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3UmVjb3JkID0gZmFsc2U7XG5cblx0XHRcdGlmIChjb29raWUuZ2V0KCd0aW1lX3RyaWFsX3Njb3JlJykgPT09IG51bGwpIHtcblx0XHRcdFx0bmV3UmVjb3JkID0gdHJ1ZTtcblx0XHRcdH0gZWxzZSBpZiAoY29va2llLmdldCgndGltZV90cmlhbF9zY29yZScpIDwgbGV2ZWwpIHtcblx0XHRcdFx0bmV3UmVjb3JkID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWFsZXJ0XG5cdFx0XHRhbGVydCgnQ29uZ3JhdHVsYXRpb24hIFxcbllvdXIgbGV2ZWw6ICcgKyBsZXZlbCArIChuZXdSZWNvcmQgPyAnXFxuTmV3IHJlY29yZCEnIDogJycpKTtcblxuXHRcdFx0aWYgKG5ld1JlY29yZCkge1xuXHRcdFx0XHRjb29raWUuc2V0KCd0aW1lX3RyaWFsX3Njb3JlJywgbGV2ZWwpO1xuXHRcdFx0fVxuXG5cdFx0XHRtYWluTWVudSgpO1xuXHRcdH0sIDMwMCk7XG5cdH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRsb2FkQXBwbGljYXRpb246IGxvYWRBcHBsaWNhdGlvblxufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBwaXBlID0gcmVxdWlyZSgnLi9qcy9waXBlJyk7XG5cbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblx0cGlwZS5sb2FkQXBwbGljYXRpb24oKTtcbn07Il19
