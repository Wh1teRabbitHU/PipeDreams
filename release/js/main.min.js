!function(){return function t(e,i,n){function a(s,o){if(!i[s]){if(!e[s]){var h="function"==typeof require&&require;if(!o&&h)return h(s,!0);if(r)return r(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var l=i[s]={exports:{}};e[s][0].call(l.exports,function(t){return a(e[s][1][t]||t)},l,l.exports,t,e,i,n)}return i[s].exports}for(var r="function"==typeof require&&require,s=0;s<n.length;s++)a(n[s]);return a}}()({1:[function(t,e,i){},{}],2:[function(t,e,i){(function(n){var a,r,s,o,h,c,l,d,u,f,g,p,v,m,y={};a=this,r=Math.PI/180,(y={version:"5.2.0",stages:[],idCounter:0,ids:{},names:{},shapes:{},listenClickTap:!1,inDblClickWindow:!1,enableTrace:!1,traceArrMax:100,dblClickWindow:400,pixelRatio:void 0,dragDistance:0,angleDeg:!0,showWarnings:!0,Filters:{},Node:function(t){this._init(t)},Shape:function(t){this.__init(t)},Container:function(t){this.__init(t)},Stage:function(t){this.___init(t)},BaseLayer:function(t){this.___init(t)},Layer:function(t){this.____init(t)},FastLayer:function(t){this.____init(t)},Group:function(t){this.___init(t)},isDragging:function(){var t=y.DD;return!!t&&t.isDragging},isDragReady:function(){var t=y.DD;return!!t&&!!t.node},_addId:function(t,e){void 0!==e&&(this.ids[e]=t)},_removeId:function(t){void 0!==t&&delete this.ids[t]},_addName:function(t,e){if(void 0!==e)for(var i=e.split(/\s/g),n=0;n<i.length;n++){var a=i[n];a&&(void 0===this.names[a]&&(this.names[a]=[]),this.names[a].push(t))}},_removeName:function(t,e){if(void 0!==t){var i=this.names[t];if(void 0!==i){for(var n=0;n<i.length;n++)i[n]._id===e&&i.splice(n,1);0===i.length&&delete this.names[t]}}},getAngle:function(t){return this.angleDeg?t*r:t},_parseUA:function(t){var e=t.toLowerCase(),i=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||e.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[],n=!!t.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i),a=!!t.match(/IEMobile/i);return{browser:i[1]||"",version:i[2]||"0",mobile:n,ieMobile:a}},UA:void 0}).UA=y._parseUA(a.navigator&&a.navigator.userAgent||""),function(a,r){if("object"==typeof i){var s=r();if(n.window===n)y.document=n.document,y.window=n;else{var o=t("canvas"),h=t("jsdom").jsdom;y.document=h("<!DOCTYPE html><html><head></head><body></body></html>"),y.window=y.document.createWindow(),y.window.Image=o.Image,y._nodeCanvas=o}return y.root=a,void(e.exports=s)}"function"==typeof define&&define.amd&&define(r),y.document=document,y.window=window,y.root=a}(this,function(){return y}),function(){y.Collection=function(){var t=[].slice.call(arguments),e=t.length,i=0;for(this.length=e;i<e;i++)this[i]=t[i];return this},y.Collection.prototype=[],y.Collection.prototype.each=function(t){for(var e=0;e<this.length;e++)t(this[e],e)},y.Collection.prototype.toArray=function(){var t,e=[],i=this.length;for(t=0;t<i;t++)e.push(this[t]);return e},y.Collection.toCollection=function(t){var e,i=new y.Collection,n=t.length;for(e=0;e<n;e++)i.push(t[e]);return i},y.Collection._mapMethod=function(t){y.Collection.prototype[t]=function(){var e,i=this.length,n=[].slice.call(arguments);for(e=0;e<i;e++)this[e][t].apply(this[e],n);return this}},y.Collection.mapMethods=function(t){var e=t.prototype;for(var i in e)y.Collection._mapMethod(i)},y.Transform=function(t){this.m=t&&t.slice()||[1,0,0,1,0,0]},y.Transform.prototype={copy:function(){return new y.Transform(this.m)},point:function(t){var e=this.m;return{x:e[0]*t.x+e[2]*t.y+e[4],y:e[1]*t.x+e[3]*t.y+e[5]}},translate:function(t,e){return this.m[4]+=this.m[0]*t+this.m[2]*e,this.m[5]+=this.m[1]*t+this.m[3]*e,this},scale:function(t,e){return this.m[0]*=t,this.m[1]*=t,this.m[2]*=e,this.m[3]*=e,this},rotate:function(t){var e=Math.cos(t),i=Math.sin(t),n=this.m[0]*e+this.m[2]*i,a=this.m[1]*e+this.m[3]*i,r=this.m[0]*-i+this.m[2]*e,s=this.m[1]*-i+this.m[3]*e;return this.m[0]=n,this.m[1]=a,this.m[2]=r,this.m[3]=s,this},getTranslation:function(){return{x:this.m[4],y:this.m[5]}},skew:function(t,e){var i=this.m[0]+this.m[2]*e,n=this.m[1]+this.m[3]*e,a=this.m[2]+this.m[0]*t,r=this.m[3]+this.m[1]*t;return this.m[0]=i,this.m[1]=n,this.m[2]=a,this.m[3]=r,this},multiply:function(t){var e=this.m[0]*t.m[0]+this.m[2]*t.m[1],i=this.m[1]*t.m[0]+this.m[3]*t.m[1],n=this.m[0]*t.m[2]+this.m[2]*t.m[3],a=this.m[1]*t.m[2]+this.m[3]*t.m[3],r=this.m[0]*t.m[4]+this.m[2]*t.m[5]+this.m[4],s=this.m[1]*t.m[4]+this.m[3]*t.m[5]+this.m[5];return this.m[0]=e,this.m[1]=i,this.m[2]=n,this.m[3]=a,this.m[4]=r,this.m[5]=s,this},invert:function(){var t=1/(this.m[0]*this.m[3]-this.m[1]*this.m[2]),e=this.m[3]*t,i=-this.m[1]*t,n=-this.m[2]*t,a=this.m[0]*t,r=t*(this.m[2]*this.m[5]-this.m[3]*this.m[4]),s=t*(this.m[1]*this.m[4]-this.m[0]*this.m[5]);return this.m[0]=e,this.m[1]=i,this.m[2]=n,this.m[3]=a,this.m[4]=r,this.m[5]=s,this},getMatrix:function(){return this.m},setAbsolutePosition:function(t,e){var i=this.m[0],n=this.m[1],a=this.m[2],r=this.m[3],s=this.m[4],o=(i*(e-this.m[5])-n*(t-s))/(i*r-n*a),h=(t-s-a*o)/i;return this.translate(h,o)}};var t=Math.PI/180,e=180/Math.PI,n={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},a=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/;y.Util={_isElement:function(t){return!(!t||1!=t.nodeType)},_isFunction:function(t){return!!(t&&t.constructor&&t.call&&t.apply)},_isObject:function(t){return!!t&&t.constructor==Object},_isArray:function(t){return"[object Array]"==Object.prototype.toString.call(t)},_isNumber:function(t){return"[object Number]"==Object.prototype.toString.call(t)},_isString:function(t){return"[object String]"==Object.prototype.toString.call(t)},_throttle:function(t,e,i){var n,a,r,s=null,o=0,h=i||{},c=function(){o=!1===h.leading?0:(new Date).getTime(),s=null,r=t.apply(n,a),n=a=null};return function(){var i=(new Date).getTime();o||!1!==h.leading||(o=i);var l=e-(i-o);return n=this,a=arguments,l<=0?(clearTimeout(s),s=null,o=i,r=t.apply(n,a),n=a=null):s||!1===h.trailing||(s=setTimeout(c,l)),r}},_hasMethods:function(t){var e,i=[];for(e in t)this._isFunction(t[e])&&i.push(e);return i.length>0},createCanvasElement:function(){var t=y.document.createElement("canvas");try{t.style=t.style||{}}catch(t){}return t},isBrowser:function(){return"object"!=typeof i},_isInDocument:function(t){for(;t=t.parentNode;)if(t==y.document)return!0;return!1},_simplifyArray:function(t){var e,i,n=[],a=t.length,r=y.Util;for(e=0;e<a;e++)i=t[e],r._isNumber(i)?i=Math.round(1e3*i)/1e3:r._isString(i)||(i=i.toString()),n.push(i);return n},_getImage:function(t,e){var i,n;if(t)if(this._isElement(t))e(t);else if(this._isString(t))(i=new y.window.Image).onload=function(){e(i)},i.src=t;else if(t.data){(n=y.Util.createCanvasElement()).width=t.width,n.height=t.height,n.getContext("2d").putImageData(t,0,0),this._getImage(n.toDataURL(),e)}else e(null);else e(null)},_getRGBAString:function(t){return["rgba(",t.red||0,",",t.green||0,",",t.blue||0,",",t.alpha||1,")"].join("")},_rgbToHex:function(t,e,i){return((1<<24)+(t<<16)+(e<<8)+i).toString(16).slice(1)},_hexToRgb:function(t){t=t.replace("#","");var e=parseInt(t,16);return{r:e>>16&255,g:e>>8&255,b:255&e}},getRandomColor:function(){for(var t=(16777215*Math.random()<<0).toString(16);t.length<6;)t="0"+t;return"#"+t},get:function(t,e){return void 0===t?e:t},getRGB:function(t){var e;return t in n?{r:(e=n[t])[0],g:e[1],b:e[2]}:"#"===t[0]?this._hexToRgb(t.substring(1)):"rgb("===t.substr(0,4)?(e=a.exec(t.replace(/ /g,"")),{r:parseInt(e[1],10),g:parseInt(e[2],10),b:parseInt(e[3],10)}):{r:0,g:0,b:0}},_merge:function(t,e){var i=this._clone(e);for(var n in t)this._isObject(t[n])?i[n]=this._merge(t[n],i[n]):i[n]=t[n];return i},cloneObject:function(t){var e={};for(var i in t)this._isObject(t[i])?e[i]=this.cloneObject(t[i]):this._isArray(t[i])?e[i]=this.cloneArray(t[i]):e[i]=t[i];return e},cloneArray:function(t){return t.slice(0)},_degToRad:function(e){return e*t},_radToDeg:function(t){return t*e},_capitalize:function(t){return t.charAt(0).toUpperCase()+t.slice(1)},error:function(t){throw new Error("Kinetic error: "+t)},warn:function(t){y.root.console&&console.warn&&y.showWarnings&&console.warn("Kinetic warning: "+t)},extend:function(t,e){function i(){this.constructor=t}i.prototype=e.prototype;var n=t.prototype;for(var a in t.prototype=new i,n)n.hasOwnProperty(a)&&(t.prototype[a]=n[a]);t.__super__=e.prototype},addMethods:function(t,e){var i;for(i in e)t.prototype[i]=e[i]},_getControlPoints:function(t,e,i,n,a,r,s){var o=Math.sqrt(Math.pow(i-t,2)+Math.pow(n-e,2)),h=Math.sqrt(Math.pow(a-i,2)+Math.pow(r-n,2)),c=s*o/(o+h),l=s*h/(o+h);return[i-c*(a-t),n-c*(r-e),i+l*(a-t),n+l*(r-e)]},_expandPoints:function(t,e){var i,n,a=t.length,r=[];for(i=2;i<a-2;i+=2)n=y.Util._getControlPoints(t[i-2],t[i-1],t[i],t[i+1],t[i+2],t[i+3],e),r.push(n[0]),r.push(n[1]),r.push(t[i]),r.push(t[i+1]),r.push(n[2]),r.push(n[3]);return r},_removeLastLetter:function(t){return t.substring(0,t.length-1)}}}(),s=y.Util.createCanvasElement().getContext("2d"),o=y.UA.mobile?(window.devicePixelRatio||1)/(s.webkitBackingStorePixelRatio||s.mozBackingStorePixelRatio||s.msBackingStorePixelRatio||s.oBackingStorePixelRatio||s.backingStorePixelRatio||1):1,y.Canvas=function(t){this.init(t)},y.Canvas.prototype={init:function(t){var e=(t||{}).pixelRatio||y.pixelRatio||o;this.pixelRatio=e,this._canvas=y.Util.createCanvasElement(),this._canvas.style.padding=0,this._canvas.style.margin=0,this._canvas.style.border=0,this._canvas.style.background="transparent",this._canvas.style.position="absolute",this._canvas.style.top=0,this._canvas.style.left=0},getContext:function(){return this.context},getPixelRatio:function(){return this.pixelRatio},setPixelRatio:function(t){this.pixelRatio=t,this.setSize(this.getWidth(),this.getHeight())},setWidth:function(t){this.width=this._canvas.width=t*this.pixelRatio,this._canvas.style.width=t+"px"},setHeight:function(t){this.height=this._canvas.height=t*this.pixelRatio,this._canvas.style.height=t+"px"},getWidth:function(){return this.width},getHeight:function(){return this.height},setSize:function(t,e){this.setWidth(t),this.setHeight(e)},toDataURL:function(t,e){try{return this._canvas.toDataURL(t,e)}catch(t){try{return this._canvas.toDataURL()}catch(t){return y.Util.warn("Unable to get data URL. "+t.message),""}}}},y.SceneCanvas=function(t){var e=t||{},i=e.width||0,n=e.height||0;y.Canvas.call(this,e),this.context=new y.SceneContext(this),this.setSize(i,n)},y.SceneCanvas.prototype={setWidth:function(t){var e=this.pixelRatio,i=this.getContext()._context;y.Canvas.prototype.setWidth.call(this,t),i.scale(e,e)},setHeight:function(t){var e=this.pixelRatio,i=this.getContext()._context;y.Canvas.prototype.setHeight.call(this,t),i.scale(e,e)}},y.Util.extend(y.SceneCanvas,y.Canvas),y.HitCanvas=function(t){var e=t||{},i=e.width||0,n=e.height||0;y.Canvas.call(this,e),this.context=new y.HitContext(this),this.setSize(i,n),this.hitCanvas=!0},y.Util.extend(y.HitCanvas,y.Canvas),h=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","createLinearGradient","createPattern","createRadialGradient","drawImage","fill","fillText","getImageData","createImageData","lineTo","moveTo","putImageData","quadraticCurveTo","rect","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeText","transform","translate"],y.Context=function(t){this.init(t)},y.Context.prototype={init:function(t){this.canvas=t,this._context=t._canvas.getContext("2d"),y.enableTrace&&(this.traceArr=[],this._enableTrace())},fillShape:function(t){t.getFillEnabled()&&this._fill(t)},strokeShape:function(t){t.getStrokeEnabled()&&this._stroke(t)},fillStrokeShape:function(t){t.getFillEnabled()&&this._fill(t),t.getStrokeEnabled()&&this._stroke(t)},getTrace:function(t){var e,i,n,a,r=this.traceArr,s=r.length,o="";for(e=0;e<s;e++)(n=(i=r[e]).method)?(a=i.args,o+=n,t?o+="()":y.Util._isArray(a[0])?o+="(["+a.join(",")+"])":o+="("+a.join(",")+")"):(o+=i.property,t||(o+="="+i.val)),o+=";";return o},clearTrace:function(){this.traceArr=[]},_trace:function(t){var e=this.traceArr;e.push(t),e.length>=y.traceArrMax&&e.shift()},reset:function(){var t=this.getCanvas().getPixelRatio();this.setTransform(1*t,0,0,1*t,0,0)},getCanvas:function(){return this.canvas},clear:function(t){var e=this.getCanvas();t?this.clearRect(t.x||0,t.y||0,t.width||0,t.height||0):this.clearRect(0,0,e.getWidth(),e.getHeight())},_applyLineCap:function(t){var e=t.getLineCap();e&&this.setAttr("lineCap",e)},_applyOpacity:function(t){var e=t.getAbsoluteOpacity();1!==e&&this.setAttr("globalAlpha",e)},_applyLineJoin:function(t){var e=t.getLineJoin();e&&this.setAttr("lineJoin",e)},setAttr:function(t,e){this._context[t]=e},arc:function(){var t=arguments;this._context.arc(t[0],t[1],t[2],t[3],t[4],t[5])},beginPath:function(){this._context.beginPath()},bezierCurveTo:function(){var t=arguments;this._context.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5])},clearRect:function(){var t=arguments;this._context.clearRect(t[0],t[1],t[2],t[3])},clip:function(){this._context.clip()},closePath:function(){this._context.closePath()},createImageData:function(){var t=arguments;return 2===t.length?this._context.createImageData(t[0],t[1]):1===t.length?this._context.createImageData(t[0]):void 0},createLinearGradient:function(){var t=arguments;return this._context.createLinearGradient(t[0],t[1],t[2],t[3])},createPattern:function(){var t=arguments;return this._context.createPattern(t[0],t[1])},createRadialGradient:function(){var t=arguments;return this._context.createRadialGradient(t[0],t[1],t[2],t[3],t[4],t[5])},drawImage:function(){var t=arguments,e=this._context;3===t.length?e.drawImage(t[0],t[1],t[2]):5===t.length?e.drawImage(t[0],t[1],t[2],t[3],t[4]):9===t.length&&e.drawImage(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},fill:function(){this._context.fill()},fillText:function(){var t=arguments;this._context.fillText(t[0],t[1],t[2])},getImageData:function(){var t=arguments;return this._context.getImageData(t[0],t[1],t[2],t[3])},lineTo:function(){var t=arguments;this._context.lineTo(t[0],t[1])},moveTo:function(){var t=arguments;this._context.moveTo(t[0],t[1])},rect:function(){var t=arguments;this._context.rect(t[0],t[1],t[2],t[3])},putImageData:function(){var t=arguments;this._context.putImageData(t[0],t[1],t[2])},quadraticCurveTo:function(){var t=arguments;this._context.quadraticCurveTo(t[0],t[1],t[2],t[3])},restore:function(){this._context.restore()},rotate:function(){var t=arguments;this._context.rotate(t[0])},save:function(){this._context.save()},scale:function(){var t=arguments;this._context.scale(t[0],t[1])},setLineDash:function(){var t=arguments,e=this._context;this._context.setLineDash?e.setLineDash(t[0]):"mozDash"in e?e.mozDash=t[0]:"webkitLineDash"in e&&(e.webkitLineDash=t[0])},setTransform:function(){var t=arguments;this._context.setTransform(t[0],t[1],t[2],t[3],t[4],t[5])},stroke:function(){this._context.stroke()},strokeText:function(){var t=arguments;this._context.strokeText(t[0],t[1],t[2])},transform:function(){var t=arguments;this._context.transform(t[0],t[1],t[2],t[3],t[4],t[5])},translate:function(){var t=arguments;this._context.translate(t[0],t[1])},_enableTrace:function(){var t,e,i=this,n=h.length,a=y.Util._simplifyArray,r=this.setAttr,s=function(t){var n,r=i[t];i[t]=function(){return e=a(Array.prototype.slice.call(arguments,0)),n=r.apply(i,arguments),i._trace({method:t,args:e}),n}};for(t=0;t<n;t++)s(h[t]);i.setAttr=function(){r.apply(i,arguments),i._trace({property:arguments[0],val:arguments[1]})}}},y.SceneContext=function(t){y.Context.call(this,t)},y.SceneContext.prototype={_fillColor:function(t){var e=t.fill()||y.Util._getRGBAString({red:t.fillRed(),green:t.fillGreen(),blue:t.fillBlue(),alpha:t.fillAlpha()});this.setAttr("fillStyle",e),t._fillFunc(this)},_fillPattern:function(t){var e=t.getFillPatternImage(),i=t.getFillPatternX(),n=t.getFillPatternY(),a=t.getFillPatternScale(),r=y.getAngle(t.getFillPatternRotation()),s=t.getFillPatternOffset(),o=t.getFillPatternRepeat();(i||n)&&this.translate(i||0,n||0),r&&this.rotate(r),a&&this.scale(a.x,a.y),s&&this.translate(-1*s.x,-1*s.y),this.setAttr("fillStyle",this.createPattern(e,o||"repeat")),this.fill()},_fillLinearGradient:function(t){var e=t.getFillLinearGradientStartPoint(),i=t.getFillLinearGradientEndPoint(),n=t.getFillLinearGradientColorStops(),a=this.createLinearGradient(e.x,e.y,i.x,i.y);if(n){for(var r=0;r<n.length;r+=2)a.addColorStop(n[r],n[r+1]);this.setAttr("fillStyle",a),this.fill()}},_fillRadialGradient:function(t){for(var e=t.getFillRadialGradientStartPoint(),i=t.getFillRadialGradientEndPoint(),n=t.getFillRadialGradientStartRadius(),a=t.getFillRadialGradientEndRadius(),r=t.getFillRadialGradientColorStops(),s=this.createRadialGradient(e.x,e.y,n,i.x,i.y,a),o=0;o<r.length;o+=2)s.addColorStop(r[o],r[o+1]);this.setAttr("fillStyle",s),this.fill()},_fill:function(t){var e=t.fill()||t.fillRed()||t.fillGreen()||t.fillBlue(),i=t.getFillPatternImage(),n=t.getFillLinearGradientColorStops(),a=t.getFillRadialGradientColorStops(),r=t.getFillPriority();e&&"color"===r?this._fillColor(t):i&&"pattern"===r?this._fillPattern(t):n&&"linear-gradient"===r?this._fillLinearGradient(t):a&&"radial-gradient"===r?this._fillRadialGradient(t):e?this._fillColor(t):i?this._fillPattern(t):n?this._fillLinearGradient(t):a&&this._fillRadialGradient(t)},_stroke:function(t){var e=t.dash(),i=t.getStrokeScaleEnabled();t.hasStroke()&&(i||(this.save(),this.setTransform(1,0,0,1,0,0)),this._applyLineCap(t),e&&t.dashEnabled()&&this.setLineDash(e),this.setAttr("lineWidth",t.strokeWidth()),this.setAttr("strokeStyle",t.stroke()||y.Util._getRGBAString({red:t.strokeRed(),green:t.strokeGreen(),blue:t.strokeBlue(),alpha:t.strokeAlpha()})),t._strokeFunc(this),i||this.restore())},_applyShadow:function(t){var e=y.Util,i=t.getAbsoluteOpacity(),n=e.get(t.getShadowColor(),"black"),a=e.get(t.getShadowBlur(),5),r=e.get(t.getShadowOpacity(),1),s=e.get(t.getShadowOffset(),{x:0,y:0});r&&this.setAttr("globalAlpha",r*i),this.setAttr("shadowColor",n),this.setAttr("shadowBlur",a),this.setAttr("shadowOffsetX",s.x),this.setAttr("shadowOffsetY",s.y)}},y.Util.extend(y.SceneContext,y.Context),y.HitContext=function(t){y.Context.call(this,t)},y.HitContext.prototype={_fill:function(t){this.save(),this.setAttr("fillStyle",t.colorKey),t._fillFuncHit(this),this.restore()},_stroke:function(t){t.hasStroke()&&(this._applyLineCap(t),this.setAttr("lineWidth",t.strokeWidth()),this.setAttr("strokeStyle",t.colorKey),t._strokeFuncHit(this))}},y.Util.extend(y.HitContext,y.Context),y.Factory={addGetterSetter:function(t,e,i,n,a){this.addGetter(t,e,i),this.addSetter(t,e,n,a),this.addOverloadedGetterSetter(t,e)},addGetter:function(t,e,i){var n="get"+y.Util._capitalize(e);t.prototype[n]=function(){var t=this.attrs[e];return void 0===t?i:t}},addSetter:function(t,e,i,n){var a="set"+y.Util._capitalize(e);t.prototype[a]=function(t){return i&&(t=i.call(this,t)),this._setAttr(e,t),n&&n.call(this),this}},addComponentsGetterSetter:function(t,e,i,n,a){var r,s,o=i.length,h=y.Util._capitalize,c="get"+h(e),l="set"+h(e);t.prototype[c]=function(){var t={};for(r=0;r<o;r++)t[s=i[r]]=this.getAttr(e+h(s));return t},t.prototype[l]=function(t){var i,r=this.attrs[e];for(i in n&&(t=n.call(this,t)),t)this._setAttr(e+h(i),t[i]);return this._fireChangeEvent(e,r,t),a&&a.call(this),this},this.addOverloadedGetterSetter(t,e)},addOverloadedGetterSetter:function(t,e){var i=y.Util._capitalize(e),n="set"+i,a="get"+i;t.prototype[e]=function(){return arguments.length?(this[n](arguments[0]),this):this[a]()}},backCompat:function(t,e){var i;for(i in e)t.prototype[i]=t.prototype[e[i]]},afterSetFilter:function(){this._filterUpToDate=!1}},y.Validators={RGBComponent:function(t){return t>255?255:t<0?0:Math.round(t)},alphaComponent:function(t){return t>1?1:t<1e-4?1e-4:t}},c="Shape",l=["id"],d=["xChange.kinetic","yChange.kinetic","scaleXChange.kinetic","scaleYChange.kinetic","skewXChange.kinetic","skewYChange.kinetic","rotationChange.kinetic","offsetXChange.kinetic","offsetYChange.kinetic","transformsEnabledChange.kinetic"].join(" "),y.Util.addMethods(y.Node,{_init:function(t){var e=this;this._id=y.idCounter++,this.eventListeners={},this.attrs={},this._cache={},this._filterUpToDate=!1,this.setAttrs(t),this.on(d,function(){this._clearCache("transform"),e._clearSelfAndDescendantCache("absoluteTransform")}),this.on("visibleChange.kinetic",function(){e._clearSelfAndDescendantCache("visible")}),this.on("listeningChange.kinetic",function(){e._clearSelfAndDescendantCache("listening")}),this.on("opacityChange.kinetic",function(){e._clearSelfAndDescendantCache("absoluteOpacity")})},_clearCache:function(t){t?delete this._cache[t]:this._cache={}},_getCache:function(t,e){return void 0===this._cache[t]&&(this._cache[t]=e.call(this)),this._cache[t]},_clearSelfAndDescendantCache:function(t){this._clearCache(t),this.children&&this.getChildren().each(function(e){e._clearSelfAndDescendantCache(t)})},clearCache:function(){return delete this._cache.canvas,this._filterUpToDate=!1,this},cache:function(t){var e=t||{},i=e.x||0,n=e.y||0,a=e.width||this.width(),r=e.height||this.height(),s=e.drawBorder||!1;if(0!==a&&0!==r){var o=new y.SceneCanvas({pixelRatio:1,width:a,height:r}),h=new y.SceneCanvas({pixelRatio:1,width:a,height:r}),c=new y.HitCanvas({width:a,height:r}),l=o.getContext(),d=c.getContext();return c.isCache=!0,this.clearCache(),l.save(),d.save(),s&&(l.save(),l.beginPath(),l.rect(0,0,a,r),l.closePath(),l.setAttr("strokeStyle","red"),l.setAttr("lineWidth",5),l.stroke(),l.restore()),l.translate(-1*i,-1*n),d.translate(-1*i,-1*n),"Shape"===this.nodeType&&(l.translate(-1*this.x(),-1*this.y()),d.translate(-1*this.x(),-1*this.y())),this.drawScene(o,this),this.drawHit(c,this),l.restore(),d.restore(),this._cache.canvas={scene:o,filter:h,hit:c},this}y.Util.warn("Width or height of caching configuration equals 0. Cache is ignored.")},_drawCachedSceneCanvas:function(t){t.save(),this.getLayer()._applyTransform(this,t),t._applyOpacity(this),t.drawImage(this._getCachedSceneCanvas()._canvas,0,0),t.restore()},_getCachedSceneCanvas:function(){var t,e,i,n=this.filters(),a=this._cache.canvas,r=a.scene,s=a.filter,o=s.getContext();if(n){if(!this._filterUpToDate){try{for(t=n.length,o.clear(),o.drawImage(r._canvas,0,0),e=o.getImageData(0,0,s.getWidth(),s.getHeight()),i=0;i<t;i++)n[i].call(this,e),o.putImageData(e,0,0)}catch(t){y.Util.warn("Unable to apply filter. "+t.message)}this._filterUpToDate=!0}return s}return r},_drawCachedHitCanvas:function(t){var e=this._cache.canvas.hit;t.save(),this.getLayer()._applyTransform(this,t),t.drawImage(e._canvas,0,0),t.restore()},on:function(t,e){var i,n,a,r,s=t.split(" "),o=s.length;for(i=0;i<o;i++)a=(n=s[i].split("."))[0],r=n[1]||"",this.eventListeners[a]||(this.eventListeners[a]=[]),this.eventListeners[a].push({name:r,handler:e});return this},off:function(t){var e,i,n,a,r,s=(t||"").split(" "),o=s.length;if(!t)for(i in this.eventListeners)this._off(i);for(e=0;e<o;e++)if(a=(n=s[e].split("."))[0],r=n[1],a)this.eventListeners[a]&&this._off(a,r);else for(i in this.eventListeners)this._off(i,r);return this},dispatchEvent:function(t){var e={target:this,type:t.type,evt:t};this.fire(t.type,e)},addEventListener:function(t,e){this.on(t,function(t){e.call(this,t.evt)})},removeEventListener:function(t){this.off(t)},remove:function(){var t=this.getParent();return t&&t.children&&(t.children.splice(this.index,1),t._setChildrenIndices(),delete this.parent),this._clearSelfAndDescendantCache("stage"),this._clearSelfAndDescendantCache("absoluteTransform"),this._clearSelfAndDescendantCache("visible"),this._clearSelfAndDescendantCache("listening"),this._clearSelfAndDescendantCache("absoluteOpacity"),this},destroy:function(){y._removeId(this.getId()),y._removeName(this.getName(),this._id),this.remove()},getAttr:function(t){var e="get"+y.Util._capitalize(t);return y.Util._isFunction(this[e])?this[e]():this.attrs[t]},getAncestors:function(){for(var t=this.getParent(),e=new y.Collection;t;)e.push(t),t=t.getParent();return e},getAttrs:function(){return this.attrs||{}},setAttrs:function(t){var e,i;if(t)for(e in t)"children"===e||t[e]instanceof y.Node||(i="set"+y.Util._capitalize(e),y.Util._isFunction(this[i])?this[i](t[e]):this._setAttr(e,t[e]));return this},isListening:function(){return this._getCache("listening",this._isListening)},_isListening:function(){var t=this.getListening(),e=this.getParent();return"inherit"===t?!e||e.isListening():t},isVisible:function(){return this._getCache("visible",this._isVisible)},_isVisible:function(){var t=this.getVisible(),e=this.getParent();return"inherit"===t?!e||e.isVisible():t},shouldDrawHit:function(t){var e=this.getLayer();return t&&t.isCache||e&&e.hitGraphEnabled()&&this.isListening()&&this.isVisible()},show:function(){return this.setVisible(!0),this},hide:function(){return this.setVisible(!1),this},getZIndex:function(){return this.index||0},getAbsoluteZIndex:function(){var t,e,i,n,a=this.getDepth(),r=this,s=0;return"Stage"!==r.nodeType&&function o(h){for(t=[],e=h.length,i=0;i<e;i++)n=h[i],s++,n.nodeType!==c&&(t=t.concat(n.getChildren().toArray())),n._id===r._id&&(i=e);t.length>0&&t[0].getDepth()<=a&&o(t)}(r.getStage().getChildren()),s},getDepth:function(){for(var t=0,e=this.parent;e;)t++,e=e.parent;return t},setPosition:function(t){return this.setX(t.x),this.setY(t.y),this},getPosition:function(){return{x:this.getX(),y:this.getY()}},getAbsolutePosition:function(){var t=this.getAbsoluteTransform().getMatrix(),e=new y.Transform,i=this.offset();return e.m=t.slice(),e.translate(i.x,i.y),e.getTranslation()},setAbsolutePosition:function(t){var e,i=this._clearTransform();return this.attrs.x=i.x,this.attrs.y=i.y,delete i.x,delete i.y,(e=this.getAbsoluteTransform()).invert(),e.translate(t.x,t.y),t={x:this.attrs.x+e.getTranslation().x,y:this.attrs.y+e.getTranslation().y},this.setPosition({x:t.x,y:t.y}),this._setTransform(i),this},_setTransform:function(t){var e;for(e in t)this.attrs[e]=t[e];this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")},_clearTransform:function(){var t={x:this.getX(),y:this.getY(),rotation:this.getRotation(),scaleX:this.getScaleX(),scaleY:this.getScaleY(),offsetX:this.getOffsetX(),offsetY:this.getOffsetY(),skewX:this.getSkewX(),skewY:this.getSkewY()};return this.attrs.x=0,this.attrs.y=0,this.attrs.rotation=0,this.attrs.scaleX=1,this.attrs.scaleY=1,this.attrs.offsetX=0,this.attrs.offsetY=0,this.attrs.skewX=0,this.attrs.skewY=0,this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform"),t},move:function(t){var e=t.x,i=t.y,n=this.getX(),a=this.getY();return void 0!==e&&(n+=e),void 0!==i&&(a+=i),this.setPosition({x:n,y:a}),this},_eachAncestorReverse:function(t,e){var i,n,a=[],r=this.getParent();if(e&&e._id===this._id)return t(this),!0;for(a.unshift(this);r&&(!e||r._id!==e._id);)a.unshift(r),r=r.parent;for(i=a.length,n=0;n<i;n++)t(a[n])},rotate:function(t){return this.setRotation(this.getRotation()+t),this},moveToTop:function(){if(this.parent){var t=this.index;return this.parent.children.splice(t,1),this.parent.children.push(this),this.parent._setChildrenIndices(),!0}y.Util.warn("Node has no parent. moveToTop function is ignored.")},moveUp:function(){if(this.parent){var t=this.index;return t<this.parent.getChildren().length-1&&(this.parent.children.splice(t,1),this.parent.children.splice(t+1,0,this),this.parent._setChildrenIndices(),!0)}y.Util.warn("Node has no parent. moveUp function is ignored.")},moveDown:function(){if(this.parent){var t=this.index;return t>0&&(this.parent.children.splice(t,1),this.parent.children.splice(t-1,0,this),this.parent._setChildrenIndices(),!0)}y.Util.warn("Node has no parent. moveDown function is ignored.")},moveToBottom:function(){if(this.parent){var t=this.index;return t>0&&(this.parent.children.splice(t,1),this.parent.children.unshift(this),this.parent._setChildrenIndices(),!0)}y.Util.warn("Node has no parent. moveToBottom function is ignored.")},setZIndex:function(t){if(this.parent){var e=this.index;return this.parent.children.splice(e,1),this.parent.children.splice(t,0,this),this.parent._setChildrenIndices(),this}y.Util.warn("Node has no parent. zIndex parameter is ignored.")},getAbsoluteOpacity:function(){return this._getCache("absoluteOpacity",this._getAbsoluteOpacity)},_getAbsoluteOpacity:function(){var t=this.getOpacity();return this.getParent()&&(t*=this.getParent().getAbsoluteOpacity()),t},moveTo:function(t){return this.getParent()!==t&&(this.remove(),t.add(this)),this},toObject:function(){var t,e,i,n,a=y.Util,r={},s=this.getAttrs();for(t in r.attrs={},s)e=s[t],a._isFunction(e)||a._isElement(e)||a._isObject(e)&&a._hasMethods(e)||(i=this[t],delete s[t],n=i?i.call(this):null,s[t]=e,n!==e&&(r.attrs[t]=e));return r.className=this.getClassName(),r},toJSON:function(){return JSON.stringify(this.toObject())},getParent:function(){return this.parent},getLayer:function(){var t=this.getParent();return t?t.getLayer():null},getStage:function(){return this._getCache("stage",this._getStage)},_getStage:function(){var t=this.getParent();return t?t.getStage():void 0},fire:function(t,e,i){return i?this._fireAndBubble(t,e||{}):this._fire(t,e||{}),this},getAbsoluteTransform:function(t){return t?this._getAbsoluteTransform(t):this._getCache("absoluteTransform",this._getAbsoluteTransform)},_getAbsoluteTransform:function(t){var e,i,n=new y.Transform;return this._eachAncestorReverse(function(t){e=t.transformsEnabled(),i=t.getTransform(),"all"===e?n.multiply(i):"position"===e&&n.translate(t.x(),t.y())},t),n},getTransform:function(){return this._getCache("transform",this._getTransform)},_getTransform:function(){var t=new y.Transform,e=this.getX(),i=this.getY(),n=y.getAngle(this.getRotation()),a=this.getScaleX(),r=this.getScaleY(),s=this.getSkewX(),o=this.getSkewY(),h=this.getOffsetX(),c=this.getOffsetY();return 0===e&&0===i||t.translate(e,i),0!==n&&t.rotate(n),0===s&&0===o||t.skew(s,o),1===a&&1===r||t.scale(a,r),0===h&&0===c||t.translate(-1*h,-1*c),t},clone:function(t){var e,i,n,a,r,s=this.getClassName(),o=y.Util.cloneObject(this.attrs);for(var h in l)delete o[l[h]];for(e in t)o[e]=t[e];var c=new y[s](o);for(e in this.eventListeners)for(n=(i=this.eventListeners[e]).length,a=0;a<n;a++)(r=i[a]).name.indexOf("kinetic")<0&&(c.eventListeners[e]||(c.eventListeners[e]=[]),c.eventListeners[e].push(r));return c},toDataURL:function(t){var e=(t=t||{}).mimeType||null,i=t.quality||null,n=this.getStage(),a=t.x||0,r=t.y||0,s=new y.SceneCanvas({width:t.width||this.getWidth()||(n?n.getWidth():0),height:t.height||this.getHeight()||(n?n.getHeight():0),pixelRatio:1}),o=s.getContext();return o.save(),(a||r)&&o.translate(-1*a,-1*r),this.drawScene(s),o.restore(),s.toDataURL(e,i)},toImage:function(t){y.Util._getImage(this.toDataURL(t),function(e){t.callback(e)})},setSize:function(t){return this.setWidth(t.width),this.setHeight(t.height),this},getSize:function(){return{width:this.getWidth(),height:this.getHeight()}},getWidth:function(){return this.attrs.width||0},getHeight:function(){return this.attrs.height||0},getClassName:function(){return this.className||this.nodeType},getType:function(){return this.nodeType},getDragDistance:function(){return void 0!==this.attrs.dragDistance?this.attrs.dragDistance:this.parent?this.parent.getDragDistance():y.dragDistance},_get:function(t){return this.className===t||this.nodeType===t?[this]:[]},_off:function(t,e){var i,n,a=this.eventListeners[t];for(i=0;i<a.length;i++)if(!("kinetic"===(n=a[i].name)&&"kinetic"!==e||e&&n!==e)){if(a.splice(i,1),0===a.length){delete this.eventListeners[t];break}i--}},_fireChangeEvent:function(t,e,i){this._fire(t+"Change",{oldVal:e,newVal:i})},setId:function(t){var e=this.getId();return y._removeId(e),y._addId(this,t),this._setAttr("id",t),this},setName:function(t){var e=this.getName();return y._removeName(e,this._id),y._addName(this,t),this._setAttr("name",t),this},setAttr:function(t,e){var i=this["set"+y.Util._capitalize(t)];return y.Util._isFunction(i)?i.call(this,e):this._setAttr(t,e),this},_setAttr:function(t,e){var i;void 0!==e&&(i=this.attrs[t],this.attrs[t]=e,this._fireChangeEvent(t,i,e))},_setComponentAttr:function(t,e,i){var n;void 0!==i&&((n=this.attrs[t])||(this.attrs[t]=this.getAttr(t)),this.attrs[t][e]=i,this._fireChangeEvent(t,n,i))},_fireAndBubble:function(t,e,i){var n=!0;if(e&&this.nodeType===c&&(e.target=this),"mouseenter"===t&&i&&(this._id===i._id||this.isAncestorOf&&this.isAncestorOf(i))?n=!1:"mouseleave"===t&&i&&(this._id===i._id||this.isAncestorOf&&this.isAncestorOf(i))&&(n=!1),n){this._fire(t,e);var a=("mouseenter"===t||"mouseleave"===t)&&(i&&i.isAncestorOf&&i.isAncestorOf(this)||!(!i||!i.isAncestorOf));e&&!e.cancelBubble&&this.parent&&this.parent.isListening()&&!a&&(i&&i.parent?this._fireAndBubble.call(this.parent,t,e,i.parent):this._fireAndBubble.call(this.parent,t,e))}},_fire:function(t,e){var i,n=this.eventListeners[t];if(e.type=t,n)for(i=0;i<n.length;i++)n[i].handler.call(this,e)},draw:function(){return this.drawScene(),this.drawHit(),this}}),y.Node.create=function(t,e){return this._createNode(JSON.parse(t),e)},y.Node._createNode=function(t,e){var i,n,a,r=y.Node.prototype.getClassName.call(t),s=t.children;if(e&&(t.attrs.container=e),i=new y[r](t.attrs),s)for(n=s.length,a=0;a<n;a++)i.add(this._createNode(s[a]));return i},y.Factory.addOverloadedGetterSetter(y.Node,"position"),y.Factory.addGetterSetter(y.Node,"x",0),y.Factory.addGetterSetter(y.Node,"y",0),y.Factory.addGetterSetter(y.Node,"opacity",1),y.Factory.addGetter(y.Node,"name"),y.Factory.addOverloadedGetterSetter(y.Node,"name"),y.Factory.addGetter(y.Node,"id"),y.Factory.addOverloadedGetterSetter(y.Node,"id"),y.Factory.addGetterSetter(y.Node,"rotation",0),y.Factory.addComponentsGetterSetter(y.Node,"scale",["x","y"]),y.Factory.addGetterSetter(y.Node,"scaleX",1),y.Factory.addGetterSetter(y.Node,"scaleY",1),y.Factory.addComponentsGetterSetter(y.Node,"skew",["x","y"]),y.Factory.addGetterSetter(y.Node,"skewX",0),y.Factory.addGetterSetter(y.Node,"skewY",0),y.Factory.addComponentsGetterSetter(y.Node,"offset",["x","y"]),y.Factory.addGetterSetter(y.Node,"offsetX",0),y.Factory.addGetterSetter(y.Node,"offsetY",0),y.Factory.addSetter(y.Node,"dragDistance"),y.Factory.addOverloadedGetterSetter(y.Node,"dragDistance"),y.Factory.addSetter(y.Node,"width",0),y.Factory.addOverloadedGetterSetter(y.Node,"width"),y.Factory.addSetter(y.Node,"height",0),y.Factory.addOverloadedGetterSetter(y.Node,"height"),y.Factory.addGetterSetter(y.Node,"listening","inherit"),y.Factory.addGetterSetter(y.Node,"filters",void 0,function(t){return this._filterUpToDate=!1,t}),y.Factory.addGetterSetter(y.Node,"visible","inherit"),y.Factory.addGetterSetter(y.Node,"transformsEnabled","all"),y.Factory.addOverloadedGetterSetter(y.Node,"size"),y.Factory.backCompat(y.Node,{rotateDeg:"rotate",setRotationDeg:"setRotation",getRotationDeg:"getRotation"}),y.Collection.mapMethods(y.Node),y.Filters.Grayscale=function(t){var e,i,n=t.data,a=n.length;for(e=0;e<a;e+=4)i=.34*n[e]+.5*n[e+1]+.16*n[e+2],n[e]=i,n[e+1]=i,n[e+2]=i},y.Filters.Brighten=function(t){var e,i=255*this.brightness(),n=t.data,a=n.length;for(e=0;e<a;e+=4)n[e]+=i,n[e+1]+=i,n[e+2]+=i},y.Factory.addGetterSetter(y.Node,"brightness",0,null,y.Factory.afterSetFilter),y.Filters.Invert=function(t){var e,i=t.data,n=i.length;for(e=0;e<n;e+=4)i[e]=255-i[e],i[e+1]=255-i[e+1],i[e+2]=255-i[e+2]},function(){function t(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}var e=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],i=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];y.Filters.Blur=function(n){var a=Math.round(this.blurRadius());a>0&&function(n,a){var r,s,o,h,c,l,d,u,f,g,p,v,m,y,_,S,C,x,w,b,F,k,T,P,A=n.data,M=n.width,D=n.height,G=a+a+1,L=M-1,R=D-1,I=a+1,N=I*(I+1)/2,O=new t,U=null,B=O,z=null,H=null,E=e[a],W=i[a];for(o=1;o<G;o++)B=B.next=new t,o==I&&(U=B);for(B.next=O,d=l=0,s=0;s<D;s++){for(S=C=x=w=u=f=g=p=0,v=I*(b=A[l]),m=I*(F=A[l+1]),y=I*(k=A[l+2]),_=I*(T=A[l+3]),u+=N*b,f+=N*F,g+=N*k,p+=N*T,B=O,o=0;o<I;o++)B.r=b,B.g=F,B.b=k,B.a=T,B=B.next;for(o=1;o<I;o++)h=l+((L<o?L:o)<<2),u+=(B.r=b=A[h])*(P=I-o),f+=(B.g=F=A[h+1])*P,g+=(B.b=k=A[h+2])*P,p+=(B.a=T=A[h+3])*P,S+=b,C+=F,x+=k,w+=T,B=B.next;for(z=O,H=U,r=0;r<M;r++)A[l+3]=T=p*E>>W,0!==T?(T=255/T,A[l]=(u*E>>W)*T,A[l+1]=(f*E>>W)*T,A[l+2]=(g*E>>W)*T):A[l]=A[l+1]=A[l+2]=0,u-=v,f-=m,g-=y,p-=_,v-=z.r,m-=z.g,y-=z.b,_-=z.a,h=d+((h=r+a+1)<L?h:L)<<2,u+=S+=z.r=A[h],f+=C+=z.g=A[h+1],g+=x+=z.b=A[h+2],p+=w+=z.a=A[h+3],z=z.next,v+=b=H.r,m+=F=H.g,y+=k=H.b,_+=T=H.a,S-=b,C-=F,x-=k,w-=T,H=H.next,l+=4;d+=M}for(r=0;r<M;r++){for(C=x=w=S=f=g=p=u=0,v=I*(b=A[l=r<<2]),m=I*(F=A[l+1]),y=I*(k=A[l+2]),_=I*(T=A[l+3]),u+=N*b,f+=N*F,g+=N*k,p+=N*T,B=O,o=0;o<I;o++)B.r=b,B.g=F,B.b=k,B.a=T,B=B.next;for(c=M,o=1;o<=a;o++)l=c+r<<2,u+=(B.r=b=A[l])*(P=I-o),f+=(B.g=F=A[l+1])*P,g+=(B.b=k=A[l+2])*P,p+=(B.a=T=A[l+3])*P,S+=b,C+=F,x+=k,w+=T,B=B.next,o<R&&(c+=M);for(l=r,z=O,H=U,s=0;s<D;s++)A[3+(h=l<<2)]=T=p*E>>W,T>0?(T=255/T,A[h]=(u*E>>W)*T,A[h+1]=(f*E>>W)*T,A[h+2]=(g*E>>W)*T):A[h]=A[h+1]=A[h+2]=0,u-=v,f-=m,g-=y,p-=_,v-=z.r,m-=z.g,y-=z.b,_-=z.a,h=r+((h=s+I)<R?h:R)*M<<2,u+=S+=z.r=A[h],f+=C+=z.g=A[h+1],g+=x+=z.b=A[h+2],p+=w+=z.a=A[h+3],z=z.next,v+=b=H.r,m+=F=H.g,y+=k=H.b,_+=T=H.a,S-=b,C-=F,x-=k,w-=T,H=H.next,l+=M}}(n,a)},y.Factory.addGetterSetter(y.Node,"blurRadius",0,null,y.Factory.afterSetFilter)}(),function(){function t(t,e,i){var n=4*(i*t.width+e),a=[];return a.push(t.data[n++],t.data[n++],t.data[n++],t.data[n++]),a}function e(t,e){return Math.sqrt(Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)+Math.pow(t[2]-e[2],2))}y.Filters.Mask=function(i){var n=function(i,n){var a=t(i,0,0),r=t(i,i.width-1,0),s=t(i,0,i.height-1),o=t(i,i.width-1,i.height-1),h=n||10;if(e(a,r)<h&&e(r,o)<h&&e(o,s)<h&&e(s,a)<h){for(var c=function(t){for(var e=[0,0,0],i=0;i<t.length;i++)e[0]+=t[i][0],e[1]+=t[i][1],e[2]+=t[i][2];return e[0]/=t.length,e[1]/=t.length,e[2]/=t.length,e}([r,a,o,s]),l=[],d=0;d<i.width*i.height;d++){var u=e(c,[i.data[4*d],i.data[4*d+1],i.data[4*d+2]]);l[d]=u<h?0:255}return l}}(i,this.threshold());return n&&function(t,e){for(var i=0;i<t.width*t.height;i++)t.data[4*i+3]=e[i]}(i,n=function(t,e,i){for(var n=[1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9],a=Math.round(Math.sqrt(n.length)),r=Math.floor(a/2),s=[],o=0;o<i;o++)for(var h=0;h<e;h++){for(var c=o*e+h,l=0,d=0;d<a;d++)for(var u=0;u<a;u++){var f=o+d-r,g=h+u-r;if(f>=0&&f<i&&g>=0&&g<e){var p=n[d*a+u];l+=t[f*e+g]*p}}s[c]=l}return s}(n=function(t,e,i){for(var n=[1,1,1,1,1,1,1,1,1],a=Math.round(Math.sqrt(n.length)),r=Math.floor(a/2),s=[],o=0;o<i;o++)for(var h=0;h<e;h++){for(var c=o*e+h,l=0,d=0;d<a;d++)for(var u=0;u<a;u++){var f=o+d-r,g=h+u-r;if(f>=0&&f<i&&g>=0&&g<e){var p=n[d*a+u];l+=t[f*e+g]*p}}s[c]=l>=1020?255:0}return s}(n=function(t,e,i){for(var n=[1,1,1,1,0,1,1,1,1],a=Math.round(Math.sqrt(n.length)),r=Math.floor(a/2),s=[],o=0;o<i;o++)for(var h=0;h<e;h++){for(var c=o*e+h,l=0,d=0;d<a;d++)for(var u=0;u<a;u++){var f=o+d-r,g=h+u-r;if(f>=0&&f<i&&g>=0&&g<e){var p=n[d*a+u];l+=t[f*e+g]*p}}s[c]=2040===l?255:0}return s}(n,i.width,i.height),i.width,i.height),i.width,i.height)),i},y.Factory.addGetterSetter(y.Node,"threshold",0,null,y.Factory.afterSetFilter)}(),y.Filters.RGB=function(t){var e,i,n=t.data,a=n.length,r=this.red(),s=this.green(),o=this.blue();for(e=0;e<a;e+=4)i=(.34*n[e]+.5*n[e+1]+.16*n[e+2])/255,n[e]=i*r,n[e+1]=i*s,n[e+2]=i*o,n[e+3]=n[e+3]},y.Factory.addGetterSetter(y.Node,"red",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),y.Factory.addGetterSetter(y.Node,"green",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),y.Factory.addGetterSetter(y.Node,"blue",0,y.Validators.RGBComponent,y.Factory.afterSetFilter),y.Filters.HSV=function(t){var e,i,n,a,r,s=t.data,o=s.length,h=Math.pow(2,this.value()),c=Math.pow(2,this.saturation()),l=Math.abs(this.hue()+360)%360,d=h*c*Math.cos(l*Math.PI/180),u=h*c*Math.sin(l*Math.PI/180),f=.299*h+.701*d+.167*u,g=.587*h-.587*d+.33*u,p=.114*h-.114*d-.497*u,v=.299*h-.299*d-.328*u,m=.587*h+.413*d+.035*u,y=.114*h-.114*d+.293*u,_=.299*h-.3*d+1.25*u,S=.587*h-.586*d-1.05*u,C=.114*h+.886*d-.2*u;for(e=0;e<o;e+=4)i=s[e+0],n=s[e+1],a=s[e+2],r=s[e+3],s[e+0]=f*i+g*n+p*a,s[e+1]=v*i+m*n+y*a,s[e+2]=_*i+S*n+C*a,s[e+3]=r},y.Factory.addGetterSetter(y.Node,"hue",0,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"saturation",0,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"value",0,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"hue",0,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"saturation",0,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"luminance",0,null,y.Factory.afterSetFilter),y.Filters.HSL=function(t){var e,i,n,a,r,s=t.data,o=s.length,h=Math.pow(2,this.saturation()),c=Math.abs(this.hue()+360)%360,l=127*this.luminance(),d=1*h*Math.cos(c*Math.PI/180),u=1*h*Math.sin(c*Math.PI/180),f=.299+.701*d+.167*u,g=.587-.587*d+.33*u,p=.114-.114*d-.497*u,v=.299-.299*d-.328*u,m=.587+.413*d+.035*u,y=.114-.114*d+.293*u,_=.299-.3*d+1.25*u,S=.587-.586*d-1.05*u,C=.114+.886*d-.2*u;for(e=0;e<o;e+=4)i=s[e+0],n=s[e+1],a=s[e+2],r=s[e+3],s[e+0]=f*i+g*n+p*a+l,s[e+1]=v*i+m*n+y*a+l,s[e+2]=_*i+S*n+C*a+l,s[e+3]=r},y.Filters.Emboss=function(t){var e=10*this.embossStrength(),i=255*this.embossWhiteLevel(),n=this.embossDirection(),a=this.embossBlend(),r=0,s=0,o=t.data,h=t.width,c=t.height,l=4*h,d=c;switch(n){case"top-left":r=-1,s=-1;break;case"top":r=-1,s=0;break;case"top-right":r=-1,s=1;break;case"right":r=0,s=1;break;case"bottom-right":r=1,s=1;break;case"bottom":r=1,s=0;break;case"bottom-left":r=1,s=-1;break;case"left":r=0,s=-1}do{var u=(d-1)*l,f=r;d+f<1&&(f=0),d+f>c&&(f=0);var g=(d-1+f)*h*4,p=h;do{var v=u+4*(p-1),m=s;p+m<1&&(m=0),p+m>h&&(m=0);var y=g+4*(p-1+m),_=o[v]-o[y],S=o[v+1]-o[y+1],C=o[v+2]-o[y+2],x=_,w=x>0?x:-x;if((S>0?S:-S)>w&&(x=S),(C>0?C:-C)>w&&(x=C),x*=e,a){var b=o[v]+x,F=o[v+1]+x,k=o[v+2]+x;o[v]=b>255?255:b<0?0:b,o[v+1]=F>255?255:F<0?0:F,o[v+2]=k>255?255:k<0?0:k}else{var T=i-x;T<0?T=0:T>255&&(T=255),o[v]=o[v+1]=o[v+2]=T}}while(--p)}while(--d)},y.Factory.addGetterSetter(y.Node,"embossStrength",.5,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"embossWhiteLevel",.5,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"embossDirection","top-left",null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"embossBlend",!1,null,y.Factory.afterSetFilter),function(){function t(t,e,i,n,a){var r=i-e,s=a-n;return 0===r?n+s/2:0===s?n:s*((t-e)/r)+n}y.Filters.Enhance=function(e){var i,n,a,r,s=e.data,o=s.length,h=s[0],c=h,l=s[1],d=l,u=s[2],f=u,g=this.enhance();if(0!==g){for(r=0;r<o;r+=4)(i=s[r+0])<h?h=i:i>c&&(c=i),(n=s[r+1])<l?l=n:n>d&&(d=n),(a=s[r+2])<u?u=a:a>f&&(f=a);var p,v,m,y,_,S,C,x,w;for(c===h&&(c=255,h=0),d===l&&(d=255,l=0),f===u&&(f=255,u=0),g>0?(v=c+g*(255-c),m=h-g*(h-0),_=d+g*(255-d),S=l-g*(l-0),x=f+g*(255-f),w=u-g*(u-0)):(v=c+g*(c-(p=.5*(c+h))),m=h+g*(h-p),_=d+g*(d-(y=.5*(d+l))),S=l+g*(l-y),x=f+g*(f-(C=.5*(f+u))),w=u+g*(u-C)),r=0;r<o;r+=4)s[r+0]=t(s[r+0],h,c,m,v),s[r+1]=t(s[r+1],l,d,S,_),s[r+2]=t(s[r+2],u,f,w,x)}},y.Factory.addGetterSetter(y.Node,"enhance",0,null,y.Factory.afterSetFilter)}(),y.Filters.Posterize=function(t){var e,i=Math.round(254*this.levels())+1,n=t.data,a=n.length,r=255/i;for(e=0;e<a;e+=1)n[e]=Math.floor(n[e]/r)*r},y.Factory.addGetterSetter(y.Node,"levels",.5,null,y.Factory.afterSetFilter),y.Filters.Noise=function(t){var e,i=255*this.noise(),n=t.data,a=n.length,r=i/2;for(e=0;e<a;e+=4)n[e+0]+=r-2*r*Math.random(),n[e+1]+=r-2*r*Math.random(),n[e+2]+=r-2*r*Math.random()},y.Factory.addGetterSetter(y.Node,"noise",.2,null,y.Factory.afterSetFilter),y.Filters.Pixelate=function(t){var e,i,n,a,r,s,o,h,c,l,d,u,f,g,p=Math.ceil(this.pixelSize()),v=t.width,m=t.height,y=Math.ceil(v/p),_=Math.ceil(m/p);for(t=t.data,u=0;u<y;u+=1)for(f=0;f<_;f+=1){for(a=0,r=0,s=0,o=0,c=(h=u*p)+p,d=(l=f*p)+p,g=0,e=h;e<c;e+=1)if(!(e>=v))for(i=l;i<d;i+=1)i>=m||(a+=t[0+(n=4*(v*i+e))],r+=t[n+1],s+=t[n+2],o+=t[n+3],g+=1);for(a/=g,r/=g,s/=g,e=h;e<c;e+=1)if(!(e>=v))for(i=l;i<d;i+=1)i>=m||(t[0+(n=4*(v*i+e))]=a,t[n+1]=r,t[n+2]=s,t[n+3]=o)}},y.Factory.addGetterSetter(y.Node,"pixelSize",8,null,y.Factory.afterSetFilter),y.Filters.Threshold=function(t){var e,i=255*this.threshold(),n=t.data,a=n.length;for(e=0;e<a;e+=1)n[e]=n[e]<i?0:255},y.Factory.addGetterSetter(y.Node,"threshold",.5,null,y.Factory.afterSetFilter),y.Filters.Sepia=function(t){var e,i,n,a,r,s,o,h,c,l=t.data,d=t.width,u=t.height,f=4*d;do{e=(u-1)*f,i=d;do{o=.393*(a=l[n=e+4*(i-1)])+.769*(r=l[n+1])+.189*(s=l[n+2]),h=.349*a+.686*r+.168*s,c=.272*a+.534*r+.131*s,l[n]=o>255?255:o,l[n+1]=h>255?255:h,l[n+2]=c>255?255:c,l[n+3]=l[n+3]}while(--i)}while(--u)},y.Filters.Solarize=function(t){var e=t.data,i=t.width,n=4*i,a=t.height;do{var r=(a-1)*n,s=i;do{var o=r+4*(s-1),h=e[o],c=e[o+1],l=e[o+2];h>127&&(h=255-h),c>127&&(c=255-c),l>127&&(l=255-l),e[o]=h,e[o+1]=c,e[o+2]=l}while(--s)}while(--a)},u=y.Util.createCanvasElement(),y.Filters.Kaleidoscope=function(t){var e,i,n,a,r,s,o,h,c,l=t.width,d=t.height,f=Math.round(this.kaleidoscopePower()),g=Math.round(this.kaleidoscopeAngle()),p=Math.floor(l*(g%360)/360);if(!(f<1)){u.width=l,u.height=d;var v=u.getContext("2d").getImageData(0,0,l,d);!function(t,e,i){var n,a,r,s,o=t.data,h=e.data,c=t.width,l=t.height,d=i.polarCenterX||c/2,u=i.polarCenterY||l/2,f=0,g=0,p=0,v=0,m=Math.sqrt(d*d+u*u);a=c-d,r=l-u,m=(s=Math.sqrt(a*a+r*r))>m?s:m;var y,_,S,C,x=l,w=c,b=360/w*Math.PI/180;for(_=0;_<w;_+=1)for(S=Math.sin(_*b),C=Math.cos(_*b),y=0;y<x;y+=1)a=Math.floor(d+m*y/x*C),f=o[0+(n=4*((r=Math.floor(u+m*y/x*S))*c+a))],g=o[n+1],p=o[n+2],v=o[n+3],h[0+(n=4*(_+y*c))]=f,h[n+1]=g,h[n+2]=p,h[n+3]=v}(t,v,{polarCenterX:l/2,polarCenterY:d/2});for(var m=l/Math.pow(2,f);m<=8;)m*=2,f-=1;var y=m=Math.ceil(m),_=0,S=y,C=1;for(p+m>l&&(_=y,S=0,C=-1),i=0;i<d;i+=1)for(e=_;e!==S;e+=C)h=4*(l*i+Math.round(e+p)%l),a=v.data[h+0],r=v.data[h+1],s=v.data[h+2],o=v.data[h+3],c=4*(l*i+e),v.data[c+0]=a,v.data[c+1]=r,v.data[c+2]=s,v.data[c+3]=o;for(i=0;i<d;i+=1)for(y=Math.floor(m),n=0;n<f;n+=1){for(e=0;e<y+1;e+=1)h=4*(l*i+e),a=v.data[h+0],r=v.data[h+1],s=v.data[h+2],o=v.data[h+3],c=4*(l*i+2*y-e-1),v.data[c+0]=a,v.data[c+1]=r,v.data[c+2]=s,v.data[c+3]=o;y*=2}!function(t,e,i){var n,a,r,s,o,h,c=t.data,l=e.data,d=t.width,u=t.height,f=i.polarCenterX||d/2,g=i.polarCenterY||u/2,p=0,v=0,m=0,y=0,_=Math.sqrt(f*f+g*g);a=d-f,r=u-g,_=(h=Math.sqrt(a*a+r*r))>_?h:_;var S,C,x,w=u,b=d,F=i.polarRotation||0;for(a=0;a<d;a+=1)for(r=0;r<u;r+=1)s=a-f,o=r-g,S=Math.sqrt(s*s+o*o)*w/_,C=(C=(180*Math.atan2(o,s)/Math.PI+360+F)%360)*b/360,x=Math.floor(C),p=c[0+(n=4*(Math.floor(S)*d+x))],v=c[n+1],m=c[n+2],y=c[n+3],l[0+(n=4*(r*d+a))]=p,l[n+1]=v,l[n+2]=m,l[n+3]=y}(v,t,{polarRotation:0})}},y.Factory.addGetterSetter(y.Node,"kaleidoscopePower",2,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"kaleidoscopeAngle",0,null,y.Factory.afterSetFilter),function(){var t=y.root.performance&&y.root.performance.now?function(){return y.root.performance.now()}:function(){return(new Date).getTime()},e=y.root.requestAnimationFrame||y.root.webkitRequestAnimationFrame||y.root.mozRequestAnimationFrame||y.root.oRequestAnimationFrame||y.root.msRequestAnimationFrame||i;function i(t){setTimeout(t,1e3/60)}y.Animation=function(e,i){var n=y.Animation;this.func=e,this.setLayers(i),this.id=n.animIdCounter++,this.frame={time:0,timeDiff:0,lastTime:t()}},y.Animation.prototype={setLayers:function(t){var e=[];e=t?t.length>0?t:[t]:[],this.layers=e},getLayers:function(){return this.layers},addLayer:function(t){var e,i,n=this.layers;if(n){for(e=n.length,i=0;i<e;i++)if(n[i]._id===t._id)return!1}else this.layers=[];return this.layers.push(t),!0},isRunning:function(){var t,e=y.Animation.animations,i=e.length;for(t=0;t<i;t++)if(e[t].id===this.id)return!0;return!1},start:function(){var e=y.Animation;this.stop(),this.frame.timeDiff=0,this.frame.lastTime=t(),e._addAnimation(this)},stop:function(){y.Animation._removeAnimation(this)},_updateFrameObject:function(t){this.frame.timeDiff=t-this.frame.lastTime,this.frame.lastTime=t,this.frame.time+=this.frame.timeDiff,this.frame.frameRate=1e3/this.frame.timeDiff}},y.Animation.animations=[],y.Animation.animIdCounter=0,y.Animation.animRunning=!1,y.Animation._addAnimation=function(t){this.animations.push(t),this._handleAnimation()},y.Animation._removeAnimation=function(t){var e,i=t.id,n=this.animations,a=n.length;for(e=0;e<a;e++)if(n[e].id===i){this.animations.splice(e,1);break}},y.Animation._runFrames=function(){var e,i,n,a,r,s,o,h,c={},l=this.animations;for(a=0;a<l.length;a++)if(i=(e=l[a]).layers,n=e.func,e._updateFrameObject(t()),s=i.length,!n||!1!==n.call(e,e.frame))for(r=0;r<s;r++)void 0!==(o=i[r])._id&&(c[o._id]=o);for(h in c)c[h].draw()},y.Animation._animationLoop=function(){var t=y.Animation;t.animations.length?(!function(){e.apply(y.root,arguments)}(t._animationLoop),t._runFrames()):t.animRunning=!1},y.Animation._handleAnimation=function(){this.animRunning||(this.animRunning=!0,this._animationLoop())};var n=y.Node.prototype.moveTo;y.Node.prototype.moveTo=function(t){n.call(this,t)},y.BaseLayer.prototype.batchDraw=function(){var e=this,i=y.Animation;this.batchAnim||(this.batchAnim=new i(function(){e.lastBatchDrawTime&&t()-e.lastBatchDrawTime>500&&e.batchAnim.stop()},this)),this.lastBatchDrawTime=t(),this.batchAnim.isRunning()||(this.draw(),this.batchAnim.start())},y.Stage.prototype.batchDraw=function(){this.getChildren().each(function(t){t.batchDraw()})}}(),function(){var t={node:1,duration:1,easing:1,onFinish:1,yoyo:1},e=0;y.Tween=function(n){var a,r,s=this,o=n.node,h=o._id,c=n.easing||y.Easings.Linear,l=!!n.yoyo;for(r in a=void 0===n.duration?1:0===n.duration?.001:n.duration,this.node=o,this._id=e++,this.anim=new y.Animation(function(){s.tween.onEnterFrame()},o.getLayer()||(o instanceof y.Stage?o.getLayers():null)),this.tween=new i(r,function(t){s._tweenFunc(t)},c,0,1,1e3*a,l),this._addListeners(),y.Tween.attrs[h]||(y.Tween.attrs[h]={}),y.Tween.attrs[h][this._id]||(y.Tween.attrs[h][this._id]={}),y.Tween.tweens[h]||(y.Tween.tweens[h]={}),n)void 0===t[r]&&this._addAttr(r,n[r]);this.reset(),this.onFinish=n.onFinish,this.onReset=n.onReset},y.Tween.attrs={},y.Tween.tweens={},y.Tween.prototype={_addAttr:function(t,e){var i,n,a,r,s,o=this.node,h=o._id;if((a=y.Tween.tweens[h][t])&&delete y.Tween.attrs[h][a][t],i=o.getAttr(t),y.Util._isArray(e))for(n=[],s=e.length,r=0;r<s;r++)n.push(e[r]-i[r]);else n=e-i;y.Tween.attrs[h][this._id][t]={start:i,diff:n},y.Tween.tweens[h][t]=this._id},_tweenFunc:function(t){var e,i,n,a,r,s,o,h=this.node,c=y.Tween.attrs[h._id][this._id];for(e in c){if(n=(i=c[e]).start,a=i.diff,y.Util._isArray(n))for(r=[],o=n.length,s=0;s<o;s++)r.push(n[s]+a[s]*t);else r=n+a*t;h.setAttr(e,r)}},_addListeners:function(){var t=this;this.tween.onPlay=function(){t.anim.start()},this.tween.onReverse=function(){t.anim.start()},this.tween.onPause=function(){t.anim.stop()},this.tween.onFinish=function(){t.onFinish&&t.onFinish()},this.tween.onReset=function(){t.onReset&&t.onReset()}},play:function(){return this.tween.play(),this},reverse:function(){return this.tween.reverse(),this},reset:function(){return this.tween.reset(),this},seek:function(t){return this.tween.seek(1e3*t),this},pause:function(){return this.tween.pause(),this},finish:function(){return this.tween.finish(),this},destroy:function(){var t,e=this.node._id,i=this._id,n=y.Tween.tweens[e];for(t in this.pause(),n)delete y.Tween.tweens[e][t];delete y.Tween.attrs[e][i]}};var i=function(t,e,i,n,a,r,s){this.prop=t,this.propFunc=e,this.begin=n,this._pos=n,this.duration=r,this._change=0,this.prevPos=0,this.yoyo=s,this._time=0,this._position=0,this._startTime=0,this._finish=0,this.func=i,this._change=a-this.begin,this.pause()};i.prototype={fire:function(t){var e=this[t];e&&e()},setTime:function(t){t>this.duration?this.yoyo?(this._time=this.duration,this.reverse()):this.finish():t<0?this.yoyo?(this._time=0,this.play()):this.reset():(this._time=t,this.update())},getTime:function(){return this._time},setPosition:function(t){this.prevPos=this._pos,this.propFunc(t),this._pos=t},getPosition:function(t){return void 0===t&&(t=this._time),this.func(t,this.begin,this._change,this.duration)},play:function(){this.state=2,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onPlay")},reverse:function(){this.state=3,this._time=this.duration-this._time,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onReverse")},seek:function(t){this.pause(),this._time=t,this.update(),this.fire("onSeek")},reset:function(){this.pause(),this._time=0,this.update(),this.fire("onReset")},finish:function(){this.pause(),this._time=this.duration,this.update(),this.fire("onFinish")},update:function(){this.setPosition(this.getPosition(this._time))},onEnterFrame:function(){var t=this.getTimer()-this._startTime;2===this.state?this.setTime(t):3===this.state&&this.setTime(this.duration-t)},pause:function(){this.state=1,this.fire("onPause")},getTimer:function(){return(new Date).getTime()}},y.Easings={BackEaseIn:function(t,e,i,n){var a=1.70158;return i*(t/=n)*t*((a+1)*t-a)+e},BackEaseOut:function(t,e,i,n){var a=1.70158;return i*((t=t/n-1)*t*((a+1)*t+a)+1)+e},BackEaseInOut:function(t,e,i,n){var a=1.70158;return(t/=n/2)<1?i/2*(t*t*((1+(a*=1.525))*t-a))+e:i/2*((t-=2)*t*((1+(a*=1.525))*t+a)+2)+e},ElasticEaseIn:function(t,e,i,n,a,r){var s=0;return 0===t?e:1==(t/=n)?e+i:(r||(r=.3*n),!a||a<Math.abs(i)?(a=i,s=r/4):s=r/(2*Math.PI)*Math.asin(i/a),-a*Math.pow(2,10*(t-=1))*Math.sin((t*n-s)*(2*Math.PI)/r)+e)},ElasticEaseOut:function(t,e,i,n,a,r){var s=0;return 0===t?e:1==(t/=n)?e+i:(r||(r=.3*n),!a||a<Math.abs(i)?(a=i,s=r/4):s=r/(2*Math.PI)*Math.asin(i/a),a*Math.pow(2,-10*t)*Math.sin((t*n-s)*(2*Math.PI)/r)+i+e)},ElasticEaseInOut:function(t,e,i,n,a,r){var s=0;return 0===t?e:2==(t/=n/2)?e+i:(r||(r=n*(.3*1.5)),!a||a<Math.abs(i)?(a=i,s=r/4):s=r/(2*Math.PI)*Math.asin(i/a),t<1?a*Math.pow(2,10*(t-=1))*Math.sin((t*n-s)*(2*Math.PI)/r)*-.5+e:a*Math.pow(2,-10*(t-=1))*Math.sin((t*n-s)*(2*Math.PI)/r)*.5+i+e)},BounceEaseOut:function(t,e,i,n){return(t/=n)<1/2.75?i*(7.5625*t*t)+e:t<2/2.75?i*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?i*(7.5625*(t-=2.25/2.75)*t+.9375)+e:i*(7.5625*(t-=2.625/2.75)*t+.984375)+e},BounceEaseIn:function(t,e,i,n){return i-y.Easings.BounceEaseOut(n-t,0,i,n)+e},BounceEaseInOut:function(t,e,i,n){return t<n/2?.5*y.Easings.BounceEaseIn(2*t,0,i,n)+e:.5*y.Easings.BounceEaseOut(2*t-n,0,i,n)+.5*i+e},EaseIn:function(t,e,i,n){return i*(t/=n)*t+e},EaseOut:function(t,e,i,n){return-i*(t/=n)*(t-2)+e},EaseInOut:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e},StrongEaseIn:function(t,e,i,n){return i*(t/=n)*t*t*t*t+e},StrongEaseOut:function(t,e,i,n){return i*((t=t/n-1)*t*t*t*t+1)+e},StrongEaseInOut:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t*t*t*t+e:i/2*((t-=2)*t*t*t*t+2)+e},Linear:function(t,e,i,n){return i*t/n+e}}}(),function(){y.DD={anim:new y.Animation(function(){var t=this.dirty;return this.dirty=!1,t}),isDragging:!1,justDragged:!1,offset:{x:0,y:0},node:null,_drag:function(t){var e=y.DD,i=e.node;if(i){if(!e.isDragging){var n=i.getStage().getPointerPosition(),a=i.dragDistance();if(Math.max(Math.abs(n.x-e.startPointerPos.x),Math.abs(n.y-e.startPointerPos.y))<a)return}i._setDragPosition(t),e.isDragging||(e.isDragging=!0,i.fire("dragstart",{type:"dragstart",target:i,evt:t},!0)),i.fire("dragmove",{type:"dragmove",target:i,evt:t},!0)}},_endDragBefore:function(t){var e,i=y.DD,n=i.node;n&&(n.nodeType,e=n.getLayer(),i.anim.stop(),i.isDragging&&(i.isDragging=!1,i.justDragged=!0,y.listenClickTap=!1,t&&(t.dragEndNode=n)),delete i.node,(e||n).draw())},_endDragAfter:function(t){var e=(t=t||{}).dragEndNode;t&&e&&e.fire("dragend",{type:"dragend",target:e,evt:t},!0)}},y.Node.prototype.startDrag=function(){var t=y.DD,e=this.getStage(),i=this.getLayer(),n=e.getPointerPosition(),a=this.getAbsolutePosition();n&&(t.node&&t.node.stopDrag(),t.node=this,t.startPointerPos=n,t.offset.x=n.x-a.x,t.offset.y=n.y-a.y,t.anim.setLayers(i||this.getLayers()),t.anim.start(),this._setDragPosition())},y.Node.prototype._setDragPosition=function(t){var e=y.DD,i=this.getStage().getPointerPosition(),n=this.getDragBoundFunc();if(i){var a={x:i.x-e.offset.x,y:i.y-e.offset.y};void 0!==n&&(a=n.call(this,a,t)),this.setAbsolutePosition(a),this._lastPos&&this._lastPos.x===a.x&&this._lastPos.y===a.y||(e.anim.dirty=!0),this._lastPos=a}},y.Node.prototype.stopDrag=function(){var t=y.DD,e={};t._endDragBefore(e),t._endDragAfter(e)},y.Node.prototype.setDraggable=function(t){this._setAttr("draggable",t),this._dragChange()};var t=y.Node.prototype.destroy;y.Node.prototype.destroy=function(){var e=y.DD;e.node&&e.node._id===this._id&&this.stopDrag(),t.call(this)},y.Node.prototype.isDragging=function(){var t=y.DD;return!(!t.node||t.node._id!==this._id||!t.isDragging)},y.Node.prototype._listenDrag=function(){var t=this;this._dragCleanup(),"Stage"===this.getClassName()?this.on("contentMousedown.kinetic contentTouchstart.kinetic",function(e){y.DD.node||t.startDrag(e)}):this.on("mousedown.kinetic touchstart.kinetic",function(e){1!==e.evt.button&&2!==e.evt.button&&(y.DD.node||t.startDrag(e))})},y.Node.prototype._dragChange=function(){if(this.attrs.draggable)this._listenDrag();else{this._dragCleanup();var t=this.getStage(),e=y.DD;t&&e.node&&e.node._id===this._id&&e.node.stopDrag()}},y.Node.prototype._dragCleanup=function(){"Stage"===this.getClassName()?(this.off("contentMousedown.kinetic"),this.off("contentTouchstart.kinetic")):(this.off("mousedown.kinetic"),this.off("touchstart.kinetic"))},y.Factory.addGetterSetter(y.Node,"dragBoundFunc"),y.Factory.addGetter(y.Node,"draggable",!1),y.Factory.addOverloadedGetterSetter(y.Node,"draggable");var e=y.document.documentElement;e.addEventListener("mouseup",y.DD._endDragBefore,!0),e.addEventListener("touchend",y.DD._endDragBefore,!0),e.addEventListener("mouseup",y.DD._endDragAfter,!1),e.addEventListener("touchend",y.DD._endDragAfter,!1)}(),y.Util.addMethods(y.Container,{__init:function(t){this.children=new y.Collection,y.Node.call(this,t)},getChildren:function(t){if(t){var e=new y.Collection;return this.children.each(function(i){t(i)&&e.push(i)}),e}return this.children},hasChildren:function(){return this.getChildren().length>0},removeChildren:function(){for(var t,e=y.Collection.toCollection(this.children),i=0;i<e.length;i++)delete(t=e[i]).parent,t.index=0,t.hasChildren()&&t.removeChildren(),t.remove();return e=null,this.children=new y.Collection,this},destroyChildren:function(){for(var t,e=y.Collection.toCollection(this.children),i=0;i<e.length;i++)delete(t=e[i]).parent,t.index=0,t.destroy();return e=null,this.children=new y.Collection,this},add:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}if(t.getParent())return t.moveTo(this),this;var i=this.children;return this._validateAdd(t),t.index=i.length,t.parent=this,i.push(t),this._fire("add",{child:t}),t.isDragging()&&y.DD.anim.setLayers(t.getLayer()),this},destroy:function(){this.hasChildren()&&this.destroyChildren(),y.Node.prototype.destroy.call(this)},find:function(t){var e,i,n,a,r,s,o,h=[],c=t.replace(/ /g,"").split(","),l=c.length;for(e=0;e<l;e++)if("#"===(n=c[e]).charAt(0))(r=this._getNodeById(n.slice(1)))&&h.push(r);else if("."===n.charAt(0))a=this._getNodesByName(n.slice(1)),h=h.concat(a);else for(o=(s=this.getChildren()).length,i=0;i<o;i++)h=h.concat(s[i]._get(n));return y.Collection.toCollection(h)},_getNodeById:function(t){var e=y.ids[t];return void 0!==e&&this.isAncestorOf(e)?e:null},_getNodesByName:function(t){var e=y.names[t]||[];return this._getDescendants(e)},_get:function(t){for(var e=y.Node.prototype._get.call(this,t),i=this.getChildren(),n=i.length,a=0;a<n;a++)e=e.concat(i[a]._get(t));return e},toObject:function(){var t=y.Node.prototype.toObject.call(this);t.children=[];for(var e=this.getChildren(),i=e.length,n=0;n<i;n++){var a=e[n];t.children.push(a.toObject())}return t},_getDescendants:function(t){for(var e=[],i=t.length,n=0;n<i;n++){var a=t[n];this.isAncestorOf(a)&&e.push(a)}return e},isAncestorOf:function(t){for(var e=t.getParent();e;){if(e._id===this._id)return!0;e=e.getParent()}return!1},clone:function(t){var e=y.Node.prototype.clone.call(this,t);return this.getChildren().each(function(t){e.add(t.clone())}),e},getAllIntersections:function(t){var e=[];return this.find("Shape").each(function(i){i.isVisible()&&i.intersects(t)&&e.push(i)}),e},_setChildrenIndices:function(){this.children.each(function(t,e){t.index=e})},drawScene:function(t,e){var i=this.getLayer(),n=t||i&&i.getCanvas(),a=n&&n.getContext(),r=this._cache.canvas,s=r&&r.scene;return this.isVisible()&&(s?this._drawCachedSceneCanvas(a):this._drawChildren(n,"drawScene",e)),this},drawHit:function(t,e){var i=this.getLayer(),n=t||i&&i.hitCanvas,a=n&&n.getContext(),r=this._cache.canvas,s=r&&r.hit;return this.shouldDrawHit(n)&&(i&&i.clearHitCache(),s?this._drawCachedHitCanvas(a):this._drawChildren(n,"drawHit",e)),this},_drawChildren:function(t,e,i){var n,a,r=this.getLayer(),s=t&&t.getContext(),o=this.getClipWidth(),h=this.getClipHeight(),c=o&&h;c&&r&&(n=this.getClipX(),a=this.getClipY(),s.save(),r._applyTransform(this,s),s.beginPath(),s.rect(n,a,o,h),s.clip(),s.reset()),this.children.each(function(n){n[e](t,i)}),c&&s.restore()},shouldDrawHit:function(t){var e=this.getLayer(),i=y.DD&&y.isDragging()&&-1!==y.DD.anim.getLayers().indexOf(e);return t&&t.isCache||e&&e.hitGraphEnabled()&&this.isVisible()&&!i}}),y.Util.extend(y.Container,y.Node),y.Container.prototype.get=y.Container.prototype.find,y.Factory.addComponentsGetterSetter(y.Container,"clip",["x","y","width","height"]),y.Factory.addGetterSetter(y.Container,"clipX"),y.Factory.addGetterSetter(y.Container,"clipY"),y.Factory.addGetterSetter(y.Container,"clipWidth"),y.Factory.addGetterSetter(y.Container,"clipHeight"),y.Collection.mapMethods(y.Container),function(){var t="hasShadow";function e(t){t.fill()}function i(t){t.stroke()}function n(t){t.fill()}function a(t){t.stroke()}function r(){this._clearCache(t)}y.Util.addMethods(y.Shape,{__init:function(t){this.nodeType="Shape",this._fillFunc=e,this._strokeFunc=i,this._fillFuncHit=n,this._strokeFuncHit=a;for(var s,o=y.shapes;!(s=y.Util.getRandomColor())||s in o;);this.colorKey=s,o[s]=this,y.Node.call(this,t),this.on("shadowColorChange.kinetic shadowBlurChange.kinetic shadowOffsetChange.kinetic shadowOpacityChange.kinetic shadowEnabledChange.kinetic",r)},hasChildren:function(){return!1},getChildren:function(){return[]},getContext:function(){return this.getLayer().getContext()},getCanvas:function(){return this.getLayer().getCanvas()},hasShadow:function(){return this._getCache(t,this._hasShadow)},_hasShadow:function(){return this.getShadowEnabled()&&0!==this.getShadowOpacity()&&!!(this.getShadowColor()||this.getShadowBlur()||this.getShadowOffsetX()||this.getShadowOffsetY())},hasFill:function(){return!!(this.getFill()||this.getFillPatternImage()||this.getFillLinearGradientColorStops()||this.getFillRadialGradientColorStops())},hasStroke:function(){return!!(this.stroke()||this.strokeRed()||this.strokeGreen()||this.strokeBlue())},intersects:function(t){var e=this.getStage().bufferHitCanvas;return e.getContext().clear(),this.drawScene(e),e.context.getImageData(Math.round(t.x),Math.round(t.y),1,1).data[3]>0},destroy:function(){y.Node.prototype.destroy.call(this),delete y.shapes[this.colorKey]},_useBufferCanvas:function(){return(this.hasShadow()||1!==this.getAbsoluteOpacity())&&this.hasFill()&&this.hasStroke()&&this.getStage()},drawScene:function(t,e){var i,n,a=this.getLayer(),r=t||a.getCanvas(),s=r.getContext(),o=this._cache.canvas,h=this.sceneFunc(),c=this.hasShadow();if(this.isVisible())if(o)this._drawCachedSceneCanvas(s);else if(h){if(s.save(),this._useBufferCanvas()){if((n=(i=this.getStage().bufferCanvas).getContext()).clear(),n.save(),n._applyLineJoin(this),a)a._applyTransform(this,n,e);else{var l=this.getAbsoluteTransform(e).getMatrix();s.transform(l[0],l[1],l[2],l[3],l[4],l[5])}h.call(this,n),n.restore(),c&&!r.hitCanvas&&(s.save(),s._applyShadow(this),s.drawImage(i._canvas,0,0),s.restore()),s._applyOpacity(this),s.drawImage(i._canvas,0,0)}else{if(s._applyLineJoin(this),a)a._applyTransform(this,s,e);else{var d=this.getAbsoluteTransform(e).getMatrix();s.transform(d[0],d[1],d[2],d[3],d[4],d[5])}c&&!r.hitCanvas&&(s.save(),s._applyShadow(this),h.call(this,s),s.restore()),s._applyOpacity(this),h.call(this,s)}s.restore()}return this},drawHit:function(t,e){var i=this.getLayer(),n=t||i.hitCanvas,a=n.getContext(),r=this.hitFunc()||this.sceneFunc(),s=this._cache.canvas,o=s&&s.hit;if(this.shouldDrawHit(n))if(i&&i.clearHitCache(),o)this._drawCachedHitCanvas(a);else if(r){if(a.save(),a._applyLineJoin(this),i)i._applyTransform(this,a,e);else{var h=this.getAbsoluteTransform(e).getMatrix();a.transform(h[0],h[1],h[2],h[3],h[4],h[5])}r.call(this,a),a.restore()}return this},drawHitFromCache:function(t){var e,i,n,a,r,s,o=t||0,h=this._cache.canvas,c=this._getCachedSceneCanvas(),l=c.getContext(),d=h.hit.getContext(),u=c.getWidth(),f=c.getHeight();d.clear();try{for(e=l.getImageData(0,0,u,f).data,n=(i=d.getImageData(0,0,u,f)).data,a=e.length,r=y.Util._hexToRgb(this.colorKey),s=0;s<a;s+=4)e[s+3]>o&&(n[s]=r.r,n[s+1]=r.g,n[s+2]=r.b,n[s+3]=255);d.putImageData(i,0,0)}catch(t){y.Util.warn("Unable to draw hit graph from cached scene canvas. "+t.message)}return this}}),y.Util.extend(y.Shape,y.Node),y.Factory.addGetterSetter(y.Shape,"stroke"),y.Factory.addGetterSetter(y.Shape,"strokeRed",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"strokeGreen",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"strokeBlue",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"strokeAlpha",1,y.Validators.alphaComponent),y.Factory.addGetterSetter(y.Shape,"strokeWidth",2),y.Factory.addGetterSetter(y.Shape,"lineJoin"),y.Factory.addGetterSetter(y.Shape,"lineCap"),y.Factory.addGetterSetter(y.Shape,"sceneFunc"),y.Factory.addGetterSetter(y.Shape,"hitFunc"),y.Factory.addGetterSetter(y.Shape,"dash"),y.Factory.addGetterSetter(y.Shape,"shadowColor"),y.Factory.addGetterSetter(y.Shape,"shadowRed",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"shadowGreen",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"shadowBlue",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"shadowAlpha",1,y.Validators.alphaComponent),y.Factory.addGetterSetter(y.Shape,"shadowBlur"),y.Factory.addGetterSetter(y.Shape,"shadowOpacity"),y.Factory.addComponentsGetterSetter(y.Shape,"shadowOffset",["x","y"]),y.Factory.addGetterSetter(y.Shape,"shadowOffsetX",0),y.Factory.addGetterSetter(y.Shape,"shadowOffsetY",0),y.Factory.addGetterSetter(y.Shape,"fillPatternImage"),y.Factory.addGetterSetter(y.Shape,"fill"),y.Factory.addGetterSetter(y.Shape,"fillRed",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"fillGreen",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"fillBlue",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"fillAlpha",1,y.Validators.alphaComponent),y.Factory.addGetterSetter(y.Shape,"fillPatternX",0),y.Factory.addGetterSetter(y.Shape,"fillPatternY",0),y.Factory.addGetterSetter(y.Shape,"fillLinearGradientColorStops"),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientStartRadius",0),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientEndRadius",0),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientColorStops"),y.Factory.addGetterSetter(y.Shape,"fillPatternRepeat","repeat"),y.Factory.addGetterSetter(y.Shape,"fillEnabled",!0),y.Factory.addGetterSetter(y.Shape,"strokeEnabled",!0),y.Factory.addGetterSetter(y.Shape,"shadowEnabled",!0),y.Factory.addGetterSetter(y.Shape,"dashEnabled",!0),y.Factory.addGetterSetter(y.Shape,"strokeScaleEnabled",!0),y.Factory.addGetterSetter(y.Shape,"fillPriority","color"),y.Factory.addComponentsGetterSetter(y.Shape,"fillPatternOffset",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillPatternOffsetX",0),y.Factory.addGetterSetter(y.Shape,"fillPatternOffsetY",0),y.Factory.addComponentsGetterSetter(y.Shape,"fillPatternScale",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillPatternScaleX",1),y.Factory.addGetterSetter(y.Shape,"fillPatternScaleY",1),y.Factory.addComponentsGetterSetter(y.Shape,"fillLinearGradientStartPoint",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillLinearGradientStartPointX",0),y.Factory.addGetterSetter(y.Shape,"fillLinearGradientStartPointY",0),y.Factory.addComponentsGetterSetter(y.Shape,"fillLinearGradientEndPoint",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillLinearGradientEndPointX",0),y.Factory.addGetterSetter(y.Shape,"fillLinearGradientEndPointY",0),y.Factory.addComponentsGetterSetter(y.Shape,"fillRadialGradientStartPoint",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientStartPointX",0),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientStartPointY",0),y.Factory.addComponentsGetterSetter(y.Shape,"fillRadialGradientEndPoint",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientEndPointX",0),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientEndPointY",0),y.Factory.addGetterSetter(y.Shape,"fillPatternRotation",0),y.Factory.backCompat(y.Shape,{dashArray:"dash",getDashArray:"getDash",setDashArray:"getDash",drawFunc:"sceneFunc",getDrawFunc:"getSceneFunc",setDrawFunc:"setSceneFunc",drawHitFunc:"hitFunc",getDrawHitFunc:"getHitFunc",setDrawHitFunc:"setHitFunc"}),y.Collection.mapMethods(y.Shape)}(),function(){var t="_",e=["mousedown","mousemove","mouseup","mouseout","touchstart","touchmove","touchend","mouseover","DOMMouseScroll","mousewheel","wheel"],i=e.length;function n(e,i){e.content.addEventListener(i,function(n){e[t+i](n)},!1)}y.Util.addMethods(y.Stage,{___init:function(t){this.nodeType="Stage",y.Container.call(this,t),this._id=y.idCounter++,this._buildDOM(),this._bindContentEvents(),this._enableNestedTransforms=!1,y.stages.push(this)},_validateAdd:function(t){"Layer"!==t.getType()&&y.Util.error("You may only add layers to the stage.")},setContainer:function(t){if("string"==typeof t){var e=t;if(!(t=y.document.getElementById(t)))throw"Can not find container in document with id "+e}return this._setAttr("container",t),this},shouldDrawHit:function(){return!0},draw:function(){return y.Node.prototype.draw.call(this),this},setHeight:function(t){return y.Node.prototype.setHeight.call(this,t),this._resizeDOM(),this},setWidth:function(t){return y.Node.prototype.setWidth.call(this,t),this._resizeDOM(),this},clear:function(){var t,e=this.children,i=e.length;for(t=0;t<i;t++)e[t].clear();return this},clone:function(t){return t||(t={}),t.container=y.document.createElement("div"),y.Container.prototype.clone.call(this,t)},destroy:function(){var t=this.content;y.Container.prototype.destroy.call(this),t&&y.Util._isInDocument(t)&&this.getContainer().removeChild(t);var e=y.stages.indexOf(this);e>-1&&y.stages.splice(e,1)},getPointerPosition:function(){return this.pointerPos},getStage:function(){return this},getContent:function(){return this.content},toDataURL:function(t){var e=(t=t||{}).mimeType||null,i=t.quality||null,n=t.x||0,a=t.y||0,r=new y.SceneCanvas({width:t.width||this.getWidth(),height:t.height||this.getHeight(),pixelRatio:1}),s=r.getContext()._context,o=this.children;(n||a)&&s.translate(-1*n,-1*a),function n(a){var h=o[a].toDataURL(),c=new y.window.Image;c.onload=function(){s.drawImage(c,0,0),a<o.length-1?n(a+1):t.callback(r.toDataURL(e,i))},c.src=h}(0)},toImage:function(t){var e=t.callback;t.callback=function(t){y.Util._getImage(t,function(t){e(t)})},this.toDataURL(t)},getIntersection:function(t){var e,i,n=this.getChildren();for(e=n.length-1;e>=0;e--)if(i=n[e].getIntersection(t))return i;return null},_resizeDOM:function(){if(this.content){var t,e,i=this.getWidth(),n=this.getHeight(),a=this.getChildren(),r=a.length;for(this.content.style.width=i+"px",this.content.style.height=n+"px",this.bufferCanvas.setSize(i,n),this.bufferHitCanvas.setSize(i,n),t=0;t<r;t++)(e=a[t]).setSize(i,n),e.draw()}},add:function(t){if(!(arguments.length>1))return y.Container.prototype.add.call(this,t),t._setCanvasSize(this.width(),this.height()),t.draw(),this.content.appendChild(t.canvas._canvas),this;for(var e=0;e<arguments.length;e++)this.add(arguments[e])},getParent:function(){return null},getLayer:function(){return null},getLayers:function(){return this.getChildren()},_bindContentEvents:function(){for(var t=0;t<i;t++)n(this,e[t])},_mouseover:function(t){y.UA.mobile||(this._setPointerPosition(t),this._fire("contentMouseover",{evt:t}))},_mouseout:function(t){if(!y.UA.mobile){this._setPointerPosition(t);var e=this.targetShape;e&&!y.isDragging()&&(e._fireAndBubble("mouseout",{evt:t}),e._fireAndBubble("mouseleave",{evt:t}),this.targetShape=null),this.pointerPos=void 0,this._fire("contentMouseout",{evt:t})}},_mousemove:function(t){if(y.UA.ieMobile)return this._touchmove(t);if((void 0===t.webkitMovementX&&void 0===t.webkitMovementY||0!==t.webkitMovementY||0!==t.webkitMovementX)&&!y.UA.mobile){this._setPointerPosition(t);var e,i=y.DD;y.isDragging()||((e=this.getIntersection(this.getPointerPosition()))&&e.isListening()?y.isDragging()||this.targetShape&&this.targetShape._id===e._id?e._fireAndBubble("mousemove",{evt:t}):(this.targetShape&&(this.targetShape._fireAndBubble("mouseout",{evt:t},e),this.targetShape._fireAndBubble("mouseleave",{evt:t},e)),e._fireAndBubble("mouseover",{evt:t},this.targetShape),e._fireAndBubble("mouseenter",{evt:t},this.targetShape),this.targetShape=e):this.targetShape&&!y.isDragging()&&(this.targetShape._fireAndBubble("mouseout",{evt:t}),this.targetShape._fireAndBubble("mouseleave",{evt:t}),this.targetShape=null),this._fire("contentMousemove",{evt:t})),i&&i._drag(t),t.preventDefault&&t.preventDefault()}},_mousedown:function(t){if(y.UA.ieMobile)return this._touchstart(t);if(!y.UA.mobile){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());y.listenClickTap=!0,e&&e.isListening()&&(this.clickStartShape=e,e._fireAndBubble("mousedown",{evt:t})),this._fire("contentMousedown",{evt:t})}t.preventDefault&&t.preventDefault()},_mouseup:function(t){if(y.UA.ieMobile)return this._touchend(t);if(!y.UA.mobile){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition()),i=this.clickStartShape,n=!1,a=y.DD;y.inDblClickWindow?(n=!0,y.inDblClickWindow=!1):a&&a.justDragged?a&&(a.justDragged=!1):y.inDblClickWindow=!0,setTimeout(function(){y.inDblClickWindow=!1},y.dblClickWindow),e&&e.isListening()&&(e._fireAndBubble("mouseup",{evt:t}),y.listenClickTap&&i&&i._id===e._id&&(e._fireAndBubble("click",{evt:t}),n&&e._fireAndBubble("dblclick",{evt:t}))),this._fire("contentMouseup",{evt:t}),y.listenClickTap&&(this._fire("contentClick",{evt:t}),n&&this._fire("contentDblclick",{evt:t})),y.listenClickTap=!1}t.preventDefault&&t.preventDefault()},_touchstart:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());y.listenClickTap=!0,e&&e.isListening()&&(this.tapStartShape=e,e._fireAndBubble("touchstart",{evt:t}),e.isListening()&&t.preventDefault&&t.preventDefault()),this._fire("contentTouchstart",{evt:t})},_touchend:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition()),i=!1;y.inDblClickWindow?(i=!0,y.inDblClickWindow=!1):y.inDblClickWindow=!0,setTimeout(function(){y.inDblClickWindow=!1},y.dblClickWindow),e&&e.isListening()&&(e._fireAndBubble("touchend",{evt:t}),y.listenClickTap&&e._id===this.tapStartShape._id&&(e._fireAndBubble("tap",{evt:t}),i&&e._fireAndBubble("dbltap",{evt:t})),e.isListening()&&t.preventDefault&&t.preventDefault()),y.listenClickTap&&(this._fire("contentTouchend",{evt:t}),i&&this._fire("contentDbltap",{evt:t})),y.listenClickTap=!1},_touchmove:function(t){this._setPointerPosition(t);var e,i=y.DD;y.isDragging()||((e=this.getIntersection(this.getPointerPosition()))&&e.isListening()&&(e._fireAndBubble("touchmove",{evt:t}),e.isListening()&&t.preventDefault&&t.preventDefault()),this._fire("contentTouchmove",{evt:t})),i&&(i._drag(t),y.isDragging()&&t.preventDefault())},_DOMMouseScroll:function(t){this._mousewheel(t)},_mousewheel:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()&&e._fireAndBubble("mousewheel",{evt:t})},_wheel:function(t){this._mousewheel(t)},_setPointerPosition:function(t){var e,i=this._getContentPosition(),n=t.offsetX,a=t.clientX,r=null,s=null;void 0!==(t=t||window.event).touches?t.touches.length>0&&(r=(e=t.touches[0]).clientX-i.left,s=e.clientY-i.top):void 0!==n?(r=n,s=t.offsetY):"mozilla"===y.UA.browser?(r=t.layerX,s=t.layerY):void 0!==a&&i&&(r=a-i.left,s=t.clientY-i.top),null!==r&&null!==s&&(this.pointerPos={x:r,y:s})},_getContentPosition:function(){var t=this.content.getBoundingClientRect?this.content.getBoundingClientRect():{top:0,left:0};return{top:t.top,left:t.left}},_buildDOM:function(){var t=this.getContainer();if(!t){if(y.Util.isBrowser())throw"Stage has no container. A container is required.";t=y.document.createElement("div")}t.innerHTML="",this.content=y.document.createElement("div"),this.content.style.position="relative",this.content.style.display="inline-block",this.content.className="kineticjs-content",this.content.setAttribute("role","presentation"),t.appendChild(this.content),this.bufferCanvas=new y.SceneCanvas({pixelRatio:1}),this.bufferHitCanvas=new y.HitCanvas,this._resizeDOM()},_onContent:function(t,e){var i,n,a=t.split(" "),r=a.length;for(i=0;i<r;i++)n=a[i],this.content.addEventListener(n,e,!1)},cache:function(){y.Util.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes.")},clearCache:function(){}}),y.Util.extend(y.Stage,y.Container),y.Factory.addGetter(y.Stage,"container"),y.Factory.addOverloadedGetterSetter(y.Stage,"container")}(),y.Util.addMethods(y.BaseLayer,{___init:function(t){this.nodeType="Layer",y.Container.call(this,t)},createPNGStream:function(){return this.canvas._canvas.createPNGStream()},getCanvas:function(){return this.canvas},getHitCanvas:function(){return this.hitCanvas},getContext:function(){return this.getCanvas().getContext()},clear:function(t){return this.getContext().clear(t),this.getHitCanvas().getContext().clear(t),this},clearHitCache:function(){this._hitImageData=void 0},setZIndex:function(t){y.Node.prototype.setZIndex.call(this,t);var e=this.getStage();return e&&(e.content.removeChild(this.getCanvas()._canvas),t<e.getChildren().length-1?e.content.insertBefore(this.getCanvas()._canvas,e.getChildren()[t+1].getCanvas()._canvas):e.content.appendChild(this.getCanvas()._canvas)),this},moveToTop:function(){y.Node.prototype.moveToTop.call(this);var t=this.getStage();t&&(t.content.removeChild(this.getCanvas()._canvas),t.content.appendChild(this.getCanvas()._canvas))},moveUp:function(){if(y.Node.prototype.moveUp.call(this)){var t=this.getStage();t&&(t.content.removeChild(this.getCanvas()._canvas),this.index<t.getChildren().length-1?t.content.insertBefore(this.getCanvas()._canvas,t.getChildren()[this.index+1].getCanvas()._canvas):t.content.appendChild(this.getCanvas()._canvas))}},moveDown:function(){if(y.Node.prototype.moveDown.call(this)){var t=this.getStage();if(t){var e=t.getChildren();t.content.removeChild(this.getCanvas()._canvas),t.content.insertBefore(this.getCanvas()._canvas,e[this.index+1].getCanvas()._canvas)}}},moveToBottom:function(){if(y.Node.prototype.moveToBottom.call(this)){var t=this.getStage();if(t){var e=t.getChildren();t.content.removeChild(this.getCanvas()._canvas),t.content.insertBefore(this.getCanvas()._canvas,e[1].getCanvas()._canvas)}}},getLayer:function(){return this},remove:function(){var t=this.getCanvas()._canvas;return y.Node.prototype.remove.call(this),t&&t.parentNode&&y.Util._isInDocument(t)&&t.parentNode.removeChild(t),this},getStage:function(){return this.parent},setSize:function(t,e){this.canvas.setSize(t,e)},getWidth:function(){if(this.parent)return this.parent.getWidth()},setWidth:function(){y.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.')},getHeight:function(){if(this.parent)return this.parent.getHeight()},setHeight:function(){y.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.')}}),y.Util.extend(y.BaseLayer,y.Container),y.Factory.addGetterSetter(y.BaseLayer,"clearBeforeDraw",!0),y.Collection.mapMethods(y.BaseLayer),g=(f=[{x:0,y:0},{x:-1,y:0},{x:-1,y:-1},{x:0,y:-1},{x:1,y:-1},{x:1,y:0},{x:1,y:1},{x:0,y:1},{x:-1,y:1}]).length,y.Util.addMethods(y.Layer,{____init:function(t){this.nodeType="Layer",this.canvas=new y.SceneCanvas,this.hitCanvas=new y.HitCanvas,y.BaseLayer.call(this,t)},_setCanvasSize:function(t,e){this.canvas.setSize(t,e),this.hitCanvas.setSize(t,e)},_validateAdd:function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&y.Util.error("You may only add groups and shapes to a layer.")},getIntersection:function(t){var e,i,n,a;if(!this.hitGraphEnabled()||!this.isVisible())return null;for(var r=1,s=!1;;){for(i=0;i<g;i++){if(n=f[i],a=(e=this._getIntersection({x:t.x+n.x*r,y:t.y+n.y*r})).shape)return a;e.antialiased&&(s=!0)}if(!s)return;r+=1}},_getImageData:function(t,e){var i=this.hitCanvas.width||1,n=this.hitCanvas.height||1,a=Math.round(e)*i+Math.round(t);return this._hitImageData||(this._hitImageData=this.hitCanvas.context.getImageData(0,0,i,n)),[this._hitImageData.data[4*a+0],this._hitImageData.data[4*a+1],this._hitImageData.data[4*a+2],this._hitImageData.data[4*a+3]]},_getIntersection:function(t){var e,i=this.hitCanvas.context.getImageData(t.x,t.y,1,1).data,n=i[3];return 255===n?(e=y.Util._rgbToHex(i[0],i[1],i[2]),{shape:y.shapes["#"+e]}):n>0?{antialiased:!0}:{}},drawScene:function(t,e){var i=this.getLayer(),n=t||i&&i.getCanvas();return this._fire("beforeDraw",{node:this}),this.getClearBeforeDraw()&&n.getContext().clear(),y.Container.prototype.drawScene.call(this,n,e),this._fire("draw",{node:this}),this},_applyTransform:function(t,e,i){var n=t.getAbsoluteTransform(i).getMatrix();e.transform(n[0],n[1],n[2],n[3],n[4],n[5])},drawHit:function(t,e){var i=this.getLayer(),n=t||i&&i.hitCanvas;return i&&i.getClearBeforeDraw()&&i.getHitCanvas().getContext().clear(),y.Container.prototype.drawHit.call(this,n,e),this.imageData=null,this},clear:function(t){return this.getContext().clear(t),this.getHitCanvas().getContext().clear(t),this.imageData=null,this},setVisible:function(t){return y.Node.prototype.setVisible.call(this,t),t?(this.getCanvas()._canvas.style.display="block",this.hitCanvas._canvas.style.display="block"):(this.getCanvas()._canvas.style.display="none",this.hitCanvas._canvas.style.display="none"),this},enableHitGraph:function(){return this.setHitGraphEnabled(!0),this},disableHitGraph:function(){return this.setHitGraphEnabled(!1),this},setSize:function(t,e){y.BaseLayer.prototype.setSize.call(this,t,e),this.hitCanvas.setSize(t,e)}}),y.Util.extend(y.Layer,y.BaseLayer),y.Factory.addGetterSetter(y.Layer,"hitGraphEnabled",!0),y.Collection.mapMethods(y.Layer),y.Util.addMethods(y.FastLayer,{____init:function(t){this.nodeType="Layer",this.canvas=new y.SceneCanvas,y.BaseLayer.call(this,t)},_validateAdd:function(t){"Shape"!==t.getType()&&y.Util.error("You may only add shapes to a fast layer.")},_setCanvasSize:function(t,e){this.canvas.setSize(t,e)},hitGraphEnabled:function(){return!1},getIntersection:function(){return null},drawScene:function(t){var e=this.getLayer(),i=t||e&&e.getCanvas();return this.getClearBeforeDraw()&&i.getContext().clear(),y.Container.prototype.drawScene.call(this,i),this},_applyTransform:function(t,e,i){if(!i||i._id!==this._id){var n=t.getTransform().getMatrix();e.transform(n[0],n[1],n[2],n[3],n[4],n[5])}},draw:function(){return this.drawScene(),this},clear:function(t){return this.getContext().clear(t),this},setVisible:function(t){return y.Node.prototype.setVisible.call(this,t),this.getCanvas()._canvas.style.display=t?"block":"none",this}}),y.Util.extend(y.FastLayer,y.BaseLayer),y.Collection.mapMethods(y.FastLayer),y.Util.addMethods(y.Group,{___init:function(t){this.nodeType="Group",y.Container.call(this,t)},_validateAdd:function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&y.Util.error("You may only add groups and shapes to groups.")}}),y.Util.extend(y.Group,y.Container),y.Collection.mapMethods(y.Group),y.Rect=function(t){this.___init(t)},y.Rect.prototype={___init:function(t){y.Shape.call(this,t),this.className="Rect",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.getCornerRadius(),i=this.getWidth(),n=this.getHeight();t.beginPath(),e?(t.moveTo(e,0),t.lineTo(i-e,0),t.arc(i-e,e,e,3*Math.PI/2,0,!1),t.lineTo(i,n-e),t.arc(i-e,n-e,e,0,Math.PI/2,!1),t.lineTo(e,n),t.arc(e,n-e,e,Math.PI/2,Math.PI,!1),t.lineTo(0,e),t.arc(e,e,e,Math.PI,3*Math.PI/2,!1)):t.rect(0,0,i,n),t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.Rect,y.Shape),y.Factory.addGetterSetter(y.Rect,"cornerRadius",0),y.Collection.mapMethods(y.Rect),p=2*Math.PI-1e-4,y.Circle=function(t){this.___init(t)},y.Circle.prototype={___init:function(t){y.Shape.call(this,t),this.className="Circle",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){t.beginPath(),t.arc(0,0,this.getRadius(),0,p,!1),t.closePath(),t.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadius()},getHeight:function(){return 2*this.getRadius()},setWidth:function(t){y.Node.prototype.setWidth.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)},setHeight:function(t){y.Node.prototype.setHeight.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)},setRadius:function(t){this._setAttr("radius",t),this.setWidth(2*t),this.setHeight(2*t)}},y.Util.extend(y.Circle,y.Shape),y.Factory.addGetter(y.Circle,"radius",0),y.Factory.addOverloadedGetterSetter(y.Circle,"radius"),y.Collection.mapMethods(y.Circle),function(){var t=2*Math.PI-1e-4;y.Ellipse=function(t){this.___init(t)},y.Ellipse.prototype={___init:function(t){y.Shape.call(this,t),this.className="Ellipse",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(e){var i=this.getRadiusX(),n=this.getRadiusY();e.beginPath(),e.save(),i!==n&&e.scale(1,n/i),e.arc(0,0,i,0,t,!1),e.restore(),e.closePath(),e.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadiusX()},getHeight:function(){return 2*this.getRadiusY()},setWidth:function(t){y.Node.prototype.setWidth.call(this,t),this.setRadius({x:t/2})},setHeight:function(t){y.Node.prototype.setHeight.call(this,t),this.setRadius({y:t/2})}},y.Util.extend(y.Ellipse,y.Shape),y.Factory.addComponentsGetterSetter(y.Ellipse,"radius",["x","y"]),y.Factory.addGetterSetter(y.Ellipse,"radiusX",0),y.Factory.addGetterSetter(y.Ellipse,"radiusY",0),y.Collection.mapMethods(y.Ellipse)}(),function(){var t=2*Math.PI-1e-4;y.Ring=function(t){this.___init(t)},y.Ring.prototype={___init:function(t){y.Shape.call(this,t),this.className="Ring",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(e){e.beginPath(),e.arc(0,0,this.getInnerRadius(),0,t,!1),e.moveTo(this.getOuterRadius(),0),e.arc(0,0,this.getOuterRadius(),t,0,!0),e.closePath(),e.fillStrokeShape(this)},getWidth:function(){return 2*this.getOuterRadius()},getHeight:function(){return 2*this.getOuterRadius()},setWidth:function(t){y.Node.prototype.setWidth.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)},setHeight:function(t){y.Node.prototype.setHeight.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)},setOuterRadius:function(t){this._setAttr("outerRadius",t),this.setWidth(2*t),this.setHeight(2*t)}},y.Util.extend(y.Ring,y.Shape),y.Factory.addGetterSetter(y.Ring,"innerRadius",0),y.Factory.addGetter(y.Ring,"outerRadius",0),y.Factory.addOverloadedGetterSetter(y.Ring,"outerRadius"),y.Collection.mapMethods(y.Ring)}(),y.Wedge=function(t){this.___init(t)},y.Wedge.prototype={___init:function(t){y.Shape.call(this,t),this.className="Wedge",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){t.beginPath(),t.arc(0,0,this.getRadius(),0,y.getAngle(this.getAngle()),this.getClockwise()),t.lineTo(0,0),t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.Wedge,y.Shape),y.Factory.addGetterSetter(y.Wedge,"radius",0),y.Factory.addGetterSetter(y.Wedge,"angle",0),y.Factory.addGetterSetter(y.Wedge,"clockwise",!1),y.Factory.backCompat(y.Wedge,{angleDeg:"angle",getAngleDeg:"getAngle",setAngleDeg:"setAngle"}),y.Collection.mapMethods(y.Wedge),y.Arc=function(t){this.___init(t)},y.Arc.prototype={___init:function(t){y.Shape.call(this,t),this.className="Arc",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=y.getAngle(this.angle()),i=this.clockwise();t.beginPath(),t.arc(0,0,this.getOuterRadius(),0,e,i),t.arc(0,0,this.getInnerRadius(),e,0,!i),t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.Arc,y.Shape),y.Factory.addGetterSetter(y.Arc,"innerRadius",0),y.Factory.addGetterSetter(y.Arc,"outerRadius",0),y.Factory.addGetterSetter(y.Arc,"angle",0),y.Factory.addGetterSetter(y.Arc,"clockwise",!1),y.Collection.mapMethods(y.Arc),y.Image=function(t){this.___init(t)},y.Image.prototype={___init:function(t){y.Shape.call(this,t),this.className="Image",this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_useBufferCanvas:function(){return(this.hasShadow()||1!==this.getAbsoluteOpacity())&&this.hasStroke()&&this.getStage()},_sceneFunc:function(t){var e,i,n,a=this.getWidth(),r=this.getHeight(),s=this.getImage();s&&(e=this.getCropWidth(),i=this.getCropHeight(),n=e&&i?[s,this.getCropX(),this.getCropY(),e,i,0,0,a,r]:[s,0,0,a,r]),(this.hasFill()||this.hasStroke()||this.hasShadow())&&(t.beginPath(),t.rect(0,0,a,r),t.closePath(),t.fillStrokeShape(this)),s&&t.drawImage.apply(t,n)},_hitFunc:function(t){var e=this.getWidth(),i=this.getHeight();t.beginPath(),t.rect(0,0,e,i),t.closePath(),t.fillStrokeShape(this)},getWidth:function(){var t=this.getImage();return this.attrs.width||(t?t.width:0)},getHeight:function(){var t=this.getImage();return this.attrs.height||(t?t.height:0)}},y.Util.extend(y.Image,y.Shape),y.Factory.addGetterSetter(y.Image,"image"),y.Factory.addComponentsGetterSetter(y.Image,"crop",["x","y","width","height"]),y.Factory.addGetterSetter(y.Image,"cropX",0),y.Factory.addGetterSetter(y.Image,"cropY",0),y.Factory.addGetterSetter(y.Image,"cropWidth",0),y.Factory.addGetterSetter(y.Image,"cropHeight",0),y.Collection.mapMethods(y.Image),function(){var t=["fontFamily","fontSize","fontStyle","fontVariant","padding","align","lineHeight","text","width","height","wrap"],e=t.length,i=y.Util.createCanvasElement().getContext("2d");function n(t){t.fillText(this.partialText,0,0)}function a(t){t.strokeText(this.partialText,0,0)}y.Text=function(t){this.___init(t)},y.Text.prototype={___init:function(i){(i=i||{}).fill=i.fill||"black",void 0===i.width&&(i.width="auto"),void 0===i.height&&(i.height="auto"),y.Shape.call(this,i),this._fillFunc=n,this._strokeFunc=a,this.className="Text";for(var r=0;r<e;r++)this.on(t[r]+"Change.kinetic",this._setTextData);this._setTextData(),this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_sceneFunc:function(t){var e,i=this.getPadding(),n=this.getTextHeight(),a=this.getLineHeight()*n,r=this.textArr,s=r.length,o=this.getWidth();for(t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline","middle"),t.setAttr("textAlign","left"),t.save(),t.translate(i,0),t.translate(0,i+n/2),e=0;e<s;e++){var h=r[e],c=h.text,l=h.width;t.save(),"right"===this.getAlign()?t.translate(o-l-2*i,0):"center"===this.getAlign()&&t.translate((o-l-2*i)/2,0),this.partialText=c,t.fillStrokeShape(this),t.restore(),t.translate(0,a)}t.restore()},_hitFunc:function(t){var e=this.getWidth(),i=this.getHeight();t.beginPath(),t.rect(0,0,e,i),t.closePath(),t.fillStrokeShape(this)},setText:function(t){var e=y.Util._isString(t)?t:t.toString();return this._setAttr("text",e),this},getWidth:function(){return"auto"===this.attrs.width?this.getTextWidth()+2*this.getPadding():this.attrs.width},getHeight:function(){return"auto"===this.attrs.height?this.getTextHeight()*this.textArr.length*this.getLineHeight()+2*this.getPadding():this.attrs.height},getTextWidth:function(){return this.textWidth},getTextHeight:function(){return this.textHeight},_getTextSize:function(t){var e,n=i,a=this.getFontSize();return n.save(),n.font=this._getContextFont(),e=n.measureText(t),n.restore(),{width:e.width,height:parseInt(a,10)}},_getContextFont:function(){return this.getFontStyle()+" "+this.getFontVariant()+" "+this.getFontSize()+"px "+this.getFontFamily()},_addTextLine:function(t,e){return this.textArr.push({text:t,width:e})},_getTextWidth:function(t){return i.measureText(t).width},_setTextData:function(){var t=this.getText().split("\n"),e=+this.getFontSize(),n=0,a=this.getLineHeight()*e,r=this.attrs.width,s=this.attrs.height,o="auto"!==r,h="auto"!==s,c=this.getPadding(),l=r-2*c,d=s-2*c,u=0,f=this.getWrap(),g="none"!==f,p="char"!==f&&g;this.textArr=[],i.save(),i.font=this._getContextFont();for(var v=0,m=t.length;v<m;++v){var y=t[v],_=this._getTextWidth(y);if(o&&_>l)for(;y.length>0;){for(var S=0,C=y.length,x="",w=0;S<C;){var b=S+C>>>1,F=y.slice(0,b+1),k=this._getTextWidth(F);k<=l?(S=b+1,x=F,w=k):C=b}if(!x)break;if(p){var T=Math.max(x.lastIndexOf(" "),x.lastIndexOf("-"))+1;T>0&&(S=T,x=x.slice(0,S),w=this._getTextWidth(x))}if(this._addTextLine(x,w),n=Math.max(n,w),u+=a,!g||h&&u+a>d)break;if((y=y.slice(S)).length>0&&(_=this._getTextWidth(y))<=l){this._addTextLine(y,_),u+=a,n=Math.max(n,_);break}}else this._addTextLine(y,_),u+=a,n=Math.max(n,_);if(h&&u+a>d)break}i.restore(),this.textHeight=e,this.textWidth=n}},y.Util.extend(y.Text,y.Shape),y.Factory.addGetterSetter(y.Text,"fontFamily","Arial"),y.Factory.addGetterSetter(y.Text,"fontSize",12),y.Factory.addGetterSetter(y.Text,"fontStyle","normal"),y.Factory.addGetterSetter(y.Text,"fontVariant","normal"),y.Factory.addGetterSetter(y.Text,"padding",0),y.Factory.addGetterSetter(y.Text,"align","left"),y.Factory.addGetterSetter(y.Text,"lineHeight",1),y.Factory.addGetterSetter(y.Text,"wrap","word"),y.Factory.addGetter(y.Text,"text",""),y.Factory.addOverloadedGetterSetter(y.Text,"text"),y.Collection.mapMethods(y.Text)}(),y.Line=function(t){this.___init(t)},y.Line.prototype={___init:function(t){y.Shape.call(this,t),this.className="Line",this.on("pointsChange.kinetic tensionChange.kinetic closedChange.kinetic",function(){this._clearCache("tensionPoints")}),this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e,i,n,a=this.getPoints(),r=a.length,s=this.getTension(),o=this.getClosed();if(r){if(t.beginPath(),t.moveTo(a[0],a[1]),0!==s&&r>4){for(i=(e=this.getTensionPoints()).length,n=o?0:4,o||t.quadraticCurveTo(e[0],e[1],e[2],e[3]);n<i-2;)t.bezierCurveTo(e[n++],e[n++],e[n++],e[n++],e[n++],e[n++]);o||t.quadraticCurveTo(e[i-2],e[i-1],a[r-2],a[r-1])}else for(n=2;n<r;n+=2)t.lineTo(a[n],a[n+1]);o?(t.closePath(),t.fillStrokeShape(this)):t.strokeShape(this)}},getTensionPoints:function(){return this._getCache("tensionPoints",this._getTensionPoints)},_getTensionPoints:function(){return this.getClosed()?this._getTensionPointsClosed():y.Util._expandPoints(this.getPoints(),this.getTension())},_getTensionPointsClosed:function(){var t=this.getPoints(),e=t.length,i=this.getTension(),n=y.Util,a=n._getControlPoints(t[e-2],t[e-1],t[0],t[1],t[2],t[3],i),r=n._getControlPoints(t[e-4],t[e-3],t[e-2],t[e-1],t[0],t[1],i),s=y.Util._expandPoints(t,i);return[a[2],a[3]].concat(s).concat([r[0],r[1],t[e-2],t[e-1],r[2],r[3],a[0],a[1],t[0],t[1]])}},y.Util.extend(y.Line,y.Shape),y.Factory.addGetterSetter(y.Line,"closed",!1),y.Factory.addGetterSetter(y.Line,"tension",0),y.Factory.addGetterSetter(y.Line,"points",[]),y.Collection.mapMethods(y.Line),y.Sprite=function(t){this.___init(t)},y.Sprite.prototype={___init:function(t){y.Shape.call(this,t),this.className="Sprite",this._updated=!0;var e=this;this.anim=new y.Animation(function(){var t=e._updated;return e._updated=!1,t}),this.on("animationChange.kinetic",function(){this.frameIndex(0)}),this.on("frameIndexChange.kinetic",function(){this._updated=!0}),this.on("frameRateChange.kinetic",function(){this.anim.isRunning()&&(clearInterval(this.interval),this._setInterval())}),this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_sceneFunc:function(t){var e=this.getAnimation(),i=this.frameIndex(),n=4*i,a=this.getAnimations()[e],r=this.frameOffsets(),s=a[n+0],o=a[n+1],h=a[n+2],c=a[n+3],l=this.getImage();if(l)if(r){var d=r[e],u=2*i;t.drawImage(l,s,o,h,c,d[u+0],d[u+1],h,c)}else t.drawImage(l,s,o,h,c,0,0,h,c)},_hitFunc:function(t){var e=this.getAnimation(),i=this.frameIndex(),n=4*i,a=this.getAnimations()[e],r=this.frameOffsets(),s=a[n+2],o=a[n+3];if(t.beginPath(),r){var h=r[e],c=2*i;t.rect(h[c+0],h[c+1],s,o)}else t.rect(0,0,s,o);t.closePath(),t.fillShape(this)},_useBufferCanvas:function(){return(this.hasShadow()||1!==this.getAbsoluteOpacity())&&this.hasStroke()},_setInterval:function(){var t=this;this.interval=setInterval(function(){t._updateIndex()},1e3/this.getFrameRate())},start:function(){var t=this.getLayer();this.anim.setLayers(t),this._setInterval(),this.anim.start()},stop:function(){this.anim.stop(),clearInterval(this.interval)},isRunning:function(){return this.anim.isRunning()},_updateIndex:function(){var t=this.frameIndex(),e=this.getAnimation();t<this.getAnimations()[e].length/4-1?this.frameIndex(t+1):this.frameIndex(0)}},y.Util.extend(y.Sprite,y.Shape),y.Factory.addGetterSetter(y.Sprite,"animation"),y.Factory.addGetterSetter(y.Sprite,"animations"),y.Factory.addGetterSetter(y.Sprite,"frameOffsets"),y.Factory.addGetterSetter(y.Sprite,"image"),y.Factory.addGetterSetter(y.Sprite,"frameIndex",0),y.Factory.addGetterSetter(y.Sprite,"frameRate",17),y.Factory.backCompat(y.Sprite,{index:"frameIndex",getIndex:"getFrameIndex",setIndex:"setFrameIndex"}),y.Collection.mapMethods(y.Sprite),y.Path=function(t){this.___init(t)},y.Path.prototype={___init:function(t){this.dataArray=[];var e=this;y.Shape.call(this,t),this.className="Path",this.dataArray=y.Path.parsePathData(this.getData()),this.on("dataChange.kinetic",function(){e.dataArray=y.Path.parsePathData(this.getData())}),this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.dataArray,i=!1;t.beginPath();for(var n=0;n<e.length;n++){var a=e[n].command,r=e[n].points;switch(a){case"L":t.lineTo(r[0],r[1]);break;case"M":t.moveTo(r[0],r[1]);break;case"C":t.bezierCurveTo(r[0],r[1],r[2],r[3],r[4],r[5]);break;case"Q":t.quadraticCurveTo(r[0],r[1],r[2],r[3]);break;case"A":var s=r[0],o=r[1],h=r[2],c=r[3],l=r[4],d=r[5],u=r[6],f=r[7],g=h>c?h:c,p=h>c?1:h/c,v=h>c?c/h:1;t.translate(s,o),t.rotate(u),t.scale(p,v),t.arc(0,0,g,l,l+d,1-f),t.scale(1/p,1/v),t.rotate(-u),t.translate(-s,-o);break;case"z":t.closePath(),i=!0}}i?t.fillStrokeShape(this):t.strokeShape(this)}},y.Util.extend(y.Path,y.Shape),y.Path.getLineLength=function(t,e,i,n){return Math.sqrt((i-t)*(i-t)+(n-e)*(n-e))},y.Path.getPointOnLine=function(t,e,i,n,a,r,s){void 0===r&&(r=e),void 0===s&&(s=i);var o=(a-i)/(n-e+1e-8),h=Math.sqrt(t*t/(1+o*o));n<e&&(h*=-1);var c,l=o*h;if(n===e)c={x:r,y:s+l};else if((s-i)/(r-e+1e-8)===o)c={x:r+h,y:s+l};else{var d,u,f=this.getLineLength(e,i,n,a);if(f<1e-8)return;var g=(r-e)*(n-e)+(s-i)*(a-i);d=e+(g/=f*f)*(n-e),u=i+g*(a-i);var p=this.getLineLength(r,s,d,u),v=Math.sqrt(t*t-p*p);h=Math.sqrt(v*v/(1+o*o)),n<e&&(h*=-1),c={x:d+h,y:u+(l=o*h)}}return c},y.Path.getPointOnCubicBezier=function(t,e,i,n,a,r,s,o,h){function c(t){return t*t*t}function l(t){return 3*t*t*(1-t)}function d(t){return 3*t*(1-t)*(1-t)}function u(t){return(1-t)*(1-t)*(1-t)}return{x:o*c(t)+r*l(t)+n*d(t)+e*u(t),y:h*c(t)+s*l(t)+a*d(t)+i*u(t)}},y.Path.getPointOnQuadraticBezier=function(t,e,i,n,a,r,s){function o(t){return t*t}function h(t){return 2*t*(1-t)}function c(t){return(1-t)*(1-t)}return{x:r*o(t)+n*h(t)+e*c(t),y:s*o(t)+a*h(t)+i*c(t)}},y.Path.getPointOnEllipticalArc=function(t,e,i,n,a,r){var s=Math.cos(r),o=Math.sin(r),h=i*Math.cos(a),c=n*Math.sin(a);return{x:t+(h*s-c*o),y:e+(h*o+c*s)}},y.Path.parsePathData=function(t){if(!t)return[];var e=t,i=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];e=e.replace(new RegExp(" ","g"),",");for(var n=0;n<i.length;n++)e=e.replace(new RegExp(i[n],"g"),"|"+i[n]);var a=e.split("|"),r=[],s=0,o=0;for(n=1;n<a.length;n++){var h=a[n],c=h.charAt(0),l=(h=(h=(h=(h=h.slice(1)).replace(new RegExp(",-","g"),"-")).replace(new RegExp("-","g"),",-")).replace(new RegExp("e,-","g"),"e-")).split(",");l.length>0&&""===l[0]&&l.shift();for(var d=0;d<l.length;d++)l[d]=parseFloat(l[d]);for(;l.length>0&&!isNaN(l[0]);){var u,f,g,p,v,m,y,_,S,C,x=null,w=[],b=s,F=o;switch(c){case"l":s+=l.shift(),o+=l.shift(),x="L",w.push(s,o);break;case"L":s=l.shift(),o=l.shift(),w.push(s,o);break;case"m":var k=l.shift(),T=l.shift();if(s+=k,o+=T,x="M",r.length>2&&"z"===r[r.length-1].command)for(var P=r.length-2;P>=0;P--)if("M"===r[P].command){s=r[P].points[0]+k,o=r[P].points[1]+T;break}w.push(s,o),c="l";break;case"M":s=l.shift(),o=l.shift(),x="M",w.push(s,o),c="L";break;case"h":s+=l.shift(),x="L",w.push(s,o);break;case"H":s=l.shift(),x="L",w.push(s,o);break;case"v":o+=l.shift(),x="L",w.push(s,o);break;case"V":o=l.shift(),x="L",w.push(s,o);break;case"C":w.push(l.shift(),l.shift(),l.shift(),l.shift()),s=l.shift(),o=l.shift(),w.push(s,o);break;case"c":w.push(s+l.shift(),o+l.shift(),s+l.shift(),o+l.shift()),s+=l.shift(),o+=l.shift(),x="C",w.push(s,o);break;case"S":f=s,g=o,"C"===(u=r[r.length-1]).command&&(f=s+(s-u.points[2]),g=o+(o-u.points[3])),w.push(f,g,l.shift(),l.shift()),s=l.shift(),o=l.shift(),x="C",w.push(s,o);break;case"s":f=s,g=o,"C"===(u=r[r.length-1]).command&&(f=s+(s-u.points[2]),g=o+(o-u.points[3])),w.push(f,g,s+l.shift(),o+l.shift()),s+=l.shift(),o+=l.shift(),x="C",w.push(s,o);break;case"Q":w.push(l.shift(),l.shift()),s=l.shift(),o=l.shift(),w.push(s,o);break;case"q":w.push(s+l.shift(),o+l.shift()),s+=l.shift(),o+=l.shift(),x="Q",w.push(s,o);break;case"T":f=s,g=o,"Q"===(u=r[r.length-1]).command&&(f=s+(s-u.points[0]),g=o+(o-u.points[1])),s=l.shift(),o=l.shift(),x="Q",w.push(f,g,s,o);break;case"t":f=s,g=o,"Q"===(u=r[r.length-1]).command&&(f=s+(s-u.points[0]),g=o+(o-u.points[1])),s+=l.shift(),o+=l.shift(),x="Q",w.push(f,g,s,o);break;case"A":p=l.shift(),v=l.shift(),m=l.shift(),y=l.shift(),_=l.shift(),S=s,C=o,s=l.shift(),o=l.shift(),x="A",w=this.convertEndpointToCenterParameterization(S,C,s,o,y,_,p,v,m);break;case"a":p=l.shift(),v=l.shift(),m=l.shift(),y=l.shift(),_=l.shift(),S=s,C=o,s+=l.shift(),o+=l.shift(),x="A",w=this.convertEndpointToCenterParameterization(S,C,s,o,y,_,p,v,m)}r.push({command:x||c,points:w,start:{x:b,y:F},pathLength:this.calcLength(b,F,x||c,w)})}"z"!==c&&"Z"!==c||r.push({command:"z",points:[],start:void 0,pathLength:0})}return r},y.Path.calcLength=function(t,e,i,n){var a,r,s,o,h=y.Path;switch(i){case"L":return h.getLineLength(t,e,n[0],n[1]);case"C":for(a=0,r=h.getPointOnCubicBezier(0,t,e,n[0],n[1],n[2],n[3],n[4],n[5]),o=.01;o<=1;o+=.01)s=h.getPointOnCubicBezier(o,t,e,n[0],n[1],n[2],n[3],n[4],n[5]),a+=h.getLineLength(r.x,r.y,s.x,s.y),r=s;return a;case"Q":for(a=0,r=h.getPointOnQuadraticBezier(0,t,e,n[0],n[1],n[2],n[3]),o=.01;o<=1;o+=.01)s=h.getPointOnQuadraticBezier(o,t,e,n[0],n[1],n[2],n[3]),a+=h.getLineLength(r.x,r.y,s.x,s.y),r=s;return a;case"A":a=0;var c=n[4],l=n[5],d=n[4]+l,u=Math.PI/180;if(Math.abs(c-d)<u&&(u=Math.abs(c-d)),r=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],c,0),l<0)for(o=c-u;o>d;o-=u)s=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],o,0),a+=h.getLineLength(r.x,r.y,s.x,s.y),r=s;else for(o=c+u;o<d;o+=u)s=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],o,0),a+=h.getLineLength(r.x,r.y,s.x,s.y),r=s;return s=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],d,0),a+=h.getLineLength(r.x,r.y,s.x,s.y)}return 0},y.Path.convertEndpointToCenterParameterization=function(t,e,i,n,a,r,s,o,h){var c=h*(Math.PI/180),l=Math.cos(c)*(t-i)/2+Math.sin(c)*(e-n)/2,d=-1*Math.sin(c)*(t-i)/2+Math.cos(c)*(e-n)/2,u=l*l/(s*s)+d*d/(o*o);u>1&&(s*=Math.sqrt(u),o*=Math.sqrt(u));var f=Math.sqrt((s*s*(o*o)-s*s*(d*d)-o*o*(l*l))/(s*s*(d*d)+o*o*(l*l)));a===r&&(f*=-1),isNaN(f)&&(f=0);var g=f*s*d/o,p=f*-o*l/s,v=(t+i)/2+Math.cos(c)*g-Math.sin(c)*p,m=(e+n)/2+Math.sin(c)*g+Math.cos(c)*p,y=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},_=function(t,e){return(t[0]*e[0]+t[1]*e[1])/(y(t)*y(e))},S=function(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(_(t,e))},C=S([1,0],[(l-g)/s,(d-p)/o]),x=[(l-g)/s,(d-p)/o],w=[(-1*l-g)/s,(-1*d-p)/o],b=S(x,w);return _(x,w)<=-1&&(b=Math.PI),_(x,w)>=1&&(b=0),0===r&&b>0&&(b-=2*Math.PI),1===r&&b<0&&(b+=2*Math.PI),[v,m,s,o,C,b,c,r]},y.Factory.addGetterSetter(y.Path,"data"),y.Collection.mapMethods(y.Path),function(){function t(t){t.fillText(this.partialText,0,0)}function e(t){t.strokeText(this.partialText,0,0)}y.TextPath=function(t){this.___init(t)},y.TextPath.prototype={___init:function(i){var n=this;this.dummyCanvas=y.Util.createCanvasElement(),this.dataArray=[],y.Shape.call(this,i),this._fillFunc=t,this._strokeFunc=e,this._fillFuncHit=t,this._strokeFuncHit=e,this.className="TextPath",this.dataArray=y.Path.parsePathData(this.attrs.data),this.on("dataChange.kinetic",function(){n.dataArray=y.Path.parsePathData(this.attrs.data)}),this.on("textChange.kinetic textStroke.kinetic textStrokeWidth.kinetic",n._setTextData),n._setTextData(),this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline","middle"),t.setAttr("textAlign","left"),t.save();for(var e=this.glyphInfo,i=0;i<e.length;i++){t.save();var n=e[i].p0;t.translate(n.x,n.y),t.rotate(e[i].rotation),this.partialText=e[i].text,t.fillStrokeShape(this),t.restore()}t.restore()},getTextWidth:function(){return this.textWidth},getTextHeight:function(){return this.textHeight},setText:function(t){y.Text.prototype.setText.call(this,t)},_getTextSize:function(t){var e=this.dummyCanvas.getContext("2d");e.save(),e.font=this._getContextFont();var i=e.measureText(t);return e.restore(),{width:i.width,height:parseInt(this.attrs.fontSize,10)}},_setTextData:function(){var t=this,e=this._getTextSize(this.attrs.text);this.textWidth=e.width,this.textHeight=e.height,this.glyphInfo=[];for(var i,n,a,r=this.attrs.text.split(""),s=-1,o=0,h=function(){o=0;for(var e=t.dataArray,n=s+1;n<e.length;n++){if(e[n].pathLength>0)return s=n,e[n];"M"==e[n].command&&(i={x:e[n].points[0],y:e[n].points[1]})}return{}},c=function(e){var r=t._getTextSize(e).width,s=0,c=0;for(n=void 0;Math.abs(r-s)/r>.01&&c<25;){c++;for(var l=s;void 0===a;)(a=h())&&l+a.pathLength<r&&(l+=a.pathLength,a=void 0);if(a==={}||void 0===i)return;var d=!1;switch(a.command){case"L":y.Path.getLineLength(i.x,i.y,a.points[0],a.points[1])>r?n=y.Path.getPointOnLine(r,i.x,i.y,a.points[0],a.points[1],i.x,i.y):a=void 0;break;case"A":var u=a.points[4],f=a.points[5],g=a.points[4]+f;0===o?o=u+1e-8:r>s?o+=Math.PI/180*f/Math.abs(f):o-=Math.PI/360*f/Math.abs(f),(f<0&&o<g||f>=0&&o>g)&&(o=g,d=!0),n=y.Path.getPointOnEllipticalArc(a.points[0],a.points[1],a.points[2],a.points[3],o,a.points[6]);break;case"C":0===o?o=r>a.pathLength?1e-8:r/a.pathLength:r>s?o+=(r-s)/a.pathLength:o-=(s-r)/a.pathLength,o>1&&(o=1,d=!0),n=y.Path.getPointOnCubicBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3],a.points[4],a.points[5]);break;case"Q":0===o?o=r/a.pathLength:r>s?o+=(r-s)/a.pathLength:o-=(s-r)/a.pathLength,o>1&&(o=1,d=!0),n=y.Path.getPointOnQuadraticBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3])}void 0!==n&&(s=y.Path.getLineLength(i.x,i.y,n.x,n.y)),d&&(d=!1,a=void 0)}},l=0;l<r.length&&(c(r[l]),void 0!==i&&void 0!==n);l++){var d=y.Path.getLineLength(i.x,i.y,n.x,n.y),u=y.Path.getPointOnLine(0+d/2,i.x,i.y,n.x,n.y),f=Math.atan2(n.y-i.y,n.x-i.x);this.glyphInfo.push({transposeX:u.x,transposeY:u.y,text:r[l],rotation:f,p0:i,p1:n}),i=n}}},y.TextPath.prototype._getContextFont=y.Text.prototype._getContextFont,y.Util.extend(y.TextPath,y.Shape),y.Factory.addGetterSetter(y.TextPath,"fontFamily","Arial"),y.Factory.addGetterSetter(y.TextPath,"fontSize",12),y.Factory.addGetterSetter(y.TextPath,"fontStyle","normal"),y.Factory.addGetterSetter(y.TextPath,"fontVariant","normal"),y.Factory.addGetter(y.TextPath,"text",""),y.Collection.mapMethods(y.TextPath)}(),y.RegularPolygon=function(t){this.___init(t)},y.RegularPolygon.prototype={___init:function(t){y.Shape.call(this,t),this.className="RegularPolygon",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e,i,n,a=this.attrs.sides,r=this.attrs.radius;for(t.beginPath(),t.moveTo(0,0-r),e=1;e<a;e++)i=r*Math.sin(2*e*Math.PI/a),n=-1*r*Math.cos(2*e*Math.PI/a),t.lineTo(i,n);t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.RegularPolygon,y.Shape),y.Factory.addGetterSetter(y.RegularPolygon,"radius",0),y.Factory.addGetterSetter(y.RegularPolygon,"sides",0),y.Collection.mapMethods(y.RegularPolygon),y.Star=function(t){this.___init(t)},y.Star.prototype={___init:function(t){y.Shape.call(this,t),this.className="Star",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.innerRadius(),i=this.outerRadius(),n=this.numPoints();t.beginPath(),t.moveTo(0,0-i);for(var a=1;a<2*n;a++){var r=a%2==0?i:e,s=r*Math.sin(a*Math.PI/n),o=-1*r*Math.cos(a*Math.PI/n);t.lineTo(s,o)}t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.Star,y.Shape),y.Factory.addGetterSetter(y.Star,"numPoints",5),y.Factory.addGetterSetter(y.Star,"innerRadius",0),y.Factory.addGetterSetter(y.Star,"outerRadius",0),y.Collection.mapMethods(y.Star),m=(v=["fontFamily","fontSize","fontStyle","padding","lineHeight","text"]).length,y.Label=function(t){this.____init(t)},y.Label.prototype={____init:function(t){var e=this;y.Group.call(this,t),this.className="Label",this.on("add.kinetic",function(t){e._addListeners(t.child),e._sync()})},getText:function(){return this.find("Text")[0]},getTag:function(){return this.find("Tag")[0]},_addListeners:function(t){var e,i=this,n=function(){i._sync()};for(e=0;e<m;e++)t.on(v[e]+"Change.kinetic",n)},getWidth:function(){return this.getText().getWidth()},getHeight:function(){return this.getText().getHeight()},_sync:function(){var t,e,i,n,a,r,s,o=this.getText(),h=this.getTag();if(o&&h){switch(t=o.getWidth(),e=o.getHeight(),i=h.getPointerDirection(),n=h.getPointerWidth(),s=h.getPointerHeight(),a=0,r=0,i){case"up":a=t/2,r=-1*s;break;case"right":a=t+n,r=e/2;break;case"down":a=t/2,r=e+s;break;case"left":a=-1*n,r=e/2}h.setAttrs({x:-1*a,y:-1*r,width:t,height:e}),o.setAttrs({x:-1*a,y:-1*r})}}},y.Util.extend(y.Label,y.Group),y.Collection.mapMethods(y.Label),y.Tag=function(t){this.___init(t)},y.Tag.prototype={___init:function(t){y.Shape.call(this,t),this.className="Tag",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.getWidth(),i=this.getHeight(),n=this.getPointerDirection(),a=this.getPointerWidth(),r=this.getPointerHeight(),s=this.getCornerRadius();t.beginPath(),t.moveTo(0,0),"up"===n&&(t.lineTo((e-a)/2,0),t.lineTo(e/2,-1*r),t.lineTo((e+a)/2,0)),s?(t.lineTo(e-s,0),t.arc(e-s,s,s,3*Math.PI/2,0,!1)):t.lineTo(e,0),"right"===n&&(t.lineTo(e,(i-r)/2),t.lineTo(e+a,i/2),t.lineTo(e,(i+r)/2)),s?(t.lineTo(e,i-s),t.arc(e-s,i-s,s,0,Math.PI/2,!1)):t.lineTo(e,i),"down"===n&&(t.lineTo((e+a)/2,i),t.lineTo(e/2,i+r),t.lineTo((e-a)/2,i)),s?(t.lineTo(s,i),t.arc(s,i-s,s,Math.PI/2,Math.PI,!1)):t.lineTo(0,i),"left"===n&&(t.lineTo(0,(i+r)/2),t.lineTo(-1*a,i/2),t.lineTo(0,(i-r)/2)),s&&(t.lineTo(0,s),t.arc(s,s,s,Math.PI,3*Math.PI/2,!1)),t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.Tag,y.Shape),y.Factory.addGetterSetter(y.Tag,"pointerDirection","none"),y.Factory.addGetterSetter(y.Tag,"pointerWidth",0),y.Factory.addGetterSetter(y.Tag,"pointerHeight",0),y.Factory.addGetterSetter(y.Tag,"cornerRadius",0),y.Collection.mapMethods(y.Tag),y.Arrow=function(t){this.____init(t)},y.Arrow.prototype={____init:function(t){y.Line.call(this,t),this.className="Arrow"},_sceneFunc:function(t){var e=2*Math.PI,i=this.points(),n=i.length,a=i[n-2]-i[n-4],r=i[n-1]-i[n-3],s=(Math.atan2(r,a)+e)%e,o=this.pointerLength(),h=this.pointerWidth();t.save(),t.beginPath(),t.translate(i[n-2],i[n-1]),t.rotate(s),t.moveTo(0,0),t.lineTo(-o,h/2),t.lineTo(-o,-h/2),t.closePath(),t.restore(),this.pointerAtBeginning()&&(t.save(),t.translate(i[0],i[1]),a=i[2]-i[0],r=i[3]-i[1],t.rotate((Math.atan2(-r,-a)+e)%e),t.moveTo(0,0),t.lineTo(-10,6),t.lineTo(-10,-6),t.closePath(),t.restore()),t.fillStrokeShape(this),y.Line.prototype._sceneFunc.apply(this,arguments)}},y.Util.extend(y.Arrow,y.Line),y.Factory.addGetterSetter(y.Arrow,"pointerLength",10),y.Factory.addGetterSetter(y.Arrow,"pointerWidth",10),y.Factory.addGetterSetter(y.Arrow,"pointerAtBeginning",!1),y.Collection.mapMethods(y.Arrow)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{canvas:1,jsdom:1}],3:[function(t,e,i){"use strict";const n=t("kinetic");e.exports=class{constructor(t,e,i,n,a){this.row=t,this.column=e,this.generateKey=i,this.space=n,this.blockSize=a,this.x=this.row*(2*this.space+this.blockSize)+this.space,this.y=this.column*(2*this.space+this.blockSize)+this.space,this.up=!1,this.left=!1,this.down=!1,this.right=!1,this.key=this.generateKey,this.connected=!1,this.rotation=0,this.animationIsRunning=!1}init(t,e,i,a){this.box=new n.Group({x:this.x+this.blockSize/2+(i-this.blockSize*a)/2-this.blockSize/2,y:this.y+this.blockSize/2,width:this.blockSize,height:this.blockSize,offset:{x:this.blockSize/2,y:this.blockSize/2}}),this.pipes=new n.Group({x:0,y:0}),this.shape=new n.Rect({x:0,y:0,width:this.blockSize,height:this.blockSize,name:this.x+"-"+this.y,fill:"grey",stroke:"black",strokeWidth:this.space});var r=new n.Line({points:[this.blockSize/2,0,this.blockSize/2,this.blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeUp"}),s=new n.Line({points:[0,this.blockSize/2,this.blockSize/2,this.blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeLeft"}),o=new n.Line({points:[this.blockSize/2,this.blockSize,this.blockSize/2,this.blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeDown"}),h=new n.Line({points:[this.blockSize,this.blockSize/2,this.blockSize/2,this.blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeRight"});this.up&&this.pipes.add(r),this.left&&this.pipes.add(s),this.down&&this.pipes.add(o),this.right&&this.pipes.add(h),this.box.on("click",()=>t(this)),this.mouseClick=e(this),this.box.add(this.shape),this.box.add(this.pipes)}connectionHandler(t){t?(this.pipes.find(".pipeUp").stroke("green"),this.pipes.find(".pipeLeft").stroke("green"),this.pipes.find(".pipeDown").stroke("green"),this.pipes.find(".pipeRight").stroke("green")):(this.pipes.find(".pipeUp").stroke("red"),this.pipes.find(".pipeLeft").stroke("red"),this.pipes.find(".pipeDown").stroke("red"),this.pipes.find(".pipeRight").stroke("red"))}shuffleIt(){for(var t=0;t<Math.floor(3*Math.random());t++)Math.random()<.5?this.rotateRight():this.rotateLeft()}rotateRight(){let t=this.up;this.up=this.left,this.left=this.down,this.down=this.right,this.right=t}rotateLeft(){let t=this.up;this.up=this.right,this.right=this.down,this.down=this.left,this.left=t}}},{kinetic:2}],4:[function(t,e,i){"use strict";const n=";",a="=",r="expires",s="path";e.exports={get:function(t,e=null){let i=t+a,n=decodeURIComponent(document.cookie).split(";");for(let t of n)if(0===(t=t.trim()).indexOf(i))return t.substring(i.length,t.length);return e},set:function(t,e,i=365,o="/"){let h=new Date;h.setTime(h.getTime()+24*i*60*60*1e3);let c=t+a+e,l=r+a+h.toUTCString(),d=s+a+o;document.cookie=c+n+l+n+d}}},{}],5:[function(t,e,i){"use strict";const n=t("kinetic"),a=t("./module/cookie"),r=t("./model/block");let s,o,h,c,l,d,u,f,g,p,v,m,y,_,S,C=1280,x=720,w=10,b=10,F=5,k=5,T=0,P=Math.min(C,x)/Math.max(w,b)-2*F,A=Math.floor(w/2),M=Math.floor(b/2);function D(){switch(s.hasChildren()&&s.destroyChildren(),o="classic",h){case"easy":w=5,b=5;break;case"medium":w=10,b=10;break;case"hard":w=15,b=15}A=Math.floor(w/2),M=Math.floor(b/2),c=Math.floor(w/k)+1,l=Math.floor(b/k)+1,P=Math.min(C,x)/Math.max(w,b)-2*F,(d=new I).generateFields(),d.shuffle(),d.drawGame(),u=new L,f=new N,u.setInc(!0),u.start(),f.initPanel(),f.updateScore(a.get("classic_high_score_"+h,"--/--")),f.hideLevel()}function G(){s.hasChildren()&&s.destroyChildren(),o="time-trial",w=4+ ++T,b=4+T,A=Math.floor(w/2),M=Math.floor(b/2),c=Math.floor(w/k)+1,l=Math.floor(b/k)+1,P=Math.min(C,x)/Math.max(w,b)-2*F,(d=new I).generateFields(),d.shuffle(),d.drawGame(),void 0===u&&(u=new L),u.setInc(!1),u.setCurrentTime((0===u.getCurrentTime()?80:u.getCurrentTime())+30+10*T),u.start(),(f=new N).initPanel(),f.updateScore(a.get("time_trial_score","-")),f.updateTimer(u.getMin()+":"+u.getSec()),f.updateLevel(T)}function L(){var t=!0,e=null,i=0,n=0,r=0;function s(){i++,h(),f.updateTimer(r+":"+n)}function o(){i--,h(),f.updateTimer(r+":"+n),0===i&&(u.stop(),setTimeout(function(){var t=!1;null===a.get("time_trial_score")?t=!0:a.get("time_trial_score")<T&&(t=!0),alert("Congratulation! \nYour level: "+T+(t?"\nNew record!":"")),t&&a.set("time_trial_score",T),R()},300))}function h(){r=(r=Math.floor(i/60))<10?"0"+r:r,n=(n=i%60)<10?"0"+n:n}this.setInc=function(e){t=e},this.getCurrentTime=function(){return i},this.setCurrentTime=function(t){i=t,h()},this.start=function(){e=t?setInterval(s,1e3):setInterval(o,1e3)},this.stop=function(){clearInterval(e)},this.reset=function(){i=0,n=0,r=0},this.getSec=function(){return n},this.getMin=function(){return r}}function R(){s.hasChildren()&&s.destroyChildren();var t=new n.Text({x:C/2,y:x/3-100,text:"Classic game",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var e=new n.Text({x:C/2,y:x/3,text:"Time trial",fontSize:32,fontFamily:"Calibri",fill:"grey"});e.setOffset({x:e.getWidth()/2});var i=new n.Text({x:C/2,y:x/3+100,text:"Scoreboard",fontSize:32,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2});var r=new n.Text({x:C/2,y:x/3+200,text:"Information",fontSize:32,fontFamily:"Calibri",fill:"grey"});r.setOffset({x:r.getWidth()/2}),(g=new n.Layer).name="gameMenu",g.add(t),g.add(e),g.add(i),g.add(r),s.add(g);var o=new n.Animation(function(){t.fill("black"),this.stop()},g),c=new n.Animation(function(){t.fill("grey"),this.stop()},g);t.on("mouseover",function(){o.start()}),t.on("mouseout",function(){c.start()}),t.on("click",function(){!function(){s.hasChildren()&&s.destroyChildren();var t=new n.Text({x:C/2,y:x/3-100,text:"Easy (5x5)",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var e=new n.Text({x:C/2,y:x/3,text:"Medium (10x10)",fontSize:32,fontFamily:"Calibri",fill:"grey"});e.setOffset({x:e.getWidth()/2});var i=new n.Text({x:C/2,y:x/3+100,text:"Hard (15x15)",fontSize:32,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2});var a=new n.Text({x:C/2,y:x/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});a.setOffset({x:a.getWidth()/2}),(p=new n.Layer).name="difficultySelectMenu",p.add(t),p.add(e),p.add(i),p.add(a),s.add(p);var r=new n.Animation(function(){t.fill("black"),this.stop()},p),o=new n.Animation(function(){t.fill("grey"),this.stop()},p);t.on("mouseover",function(){r.start()}),t.on("mouseout",function(){o.start()}),t.on("click",function(){h="easy",D()});var c=new n.Animation(function(){e.fill("black"),this.stop()},p),l=new n.Animation(function(){e.fill("grey"),this.stop()},p);e.on("mouseover",function(){c.start()}),e.on("mouseout",function(){l.start()}),e.on("click",function(){h="medium",D()});var d=new n.Animation(function(){i.fill("black"),this.stop()},p),u=new n.Animation(function(){i.fill("grey"),this.stop()},p);i.on("mouseover",function(){d.start()}),i.on("mouseout",function(){u.start()}),i.on("click",function(){h="hard",D()});var f=new n.Animation(function(){a.fill("black"),this.stop()},p),g=new n.Animation(function(){a.fill("grey"),this.stop()},p);a.on("mouseover",function(){f.start()}),a.on("mouseout",function(){g.start()}),a.on("click",function(){R()})}()});var l=new n.Animation(function(){e.fill("black"),this.stop()},g),d=new n.Animation(function(){e.fill("grey"),this.stop()},g);e.on("mouseover",function(){l.start()}),e.on("mouseout",function(){d.start()}),e.on("click",function(){!function(){s.hasChildren()&&s.destroyChildren();var t=new n.Text({x:C/2,y:x/3,text:"Starting time trial",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var e=new n.Text({x:C/2,y:x/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});e.setOffset({x:e.getWidth()/2}),(v=new n.Layer).name="timeTrialGameLayer",v.add(t),v.add(e),s.add(v);var i=new n.Animation(function(){t.fill("black"),this.stop()},v),a=new n.Animation(function(){t.fill("grey"),this.stop()},v);t.on("mouseover",function(){i.start()}),t.on("mouseout",function(){a.start()}),t.on("click",function(){G()});var r=new n.Animation(function(){e.fill("black"),this.stop()},v),o=new n.Animation(function(){e.fill("grey"),this.stop()},v);e.on("mouseover",function(){r.start()}),e.on("mouseout",function(){o.start()}),e.on("click",function(){R()})}()});var u=new n.Animation(function(){i.fill("black"),this.stop()},g),f=new n.Animation(function(){i.fill("grey"),this.stop()},g);i.on("mouseover",function(){u.start()}),i.on("mouseout",function(){f.start()}),i.on("click",function(){!function(){s.hasChildren()&&s.destroyChildren();var t=new n.Text({x:C/2,y:x/3-100,text:"Classic game",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var e=new n.Text({x:C/2-120,y:x/3-40,text:"Easy\n"+a.get("classic_high_score_easy","99:99"),fontSize:18,fontFamily:"Calibri",fill:"grey"});e.setOffset({x:e.getWidth()/2});var i=new n.Text({x:C/2,y:x/3-40,text:"Medium\n"+a.get("classic_high_score_medium","99:99"),fontSize:18,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2});var r=new n.Text({x:C/2+120,y:x/3-40,text:"Hard\n"+a.get("classic_high_score_hard","99:99"),fontSize:18,fontFamily:"Calibri",fill:"grey"});r.setOffset({x:r.getWidth()/2});var o=new n.Text({x:C/2,y:x/3+40,text:"Time trial",fontSize:32,fontFamily:"Calibri",fill:"grey"});o.setOffset({x:o.getWidth()/2});var h=new n.Text({x:C/2,y:x/3+100,text:a.get("time_trial_score","0")+". level",fontSize:18,fontFamily:"Calibri",fill:"grey"});h.setOffset({x:h.getWidth()/2});var c=new n.Text({x:C/2,y:x/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});c.setOffset({x:c.getWidth()/2}),(m=new n.Layer).name="scoreBoardMenuLayer",m.add(t),m.add(e),m.add(i),m.add(r),m.add(o),m.add(h),m.add(c),s.add(m);var l=new n.Animation(function(){c.fill("black"),this.stop()},m),d=new n.Animation(function(){c.fill("grey"),this.stop()},m);c.on("mouseover",function(){l.start()}),c.on("mouseout",function(){d.start()}),c.on("click",function(){R()})}()});var _=new n.Animation(function(){r.fill("black"),this.stop()},g),S=new n.Animation(function(){r.fill("grey"),this.stop()},g);r.on("mouseover",function(){_.start()}),r.on("mouseout",function(){S.start()}),r.on("click",function(){!function(){s.hasChildren()&&s.destroyChildren();var t=new n.Text({x:C/2,y:x/3-100,text:"",fontSize:18,fontFamily:"Calibri",fill:"grey"});let e="Game goal:\nTurn all the pipes into the correct position, so every pipe connected to each other!\n";e+="In classic game you can choose between three different difficulty, while in time trial the difficulty is incrementaly increasing.\n",e+="Time is key, so don't hesitate too much!\n",e+="You can check your rank at the scoreboard!\n\nMade by: White Rabbit (Tamás Ruszka) (C) 2014,\nMail: ruszka dot tamas at gmail dot com",t.setText(e),t.setOffset({x:t.getWidth()/2>0?t.getWidth()/2:0});var i=new n.Text({x:C/2,y:x/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2}),(y=new n.Layer).name="informationMenuLayer",y.add(t),y.add(i),s.add(y);var a=new n.Animation(function(){i.fill("black"),this.stop()},y),r=new n.Animation(function(){i.fill("grey"),this.stop()},y);i.on("mouseover",function(){a.start()}),i.on("mouseout",function(){r.start()}),i.on("click",function(){R()})}()})}function I(){_=[];for(let t=0;t<c;t++){_[t]=new Array(l);for(let e=0;e<l;e++)_[t][e]=new n.Layer}S=[],this.generateFields=function(){var t=0,e=0,i=!0;for(let t=0;t<w;t++){S[t]=new Array(b);for(let e=0;e<b;e++)S[t][e]=new r(t,e,t*b+e,F,P)}for(;i;){let n=Math.floor(Math.random()*w),a=Math.floor(Math.random()*b),r=S[n][a];if(i=!1,0!==r.key)switch(Math.floor(4*Math.random()+0)){case 0:if(0!==n){let i=S[n-1][a];if(void 0!==i&&r.key!==i.key){r.left=!0,i.right=!0,t=r.key>i.key?r.key:i.key,e=r.key<i.key?r.key:i.key;for(let i=0;i<w;i++)for(let i=0;i<b;i++)r.key===t&&(r.key=e)}}break;case 1:if(0!==a){let i=S[n][a-1];if(void 0!==i&&r.key!==i.key){r.up=!0,i.down=!0,t=r.key>i.key?r.key:i.key,e=r.key<i.key?r.key:i.key;for(let i=0;i<w;i++)for(let n=0;n<b;n++)S[i][n].key===t&&(S[i][n].key=e)}}break;case 2:if(n!==b-1){let i=S[n+1][a];if(void 0!==i&&r.key!==i.key){r.right=!0,i.left=!0,t=r.key>i.key?r.key:i.key,e=r.key<i.key?r.key:i.key;for(let i=0;i<w;i++)for(let n=0;n<b;n++)S[i][n].key===t&&(S[i][n].key=e)}}break;case 3:if(a!==w-1){let i=S[n][a+1];if(void 0!==i&&r.key!==i.key){r.down=!0,i.up=!0,t=r.key>i.key?r.key:i.key,e=r.key<i.key?r.key:i.key;for(let i=0;i<w;i++)for(let n=0;n<b;n++)S[i][n].key===t&&(S[i][n].key=e)}}}for(let t=0;t<w;t++)for(let e=0;e<b;e++)S[t][e].key>0&&(i=!0)}},this.shuffle=function(){for(var t=0;t<w;t++)for(var e=0;e<b;e++)S[t][e].shuffleIt()},this.drawGame=function(){for(let t=0;t<w;t++)for(let e=0;e<b;e++)S[t][e].init(B,z,C,w),_[Math.floor(t/k)][Math.floor(e/k)].add(S[t][e].box);S[A][M].connected=!0,S[A][M].connectionHandler(!0),this.checkPipeConnections();for(let t=0;t<c;t++)for(let e=0;e<l;e++)s.add(_[t][e])},this.checkPipeConnections=function(){var t=0,e=0;for(t=0;t<w;t++)for(e=0;e<b;e++)S[t][e].connected=!1,S[t][e].connectionHandler(!1);for(S[A][M].connected=!0,S[A][M].connectionHandler(!0),t=0;t<w;t++)for(e=0;e<b;e++)if(S[t][e].connected){var i=!1;0===t||i||S[t][e].left&&S[t-1][e].right&&(S[t-1][e].connected||(S[t-1][e].connected=!0,S[t-1][e].connectionHandler(!0),t=0,e=-1,i=!0)),t===w-1||i||S[t][e].right&&S[t+1][e].left&&(S[t+1][e].connected||(S[t+1][e].connected=!0,S[t+1][e].connectionHandler(!0),t=0,e=-1,i=!0)),0===e||i||S[t][e].up&&S[t][e-1].down&&(S[t][e-1].connected||(S[t][e-1].connected=!0,S[t][e-1].connectionHandler(!0),t=0,e=-1,i=!0)),e===b-1||i||S[t][e].down&&S[t][e+1].up&&(S[t][e+1].connected||(S[t][e+1].connected=!0,S[t][e+1].connectionHandler(!0),t=0,e=-1,i=!0))}}}function N(){var t=C/2+w*P/2+w*(2*F),e=C-(t+w*F*2),i=x,a=new n.Layer,r=new n.Group({x:t,y:0,width:e,height:i}),o=new n.Group({x:0,y:0,width:t-C,height:x}),h=new n.Group({x:0,y:0,width:t-C,height:x}),c=new n.Group({x:0,y:0,width:t-C,height:x}),l=new n.Text({x:200,y:200,text:"Back",fontSize:48,fontFamily:"Calibri",fill:"grey"}),d=new n.Text({x:30,y:50,text:"Time:",fontSize:32,fontFamily:"Calibri",fill:"grey"}),u=new n.Text({x:30,y:100,text:"00:00",fontSize:48,fontFamily:"Calibri",fill:"grey"}),f=new n.Text({x:200,y:50,text:"Previous record:",fontSize:32,fontFamily:"Calibri",fill:"grey"}),g=new n.Text({x:200,y:100,text:"00:00",fontSize:48,fontFamily:"Calibri",fill:"grey"}),p=new n.Text({x:30,y:200,text:"Actual level:",fontSize:32,fontFamily:"Calibri",fill:"grey"}),v=new n.Text({x:30,y:250,text:"1",fontSize:64,fontFamily:"Calibri",fill:"grey"});this.initPanel=function(){o.add(d),o.add(u),h.add(f),h.add(g),h.add(l),c.add(p),c.add(v),r.add(o),r.add(h),r.add(c),a.add(r),s.add(a)},this.showTimer=function(){o.show(),a.draw()},this.hideTimer=function(){o.hide(),a.draw()},this.showScore=function(){h.show(),a.draw()},this.scoreTimer=function(){h.hide(),a.draw()},this.showLevel=function(){c.show(),a.draw()},this.hideLevel=function(){c.hide(),a.draw()},this.updateTimer=function(t){u.setText(t),a.draw()},this.updateScore=function(t){g.setText(t),a.draw()},this.updateLevel=function(t){v.setText(t),a.draw()};var m=new n.Animation(function(){l.fill("black"),this.stop()},a),y=new n.Animation(function(){l.fill("grey"),this.stop()},a);l.on("mouseover",function(){m.start()}),l.on("mouseout",function(){y.start()}),l.on("click",function(){R()})}function O(){u.stop(),setTimeout(function(){var t=!1;null===a.get("classic_high_score_"+h)?t=!0:a.get("classic_high_score_"+h)>u.getMin()+" : "+u.getSec()&&(t=!0),alert("Congratulation, you solved the level! \nYour time: "+u.getMin()+" : "+u.getSec()+(t?"\nNew record!":"")),t&&a.set("classic_high_score_"+h,u.getMin()+" : "+u.getSec()),R()},300)}function U(){u.stop(),setTimeout(function(){G()},300)}function B(t){t.mouseClick.isRunning()||t.animationIsRunning||(t.rotateRight(),t.mouseClick.start(),setTimeout(function(){d.checkPipeConnections(),function(){var t=!0;for(let e=0;e<w;e++)for(let i=0;i<b;i++)S[e][i].connected||(t=!1);if(t)"classic"===o?O():"time-trial"===o&&U();else for(let t=0;t<c;t++)for(let e=0;e<l;e++)_[t][e].draw()}()},100))}function z(t){return new n.Animation(function(){if(t.animationIsRunning=!0,t.box.rotate(5),t.box.rotation()>=t.rotation+90){t.box.rotation(t.rotation+90),t.rotation=t.box.rotation();var e=!0;for(let t=0;t<w;t++)for(let i=0;i<b;i++)S[t][i].connected||(e=!1);if(this.stop(),t.animationIsRunning=!1,e)"classic"===o?O():"time-trial"===o&&U();else for(let t=0;t<c;t++)for(let e=0;e<l;e++)_[t][e].draw()}},_[Math.floor(t.row/k)][Math.floor(t.column/k)])}e.exports={loadApplication:function(){C=window.innerWidth,x=window.innerHeight-200,s=new n.Stage({container:"table",width:C,height:x}),R()}}},{"./model/block":3,"./module/cookie":4,kinetic:2}],6:[function(t,e,i){"use strict";var n=t("./js/pipe");window.onload=function(){n.loadApplication()}},{"./js/pipe":5}]},{},[6]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMva2luZXRpYy9raW5ldGljLmpzIiwic3JjL2pzL21vZGVsL2Jsb2NrLmpzIiwic3JjL2pzL21vZHVsZS9jb29raWUuanMiLCJzcmMvanMvcGlwZS5qcyIsInNyYy9tYWluLmpzIl0sIm5hbWVzIjpbInIiLCJlIiwibiIsInQiLCJvIiwiaSIsImYiLCJjIiwicmVxdWlyZSIsInUiLCJhIiwiRXJyb3IiLCJjb2RlIiwicCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwiMSIsIm1vZHVsZSIsInJvb3QiLCJQSV9PVkVSXzE4MCIsImNvbnRleHQiLCJfcGl4ZWxSYXRpbyIsIkNPTlRFWFRfTUVUSE9EUyIsIlNIQVBFIiwiQ0xPTkVfQkxBQ0tfTElTVCIsIlRSQU5TRk9STV9DSEFOR0VfU1RSIiwidGVtcENhbnZhcyIsIklOVEVSU0VDVElPTl9PRkZTRVRTIiwiSU5URVJTRUNUSU9OX09GRlNFVFNfTEVOIiwiUEl4MiIsIkFUVFJfQ0hBTkdFX0xJU1QiLCJhdHRyQ2hhbmdlTGlzdExlbiIsIktpbmV0aWMiLCJ0aGlzIiwiTWF0aCIsIlBJIiwidmVyc2lvbiIsInN0YWdlcyIsImlkQ291bnRlciIsImlkcyIsIm5hbWVzIiwic2hhcGVzIiwibGlzdGVuQ2xpY2tUYXAiLCJpbkRibENsaWNrV2luZG93IiwiZW5hYmxlVHJhY2UiLCJ0cmFjZUFyck1heCIsImRibENsaWNrV2luZG93IiwicGl4ZWxSYXRpbyIsInVuZGVmaW5lZCIsImRyYWdEaXN0YW5jZSIsImFuZ2xlRGVnIiwic2hvd1dhcm5pbmdzIiwiRmlsdGVycyIsIk5vZGUiLCJjb25maWciLCJfaW5pdCIsIlNoYXBlIiwiX19pbml0IiwiQ29udGFpbmVyIiwiU3RhZ2UiLCJfX19pbml0IiwiQmFzZUxheWVyIiwiTGF5ZXIiLCJfX19faW5pdCIsIkZhc3RMYXllciIsIkdyb3VwIiwiaXNEcmFnZ2luZyIsImRkIiwiREQiLCJpc0RyYWdSZWFkeSIsIm5vZGUiLCJfYWRkSWQiLCJpZCIsIl9yZW1vdmVJZCIsIl9hZGROYW1lIiwibmFtZSIsInNwbGl0Iiwic3VibmFtZSIsInB1c2giLCJfcmVtb3ZlTmFtZSIsIl9pZCIsIm5vZGVzIiwic3BsaWNlIiwiZ2V0QW5nbGUiLCJhbmdsZSIsIl9wYXJzZVVBIiwidXNlckFnZW50IiwidWEiLCJ0b0xvd2VyQ2FzZSIsIm1hdGNoIiwiZXhlYyIsImluZGV4T2YiLCJtb2JpbGUiLCJpZU1vYmlsZSIsImJyb3dzZXIiLCJVQSIsIm5hdmlnYXRvciIsImZhY3RvcnkiLCJLaW5ldGljSlMiLCJnbG9iYWwiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIkNhbnZhcyIsImpzZG9tIiwiY3JlYXRlV2luZG93IiwiSW1hZ2UiLCJfbm9kZUNhbnZhcyIsImRlZmluZSIsImFtZCIsIkNvbGxlY3Rpb24iLCJhcmdzIiwic2xpY2UiLCJhcmd1bWVudHMiLCJwcm90b3R5cGUiLCJlYWNoIiwiZnVuYyIsInRvQXJyYXkiLCJhcnIiLCJsZW4iLCJ0b0NvbGxlY3Rpb24iLCJjb2xsZWN0aW9uIiwiX21hcE1ldGhvZCIsIm1ldGhvZE5hbWUiLCJhcHBseSIsIm1hcE1ldGhvZHMiLCJjb25zdHJ1Y3RvciIsInByb3QiLCJUcmFuc2Zvcm0iLCJtIiwiY29weSIsInBvaW50IiwieCIsInkiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsInN4Iiwic3kiLCJyb3RhdGUiLCJyYWQiLCJjb3MiLCJzIiwic2luIiwibTExIiwibTEyIiwibTIxIiwibTIyIiwiZ2V0VHJhbnNsYXRpb24iLCJza2V3IiwibXVsdGlwbHkiLCJtYXRyaXgiLCJkeCIsImR5IiwiaW52ZXJ0IiwiZCIsIm0wIiwibTEiLCJtMiIsIm0zIiwibTQiLCJtNSIsImdldE1hdHJpeCIsInNldEFic29sdXRlUG9zaXRpb24iLCJ5dCIsInh0IiwiUElfT1ZFUl9ERUcxODAiLCJERUcxODBfT1ZFUl9QSSIsIkNPTE9SUyIsImFxdWEiLCJsaW1lIiwic2lsdmVyIiwiYmxhY2siLCJtYXJvb24iLCJ0ZWFsIiwiYmx1ZSIsIm5hdnkiLCJ3aGl0ZSIsImZ1Y2hzaWEiLCJvbGl2ZSIsInllbGxvdyIsIm9yYW5nZSIsImdyYXkiLCJwdXJwbGUiLCJncmVlbiIsInJlZCIsInBpbmsiLCJjeWFuIiwidHJhbnNwYXJlbnQiLCJSR0JfUkVHRVgiLCJVdGlsIiwiX2lzRWxlbWVudCIsIm9iaiIsIm5vZGVUeXBlIiwiX2lzRnVuY3Rpb24iLCJfaXNPYmplY3QiLCJPYmplY3QiLCJfaXNBcnJheSIsInRvU3RyaW5nIiwiX2lzTnVtYmVyIiwiX2lzU3RyaW5nIiwiX3Rocm90dGxlIiwid2FpdCIsIm9wdHMiLCJyZXN1bHQiLCJ0aW1lb3V0IiwicHJldmlvdXMiLCJvcHRpb25zIiwibGF0ZXIiLCJsZWFkaW5nIiwiRGF0ZSIsImdldFRpbWUiLCJub3ciLCJyZW1haW5pbmciLCJjbGVhclRpbWVvdXQiLCJ0cmFpbGluZyIsInNldFRpbWVvdXQiLCJfaGFzTWV0aG9kcyIsImtleSIsImNyZWF0ZUNhbnZhc0VsZW1lbnQiLCJjYW52YXMiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJpc0Jyb3dzZXIiLCJfaXNJbkRvY3VtZW50IiwiZWwiLCJwYXJlbnROb2RlIiwiX3NpbXBsaWZ5QXJyYXkiLCJ2YWwiLCJyZXRBcnIiLCJ1dGlsIiwicm91bmQiLCJfZ2V0SW1hZ2UiLCJhcmciLCJjYWxsYmFjayIsImltYWdlT2JqIiwib25sb2FkIiwic3JjIiwiZGF0YSIsIndpZHRoIiwiaGVpZ2h0IiwiZ2V0Q29udGV4dCIsInB1dEltYWdlRGF0YSIsInRvRGF0YVVSTCIsIl9nZXRSR0JBU3RyaW5nIiwiYWxwaGEiLCJqb2luIiwiX3JnYlRvSGV4IiwiZyIsImIiLCJfaGV4VG9SZ2IiLCJoZXgiLCJyZXBsYWNlIiwiYmlnaW50IiwicGFyc2VJbnQiLCJnZXRSYW5kb21Db2xvciIsInJhbmRDb2xvciIsInJhbmRvbSIsImdldCIsImRlZiIsImdldFJHQiIsImNvbG9yIiwicmdiIiwic3Vic3RyaW5nIiwic3Vic3RyIiwiX21lcmdlIiwibzEiLCJvMiIsInJldE9iaiIsIl9jbG9uZSIsImNsb25lT2JqZWN0IiwiY2xvbmVBcnJheSIsIl9kZWdUb1JhZCIsImRlZyIsIl9yYWRUb0RlZyIsIl9jYXBpdGFsaXplIiwic3RyIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJlcnJvciIsIndhcm4iLCJjb25zb2xlIiwiZXh0ZW5kIiwiY2hpbGQiLCJwYXJlbnQiLCJjdG9yIiwib2xkX3Byb3RvIiwiaGFzT3duUHJvcGVydHkiLCJfX3N1cGVyX18iLCJhZGRNZXRob2RzIiwibWV0aG9kcyIsIl9nZXRDb250cm9sUG9pbnRzIiwieDAiLCJ5MCIsIngxIiwieTEiLCJ4MiIsInkyIiwiZDAxIiwic3FydCIsInBvdyIsImQxMiIsImZhIiwiZmIiLCJfZXhwYW5kUG9pbnRzIiwidGVuc2lvbiIsImNwIiwiYWxsUG9pbnRzIiwiX3JlbW92ZUxhc3RMZXR0ZXIiLCJkZXZpY2VQaXhlbFJhdGlvIiwid2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsIm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJtc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJvQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsImJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJpbml0IiwiX2NhbnZhcyIsInBhZGRpbmciLCJtYXJnaW4iLCJib3JkZXIiLCJiYWNrZ3JvdW5kIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwiZ2V0UGl4ZWxSYXRpbyIsInNldFBpeGVsUmF0aW8iLCJzZXRTaXplIiwiZ2V0V2lkdGgiLCJnZXRIZWlnaHQiLCJzZXRXaWR0aCIsInNldEhlaWdodCIsIm1pbWVUeXBlIiwicXVhbGl0eSIsImVyciIsIm1lc3NhZ2UiLCJTY2VuZUNhbnZhcyIsImNvbmYiLCJTY2VuZUNvbnRleHQiLCJfY29udGV4dCIsIkhpdENhbnZhcyIsIkhpdENvbnRleHQiLCJoaXRDYW52YXMiLCJDb250ZXh0IiwidHJhY2VBcnIiLCJfZW5hYmxlVHJhY2UiLCJmaWxsU2hhcGUiLCJzaGFwZSIsImdldEZpbGxFbmFibGVkIiwiX2ZpbGwiLCJzdHJva2VTaGFwZSIsImdldFN0cm9rZUVuYWJsZWQiLCJfc3Ryb2tlIiwiZmlsbFN0cm9rZVNoYXBlIiwiZ2V0VHJhY2UiLCJyZWxheGVkIiwidHJhY2UiLCJtZXRob2QiLCJwcm9wZXJ0eSIsImNsZWFyVHJhY2UiLCJfdHJhY2UiLCJzaGlmdCIsInJlc2V0IiwiZ2V0Q2FudmFzIiwic2V0VHJhbnNmb3JtIiwiY2xlYXIiLCJib3VuZHMiLCJjbGVhclJlY3QiLCJfYXBwbHlMaW5lQ2FwIiwibGluZUNhcCIsImdldExpbmVDYXAiLCJzZXRBdHRyIiwiX2FwcGx5T3BhY2l0eSIsImFic09wYWNpdHkiLCJnZXRBYnNvbHV0ZU9wYWNpdHkiLCJfYXBwbHlMaW5lSm9pbiIsImxpbmVKb2luIiwiZ2V0TGluZUpvaW4iLCJhdHRyIiwiYXJjIiwiYmVnaW5QYXRoIiwiYmV6aWVyQ3VydmVUbyIsImNsaXAiLCJjbG9zZVBhdGgiLCJjcmVhdGVJbWFnZURhdGEiLCJjcmVhdGVMaW5lYXJHcmFkaWVudCIsImNyZWF0ZVBhdHRlcm4iLCJjcmVhdGVSYWRpYWxHcmFkaWVudCIsImRyYXdJbWFnZSIsImZpbGwiLCJmaWxsVGV4dCIsImdldEltYWdlRGF0YSIsImxpbmVUbyIsIm1vdmVUbyIsInJlY3QiLCJxdWFkcmF0aWNDdXJ2ZVRvIiwicmVzdG9yZSIsInNhdmUiLCJzZXRMaW5lRGFzaCIsIm1vekRhc2giLCJ3ZWJraXRMaW5lRGFzaCIsInN0cm9rZSIsInN0cm9rZVRleHQiLCJ0cmFuc2Zvcm0iLCJ0aGF0Iiwib3JpZ1NldHRlciIsInJldCIsIm9yaWdNZXRob2QiLCJBcnJheSIsIl9maWxsQ29sb3IiLCJmaWxsUmVkIiwiZmlsbEdyZWVuIiwiZmlsbEJsdWUiLCJmaWxsQWxwaGEiLCJfZmlsbEZ1bmMiLCJfZmlsbFBhdHRlcm4iLCJmaWxsUGF0dGVybkltYWdlIiwiZ2V0RmlsbFBhdHRlcm5JbWFnZSIsImZpbGxQYXR0ZXJuWCIsImdldEZpbGxQYXR0ZXJuWCIsImZpbGxQYXR0ZXJuWSIsImdldEZpbGxQYXR0ZXJuWSIsImZpbGxQYXR0ZXJuU2NhbGUiLCJnZXRGaWxsUGF0dGVyblNjYWxlIiwiZmlsbFBhdHRlcm5Sb3RhdGlvbiIsImdldEZpbGxQYXR0ZXJuUm90YXRpb24iLCJmaWxsUGF0dGVybk9mZnNldCIsImdldEZpbGxQYXR0ZXJuT2Zmc2V0IiwiZmlsbFBhdHRlcm5SZXBlYXQiLCJnZXRGaWxsUGF0dGVyblJlcGVhdCIsIl9maWxsTGluZWFyR3JhZGllbnQiLCJzdGFydCIsImdldEZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnQiLCJlbmQiLCJnZXRGaWxsTGluZWFyR3JhZGllbnRFbmRQb2ludCIsImNvbG9yU3RvcHMiLCJnZXRGaWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzIiwiZ3JkIiwiYWRkQ29sb3JTdG9wIiwiX2ZpbGxSYWRpYWxHcmFkaWVudCIsImdldEZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnQiLCJnZXRGaWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludCIsInN0YXJ0UmFkaXVzIiwiZ2V0RmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXMiLCJlbmRSYWRpdXMiLCJnZXRGaWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXMiLCJnZXRGaWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzIiwiaGFzQ29sb3IiLCJoYXNQYXR0ZXJuIiwiaGFzTGluZWFyR3JhZGllbnQiLCJoYXNSYWRpYWxHcmFkaWVudCIsImZpbGxQcmlvcml0eSIsImdldEZpbGxQcmlvcml0eSIsImRhc2giLCJzdHJva2VTY2FsZUVuYWJsZWQiLCJnZXRTdHJva2VTY2FsZUVuYWJsZWQiLCJoYXNTdHJva2UiLCJkYXNoRW5hYmxlZCIsInN0cm9rZVdpZHRoIiwic3Ryb2tlUmVkIiwic3Ryb2tlR3JlZW4iLCJzdHJva2VCbHVlIiwic3Ryb2tlQWxwaGEiLCJfc3Ryb2tlRnVuYyIsIl9hcHBseVNoYWRvdyIsImdldFNoYWRvd0NvbG9yIiwiYmx1ciIsImdldFNoYWRvd0JsdXIiLCJzaGFkb3dPcGFjaXR5IiwiZ2V0U2hhZG93T3BhY2l0eSIsIm9mZnNldCIsImdldFNoYWRvd09mZnNldCIsImNvbG9yS2V5IiwiX2ZpbGxGdW5jSGl0IiwiX3N0cm9rZUZ1bmNIaXQiLCJGYWN0b3J5IiwiYWRkR2V0dGVyU2V0dGVyIiwidmFsaWRhdG9yIiwiYWZ0ZXIiLCJhZGRHZXR0ZXIiLCJhZGRTZXR0ZXIiLCJhZGRPdmVybG9hZGVkR2V0dGVyU2V0dGVyIiwiYXR0cnMiLCJfc2V0QXR0ciIsImFkZENvbXBvbmVudHNHZXR0ZXJTZXR0ZXIiLCJjb21wb25lbnRzIiwiY29tcG9uZW50IiwiY2FwaXRhbGl6ZSIsImdldHRlciIsInNldHRlciIsImdldEF0dHIiLCJvbGRWYWwiLCJfZmlyZUNoYW5nZUV2ZW50IiwiY2FwaXRhbGl6ZWRBdHRyIiwiYmFja0NvbXBhdCIsImFmdGVyU2V0RmlsdGVyIiwiX2ZpbHRlclVwVG9EYXRlIiwiVmFsaWRhdG9ycyIsIlJHQkNvbXBvbmVudCIsImFscGhhQ29tcG9uZW50IiwiZXZlbnRMaXN0ZW5lcnMiLCJfY2FjaGUiLCJzZXRBdHRycyIsIm9uIiwiX2NsZWFyQ2FjaGUiLCJfY2xlYXJTZWxmQW5kRGVzY2VuZGFudENhY2hlIiwiX2dldENhY2hlIiwicHJpdmF0ZUdldHRlciIsImNoaWxkcmVuIiwiZ2V0Q2hpbGRyZW4iLCJjbGVhckNhY2hlIiwiY2FjaGUiLCJkcmF3Qm9yZGVyIiwiY2FjaGVkU2NlbmVDYW52YXMiLCJjYWNoZWRGaWx0ZXJDYW52YXMiLCJjYWNoZWRIaXRDYW52YXMiLCJzY2VuZUNvbnRleHQiLCJoaXRDb250ZXh0IiwiaXNDYWNoZSIsImRyYXdTY2VuZSIsImRyYXdIaXQiLCJzY2VuZSIsImZpbHRlciIsImhpdCIsIl9kcmF3Q2FjaGVkU2NlbmVDYW52YXMiLCJnZXRMYXllciIsIl9hcHBseVRyYW5zZm9ybSIsIl9nZXRDYWNoZWRTY2VuZUNhbnZhcyIsImltYWdlRGF0YSIsImZpbHRlcnMiLCJjYWNoZWRDYW52YXMiLCJzY2VuZUNhbnZhcyIsImZpbHRlckNhbnZhcyIsImZpbHRlckNvbnRleHQiLCJfZHJhd0NhY2hlZEhpdENhbnZhcyIsImV2dFN0ciIsImhhbmRsZXIiLCJwYXJ0cyIsImJhc2VFdmVudCIsImV2ZW50cyIsIm9mZiIsIl9vZmYiLCJkaXNwYXRjaEV2ZW50IiwiZXZ0IiwidGFyZ2V0IiwidHlwZSIsImZpcmUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZSIsImdldFBhcmVudCIsImluZGV4IiwiX3NldENoaWxkcmVuSW5kaWNlcyIsImRlc3Ryb3kiLCJnZXRJZCIsImdldE5hbWUiLCJnZXRBbmNlc3RvcnMiLCJhbmNlc3RvcnMiLCJnZXRBdHRycyIsImlzTGlzdGVuaW5nIiwiX2lzTGlzdGVuaW5nIiwibGlzdGVuaW5nIiwiZ2V0TGlzdGVuaW5nIiwiaXNWaXNpYmxlIiwiX2lzVmlzaWJsZSIsInZpc2libGUiLCJnZXRWaXNpYmxlIiwic2hvdWxkRHJhd0hpdCIsImxheWVyIiwiaGl0R3JhcGhFbmFibGVkIiwic2hvdyIsInNldFZpc2libGUiLCJoaWRlIiwiZ2V0WkluZGV4IiwiZ2V0QWJzb2x1dGVaSW5kZXgiLCJkZXB0aCIsImdldERlcHRoIiwiYWRkQ2hpbGRyZW4iLCJjb25jYXQiLCJnZXRTdGFnZSIsInNldFBvc2l0aW9uIiwicG9zIiwic2V0WCIsInNldFkiLCJnZXRQb3NpdGlvbiIsImdldFgiLCJnZXRZIiwiZ2V0QWJzb2x1dGVQb3NpdGlvbiIsImFic29sdXRlTWF0cml4IiwiZ2V0QWJzb2x1dGVUcmFuc2Zvcm0iLCJhYnNvbHV0ZVRyYW5zZm9ybSIsIml0Iiwib3JpZ1RyYW5zIiwiX2NsZWFyVHJhbnNmb3JtIiwiX3NldFRyYW5zZm9ybSIsInRyYW5zIiwicm90YXRpb24iLCJnZXRSb3RhdGlvbiIsInNjYWxlWCIsImdldFNjYWxlWCIsInNjYWxlWSIsImdldFNjYWxlWSIsIm9mZnNldFgiLCJnZXRPZmZzZXRYIiwib2Zmc2V0WSIsImdldE9mZnNldFkiLCJza2V3WCIsImdldFNrZXdYIiwic2tld1kiLCJnZXRTa2V3WSIsIm1vdmUiLCJjaGFuZ2UiLCJjaGFuZ2VYIiwiY2hhbmdlWSIsIl9lYWNoQW5jZXN0b3JSZXZlcnNlIiwiZmFtaWx5IiwidW5zaGlmdCIsInRoZXRhIiwic2V0Um90YXRpb24iLCJtb3ZlVG9Ub3AiLCJtb3ZlVXAiLCJtb3ZlRG93biIsIm1vdmVUb0JvdHRvbSIsInNldFpJbmRleCIsInpJbmRleCIsIl9nZXRBYnNvbHV0ZU9wYWNpdHkiLCJnZXRPcGFjaXR5IiwibmV3Q29udGFpbmVyIiwiYWRkIiwidG9PYmplY3QiLCJkZWZhdWx0VmFsdWUiLCJjbGFzc05hbWUiLCJnZXRDbGFzc05hbWUiLCJ0b0pTT04iLCJKU09OIiwic3RyaW5naWZ5IiwiX2dldFN0YWdlIiwiZXZlbnRUeXBlIiwiYnViYmxlIiwiX2ZpcmVBbmRCdWJibGUiLCJfZmlyZSIsIl9nZXRBYnNvbHV0ZVRyYW5zZm9ybSIsInRyYW5zZm9ybXNFbmFibGVkIiwiYXQiLCJnZXRUcmFuc2Zvcm0iLCJfZ2V0VHJhbnNmb3JtIiwiY2xvbmUiLCJhbGxMaXN0ZW5lcnMiLCJsaXN0ZW5lciIsInN0YWdlIiwidG9JbWFnZSIsImltZyIsInNpemUiLCJnZXRTaXplIiwiZ2V0VHlwZSIsImdldERyYWdEaXN0YW5jZSIsIl9nZXQiLCJzZWxlY3RvciIsImV2dE5hbWUiLCJldnRMaXN0ZW5lcnMiLCJuZXdWYWwiLCJzZXRJZCIsIm9sZElkIiwic2V0TmFtZSIsIm9sZE5hbWUiLCJfc2V0Q29tcG9uZW50QXR0ciIsImNvbXBhcmVTaGFwZSIsIm9rYXlUb1J1biIsImlzQW5jZXN0b3JPZiIsInN0b3BCdWJibGUiLCJjYW5jZWxCdWJibGUiLCJkcmF3IiwiY3JlYXRlIiwianNvbiIsImNvbnRhaW5lciIsIl9jcmVhdGVOb2RlIiwicGFyc2UiLCJubyIsInJvdGF0ZURlZyIsInNldFJvdGF0aW9uRGVnIiwiZ2V0Um90YXRpb25EZWciLCJHcmF5c2NhbGUiLCJicmlnaHRuZXNzIiwiQnJpZ2h0ZW4iLCJJbnZlcnQiLCJCbHVyU3RhY2siLCJuZXh0IiwibXVsX3RhYmxlIiwic2hnX3RhYmxlIiwiQmx1ciIsInJhZGl1cyIsImJsdXJSYWRpdXMiLCJ5cCIsInlpIiwieXciLCJyX3N1bSIsImdfc3VtIiwiYl9zdW0iLCJhX3N1bSIsInJfb3V0X3N1bSIsImdfb3V0X3N1bSIsImJfb3V0X3N1bSIsImFfb3V0X3N1bSIsInJfaW5fc3VtIiwiZ19pbl9zdW0iLCJiX2luX3N1bSIsImFfaW5fc3VtIiwicHIiLCJwZyIsInBiIiwicGEiLCJyYnMiLCJwaXhlbHMiLCJkaXYiLCJ3aWR0aE1pbnVzMSIsImhlaWdodE1pbnVzMSIsInJhZGl1c1BsdXMxIiwic3VtRmFjdG9yIiwic3RhY2tTdGFydCIsInN0YWNrRW5kIiwic3RhY2siLCJzdGFja0luIiwic3RhY2tPdXQiLCJtdWxfc3VtIiwic2hnX3N1bSIsImZpbHRlckdhdXNzQmx1clJHQkEiLCJwaXhlbEF0IiwiaWRhdGEiLCJpZHgiLCJyZ2JEaXN0YW5jZSIsInAxIiwicDIiLCJNYXNrIiwibWFzayIsInRocmVzaG9sZCIsInJnYnZfbm8iLCJyZ2J2X25lIiwicmdidl9zbyIsInJnYnZfc2UiLCJ0aHJlcyIsIm1lYW4iLCJwVGFiIiwicmdiTWVhbiIsImJhY2tncm91bmRNYXNrIiwiYXBwbHlNYXNrIiwic3ciLCJzaCIsIndlaWdodHMiLCJzaWRlIiwiaGFsZlNpZGUiLCJmbG9vciIsIm1hc2tSZXN1bHQiLCJzbyIsImN5IiwiY3giLCJzY3kiLCJzY3giLCJ3dCIsInNtb290aEVkZ2VNYXNrIiwiZGlsYXRlTWFzayIsImVyb2RlTWFzayIsIlJHQiIsIm5QaXhlbHMiLCJIU1YiLCJ2IiwidmFsdWUiLCJzYXR1cmF0aW9uIiwiaCIsImFicyIsImh1ZSIsInZzdSIsInZzdyIsInJyIiwicmciLCJyYiIsImdyIiwiZ2ciLCJnYiIsImJyIiwiYmciLCJiYiIsIkhTTCIsImwiLCJsdW1pbmFuY2UiLCJFbWJvc3MiLCJzdHJlbmd0aCIsImVtYm9zc1N0cmVuZ3RoIiwiZ3JleUxldmVsIiwiZW1ib3NzV2hpdGVMZXZlbCIsImRpcmVjdGlvbiIsImVtYm9zc0RpcmVjdGlvbiIsImJsZW5kIiwiZW1ib3NzQmxlbmQiLCJkaXJZIiwiZGlyWCIsInciLCJ3NCIsIm90aGVyWSIsIm9mZnNldFlPdGhlciIsIm90aGVyWCIsIm9mZnNldE90aGVyIiwiZFIiLCJkRyIsImRCIiwiZGlmIiwiYWJzRGlmIiwiZ3JleSIsInJlbWFwIiwiZnJvbVZhbHVlIiwiZnJvbU1pbiIsImZyb21NYXgiLCJ0b01pbiIsInRvTWF4IiwiZnJvbVJhbmdlIiwidG9SYW5nZSIsIkVuaGFuY2UiLCJuU3ViUGl4ZWxzIiwick1pbiIsInJNYXgiLCJnTWluIiwiZ01heCIsImJNaW4iLCJiTWF4IiwiZW5oYW5jZUFtb3VudCIsImVuaGFuY2UiLCJyTWlkIiwickdvYWxNYXgiLCJyR29hbE1pbiIsImdNaWQiLCJnR29hbE1heCIsImdHb2FsTWluIiwiYk1pZCIsImJHb2FsTWF4IiwiYkdvYWxNaW4iLCJQb3N0ZXJpemUiLCJsZXZlbHMiLCJOb2lzZSIsImFtb3VudCIsIm5vaXNlIiwiaGFsZiIsIlBpeGVsYXRlIiwieEJpblN0YXJ0IiwieEJpbkVuZCIsInlCaW5TdGFydCIsInlCaW5FbmQiLCJ4QmluIiwieUJpbiIsInBpeGVsc0luQmluIiwicGl4ZWxTaXplIiwiY2VpbCIsIm5CaW5zWCIsIm5CaW5zWSIsIlRocmVzaG9sZCIsImxldmVsIiwiU2VwaWEiLCJvciIsIm9nIiwib2IiLCJTb2xhcml6ZSIsIkthbGVpZG9zY29wZSIsInNyY1BvcyIsImRzdFBvcyIsInhTaXplIiwieVNpemUiLCJwb3dlciIsImthbGVpZG9zY29wZVBvd2VyIiwia2FsZWlkb3Njb3BlQW5nbGUiLCJzY3JhdGNoRGF0YSIsImRzdCIsIm9wdCIsInNyY1BpeGVscyIsImRzdFBpeGVscyIsInhNaWQiLCJwb2xhckNlbnRlclgiLCJ5TWlkIiwicG9sYXJDZW50ZXJZIiwiclNpemUiLCJ0U2l6ZSIsImNvbnZlcnNpb24iLCJUb1BvbGFyIiwibWluU2VjdGlvblNpemUiLCJzZWN0aW9uU2l6ZSIsInhTdGFydCIsInhFbmQiLCJ4RGVsdGEiLCJwaGFzZVNoaWZ0IiwicG9sYXJSb3RhdGlvbiIsImF0YW4yIiwiRnJvbVBvbGFyIiwicGVyZm9ybWFuY2UiLCJSQUYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJGUkFGIiwiQW5pbWF0aW9uIiwibGF5ZXJzIiwiQW5pbSIsInNldExheWVycyIsImFuaW1JZENvdW50ZXIiLCJmcmFtZSIsInRpbWUiLCJ0aW1lRGlmZiIsImxhc3RUaW1lIiwibGF5cyIsImdldExheWVycyIsImFkZExheWVyIiwiaXNSdW5uaW5nIiwiYW5pbWF0aW9ucyIsInN0b3AiLCJfYWRkQW5pbWF0aW9uIiwiX3JlbW92ZUFuaW1hdGlvbiIsIl91cGRhdGVGcmFtZU9iamVjdCIsImZyYW1lUmF0ZSIsImFuaW1SdW5uaW5nIiwiYW5pbSIsIl9oYW5kbGVBbmltYXRpb24iLCJfcnVuRnJhbWVzIiwibGF5ZXJzTGVuIiwibGF5ZXJIYXNoIiwiX2FuaW1hdGlvbkxvb3AiLCJyZXF1ZXN0QW5pbUZyYW1lIiwiYmF0Y2hEcmF3IiwiYmF0Y2hBbmltIiwibGFzdEJhdGNoRHJhd1RpbWUiLCJibGFja2xpc3QiLCJkdXJhdGlvbiIsImVhc2luZyIsIm9uRmluaXNoIiwieW95byIsIlR3ZWVuIiwibm9kZUlkIiwiRWFzaW5ncyIsIkxpbmVhciIsInR3ZWVuIiwib25FbnRlckZyYW1lIiwiX3R3ZWVuRnVuYyIsIl9hZGRMaXN0ZW5lcnMiLCJ0d2VlbnMiLCJfYWRkQXR0ciIsIm9uUmVzZXQiLCJkaWZmIiwidHdlZW5JZCIsIm9uUGxheSIsIm9uUmV2ZXJzZSIsIm9uUGF1c2UiLCJwbGF5IiwicmV2ZXJzZSIsInNlZWsiLCJwYXVzZSIsImZpbmlzaCIsInRoaXNJZCIsInByb3AiLCJwcm9wRnVuYyIsImJlZ2luIiwiX3BvcyIsIl9jaGFuZ2UiLCJwcmV2UG9zIiwiX3RpbWUiLCJfcG9zaXRpb24iLCJfc3RhcnRUaW1lIiwiX2ZpbmlzaCIsInNldFRpbWUiLCJ1cGRhdGUiLCJzdGF0ZSIsImdldFRpbWVyIiwiQmFja0Vhc2VJbiIsIkJhY2tFYXNlT3V0IiwiQmFja0Vhc2VJbk91dCIsIkVsYXN0aWNFYXNlSW4iLCJhc2luIiwiRWxhc3RpY0Vhc2VPdXQiLCJFbGFzdGljRWFzZUluT3V0IiwiQm91bmNlRWFzZU91dCIsIkJvdW5jZUVhc2VJbiIsIkJvdW5jZUVhc2VJbk91dCIsIkVhc2VJbiIsIkVhc2VPdXQiLCJFYXNlSW5PdXQiLCJTdHJvbmdFYXNlSW4iLCJTdHJvbmdFYXNlT3V0IiwiU3Ryb25nRWFzZUluT3V0IiwiZGlydHkiLCJqdXN0RHJhZ2dlZCIsIl9kcmFnIiwiZ2V0UG9pbnRlclBvc2l0aW9uIiwibWF4Iiwic3RhcnRQb2ludGVyUG9zIiwiX3NldERyYWdQb3NpdGlvbiIsIl9lbmREcmFnQmVmb3JlIiwiZHJhZ0VuZE5vZGUiLCJfZW5kRHJhZ0FmdGVyIiwic3RhcnREcmFnIiwiYXAiLCJzdG9wRHJhZyIsImRiZiIsImdldERyYWdCb3VuZEZ1bmMiLCJuZXdOb2RlUG9zIiwiX2xhc3RQb3MiLCJzZXREcmFnZ2FibGUiLCJkcmFnZ2FibGUiLCJfZHJhZ0NoYW5nZSIsIm9yaWdEZXN0cm95IiwiX2xpc3RlbkRyYWciLCJfZHJhZ0NsZWFudXAiLCJidXR0b24iLCJodG1sIiwiZG9jdW1lbnRFbGVtZW50IiwiZmlsdGVyRnVuYyIsInJlc3VsdHMiLCJoYXNDaGlsZHJlbiIsInJlbW92ZUNoaWxkcmVuIiwiZGVzdHJveUNoaWxkcmVuIiwiX3ZhbGlkYXRlQWRkIiwiZmluZCIsInNlbCIsImNsZW4iLCJzZWxlY3RvckFyciIsIl9nZXROb2RlQnlJZCIsIl9nZXROb2Rlc0J5TmFtZSIsIl9nZXREZXNjZW5kYW50cyIsImdldEFsbEludGVyc2VjdGlvbnMiLCJpbnRlcnNlY3RzIiwiY2FuIiwiX2RyYXdDaGlsZHJlbiIsImNsZWFySGl0Q2FjaGUiLCJkcmF3TWV0aG9kIiwiY2xpcFgiLCJjbGlwWSIsImNsaXBXaWR0aCIsImdldENsaXBXaWR0aCIsImNsaXBIZWlnaHQiLCJnZXRDbGlwSGVpZ2h0IiwiaGFzQ2xpcCIsImdldENsaXBYIiwiZ2V0Q2xpcFkiLCJsYXllclVuZGVyRHJhZyIsIkhBU19TSEFET1ciLCJfY2xlYXJIYXNTaGFkb3dDYWNoZSIsImhhc1NoYWRvdyIsIl9oYXNTaGFkb3ciLCJnZXRTaGFkb3dFbmFibGVkIiwiZ2V0U2hhZG93T2Zmc2V0WCIsImdldFNoYWRvd09mZnNldFkiLCJoYXNGaWxsIiwiZ2V0RmlsbCIsImJ1ZmZlckhpdENhbnZhcyIsIl91c2VCdWZmZXJDYW52YXMiLCJidWZmZXJDYW52YXMiLCJidWZmZXJDb250ZXh0IiwiZHJhd0Z1bmMiLCJzY2VuZUZ1bmMiLCJoaXRGdW5jIiwiZHJhd0hpdEZyb21DYWNoZSIsImFscGhhVGhyZXNob2xkIiwic2NlbmVEYXRhIiwiaGl0SW1hZ2VEYXRhIiwiaGl0RGF0YSIsInJnYkNvbG9yS2V5IiwiZGFzaEFycmF5IiwiZ2V0RGFzaEFycmF5Iiwic2V0RGFzaEFycmF5IiwiZ2V0RHJhd0Z1bmMiLCJzZXREcmF3RnVuYyIsImRyYXdIaXRGdW5jIiwiZ2V0RHJhd0hpdEZ1bmMiLCJzZXREcmF3SGl0RnVuYyIsIlVOREVSU0NPUkUiLCJFVkVOVFMiLCJldmVudHNMZW5ndGgiLCJhZGRFdmVudCIsImN0eCIsImV2ZW50TmFtZSIsImNvbnRlbnQiLCJfYnVpbGRET00iLCJfYmluZENvbnRlbnRFdmVudHMiLCJfZW5hYmxlTmVzdGVkVHJhbnNmb3JtcyIsInNldENvbnRhaW5lciIsImdldEVsZW1lbnRCeUlkIiwiX3Jlc2l6ZURPTSIsImdldENvbnRhaW5lciIsInJlbW92ZUNoaWxkIiwicG9pbnRlclBvcyIsImdldENvbnRlbnQiLCJkcmF3TGF5ZXIiLCJsYXllclVybCIsImNiIiwiZGF0YVVybCIsImdldEludGVyc2VjdGlvbiIsIl9zZXRDYW52YXNTaXplIiwiYXBwZW5kQ2hpbGQiLCJfbW91c2VvdmVyIiwiX3NldFBvaW50ZXJQb3NpdGlvbiIsIl9tb3VzZW91dCIsInRhcmdldFNoYXBlIiwiX21vdXNlbW92ZSIsIl90b3VjaG1vdmUiLCJ3ZWJraXRNb3ZlbWVudFgiLCJ3ZWJraXRNb3ZlbWVudFkiLCJwcmV2ZW50RGVmYXVsdCIsIl9tb3VzZWRvd24iLCJfdG91Y2hzdGFydCIsImNsaWNrU3RhcnRTaGFwZSIsIl9tb3VzZXVwIiwiX3RvdWNoZW5kIiwiZmlyZURibENsaWNrIiwidGFwU3RhcnRTaGFwZSIsIl9ET01Nb3VzZVNjcm9sbCIsIl9tb3VzZXdoZWVsIiwiX3doZWVsIiwidG91Y2giLCJjb250ZW50UG9zaXRpb24iLCJfZ2V0Q29udGVudFBvc2l0aW9uIiwiY2xpZW50WCIsImV2ZW50IiwidG91Y2hlcyIsImNsaWVudFkiLCJsYXllclgiLCJsYXllclkiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpbm5lckhUTUwiLCJkaXNwbGF5Iiwic2V0QXR0cmlidXRlIiwiX29uQ29udGVudCIsInR5cGVzU3RyIiwidHlwZXMiLCJjcmVhdGVQTkdTdHJlYW0iLCJnZXRIaXRDYW52YXMiLCJfaGl0SW1hZ2VEYXRhIiwiaW5zZXJ0QmVmb3JlIiwiaW50ZXJzZWN0aW9uT2Zmc2V0Iiwic3BpcmFsU2VhcmNoRGlzdGFuY2UiLCJjb250aW51ZVNlYXJjaCIsIl9nZXRJbnRlcnNlY3Rpb24iLCJhbnRpYWxpYXNlZCIsIl9nZXRJbWFnZURhdGEiLCJwMyIsImdldENsZWFyQmVmb3JlRHJhdyIsImVuYWJsZUhpdEdyYXBoIiwic2V0SGl0R3JhcGhFbmFibGVkIiwiZGlzYWJsZUhpdEdyYXBoIiwiUmVjdCIsIl9zY2VuZUZ1bmMiLCJjb3JuZXJSYWRpdXMiLCJnZXRDb3JuZXJSYWRpdXMiLCJDaXJjbGUiLCJnZXRSYWRpdXMiLCJzZXRSYWRpdXMiLCJFbGxpcHNlIiwicngiLCJnZXRSYWRpdXNYIiwicnkiLCJnZXRSYWRpdXNZIiwiUmluZyIsImdldElubmVyUmFkaXVzIiwiZ2V0T3V0ZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsInNldE91dGVyUmFkaXVzIiwiV2VkZ2UiLCJnZXRDbG9ja3dpc2UiLCJnZXRBbmdsZURlZyIsInNldEFuZ2xlRGVnIiwiQXJjIiwiY2xvY2t3aXNlIiwiX2hpdEZ1bmMiLCJjcm9wV2lkdGgiLCJjcm9wSGVpZ2h0IiwicGFyYW1zIiwiaW1hZ2UiLCJnZXRJbWFnZSIsImdldENyb3BXaWR0aCIsImdldENyb3BIZWlnaHQiLCJnZXRDcm9wWCIsImdldENyb3BZIiwiZHVtbXlDb250ZXh0IiwicGFydGlhbFRleHQiLCJUZXh0IiwiX3NldFRleHREYXRhIiwiZ2V0UGFkZGluZyIsInRleHRIZWlnaHQiLCJnZXRUZXh0SGVpZ2h0IiwibGluZUhlaWdodFB4IiwiZ2V0TGluZUhlaWdodCIsInRleHRBcnIiLCJ0ZXh0QXJyTGVuIiwidG90YWxXaWR0aCIsIl9nZXRDb250ZXh0Rm9udCIsInRleHQiLCJnZXRBbGlnbiIsInNldFRleHQiLCJnZXRUZXh0V2lkdGgiLCJ0ZXh0V2lkdGgiLCJfZ2V0VGV4dFNpemUiLCJtZXRyaWNzIiwiZm9udFNpemUiLCJnZXRGb250U2l6ZSIsImZvbnQiLCJtZWFzdXJlVGV4dCIsImdldEZvbnRTdHlsZSIsImdldEZvbnRWYXJpYW50IiwiZ2V0Rm9udEZhbWlseSIsIl9hZGRUZXh0TGluZSIsImxpbmUiLCJfZ2V0VGV4dFdpZHRoIiwibGluZXMiLCJnZXRUZXh0IiwiZml4ZWRXaWR0aCIsImZpeGVkSGVpZ2h0IiwibWF4V2lkdGgiLCJtYXhIZWlnaHRQeCIsImN1cnJlbnRIZWlnaHRQeCIsIndyYXAiLCJnZXRXcmFwIiwic2hvdWxkV3JhcCIsIndyYXBBdFdvcmQiLCJsaW5lV2lkdGgiLCJsb3ciLCJoaWdoIiwibWF0Y2hXaWR0aCIsIm1pZCIsInN1YnN0cldpZHRoIiwid3JhcEluZGV4IiwibGFzdEluZGV4T2YiLCJMaW5lIiwidHAiLCJwb2ludHMiLCJnZXRQb2ludHMiLCJnZXRUZW5zaW9uIiwiY2xvc2VkIiwiZ2V0Q2xvc2VkIiwiZ2V0VGVuc2lvblBvaW50cyIsIl9nZXRUZW5zaW9uUG9pbnRzIiwiX2dldFRlbnNpb25Qb2ludHNDbG9zZWQiLCJmaXJzdENvbnRyb2xQb2ludHMiLCJsYXN0Q29udHJvbFBvaW50cyIsIm1pZGRsZSIsIlNwcml0ZSIsIl91cGRhdGVkIiwidXBkYXRlZCIsImZyYW1lSW5kZXgiLCJjbGVhckludGVydmFsIiwiaW50ZXJ2YWwiLCJfc2V0SW50ZXJ2YWwiLCJnZXRBbmltYXRpb24iLCJpeDQiLCJzZXQiLCJnZXRBbmltYXRpb25zIiwib2Zmc2V0cyIsImZyYW1lT2Zmc2V0cyIsIml4MiIsInNldEludGVydmFsIiwiX3VwZGF0ZUluZGV4IiwiZ2V0RnJhbWVSYXRlIiwiYW5pbWF0aW9uIiwiZ2V0SW5kZXgiLCJzZXRJbmRleCIsIlBhdGgiLCJkYXRhQXJyYXkiLCJwYXJzZVBhdGhEYXRhIiwiZ2V0RGF0YSIsImNhIiwiY2xvc2VkUGF0aCIsImNvbW1hbmQiLCJkVGhldGEiLCJwc2kiLCJmcyIsImdldExpbmVMZW5ndGgiLCJnZXRQb2ludE9uTGluZSIsImRpc3QiLCJQMXgiLCJQMXkiLCJQMngiLCJQMnkiLCJmcm9tWCIsImZyb21ZIiwicnVuIiwicHQiLCJyaXNlIiwiaXgiLCJpeSIsInBSaXNlIiwicFJ1biIsImdldFBvaW50T25DdWJpY0JlemllciIsInBjdCIsIlAzeCIsIlAzeSIsIlA0eCIsIlA0eSIsIkNCMSIsIkNCMiIsIkNCMyIsIkNCNCIsImdldFBvaW50T25RdWFkcmF0aWNCZXppZXIiLCJRQjEiLCJRQjIiLCJRQjMiLCJnZXRQb2ludE9uRWxsaXB0aWNhbEFyYyIsImNvc1BzaSIsInNpblBzaSIsImNzIiwiY2MiLCJSZWdFeHAiLCJjcHgiLCJjcHkiLCJwYXJzZUZsb2F0IiwiaXNOYU4iLCJwcmV2Q21kIiwiY3RsUHR4IiwiY3RsUHR5IiwiY21kIiwic3RhcnRYIiwic3RhcnRZIiwiY29udmVydEVuZHBvaW50VG9DZW50ZXJQYXJhbWV0ZXJpemF0aW9uIiwicGF0aExlbmd0aCIsImNhbGNMZW5ndGgiLCJwYXRoIiwiaW5jIiwicHNpRGVnIiwieHAiLCJsYW1iZGEiLCJjeHAiLCJjeXAiLCJ2TWFnIiwidlJhdGlvIiwidkFuZ2xlIiwiYWNvcyIsIlRleHRQYXRoIiwiZHVtbXlDYW52YXMiLCJnbHlwaEluZm8iLCJwMCIsInBhdGhDbWQiLCJjaGFyQXJyIiwicEluZGV4IiwiY3VycmVudFQiLCJnZXROZXh0UGF0aFNlZ21lbnQiLCJwYXRoRGF0YSIsImZpbmRTZWdtZW50VG9GaXRDaGFyYWN0ZXIiLCJnbHlwaFdpZHRoIiwiY3VyckxlbiIsImF0dGVtcHRzIiwiY3VtdWxhdGl2ZVBhdGhMZW5ndGgiLCJuZWVkTmV3U2VnbWVudCIsIm1pZHBvaW50IiwidHJhbnNwb3NlWCIsInRyYW5zcG9zZVkiLCJSZWd1bGFyUG9seWdvbiIsInNpZGVzIiwiU3RhciIsImlubmVyUmFkaXVzIiwibnVtUG9pbnRzIiwiTGFiZWwiLCJfc3luYyIsImdldFRhZyIsInBvaW50ZXJEaXJlY3Rpb24iLCJwb2ludGVyV2lkdGgiLCJwb2ludGVySGVpZ2h0IiwidGFnIiwiZ2V0UG9pbnRlckRpcmVjdGlvbiIsImdldFBvaW50ZXJXaWR0aCIsImdldFBvaW50ZXJIZWlnaHQiLCJUYWciLCJBcnJvdyIsIlBJMiIsInJhZGlhbnMiLCJwb2ludGVyTGVuZ3RoIiwicG9pbnRlckF0QmVnaW5uaW5nIiwia2luZXRpYyIsIltvYmplY3QgT2JqZWN0XSIsInJvdyIsImNvbHVtbiIsImdlbmVyYXRlS2V5Iiwic3BhY2UiLCJibG9ja1NpemUiLCJ1cCIsImRvd24iLCJyaWdodCIsImNvbm5lY3RlZCIsImFuaW1hdGlvbklzUnVubmluZyIsIm9uQ2xpY2tFdmVudCIsImJveEFuaW1hdGlvbiIsInJvd3MiLCJib3giLCJwaXBlcyIsInBpcGVVcCIsInBpcGVMZWZ0IiwicGlwZURvd24iLCJwaXBlUmlnaHQiLCJtb3VzZUNsaWNrIiwiayIsInJvdGF0ZVJpZ2h0Iiwicm90YXRlTGVmdCIsInRlbXAiLCJhdHRyU2VwYXJhdG9yIiwia2V5VmFsdWVTZXBhcmF0b3IiLCJleHBpcmVzS2V5IiwicGF0aEtleSIsImNvb2tpZXMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJjb29raWUiLCJ0cmltIiwiZXhwaXJlcyIsImNvb2tpZUF0dHIiLCJleHBpcmVzQXR0ciIsInRvVVRDU3RyaW5nIiwicGF0aEF0dHIiLCJCbG9jayIsImdhbWVUeXBlIiwiZ2FtZURpZmZpY3VsdHkiLCJsYXllclJvd3MiLCJsYXllckNvbHVtbnMiLCJ0YWJsZSIsInRpbWVyIiwiaW5mb3JtYXRpb24iLCJtZW51TGF5ZXIiLCJkaWZmaWN1bHR5TGF5ZXIiLCJ0aW1lVHJpYWxHYW1lTGF5ZXIiLCJzY29yZUJvYXJkTWVudUxheWVyIiwiaW5mb3JtYXRpb25NZW51TGF5ZXIiLCJnYW1lTGF5ZXJzIiwiYmxvY2tzIiwiY29sdW1ucyIsImxheWVyU2l6ZSIsIm1pbiIsInN0YXJ0aW5nUG9pbnRYIiwic3RhcnRpbmdQb2ludFkiLCJzdGFydE5ld0NsYXNzaWNHYW1lIiwiR2FtZVRhYmxlIiwiZ2VuZXJhdGVGaWVsZHMiLCJzaHVmZmxlIiwiZHJhd0dhbWUiLCJHYW1lVGltZXIiLCJJbmZvcm1hdGlvblBhbmVsIiwic2V0SW5jIiwiaW5pdFBhbmVsIiwidXBkYXRlU2NvcmUiLCJoaWRlTGV2ZWwiLCJzdGFydE5ld1RpbWVUcmlhbEdhbWUiLCJzZXRDdXJyZW50VGltZSIsImdldEN1cnJlbnRUaW1lIiwidXBkYXRlVGltZXIiLCJnZXRNaW4iLCJnZXRTZWMiLCJ1cGRhdGVMZXZlbCIsInRpbWVyT2JqIiwiY3VycmVudFRpbWUiLCJjdXJyZW50U2VjIiwiY3VycmVudE1pbiIsInJlZnJlc2hJbmNUaW1lciIsInVwZGF0ZU1pbkFuZFNlYyIsInJlZnJlc2hEZWNUaW1lciIsIm5ld1JlY29yZCIsImFsZXJ0IiwibWFpbk1lbnUiLCJjbGFzc2ljR2FtZVRleHQiLCJmb250RmFtaWx5Iiwic2V0T2Zmc2V0IiwidGltZVRyaWFsR2FtZVRleHQiLCJzY29yZUJvYXJkVGV4dCIsImluZm9ybWF0aW9uVGV4dCIsImNsYXNzaWNHYW1lVGV4dE1vdXNlT3ZlciIsImNsYXNzaWNHYW1lVGV4dE1vdXNlT3V0IiwiZWFzeVRleHQiLCJtZWRpdW1UZXh0IiwiaGFyZFRleHQiLCJiYWNrVGV4dCIsImVhc3lUZXh0TW91c2VPdmVyIiwiZWFzeVRleHRNb3VzZU91dCIsIm1lZGl1bVRleHRNb3VzZU92ZXIiLCJtZWRpdW1UZXh0TW91c2VPdXQiLCJoYXJkVGV4dE1vdXNlT3ZlciIsImhhcmRUZXh0TW91c2VPdXQiLCJiYWNrVGV4dE1vdXNlT3ZlciIsImJhY2tUZXh0TW91c2VPdXQiLCJjbGFzc2ljRGlmZmljdWx0eVNlbGVjdE1lbnUiLCJ0aW1lVHJpYWxHYW1lVGV4dE1vdXNlT3ZlciIsInRpbWVUcmlhbEdhbWVUZXh0TW91c2VPdXQiLCJ0aW1lVHJpYWxUZXh0IiwidGltZVRyaWFsVGV4dE1vdXNlT3ZlciIsInRpbWVUcmlhbFRleHRNb3VzZU91dCIsInRpbWVUcmlhbEdhbWVNZW51Iiwic2NvcmVCb2FyZFRleHRNb3VzZU92ZXIiLCJzY29yZUJvYXJkVGV4dE1vdXNlT3V0IiwiY2xhc3NpY1RleHQiLCJsZXZlbFRleHQiLCJzY29yZUJvYXJkTWVudSIsImluZm9ybWF0aW9uVGV4dE1vdXNlT3ZlciIsImluZm9ybWF0aW9uVGV4dE1vdXNlT3V0IiwiaW5mb1RleHQiLCJpbmZvcm1hdGlvbk1lbnUiLCJqIiwiZ3JlYXRlciIsInNtYWxsZXIiLCJnZW5lcmF0ZUl0IiwiY3VycmVudEJsb2NrIiwibGVmdEJsb2NrIiwidXBCbG9jayIsInJpZ2h0QmxvY2siLCJkb3duQmxvY2siLCJzaHVmZmxlSXQiLCJvbkNsaWNrQmxvY2siLCJjb25uZWN0aW9uSGFuZGxlciIsImNoZWNrUGlwZUNvbm5lY3Rpb25zIiwicGFuZWxXaWR0aCIsInBhbmVsSGVpZ2h0IiwiaW5mb3JtYXRpb25MYXllciIsInBhbmVsIiwidGltZXJHcm91cCIsInNjb3JlIiwibGV2ZWxHcm91cCIsInRpbWVyVGl0bGVUZXh0IiwidGltZXJUZXh0Iiwic2NvcmVUaXRsZVRleHQiLCJzY29yZVRleHQiLCJsZXZlbFRpdGxlVGV4dCIsInNob3dUaW1lciIsImhpZGVUaW1lciIsInNob3dTY29yZSIsInNjb3JlVGltZXIiLCJzaG93TGV2ZWwiLCJjbGFzc2ljR2FtZUZpbmlzaGVkIiwidGltZVRyaWFsR2FtZUZpbmlzaGVkIiwiaW5zdGFuY2UiLCJmaW5pc2hlZCIsImNoZWNrR2FtZVN0YXR1cyIsImxvYWRBcHBsaWNhdGlvbiIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInBpcGUiXSwibWFwcGluZ3MiOiJDQUFBLFdBQUEsT0FBQSxTQUFBQSxFQUFBQyxFQUFBQyxFQUFBQyxHQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQUEsSUFBQUosRUFBQUcsR0FBQSxDQUFBLElBQUFKLEVBQUFJLEdBQUEsQ0FBQSxJQUFBRSxFQUFBLG1CQUFBQyxTQUFBQSxRQUFBLElBQUFGLEdBQUFDLEVBQUEsT0FBQUEsRUFBQUYsR0FBQSxHQUFBLEdBQUFJLEVBQUEsT0FBQUEsRUFBQUosR0FBQSxHQUFBLElBQUFLLEVBQUEsSUFBQUMsTUFBQSx1QkFBQU4sRUFBQSxLQUFBLE1BQUFLLEVBQUFFLEtBQUEsbUJBQUFGLEVBQUEsSUFBQUcsRUFBQVgsRUFBQUcsSUFBQVMsWUFBQWIsRUFBQUksR0FBQSxHQUFBVSxLQUFBRixFQUFBQyxRQUFBLFNBQUFkLEdBQUEsT0FBQUksRUFBQUgsRUFBQUksR0FBQSxHQUFBTCxJQUFBQSxJQUFBYSxFQUFBQSxFQUFBQyxRQUFBZCxFQUFBQyxFQUFBQyxFQUFBQyxHQUFBLE9BQUFELEVBQUFHLEdBQUFTLFFBQUEsSUFBQSxJQUFBTCxFQUFBLG1CQUFBRCxTQUFBQSxRQUFBSCxFQUFBLEVBQUFBLEVBQUFGLEVBQUFhLE9BQUFYLElBQUFELEVBQUFELEVBQUFFLElBQUEsT0FBQUQsR0FBQSxFQUFBLEVBQUFh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LElBQUEsSUFBQSxJQUFBLElBQ0EsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUNBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQ0EsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUNBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQ0EsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUNBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQ0EsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUNBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQ0EsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUNBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxLQUdBQyxHQUNBLEVBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQ0EsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FDQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUNBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQ0EsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FDQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUNBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQ0EsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FDQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUNBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQ0EsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FDQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUNBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQ0EsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FDQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUNBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxJQTJQQTdvQixFQUFBb0IsUUFBQTBuQixLQUFBLFNBQUFqSyxHQUNBLElBQUFrSyxFQUFBN29CLEtBQUFtTSxNQUFBcE0sS0FBQStvQixjQUVBRCxFQUFBLEdBM1BBLFNBQUFsSyxFQUFBa0ssR0FFQSxJQUlBNWlCLEVBQUFDLEVBQUFoSSxFQUFBUSxFQUFBcXFCLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQ0FDLEVBQUFDLEVBQUFDLEVBQUFD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a0gsU0FHQSxJQUFBLElBQUEzK0MsRUFBQSxFQUFBQSxFQUFBMjNDLEVBQUEzM0MsSUFDQSxJQUFBLElBQUE0OEMsRUFBQSxFQUFBQSxFQUFBaEYsRUFBQWdGLElBQ0F2RSxFQUFBcjRDLEdBQUE0OEMsR0FBQXB6QixTQUtBNnVCLEVBQUF2MkMsS0FBQXlzQixNQUFBcXdCLEVBQUF6SixJQUFBcUQsSUFBQTEyQyxLQUFBeXNCLE1BQUFxd0IsRUFBQXhKLE9BQUFvRCxLQUdBMzNDLEVBQUFKLFNBQ0FzK0MsZ0JBdnpDQSxXQUNBdHdDLEVBQUF6SSxPQUFBZzVDLFdBQ0F0d0MsRUFBQTFJLE9BQUFpNUMsWUFBQSxJQUVBLzJCLEVBQUEsSUFBQXRtQixFQUFBMkIsT0FDQW9tQixVQUFBLFFBQ0FsYixNQUFBQSxFQUNBQyxPQUFBQSxJQUdBNnJDLDZFQ2hDQSxhQUVBLElBQUEyRSxFQUFBLytDLEVBQUEsYUFFQTZGLE9BQUFzSSxPQUFBLFdBQ0E0d0MsRUFBQUgiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiXG4vKlxuICogS2luZXRpY0pTIEphdmFTY3JpcHQgRnJhbWV3b3JrIHY1LjIuMFxuICogaHR0cDovL2xhdnJ0b24uZ2l0aHViLmlvL0tpbmV0aWNKUy9cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgb3IgR1BMIFZlcnNpb24gMiBsaWNlbnNlcy5cbiAqIERhdGU6IDIwMTUtMDEtMjJcbiAqXG4gKiBPcmlnaW5hbCB3b3JrIENvcHlyaWdodCAoQykgMjAxMSAtIDIwMTMgYnkgRXJpYyBSb3dlbGxcbiAqIE1vZGlmaWVkIHdvcmsgQ29weXJpZ2h0IChDKSAyMDE0IC0gMjAxNSBieSBBbnRvbiBMYXZyZW5vdlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbi8qKlxuICogQG5hbWVzcGFjZSBLaW5ldGljXG4gKi9cbi8qanNoaW50IC1XMDc5LCAtVzAyMCovXG52YXIgS2luZXRpYyA9IHt9O1xuKGZ1bmN0aW9uKHJvb3QpIHtcbiAgICB2YXIgUElfT1ZFUl8xODAgPSBNYXRoLlBJIC8gMTgwO1xuXG4gICAgS2luZXRpYyA9IHtcbiAgICAgICAgLy8gcHVibGljXG4gICAgICAgIHZlcnNpb246ICc1LjIuMCcsXG5cbiAgICAgICAgLy8gcHJpdmF0ZVxuICAgICAgICBzdGFnZXM6IFtdLFxuICAgICAgICBpZENvdW50ZXI6IDAsXG4gICAgICAgIGlkczoge30sXG4gICAgICAgIG5hbWVzOiB7fSxcbiAgICAgICAgc2hhcGVzOiB7fSxcbiAgICAgICAgbGlzdGVuQ2xpY2tUYXA6IGZhbHNlLFxuICAgICAgICBpbkRibENsaWNrV2luZG93OiBmYWxzZSxcblxuICAgICAgICAvLyBjb25maWd1cmF0aW9uc1xuICAgICAgICBlbmFibGVUcmFjZTogZmFsc2UsXG4gICAgICAgIHRyYWNlQXJyTWF4OiAxMDAsXG4gICAgICAgIGRibENsaWNrV2luZG93OiA0MDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHbG9iYWwgcGl4ZWwgcmF0aW8gY29uZmlndXJhdGlvbi4gS2luZXRpY0pTIGF1dG9tYXRpY2FsbHkgZGV0ZWN0IHBpeGVsIHJhdGlvIG9mIGN1cnJlbnQgZGV2aWNlLlxuICAgICAgICAgKiBCdXQgeW91IG1heSBvdmVycmlkZSBzdWNoIHByb3BlcnR5LCBpZiB5b3Ugd2FudCB0byB1c2UgeW91ciB2YWx1ZS5cbiAgICAgICAgICogQHByb3BlcnR5IHBpeGVsUmF0aW9cbiAgICAgICAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIEtpbmV0aWMucGl4ZWxSYXRpbyA9IDE7XG4gICAgICAgICAqL1xuICAgICAgICBwaXhlbFJhdGlvOiB1bmRlZmluZWQsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEcmFnIGRpc3RhbmNlIHByb3BlcnR5LiBJZiB5b3Ugc3RhcnQgdG8gZHJhZyBhIG5vZGUgeW91IG1heSB3YW50IHRvIHdhaXQgdW50aWwgcG9pbnRlciBpcyBtb3ZlZCB0byBzb21lIGRpc3RhbmNlIGZyb20gc3RhcnQgcG9pbnQsXG4gICAgICAgICAqIG9ubHkgdGhlbiBzdGFydCBkcmFnZ2luZy5cbiAgICAgICAgICogQHByb3BlcnR5IGRyYWdEaXN0YW5jZVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIEtpbmV0aWMuZHJhZ0Rpc3RhbmNlID0gMTA7XG4gICAgICAgICAqL1xuICAgICAgICBkcmFnRGlzdGFuY2UgOiAwLFxuICAgICAgICAvKipcbiAgICAgICAgICogVXNlIGRlZ3JlZSB2YWx1ZXMgZm9yIGFuZ2xlIHByb3BlcnRpZXMuIFlvdSBtYXkgc2V0IHRoaXMgcHJvcGVydHkgdG8gZmFsc2UgaWYgeW91IHdhbnQgdG8gdXNlIHJhZGlhbnQgdmFsdWVzLlxuICAgICAgICAgKiBAcHJvcGVydHkgYW5nbGVEZWdcbiAgICAgICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBub2RlLnJvdGF0aW9uKDQ1KTsgLy8gNDUgZGVncmVlc1xuICAgICAgICAgKiBLaW5ldGljLmFuZ2xlRGVnID0gZmFsc2U7XG4gICAgICAgICAqIG5vZGUucm90YXRpb24oTWF0aC5QSSAvIDIpOyAvLyBQSS8yIHJhZGlhblxuICAgICAgICAgKi9cbiAgICAgICAgYW5nbGVEZWc6IHRydWUsXG4gICAgICAgICAvKipcbiAgICAgICAgICogU2hvdyBkaWZmZXJlbnQgd2FybmluZ3MgYWJvdXQgZXJyb3JzIG9yIHdyb25nIEFQSSB1c2FnZVxuICAgICAgICAgKiBAcHJvcGVydHkgc2hvd1dhcm5pbmdzXG4gICAgICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogS2luZXRpYy5zaG93V2FybmluZ3MgPSBmYWxzZTtcbiAgICAgICAgICovXG4gICAgICAgIHNob3dXYXJuaW5ncyA6IHRydWUsXG5cblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZXNwYWNlIEZpbHRlcnNcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgICAgICovXG4gICAgICAgIEZpbHRlcnM6IHt9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb2RlIGNvbnN0cnVjdG9yLiBOb2RlcyBhcmUgZW50aXRpZXMgdGhhdCBjYW4gYmUgdHJhbnNmb3JtZWQsIGxheWVyZWQsXG4gICAgICAgICAqIGFuZCBoYXZlIGJvdW5kIGV2ZW50cy4gVGhlIHN0YWdlLCBsYXllcnMsIGdyb3VwcywgYW5kIHNoYXBlcyBhbGwgZXh0ZW5kIE5vZGUuXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAgICAgKiBAYWJzdHJhY3RcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcubGlzdGVuaW5nXSB3aGV0aGVyIG9yIG5vdCB0aGUgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuaWRdIHVuaXF1ZSBpZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2NhbGVdIHNldCBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVYXSBzZXQgc2NhbGUgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVZXSBzZXQgc2NhbGUgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucm90YXRpb25dIHJvdGF0aW9uIGluIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLm9mZnNldF0gb2Zmc2V0IGZyb20gY2VudGVyIHBvaW50IGFuZCByb3RhdGlvbiBwb2ludFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WF0gc2V0IG9mZnNldCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRZXSBzZXQgb2Zmc2V0IHlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmFnZ2FibGVdIG1ha2VzIHRoZSBub2RlIGRyYWdnYWJsZS4gIFdoZW4gc3RhZ2VzIGFyZSBkcmFnZ2FibGUsIHlvdSBjYW4gZHJhZyBhbmQgZHJvcFxyXG4gICAgICogIHRoZSBlbnRpcmUgc3RhZ2UgYnkgZHJhZ2dpbmcgYW55IHBvcnRpb24gb2YgdGhlIHN0YWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5kcmFnRGlzdGFuY2VdXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29uZmlnLmRyYWdCb3VuZEZ1bmNdXG4gICAgICAgICAqL1xuICAgICAgICBOb2RlOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMuX2luaXQoY29uZmlnKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2hhcGUgY29uc3RydWN0b3IuICBTaGFwZXMgYXJlIHByaW1pdGl2ZSBvYmplY3RzIHN1Y2ggYXMgcmVjdGFuZ2xlcyxcbiAgICAgICAgICogIGNpcmNsZXMsIHRleHQsIGxpbmVzLCBldGMuXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAgICAgKiBAYXVnbWVudHMgS2luZXRpYy5Ob2RlXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbF0gZmlsbCBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxSZWRdIHNldCBmaWxsIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsR3JlZW5dIHNldCBmaWxsIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxCbHVlXSBzZXQgZmlsbCBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxBbHBoYV0gc2V0IGZpbGwgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ltYWdlfSBbY29uZmlnLmZpbGxQYXR0ZXJuSW1hZ2VdIGZpbGwgcGF0dGVybiBpbWFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5YXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5ZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRZXSBcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5Sb3RhdGlvbl1cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQYXR0ZXJuUmVwZWF0XSBjYW4gYmUgXCJyZXBlYXRcIiwgXCJyZXBlYXQteFwiLCBcInJlcGVhdC15XCIsIG9yIFwibm8tcmVwZWF0XCIuICBUaGUgZGVmYXVsdCBpcyBcIm5vLXJlcGVhdFwiXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFldIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZmlsbEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZmlsbC4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQcmlvcml0eV0gY2FuIGJlIGNvbG9yLCBsaW5lYXItZ3JhZGllbnQsIHJhZGlhbC1ncmFpZGVudCwgb3IgcGF0dGVybi4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGNvbG9yLiAgVGhlIGZpbGxQcmlvcml0eSBwcm9wZXJ0eSBtYWtlcyBpdCByZWFsbHkgZWFzeSB0byB0b2dnbGUgYmV0d2VlbiBkaWZmZXJlbnQgZmlsbCB0eXBlcy4gIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byB0b2dnbGUgYmV0d2VlbiBhIGZpbGwgY29sb3Igc3R5bGUgYW5kIGEgZmlsbCBwYXR0ZXJuIHN0eWxlLCBzaW1wbHkgc2V0IHRoZSBmaWxsIHByb3BlcnR5IGFuZCB0aGUgZmlsbFBhdHRlcm4gcHJvcGVydGllcywgYW5kIHRoZW4gdXNlIHNldEZpbGxQcmlvcml0eSgnY29sb3InKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggYSBjb2xvciBmaWxsLCBvciB1c2Ugc2V0RmlsbFByaW9yaXR5KCdwYXR0ZXJuJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIHRoZSBwYXR0ZXJuIGZpbGwgY29uZmlndXJhdGlvblxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc3Ryb2tlXSBzdHJva2UgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VSZWRdIHNldCBzdHJva2UgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUdyZWVuXSBzZXQgc3Ryb2tlIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUJsdWVdIHNldCBzdHJva2UgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VBbHBoYV0gc2V0IHN0cm9rZSBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnN0cm9rZVdpZHRoXSBzdHJva2Ugd2lkdGhcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VTY2FsZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyBzdHJva2Ugc2NhbGUuICBUaGUgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzdHJva2UuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lSm9pbl0gY2FuIGJlIG1pdGVyLCByb3VuZCwgb3IgYmV2ZWwuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIG1pdGVyXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lQ2FwXSBjYW4gYmUgYnV0dCwgcm91bmQsIG9yIHNxYXJlLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBidXR0XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zaGFkb3dDb2xvcl1cclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dSZWRdIHNldCBzaGFkb3cgY29sb3IgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0dyZWVuXSBzZXQgc2hhZG93IGNvbG9yIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0JsdWVdIHNldCBzaGFkb3cgY29sb3IgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dBbHBoYV0gc2V0IHNoYWRvdyBjb2xvciBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd0JsdXJdXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zaGFkb3dPZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09wYWNpdHldIHNoYWRvdyBvcGFjaXR5LiAgQ2FuIGJlIGFueSByZWFsIG51bWJlclxyXG4gICAgICogIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnNoYWRvd0VuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc2hhZG93LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5kYXNoXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRhc2hFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGRhc2hBcnJheS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmxpc3RlbmluZ10gd2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub3BhY2l0eV0gZGV0ZXJtaW5lcyBub2RlIG9wYWNpdHkuICBDYW4gYmUgYW55IG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNjYWxlXSBzZXQgc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWF0gc2V0IHNjYWxlIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWV0gc2V0IHNjYWxlIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnJvdGF0aW9uXSByb3RhdGlvbiBpbiBkZWdyZWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5vZmZzZXRdIG9mZnNldCBmcm9tIGNlbnRlciBwb2ludCBhbmQgcm90YXRpb24gcG9pbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFhdIHNldCBvZmZzZXQgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WV0gc2V0IG9mZnNldCB5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZHJhZ2dhYmxlXSBtYWtlcyB0aGUgbm9kZSBkcmFnZ2FibGUuICBXaGVuIHN0YWdlcyBhcmUgZHJhZ2dhYmxlLCB5b3UgY2FuIGRyYWcgYW5kIGRyb3BcclxuICAgICAqICB0aGUgZW50aXJlIHN0YWdlIGJ5IGRyYWdnaW5nIGFueSBwb3J0aW9uIG9mIHRoZSBzdGFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZHJhZ0Rpc3RhbmNlXVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbmZpZy5kcmFnQm91bmRGdW5jXVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiB2YXIgY3VzdG9tU2hhcGUgPSBuZXcgS2luZXRpYy5TaGFwZSh7XG4gICAgICAgICAqICAgeDogNSxcbiAgICAgICAgICogICB5OiAxMCxcbiAgICAgICAgICogICBmaWxsOiAncmVkJyxcbiAgICAgICAgICogICAvLyBhIEtpbmV0aWMuQ2FudmFzIHJlbmRlcmVyIGlzIHBhc3NlZCBpbnRvIHRoZSBkcmF3RnVuYyBmdW5jdGlvblxuICAgICAgICAgKiAgIGRyYXdGdW5jOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAqICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgKiAgICAgY29udGV4dC5tb3ZlVG8oMjAwLCA1MCk7XG4gICAgICAgICAqICAgICBjb250ZXh0LmxpbmVUbyg0MjAsIDgwKTtcbiAgICAgICAgICogICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbygzMDAsIDEwMCwgMjYwLCAxNzApO1xuICAgICAgICAgKiAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICogICAgIGNvbnRleHQuZmlsbFN0cm9rZVNoYXBlKHRoaXMpO1xuICAgICAgICAgKiAgIH1cbiAgICAgICAgICp9KTtcbiAgICAgICAgICovXG4gICAgICAgIFNoYXBlOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMuX19pbml0KGNvbmZpZyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnRhaW5lciBjb25zdHJ1Y3Rvci4mbmJzcDsgQ29udGFpbmVycyBhcmUgdXNlZCB0byBjb250YWluIG5vZGVzIG9yIG90aGVyIGNvbnRhaW5lcnNcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICAgICAqIEBhdWdtZW50cyBLaW5ldGljLk5vZGVcbiAgICAgICAgICogQGFic3RyYWN0XG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmxpc3RlbmluZ10gd2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub3BhY2l0eV0gZGV0ZXJtaW5lcyBub2RlIG9wYWNpdHkuICBDYW4gYmUgYW55IG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNjYWxlXSBzZXQgc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWF0gc2V0IHNjYWxlIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWV0gc2V0IHNjYWxlIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnJvdGF0aW9uXSByb3RhdGlvbiBpbiBkZWdyZWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5vZmZzZXRdIG9mZnNldCBmcm9tIGNlbnRlciBwb2ludCBhbmQgcm90YXRpb24gcG9pbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFhdIHNldCBvZmZzZXQgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WV0gc2V0IG9mZnNldCB5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZHJhZ2dhYmxlXSBtYWtlcyB0aGUgbm9kZSBkcmFnZ2FibGUuICBXaGVuIHN0YWdlcyBhcmUgZHJhZ2dhYmxlLCB5b3UgY2FuIGRyYWcgYW5kIGRyb3BcclxuICAgICAqICB0aGUgZW50aXJlIHN0YWdlIGJ5IGRyYWdnaW5nIGFueSBwb3J0aW9uIG9mIHRoZSBzdGFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZHJhZ0Rpc3RhbmNlXVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbmZpZy5kcmFnQm91bmRGdW5jXVxuICAgICAgICAgKiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmNsaXBdIHNldCBjbGlwXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5jbGlwWF0gc2V0IGNsaXAgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY2xpcFldIHNldCBjbGlwIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmNsaXBXaWR0aF0gc2V0IGNsaXAgd2lkdGhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmNsaXBIZWlnaHRdIHNldCBjbGlwIGhlaWdodFxyXG5cbiAgICAgICAgICovXG4gICAgICAgIENvbnRhaW5lcjogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLl9faW5pdChjb25maWcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdGFnZSBjb25zdHJ1Y3Rvci4gIEEgc3RhZ2UgaXMgdXNlZCB0byBjb250YWluIG11bHRpcGxlIGxheWVyc1xuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgICAgICogQGF1Z21lbnRzIEtpbmV0aWMuQ29udGFpbmVyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8RWxlbWVudH0gY29uZmlnLmNvbnRhaW5lciBDb250YWluZXIgaWQgb3IgRE9NIGVsZW1lbnRcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmxpc3RlbmluZ10gd2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub3BhY2l0eV0gZGV0ZXJtaW5lcyBub2RlIG9wYWNpdHkuICBDYW4gYmUgYW55IG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNjYWxlXSBzZXQgc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWF0gc2V0IHNjYWxlIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWV0gc2V0IHNjYWxlIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnJvdGF0aW9uXSByb3RhdGlvbiBpbiBkZWdyZWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5vZmZzZXRdIG9mZnNldCBmcm9tIGNlbnRlciBwb2ludCBhbmQgcm90YXRpb24gcG9pbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFhdIHNldCBvZmZzZXQgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WV0gc2V0IG9mZnNldCB5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZHJhZ2dhYmxlXSBtYWtlcyB0aGUgbm9kZSBkcmFnZ2FibGUuICBXaGVuIHN0YWdlcyBhcmUgZHJhZ2dhYmxlLCB5b3UgY2FuIGRyYWcgYW5kIGRyb3BcclxuICAgICAqICB0aGUgZW50aXJlIHN0YWdlIGJ5IGRyYWdnaW5nIGFueSBwb3J0aW9uIG9mIHRoZSBzdGFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZHJhZ0Rpc3RhbmNlXVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbmZpZy5kcmFnQm91bmRGdW5jXVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiB2YXIgc3RhZ2UgPSBuZXcgS2luZXRpYy5TdGFnZSh7XG4gICAgICAgICAqICAgd2lkdGg6IDUwMCxcbiAgICAgICAgICogICBoZWlnaHQ6IDgwMCxcbiAgICAgICAgICogICBjb250YWluZXI6ICdjb250YWluZXJJZCdcbiAgICAgICAgICogfSk7XG4gICAgICAgICAqL1xuICAgICAgICBTdGFnZTogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLl9fX2luaXQoY29uZmlnKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQmFzZUxheWVyIGNvbnN0cnVjdG9yLiBcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICAgICAqIEBhdWdtZW50cyBLaW5ldGljLkNvbnRhaW5lclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5jbGVhckJlZm9yZURyYXddIHNldCB0aGlzIHByb3BlcnR5IHRvIGZhbHNlIGlmIHlvdSBkb24ndCB3YW50XG4gICAgICAgICAqIHRvIGNsZWFyIHRoZSBjYW52YXMgYmVmb3JlIGVhY2ggbGF5ZXIgZHJhdy4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcudmlzaWJsZV1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5saXN0ZW5pbmddIHdoZXRoZXIgb3Igbm90IHRoZSBub2RlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5pZF0gdW5pcXVlIGlkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5uYW1lXSBub24tdW5pcXVlIG5hbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9wYWNpdHldIGRldGVybWluZXMgbm9kZSBvcGFjaXR5LiAgQ2FuIGJlIGFueSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zY2FsZV0gc2V0IHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVhdIHNldCBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVldIHNldCBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5yb3RhdGlvbl0gcm90YXRpb24gaW4gZGVncmVlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcub2Zmc2V0XSBvZmZzZXQgZnJvbSBjZW50ZXIgcG9pbnQgYW5kIHJvdGF0aW9uIHBvaW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRYXSBzZXQgb2Zmc2V0IHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFldIHNldCBvZmZzZXQgeVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRyYWdnYWJsZV0gbWFrZXMgdGhlIG5vZGUgZHJhZ2dhYmxlLiAgV2hlbiBzdGFnZXMgYXJlIGRyYWdnYWJsZSwgeW91IGNhbiBkcmFnIGFuZCBkcm9wXHJcbiAgICAgKiAgdGhlIGVudGlyZSBzdGFnZSBieSBkcmFnZ2luZyBhbnkgcG9ydGlvbiBvZiB0aGUgc3RhZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmRyYWdEaXN0YW5jZV1cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb25maWcuZHJhZ0JvdW5kRnVuY11cbiAgICAgICAgICogKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5jbGlwXSBzZXQgY2xpcFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY2xpcFhdIHNldCBjbGlwIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmNsaXBZXSBzZXQgY2xpcCB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5jbGlwV2lkdGhdIHNldCBjbGlwIHdpZHRoXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5jbGlwSGVpZ2h0XSBzZXQgY2xpcCBoZWlnaHRcclxuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIHZhciBsYXllciA9IG5ldyBLaW5ldGljLkxheWVyKCk7XG4gICAgICAgICAqL1xuICAgICAgICBCYXNlTGF5ZXI6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5fX19pbml0KGNvbmZpZyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIExheWVyIGNvbnN0cnVjdG9yLiAgTGF5ZXJzIGFyZSB0aWVkIHRvIHRoZWlyIG93biBjYW52YXMgZWxlbWVudCBhbmQgYXJlIHVzZWRcbiAgICAgICAgICogdG8gY29udGFpbiBncm91cHMgb3Igc2hhcGVzLlxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgICAgICogQGF1Z21lbnRzIEtpbmV0aWMuQmFzZUxheWVyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmNsZWFyQmVmb3JlRHJhd10gc2V0IHRoaXMgcHJvcGVydHkgdG8gZmFsc2UgaWYgeW91IGRvbid0IHdhbnRcbiAgICAgICAgICogdG8gY2xlYXIgdGhlIGNhbnZhcyBiZWZvcmUgZWFjaCBsYXllciBkcmF3LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmxpc3RlbmluZ10gd2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub3BhY2l0eV0gZGV0ZXJtaW5lcyBub2RlIG9wYWNpdHkuICBDYW4gYmUgYW55IG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNjYWxlXSBzZXQgc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWF0gc2V0IHNjYWxlIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWV0gc2V0IHNjYWxlIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnJvdGF0aW9uXSByb3RhdGlvbiBpbiBkZWdyZWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5vZmZzZXRdIG9mZnNldCBmcm9tIGNlbnRlciBwb2ludCBhbmQgcm90YXRpb24gcG9pbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFhdIHNldCBvZmZzZXQgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WV0gc2V0IG9mZnNldCB5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZHJhZ2dhYmxlXSBtYWtlcyB0aGUgbm9kZSBkcmFnZ2FibGUuICBXaGVuIHN0YWdlcyBhcmUgZHJhZ2dhYmxlLCB5b3UgY2FuIGRyYWcgYW5kIGRyb3BcclxuICAgICAqICB0aGUgZW50aXJlIHN0YWdlIGJ5IGRyYWdnaW5nIGFueSBwb3J0aW9uIG9mIHRoZSBzdGFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZHJhZ0Rpc3RhbmNlXVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbmZpZy5kcmFnQm91bmRGdW5jXVxuICAgICAgICAgKiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmNsaXBdIHNldCBjbGlwXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5jbGlwWF0gc2V0IGNsaXAgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY2xpcFldIHNldCBjbGlwIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmNsaXBXaWR0aF0gc2V0IGNsaXAgd2lkdGhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmNsaXBIZWlnaHRdIHNldCBjbGlwIGhlaWdodFxyXG5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogdmFyIGxheWVyID0gbmV3IEtpbmV0aWMuTGF5ZXIoKTtcbiAgICAgICAgICovXG4gICAgICAgIExheWVyOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMuX19fX2luaXQoY29uZmlnKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRmFzdExheWVyIGNvbnN0cnVjdG9yLiBMYXllcnMgYXJlIHRpZWQgdG8gdGhlaXIgb3duIGNhbnZhcyBlbGVtZW50IGFuZCBhcmUgdXNlZFxuICAgICAgICAgKiB0byBjb250YWluIHNoYXBlcyBvbmx5LiAgSWYgeW91IGRvbid0IG5lZWQgbm9kZSBuZXN0aW5nLCBtb3VzZSBhbmQgdG91Y2ggaW50ZXJhY3Rpb25zLFxuICAgICAgICAgKiBvciBldmVudCBwdWIvc3ViLCB5b3Ugc2hvdWxkIHVzZSBGYXN0TGF5ZXIgaW5zdGVhZCBvZiBMYXllciB0byBjcmVhdGUgeW91ciBsYXllcnMuXG4gICAgICAgICAqIEl0IHJlbmRlcnMgYWJvdXQgMnggZmFzdGVyIHRoYW4gbm9ybWFsIGxheWVycy5cbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICAgICAqIEBhdWdtZW50cyBLaW5ldGljLkJhc2VMYXllclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5jbGVhckJlZm9yZURyYXddIHNldCB0aGlzIHByb3BlcnR5IHRvIGZhbHNlIGlmIHlvdSBkb24ndCB3YW50XG4gICAgICAgICAqIHRvIGNsZWFyIHRoZSBjYW52YXMgYmVmb3JlIGVhY2ggbGF5ZXIgZHJhdy4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5pZF0gdW5pcXVlIGlkXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxuICAgICAgICAgKiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmNsaXBdIHNldCBjbGlwXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5jbGlwWF0gc2V0IGNsaXAgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY2xpcFldIHNldCBjbGlwIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmNsaXBXaWR0aF0gc2V0IGNsaXAgd2lkdGhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmNsaXBIZWlnaHRdIHNldCBjbGlwIGhlaWdodFxyXG5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogdmFyIGxheWVyID0gbmV3IEtpbmV0aWMuRmFzdExheWVyKCk7XG4gICAgICAgICAqL1xuICAgICAgICBGYXN0TGF5ZXI6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5fX19faW5pdChjb25maWcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHcm91cCBjb25zdHJ1Y3Rvci4gIEdyb3VwcyBhcmUgdXNlZCB0byBjb250YWluIHNoYXBlcyBvciBvdGhlciBncm91cHMuXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAgICAgKiBAYXVnbWVudHMgS2luZXRpYy5Db250YWluZXJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcubGlzdGVuaW5nXSB3aGV0aGVyIG9yIG5vdCB0aGUgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuaWRdIHVuaXF1ZSBpZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2NhbGVdIHNldCBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVYXSBzZXQgc2NhbGUgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVZXSBzZXQgc2NhbGUgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucm90YXRpb25dIHJvdGF0aW9uIGluIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLm9mZnNldF0gb2Zmc2V0IGZyb20gY2VudGVyIHBvaW50IGFuZCByb3RhdGlvbiBwb2ludFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WF0gc2V0IG9mZnNldCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRZXSBzZXQgb2Zmc2V0IHlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmFnZ2FibGVdIG1ha2VzIHRoZSBub2RlIGRyYWdnYWJsZS4gIFdoZW4gc3RhZ2VzIGFyZSBkcmFnZ2FibGUsIHlvdSBjYW4gZHJhZyBhbmQgZHJvcFxyXG4gICAgICogIHRoZSBlbnRpcmUgc3RhZ2UgYnkgZHJhZ2dpbmcgYW55IHBvcnRpb24gb2YgdGhlIHN0YWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5kcmFnRGlzdGFuY2VdXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29uZmlnLmRyYWdCb3VuZEZ1bmNdXG4gICAgICAgICAqICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuY2xpcF0gc2V0IGNsaXBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmNsaXBYXSBzZXQgY2xpcCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5jbGlwWV0gc2V0IGNsaXAgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY2xpcFdpZHRoXSBzZXQgY2xpcCB3aWR0aFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY2xpcEhlaWdodF0gc2V0IGNsaXAgaGVpZ2h0XHJcblxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiB2YXIgZ3JvdXAgPSBuZXcgS2luZXRpYy5Hcm91cCgpO1xuICAgICAgICAgKi9cbiAgICAgICAgR3JvdXA6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5fX19pbml0KGNvbmZpZyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJldHVybnMgd2hldGhlciBvciBub3QgZHJhZyBhbmQgZHJvcCBpcyBjdXJyZW50bHkgYWN0aXZlXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgICAgICovXG4gICAgICAgIGlzRHJhZ2dpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGRkID0gS2luZXRpYy5ERDtcblxuICAgICAgICAgICAgLy8gaWYgREQgaXMgbm90IGluY2x1ZGVkIHdpdGggdGhlIGJ1aWxkLCB0aGVuXG4gICAgICAgICAgICAvLyBkcmFnIGFuZCBkcm9wIGlzIG5vdCBldmVuIHBvc3NpYmxlXG4gICAgICAgICAgICBpZiAoZGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGQuaXNEcmFnZ2luZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgKiByZXR1cm5zIHdoZXRoZXIgb3Igbm90IGEgZHJhZyBhbmQgZHJvcCBvcGVyYXRpb24gaXMgcmVhZHksIGJ1dCBtYXlcbiAgICAgICAgKiAgbm90IG5lY2Vzc2FyaWx5IGhhdmUgc3RhcnRlZFxuICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAgICAqL1xuICAgICAgICBpc0RyYWdSZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZGQgPSBLaW5ldGljLkREO1xuXG4gICAgICAgICAgICAvLyBpZiBERCBpcyBub3QgaW5jbHVkZWQgd2l0aCB0aGUgYnVpbGQsIHRoZW5cbiAgICAgICAgICAgIC8vIGRyYWcgYW5kIGRyb3AgaXMgbm90IGV2ZW4gcG9zc2libGVcbiAgICAgICAgICAgIGlmIChkZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIWRkLm5vZGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2FkZElkOiBmdW5jdGlvbihub2RlLCBpZCkge1xuICAgICAgICAgICAgaWYoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaWRzW2lkXSA9IG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9yZW1vdmVJZDogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgIGlmKGlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5pZHNbaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfYWRkTmFtZTogZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICAgICAgICAgICAgaWYobmFtZSAhPT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgbmFtZXMgPSBuYW1lLnNwbGl0KC9cXHMvZyk7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBuID0gMDsgbiA8IG5hbWVzLmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWJuYW1lID0gbmFtZXNbbl07XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLm5hbWVzW3N1Ym5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWVzW3N1Ym5hbWVdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWVzW3N1Ym5hbWVdLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9yZW1vdmVOYW1lOiBmdW5jdGlvbihuYW1lLCBfaWQpIHtcbiAgICAgICAgICAgIGlmKG5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXMubmFtZXNbbmFtZV07XG4gICAgICAgICAgICAgICAgaWYobm9kZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIG4gPSAwOyBuIDwgbm9kZXMubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBubyA9IG5vZGVzW25dO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYobm8uX2lkID09PSBfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2Rlcy5zcGxpY2UobiwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYobm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5uYW1lc1tuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0QW5nbGU6IGZ1bmN0aW9uKGFuZ2xlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbmdsZURlZyA/IGFuZ2xlICogUElfT1ZFUl8xODAgOiBhbmdsZTtcbiAgICAgICAgfSxcbiAgICAgICAgX3BhcnNlVUE6IGZ1bmN0aW9uKHVzZXJBZ2VudCkge1xuICAgICAgICAgICAgdmFyIHVhID0gdXNlckFnZW50LnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgLy8galF1ZXJ5IFVBIHJlZ2V4XG4gICAgICAgICAgICAgICAgbWF0Y2ggPSAvKGNocm9tZSlbIFxcL10oW1xcdy5dKykvLmV4ZWMoIHVhICkgfHxcbiAgICAgICAgICAgICAgICAvKHdlYmtpdClbIFxcL10oW1xcdy5dKykvLmV4ZWMoIHVhICkgfHxcbiAgICAgICAgICAgICAgICAvKG9wZXJhKSg/Oi4qdmVyc2lvbnwpWyBcXC9dKFtcXHcuXSspLy5leGVjKCB1YSApIHx8XG4gICAgICAgICAgICAgICAgLyhtc2llKSAoW1xcdy5dKykvLmV4ZWMoIHVhICkgfHxcbiAgICAgICAgICAgICAgICB1YS5pbmRleE9mKCdjb21wYXRpYmxlJykgPCAwICYmIC8obW96aWxsYSkoPzouKj8gcnY6KFtcXHcuXSspfCkvLmV4ZWMoIHVhICkgfHxcbiAgICAgICAgICAgICAgICBbXSxcblxuICAgICAgICAgICAgICAgIC8vIGFkZGluZyBtb2JpbGUgZmxhZyBhcyB3ZWxsXG4gICAgICAgICAgICAgICAgbW9iaWxlID0gISEodXNlckFnZW50Lm1hdGNoKC9BbmRyb2lkfEJsYWNrQmVycnl8aVBob25lfGlQYWR8aVBvZHxPcGVyYSBNaW5pfElFTW9iaWxlL2kpKSxcbiAgICAgICAgICAgICAgICBpZU1vYmlsZSA9ICEhKHVzZXJBZ2VudC5tYXRjaCgvSUVNb2JpbGUvaSkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBicm93c2VyOiBtYXRjaFsgMSBdIHx8ICcnLFxuICAgICAgICAgICAgICAgIHZlcnNpb246IG1hdGNoWyAyIF0gfHwgJzAnLFxuXG4gICAgICAgICAgICAgICAgLy8gYWRkaW5nIG1vYmlsZSBmbGFiXG4gICAgICAgICAgICAgICAgbW9iaWxlOiBtb2JpbGUsXG4gICAgICAgICAgICAgICAgaWVNb2JpbGU6IGllTW9iaWxlICAvLyBJZiB0aGlzIGlzIHRydWUgKGkuZS4sIFdQOCksIHRoZW4gS2luZXRpYyB0b3VjaCBldmVudHMgYXJlIGV4ZWN1dGVkIGluc3RlYWQgb2YgZXF1aXZhbGVudCBLaW5ldGljIG1vdXNlIGV2ZW50c1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gdXNlciBhZ2VudCAgXG4gICAgICAgIFVBOiB1bmRlZmluZWRcbiAgICB9O1xuXG4gICAgS2luZXRpYy5VQSA9IEtpbmV0aWMuX3BhcnNlVUEoKHJvb3QubmF2aWdhdG9yICYmIHJvb3QubmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgJycpO1xuICAgIFxufSkodGhpcyk7XG5cbi8vIFVzZXMgTm9kZSwgQU1EIG9yIGJyb3dzZXIgZ2xvYmFscyB0byBjcmVhdGUgYSBtb2R1bGUuXG5cbi8vIElmIHlvdSB3YW50IHNvbWV0aGluZyB0aGF0IHdpbGwgd29yayBpbiBvdGhlciBzdHJpY3RlciBDb21tb25KUyBlbnZpcm9ubWVudHMsXG4vLyBvciBpZiB5b3UgbmVlZCB0byBjcmVhdGUgYSBjaXJjdWxhciBkZXBlbmRlbmN5LCBzZWUgY29tbW9uSnNTdHJpY3QuanNcblxuLy8gRGVmaW5lcyBhIG1vZHVsZSBcInJldHVybkV4cG9ydHNcIiB0aGF0IGRlcGVuZHMgYW5vdGhlciBtb2R1bGUgY2FsbGVkIFwiYlwiLlxuLy8gTm90ZSB0aGF0IHRoZSBuYW1lIG9mIHRoZSBtb2R1bGUgaXMgaW1wbGllZCBieSB0aGUgZmlsZSBuYW1lLiBJdCBpcyBiZXN0XG4vLyBpZiB0aGUgZmlsZSBuYW1lIGFuZCB0aGUgZXhwb3J0ZWQgZ2xvYmFsIGhhdmUgbWF0Y2hpbmcgbmFtZXMuXG5cbi8vIElmIHRoZSAnYicgbW9kdWxlIGFsc28gdXNlcyB0aGlzIHR5cGUgb2YgYm9pbGVycGxhdGUsIHRoZW5cbi8vIGluIHRoZSBicm93c2VyLCBpdCB3aWxsIGNyZWF0ZSBhIGdsb2JhbCAuYiB0aGF0IGlzIHVzZWQgYmVsb3cuXG5cbi8vIElmIHlvdSBkbyBub3Qgd2FudCB0byBzdXBwb3J0IHRoZSBicm93c2VyIGdsb2JhbCBwYXRoLCB0aGVuIHlvdVxuLy8gY2FuIHJlbW92ZSB0aGUgYHJvb3RgIHVzZSBhbmQgdGhlIHBhc3NpbmcgYHRoaXNgIGFzIHRoZSBmaXJzdCBhcmcgdG9cbi8vIHRoZSB0b3AgZnVuY3Rpb24uXG5cbi8vIGlmIHRoZSBtb2R1bGUgaGFzIG5vIGRlcGVuZGVuY2llcywgdGhlIGFib3ZlIHBhdHRlcm4gY2FuIGJlIHNpbXBsaWZpZWQgdG9cbiggZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICAgIGlmKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdmFyIEtpbmV0aWNKUyA9IGZhY3RvcnkoKTtcbiAgICAgICAgLy8gcnVudGltZS1jaGVjayBmb3IgYnJvd3NlcmlmeVxuICAgICAgICBpZihnbG9iYWwud2luZG93ID09PSBnbG9iYWwpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgICAgICAgICBLaW5ldGljLndpbmRvdyA9IGdsb2JhbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxuICAgICAgICAgICAgLy8gb25seSBDb21tb25KUy1saWtlIGVudmlyb21lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAgICAgICAgIC8vIGxpa2UgTm9kZS5cbiAgICAgICAgICAgIHZhciBDYW52YXMgPSByZXF1aXJlKCdjYW52YXMnKTtcbiAgICAgICAgICAgIHZhciBqc2RvbSA9IHJlcXVpcmUoJ2pzZG9tJykuanNkb207XG5cbiAgICAgICAgICAgIEtpbmV0aWMuZG9jdW1lbnQgPSBqc2RvbSgnPCFET0NUWVBFIGh0bWw+PGh0bWw+PGhlYWQ+PC9oZWFkPjxib2R5PjwvYm9keT48L2h0bWw+Jyk7XG4gICAgICAgICAgICBLaW5ldGljLndpbmRvdyA9IEtpbmV0aWMuZG9jdW1lbnQuY3JlYXRlV2luZG93KCk7XG4gICAgICAgICAgICBLaW5ldGljLndpbmRvdy5JbWFnZSA9IENhbnZhcy5JbWFnZTtcbiAgICAgICAgICAgIEtpbmV0aWMuX25vZGVDYW52YXMgPSBDYW52YXM7XG4gICAgICAgIH1cblxuICAgICAgICBLaW5ldGljLnJvb3QgPSByb290O1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IEtpbmV0aWNKUztcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIGlmKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoZmFjdG9yeSk7XG4gICAgfVxuICAgIEtpbmV0aWMuZG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgICBLaW5ldGljLndpbmRvdyA9IHdpbmRvdztcbiAgICBLaW5ldGljLnJvb3QgPSByb290O1xuXG59KHRoaXMsIGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gSnVzdCByZXR1cm4gYSB2YWx1ZSB0byBkZWZpbmUgdGhlIG1vZHVsZSBleHBvcnQuXG4gICAgLy8gVGhpcyBleGFtcGxlIHJldHVybnMgYW4gb2JqZWN0LCBidXQgdGhlIG1vZHVsZVxuICAgIC8vIGNhbiByZXR1cm4gYSBmdW5jdGlvbiBhcyB0aGUgZXhwb3J0ZWQgdmFsdWUuXG4gICAgcmV0dXJuIEtpbmV0aWM7XG59KSk7XG47KGZ1bmN0aW9uKCkge1xuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gY29uc3RydWN0b3IuICBDb2xsZWN0aW9uIGV4dGVuZHNcbiAgICAgKiAgQXJyYXkuICBUaGlzIGNsYXNzIGlzIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB7QGxpbmsgS2luZXRpYy5Db250YWluZXIjZ2V0fVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICovXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpLCBsZW5ndGggPSBhcmdzLmxlbmd0aCwgaSA9IDA7XG5cbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIGZvcig7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpc1tpXSA9IGFyZ3NbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ucHJvdG90eXBlID0gW107XG4gICAgLyoqXG4gICAgICogaXRlcmF0ZSB0aHJvdWdoIG5vZGUgYXJyYXkgYW5kIHJ1biBhIGZ1bmN0aW9uIGZvciBlYWNoIG5vZGUuXG4gICAgICogIFRoZSBub2RlIGFuZCBpbmRleCBpcyBwYXNzZWQgaW50byB0aGUgZnVuY3Rpb25cbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ29sbGVjdGlvbi5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgYWxsIG5vZGVzIHdpdGggbmFtZSBmb28gaW5zaWRlIGxheWVyLCBhbmQgc2V0IHggdG8gMTAgZm9yIGVhY2hcbiAgICAgKiBsYXllci5nZXQoJy5mb28nKS5lYWNoKGZ1bmN0aW9uKHNoYXBlLCBuKSB7XG4gICAgICogICBzaGFwZS5zZXRYKDEwKTtcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ucHJvdG90eXBlLmVhY2ggPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgICAgIGZvcih2YXIgbiA9IDA7IG4gPCB0aGlzLmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICBmdW5jKHRoaXNbbl0sIG4pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBjb252ZXJ0IGNvbGxlY3Rpb24gaW50byBhbiBhcnJheVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db2xsZWN0aW9uLnByb3RvdHlwZVxuICAgICAqL1xuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJyID0gW10sXG4gICAgICAgICAgICBsZW4gPSB0aGlzLmxlbmd0aCxcbiAgICAgICAgICAgIG47XG5cbiAgICAgICAgZm9yKG4gPSAwOyBuIDwgbGVuOyBuKyspIHtcbiAgICAgICAgICAgIGFyci5wdXNoKHRoaXNbbl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBjb252ZXJ0IGFycmF5IGludG8gYSBjb2xsZWN0aW9uXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJcbiAgICAgKi9cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24udG9Db2xsZWN0aW9uID0gZnVuY3Rpb24oYXJyKSB7XG4gICAgICAgIHZhciBjb2xsZWN0aW9uID0gbmV3IEtpbmV0aWMuQ29sbGVjdGlvbigpLFxuICAgICAgICAgICAgbGVuID0gYXJyLmxlbmd0aCxcbiAgICAgICAgICAgIG47XG5cbiAgICAgICAgZm9yKG4gPSAwOyBuIDwgbGVuOyBuKyspIHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb24ucHVzaChhcnJbbl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgIH07XG5cbiAgICAvLyBtYXAgb25lIG1ldGhvZCBieSBpdCdzIG5hbWVcbiAgICBLaW5ldGljLkNvbGxlY3Rpb24uX21hcE1ldGhvZCA9IGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgS2luZXRpYy5Db2xsZWN0aW9uLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGk7XG5cbiAgICAgICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzW2ldW21ldGhvZE5hbWVdLmFwcGx5KHRoaXNbaV0sIGFyZ3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMgPSBmdW5jdGlvbihjb25zdHJ1Y3Rvcikge1xuICAgICAgICB2YXIgcHJvdCA9IGNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICAgICAgZm9yKHZhciBtZXRob2ROYW1lIGluIHByb3QpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5fbWFwTWV0aG9kKG1ldGhvZE5hbWUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qXG4gICAgKiBMYXN0IHVwZGF0ZWQgTm92ZW1iZXIgMjAxMVxuICAgICogQnkgU2ltb24gU2FycmlzXG4gICAgKiB3d3cuc2ltb25zYXJyaXMuY29tXG4gICAgKiBzYXJyaXNAYWNtLm9yZ1xuICAgICpcbiAgICAqIEZyZWUgdG8gdXNlIGFuZCBkaXN0cmlidXRlIGF0IHdpbGxcbiAgICAqIFNvIGxvbmcgYXMgeW91IGFyZSBuaWNlIHRvIHBlb3BsZSwgZXRjXG4gICAgKi9cblxuICAgIC8qXG4gICAgKiBUaGUgdXNhZ2Ugb2YgdGhpcyBjbGFzcyB3YXMgaW5zcGlyZWQgYnkgc29tZSBvZiB0aGUgd29yayBkb25lIGJ5IGEgZm9ya2VkXG4gICAgKiBwcm9qZWN0LCBLaW5ldGljSlMtRXh0IGJ5IFdhcHB3b3Jrcywgd2hpY2ggaXMgYmFzZWQgb24gU2ltb24ncyBUcmFuc2Zvcm1cbiAgICAqIGNsYXNzLiAgTW9kaWZpZWQgYnkgRXJpYyBSb3dlbGxcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtIGNvbnN0cnVjdG9yXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW21dIE9wdGlvbmFsIHNpeC1lbGVtZW50IG1hdHJpeFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICovXG4gICAgS2luZXRpYy5UcmFuc2Zvcm0gPSBmdW5jdGlvbihtKSB7XG4gICAgICAgIHRoaXMubSA9IChtICYmIG0uc2xpY2UoKSkgfHwgWzEsIDAsIDAsIDEsIDAsIDBdO1xuICAgIH07XG5cbiAgICBLaW5ldGljLlRyYW5zZm9ybS5wcm90b3R5cGUgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb3B5IEtpbmV0aWMuVHJhbnNmb3JtIG9iamVjdFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRyYW5zZm9ybS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuVHJhbnNmb3JtfVxuICAgICAgICAgKi9cbiAgICAgICAgY29weTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEtpbmV0aWMuVHJhbnNmb3JtKHRoaXMubSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmFuc2Zvcm0gcG9pbnRcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UcmFuc2Zvcm0ucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludCAyRCBwb2ludCh4LCB5KVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSAyRCBwb2ludCh4LCB5KVxuICAgICAgICAgKi9cbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICAgICAgICB2YXIgbSA9IHRoaXMubTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgeDogbVswXSAqIHBvaW50LnggKyBtWzJdICogcG9pbnQueSArIG1bNF0sXG4gICAgICAgICAgICAgICAgeTogbVsxXSAqIHBvaW50LnggKyBtWzNdICogcG9pbnQueSArIG1bNV1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHBseSB0cmFuc2xhdGlvblxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRyYW5zZm9ybS5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuVHJhbnNmb3JtfVxuICAgICAgICAgKi9cbiAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgICAgICB0aGlzLm1bNF0gKz0gdGhpcy5tWzBdICogeCArIHRoaXMubVsyXSAqIHk7XG4gICAgICAgICAgICB0aGlzLm1bNV0gKz0gdGhpcy5tWzFdICogeCArIHRoaXMubVszXSAqIHk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcGx5IHNjYWxlXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVHJhbnNmb3JtLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3hcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN5XG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLlRyYW5zZm9ybX1cbiAgICAgICAgICovXG4gICAgICAgIHNjYWxlOiBmdW5jdGlvbihzeCwgc3kpIHtcbiAgICAgICAgICAgIHRoaXMubVswXSAqPSBzeDtcbiAgICAgICAgICAgIHRoaXMubVsxXSAqPSBzeDtcbiAgICAgICAgICAgIHRoaXMubVsyXSAqPSBzeTtcbiAgICAgICAgICAgIHRoaXMubVszXSAqPSBzeTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQXBwbHkgcm90YXRpb25cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UcmFuc2Zvcm0ucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSByYWQgIEFuZ2xlIGluIHJhZGlhbnNcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuVHJhbnNmb3JtfVxuICAgICAgICAgKi9cbiAgICAgICAgcm90YXRlOiBmdW5jdGlvbihyYWQpIHtcbiAgICAgICAgICAgIHZhciBjID0gTWF0aC5jb3MocmFkKTtcbiAgICAgICAgICAgIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgICAgICAgICAgIHZhciBtMTEgPSB0aGlzLm1bMF0gKiBjICsgdGhpcy5tWzJdICogcztcbiAgICAgICAgICAgIHZhciBtMTIgPSB0aGlzLm1bMV0gKiBjICsgdGhpcy5tWzNdICogcztcbiAgICAgICAgICAgIHZhciBtMjEgPSB0aGlzLm1bMF0gKiAtcyArIHRoaXMubVsyXSAqIGM7XG4gICAgICAgICAgICB2YXIgbTIyID0gdGhpcy5tWzFdICogLXMgKyB0aGlzLm1bM10gKiBjO1xuICAgICAgICAgICAgdGhpcy5tWzBdID0gbTExO1xuICAgICAgICAgICAgdGhpcy5tWzFdID0gbTEyO1xuICAgICAgICAgICAgdGhpcy5tWzJdID0gbTIxO1xuICAgICAgICAgICAgdGhpcy5tWzNdID0gbTIyO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSB0cmFuc2xhdGlvblxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRyYW5zZm9ybS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0gMkQgcG9pbnQoeCwgeSlcbiAgICAgICAgICovXG4gICAgICAgIGdldFRyYW5zbGF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgeDogdGhpcy5tWzRdLFxuICAgICAgICAgICAgICAgIHk6IHRoaXMubVs1XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcGx5IHNrZXdcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UcmFuc2Zvcm0ucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzeFxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3lcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuVHJhbnNmb3JtfVxuICAgICAgICAgKi9cbiAgICAgICAgc2tldzogZnVuY3Rpb24oc3gsIHN5KSB7XG4gICAgICAgICAgICB2YXIgbTExID0gdGhpcy5tWzBdICsgdGhpcy5tWzJdICogc3k7XG4gICAgICAgICAgICB2YXIgbTEyID0gdGhpcy5tWzFdICsgdGhpcy5tWzNdICogc3k7XG4gICAgICAgICAgICB2YXIgbTIxID0gdGhpcy5tWzJdICsgdGhpcy5tWzBdICogc3g7XG4gICAgICAgICAgICB2YXIgbTIyID0gdGhpcy5tWzNdICsgdGhpcy5tWzFdICogc3g7XG4gICAgICAgICAgICB0aGlzLm1bMF0gPSBtMTE7XG4gICAgICAgICAgICB0aGlzLm1bMV0gPSBtMTI7XG4gICAgICAgICAgICB0aGlzLm1bMl0gPSBtMjE7XG4gICAgICAgICAgICB0aGlzLm1bM10gPSBtMjI7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmFuc2Zvcm0gbXVsdGlwbGljYXRpb25cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UcmFuc2Zvcm0ucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7S2luZXRpYy5UcmFuc2Zvcm19IG1hdHJpeFxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5UcmFuc2Zvcm19XG4gICAgICAgICAqL1xuICAgICAgICBtdWx0aXBseTogZnVuY3Rpb24obWF0cml4KSB7XG4gICAgICAgICAgICB2YXIgbTExID0gdGhpcy5tWzBdICogbWF0cml4Lm1bMF0gKyB0aGlzLm1bMl0gKiBtYXRyaXgubVsxXTtcbiAgICAgICAgICAgIHZhciBtMTIgPSB0aGlzLm1bMV0gKiBtYXRyaXgubVswXSArIHRoaXMubVszXSAqIG1hdHJpeC5tWzFdO1xuXG4gICAgICAgICAgICB2YXIgbTIxID0gdGhpcy5tWzBdICogbWF0cml4Lm1bMl0gKyB0aGlzLm1bMl0gKiBtYXRyaXgubVszXTtcbiAgICAgICAgICAgIHZhciBtMjIgPSB0aGlzLm1bMV0gKiBtYXRyaXgubVsyXSArIHRoaXMubVszXSAqIG1hdHJpeC5tWzNdO1xuXG4gICAgICAgICAgICB2YXIgZHggPSB0aGlzLm1bMF0gKiBtYXRyaXgubVs0XSArIHRoaXMubVsyXSAqIG1hdHJpeC5tWzVdICsgdGhpcy5tWzRdO1xuICAgICAgICAgICAgdmFyIGR5ID0gdGhpcy5tWzFdICogbWF0cml4Lm1bNF0gKyB0aGlzLm1bM10gKiBtYXRyaXgubVs1XSArIHRoaXMubVs1XTtcblxuICAgICAgICAgICAgdGhpcy5tWzBdID0gbTExO1xuICAgICAgICAgICAgdGhpcy5tWzFdID0gbTEyO1xuICAgICAgICAgICAgdGhpcy5tWzJdID0gbTIxO1xuICAgICAgICAgICAgdGhpcy5tWzNdID0gbTIyO1xuICAgICAgICAgICAgdGhpcy5tWzRdID0gZHg7XG4gICAgICAgICAgICB0aGlzLm1bNV0gPSBkeTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogSW52ZXJ0IHRoZSBtYXRyaXhcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UcmFuc2Zvcm0ucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLlRyYW5zZm9ybX1cbiAgICAgICAgICovXG4gICAgICAgIGludmVydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZCA9IDEgLyAodGhpcy5tWzBdICogdGhpcy5tWzNdIC0gdGhpcy5tWzFdICogdGhpcy5tWzJdKTtcbiAgICAgICAgICAgIHZhciBtMCA9IHRoaXMubVszXSAqIGQ7XG4gICAgICAgICAgICB2YXIgbTEgPSAtdGhpcy5tWzFdICogZDtcbiAgICAgICAgICAgIHZhciBtMiA9IC10aGlzLm1bMl0gKiBkO1xuICAgICAgICAgICAgdmFyIG0zID0gdGhpcy5tWzBdICogZDtcbiAgICAgICAgICAgIHZhciBtNCA9IGQgKiAodGhpcy5tWzJdICogdGhpcy5tWzVdIC0gdGhpcy5tWzNdICogdGhpcy5tWzRdKTtcbiAgICAgICAgICAgIHZhciBtNSA9IGQgKiAodGhpcy5tWzFdICogdGhpcy5tWzRdIC0gdGhpcy5tWzBdICogdGhpcy5tWzVdKTtcbiAgICAgICAgICAgIHRoaXMubVswXSA9IG0wO1xuICAgICAgICAgICAgdGhpcy5tWzFdID0gbTE7XG4gICAgICAgICAgICB0aGlzLm1bMl0gPSBtMjtcbiAgICAgICAgICAgIHRoaXMubVszXSA9IG0zO1xuICAgICAgICAgICAgdGhpcy5tWzRdID0gbTQ7XG4gICAgICAgICAgICB0aGlzLm1bNV0gPSBtNTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogcmV0dXJuIG1hdHJpeFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRyYW5zZm9ybS5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIGdldE1hdHJpeDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogc2V0IHRvIGFic29sdXRlIHBvc2l0aW9uIHZpYSB0cmFuc2xhdGlvblxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRyYW5zZm9ybS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuVHJhbnNmb3JtfVxuICAgICAgICAgKiBAYXV0aG9yIGVyaWNkcm93ZWxsXG4gICAgICAgICAqL1xuICAgICAgICBzZXRBYnNvbHV0ZVBvc2l0aW9uOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgICAgICB2YXIgbTAgPSB0aGlzLm1bMF0sXG4gICAgICAgICAgICAgICAgbTEgPSB0aGlzLm1bMV0sXG4gICAgICAgICAgICAgICAgbTIgPSB0aGlzLm1bMl0sXG4gICAgICAgICAgICAgICAgbTMgPSB0aGlzLm1bM10sXG4gICAgICAgICAgICAgICAgbTQgPSB0aGlzLm1bNF0sXG4gICAgICAgICAgICAgICAgbTUgPSB0aGlzLm1bNV0sXG4gICAgICAgICAgICAgICAgeXQgPSAoKG0wICogKHkgLSBtNSkpIC0gKG0xICogKHggLSBtNCkpKSAvICgobTAgKiBtMykgLSAobTEgKiBtMikpLFxuICAgICAgICAgICAgICAgIHh0ID0gKHggLSBtNCAtIChtMiAqIHl0KSkgLyBtMDtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlKHh0LCB5dCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gQ09OU1RBTlRTXG4gICAgdmFyIENPTlRFWFRfMkQgPSAnMmQnLFxuICAgICAgICBPQkpFQ1RfQVJSQVkgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgICBPQkpFQ1RfTlVNQkVSID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgICAgIE9CSkVDVF9TVFJJTkcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICAgICAgUElfT1ZFUl9ERUcxODAgPSBNYXRoLlBJIC8gMTgwLFxuICAgICAgICBERUcxODBfT1ZFUl9QSSA9IDE4MCAvIE1hdGguUEksXG4gICAgICAgIEhBU0ggPSAnIycsXG4gICAgICAgIEVNUFRZX1NUUklORyA9ICcnLFxuICAgICAgICBaRVJPID0gJzAnLFxuICAgICAgICBLSU5FVElDX1dBUk5JTkcgPSAnS2luZXRpYyB3YXJuaW5nOiAnLFxuICAgICAgICBLSU5FVElDX0VSUk9SID0gJ0tpbmV0aWMgZXJyb3I6ICcsXG4gICAgICAgIFJHQl9QQVJFTiA9ICdyZ2IoJyxcbiAgICAgICAgQ09MT1JTID0ge1xuICAgICAgICAgICAgYXF1YTogWzAsMjU1LDI1NV0sXG4gICAgICAgICAgICBsaW1lOiBbMCwyNTUsMF0sXG4gICAgICAgICAgICBzaWx2ZXI6IFsxOTIsMTkyLDE5Ml0sXG4gICAgICAgICAgICBibGFjazogWzAsMCwwXSxcbiAgICAgICAgICAgIG1hcm9vbjogWzEyOCwwLDBdLFxuICAgICAgICAgICAgdGVhbDogWzAsMTI4LDEyOF0sXG4gICAgICAgICAgICBibHVlOiBbMCwwLDI1NV0sXG4gICAgICAgICAgICBuYXZ5OiBbMCwwLDEyOF0sXG4gICAgICAgICAgICB3aGl0ZTogWzI1NSwyNTUsMjU1XSxcbiAgICAgICAgICAgIGZ1Y2hzaWE6IFsyNTUsMCwyNTVdLFxuICAgICAgICAgICAgb2xpdmU6WzEyOCwxMjgsMF0sXG4gICAgICAgICAgICB5ZWxsb3c6IFsyNTUsMjU1LDBdLFxuICAgICAgICAgICAgb3JhbmdlOiBbMjU1LDE2NSwwXSxcbiAgICAgICAgICAgIGdyYXk6IFsxMjgsMTI4LDEyOF0sXG4gICAgICAgICAgICBwdXJwbGU6IFsxMjgsMCwxMjhdLFxuICAgICAgICAgICAgZ3JlZW46IFswLDEyOCwwXSxcbiAgICAgICAgICAgIHJlZDogWzI1NSwwLDBdLFxuICAgICAgICAgICAgcGluazogWzI1NSwxOTIsMjAzXSxcbiAgICAgICAgICAgIGN5YW46IFswLDI1NSwyNTVdLFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IFsyNTUsMjU1LDI1NSwwXVxuICAgICAgICB9LFxuXG4gICAgICAgIFJHQl9SRUdFWCA9IC9yZ2JcXCgoXFxkezEsM30pLChcXGR7MSwzfSksKFxcZHsxLDN9KVxcKS87XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlIFV0aWxcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAqL1xuICAgIEtpbmV0aWMuVXRpbCA9IHtcbiAgICAgICAgLypcbiAgICAgICAgICogY2hlcnJ5LXBpY2tlZCB1dGlsaXRpZXMgZnJvbSB1bmRlcnNjb3JlLmpzXG4gICAgICAgICAqL1xuICAgICAgICBfaXNFbGVtZW50OiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlID09IDEpO1xuICAgICAgICB9LFxuICAgICAgICBfaXNGdW5jdGlvbjogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gISEob2JqICYmIG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY2FsbCAmJiBvYmouYXBwbHkpO1xuICAgICAgICB9LFxuICAgICAgICBfaXNPYmplY3Q6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuICghIW9iaiAmJiBvYmouY29uc3RydWN0b3IgPT0gT2JqZWN0KTtcbiAgICAgICAgfSxcbiAgICAgICAgX2lzQXJyYXk6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09IE9CSkVDVF9BUlJBWTtcbiAgICAgICAgfSxcbiAgICAgICAgX2lzTnVtYmVyOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PSBPQkpFQ1RfTlVNQkVSO1xuICAgICAgICB9LFxuICAgICAgICBfaXNTdHJpbmc6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09IE9CSkVDVF9TVFJJTkc7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgd2hlbiBpbnZva2VkLCB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkIGF0IG1vc3Qgb25jZVxuICAgICAgICAvLyBkdXJpbmcgYSBnaXZlbiB3aW5kb3cgb2YgdGltZS4gTm9ybWFsbHksIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gd2lsbCBydW5cbiAgICAgICAgLy8gYXMgbXVjaCBhcyBpdCBjYW4sIHdpdGhvdXQgZXZlciBnb2luZyBtb3JlIHRoYW4gb25jZSBwZXIgYHdhaXRgIGR1cmF0aW9uO1xuICAgICAgICAvLyBidXQgaWYgeW91J2QgbGlrZSB0byBkaXNhYmxlIHRoZSBleGVjdXRpb24gb24gdGhlIGxlYWRpbmcgZWRnZSwgcGFzc1xuICAgICAgICAvLyBge2xlYWRpbmc6IGZhbHNlfWAuIFRvIGRpc2FibGUgZXhlY3V0aW9uIG9uIHRoZSB0cmFpbGluZyBlZGdlLCBkaXR0by5cbiAgICAgICAgX3Rocm90dGxlOiBmdW5jdGlvbihmdW5jLCB3YWl0LCBvcHRzKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dCwgYXJncywgcmVzdWx0O1xuICAgICAgICAgICAgdmFyIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgdmFyIHByZXZpb3VzID0gMDtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fTtcbiAgICAgICAgICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzID0gb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSA/IDAgOiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBwcmV2aW91cyA9IG5vdztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93IC0gcHJldmlvdXMpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICAgICAgaWYgKHJlbWFpbmluZyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIHByZXZpb3VzID0gbm93O1xuICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qXG4gICAgICAgICAqIG90aGVyIHV0aWxzXG4gICAgICAgICAqL1xuICAgICAgICBfaGFzTWV0aG9kczogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICB2YXIgbmFtZXMgPSBbXSxcbiAgICAgICAgICAgICAgICBrZXk7XG5cbiAgICAgICAgICAgIGZvcihrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5faXNGdW5jdGlvbihvYmpba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuYW1lcy5sZW5ndGggPiAwO1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVDYW52YXNFbGVtZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjYW52YXMgPSBLaW5ldGljLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICAgICAgLy8gb24gc29tZSBlbnZpcm9ubWVudHMgY2FudmFzLnN0eWxlIGlzIHJlYWRvbmx5XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNhbnZhcy5zdHlsZSA9IGNhbnZhcy5zdHlsZSB8fCB7fTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYW52YXM7XG4gICAgICAgIH0sXG4gICAgICAgIGlzQnJvd3NlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gKHR5cGVvZiBleHBvcnRzICE9PSAgJ29iamVjdCcpO1xuICAgICAgICB9LFxuICAgICAgICBfaXNJbkRvY3VtZW50OiBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgd2hpbGUoZWwgPSBlbC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgaWYoZWwgPT0gS2luZXRpYy5kb2N1bWVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIF9zaW1wbGlmeUFycmF5OiBmdW5jdGlvbihhcnIpIHtcbiAgICAgICAgICAgIHZhciByZXRBcnIgPSBbXSxcbiAgICAgICAgICAgICAgICBsZW4gPSBhcnIubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHV0aWwgPSBLaW5ldGljLlV0aWwsXG4gICAgICAgICAgICAgICAgbiwgdmFsO1xuXG4gICAgICAgICAgICBmb3IgKG49MDsgbjxsZW47IG4rKykge1xuICAgICAgICAgICAgICAgIHZhbCA9IGFycltuXTtcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5faXNOdW1iZXIodmFsKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWwgPSBNYXRoLnJvdW5kKHZhbCAqIDEwMDApIC8gMTAwMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXV0aWwuX2lzU3RyaW5nKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gdmFsLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0QXJyLnB1c2godmFsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJldEFycjtcbiAgICAgICAgfSxcbiAgICAgICAgLypcbiAgICAgICAgICogYXJnIGNhbiBiZSBhbiBpbWFnZSBvYmplY3Qgb3IgaW1hZ2UgZGF0YVxuICAgICAgICAgKi9cbiAgICAgICAgX2dldEltYWdlOiBmdW5jdGlvbihhcmcsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgaW1hZ2VPYmosIGNhbnZhcztcblxuICAgICAgICAgICAgLy8gaWYgYXJnIGlzIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZighYXJnKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIGFyZyBpcyBhbHJlYWR5IGFuIGltYWdlIG9iamVjdFxuICAgICAgICAgICAgZWxzZSBpZih0aGlzLl9pc0VsZW1lbnQoYXJnKSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGFyZyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIGFyZyBpcyBhIHN0cmluZywgdGhlbiBpdCdzIGEgZGF0YSB1cmxcbiAgICAgICAgICAgIGVsc2UgaWYodGhpcy5faXNTdHJpbmcoYXJnKSkge1xuICAgICAgICAgICAgICAgIGltYWdlT2JqID0gbmV3IEtpbmV0aWMud2luZG93LkltYWdlKCk7XG4gICAgICAgICAgICAgICAgaW1hZ2VPYmoub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGltYWdlT2JqKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGltYWdlT2JqLnNyYyA9IGFyZztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9pZiBhcmcgaXMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGRhdGEgcHJvcGVydHksIGl0J3MgYW4gaW1hZ2Ugb2JqZWN0XG4gICAgICAgICAgICBlbHNlIGlmKGFyZy5kYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FudmFzID0gS2luZXRpYy5VdGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcbiAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSBhcmcud2lkdGg7XG4gICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGFyZy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgdmFyIF9jb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoQ09OVEVYVF8yRCk7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHV0SW1hZ2VEYXRhKGFyZywgMCwgMCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2V0SW1hZ2UoY2FudmFzLnRvRGF0YVVSTCgpLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2dldFJHQkFTdHJpbmc6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgdmFyIHJlZCA9IG9iai5yZWQgfHwgMCxcbiAgICAgICAgICAgICAgICBncmVlbiA9IG9iai5ncmVlbiB8fCAwLFxuICAgICAgICAgICAgICAgIGJsdWUgPSBvYmouYmx1ZSB8fCAwLFxuICAgICAgICAgICAgICAgIGFscGhhID0gb2JqLmFscGhhIHx8IDE7XG5cbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgJ3JnYmEoJyxcbiAgICAgICAgICAgICAgICByZWQsXG4gICAgICAgICAgICAgICAgJywnLFxuICAgICAgICAgICAgICAgIGdyZWVuLFxuICAgICAgICAgICAgICAgICcsJyxcbiAgICAgICAgICAgICAgICBibHVlLFxuICAgICAgICAgICAgICAgICcsJyxcbiAgICAgICAgICAgICAgICBhbHBoYSxcbiAgICAgICAgICAgICAgICAnKSdcbiAgICAgICAgICAgIF0uam9pbihFTVBUWV9TVFJJTkcpO1xuICAgICAgICB9LFxuICAgICAgICBfcmdiVG9IZXg6IGZ1bmN0aW9uKHIsIGcsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiAoKDEgPDwgMjQpICsgKHIgPDwgMTYpICsgKGcgPDwgOCkgKyBiKS50b1N0cmluZygxNikuc2xpY2UoMSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9oZXhUb1JnYjogZnVuY3Rpb24oaGV4KSB7XG4gICAgICAgICAgICBoZXggPSBoZXgucmVwbGFjZShIQVNILCBFTVBUWV9TVFJJTkcpO1xuICAgICAgICAgICAgdmFyIGJpZ2ludCA9IHBhcnNlSW50KGhleCwgMTYpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByOiAoYmlnaW50ID4+IDE2KSAmIDI1NSxcbiAgICAgICAgICAgICAgICBnOiAoYmlnaW50ID4+IDgpICYgMjU1LFxuICAgICAgICAgICAgICAgIGI6IGJpZ2ludCAmIDI1NVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJldHVybiByYW5kb20gaGV4IGNvbG9yXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVXRpbC5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIGdldFJhbmRvbUNvbG9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciByYW5kQ29sb3IgPSAoTWF0aC5yYW5kb20oKSAqIDB4RkZGRkZGIDw8IDApLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgIHdoaWxlIChyYW5kQ29sb3IubGVuZ3RoIDwgNikge1xuICAgICAgICAgICAgICAgIHJhbmRDb2xvciA9IFpFUk8gKyByYW5kQ29sb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gSEFTSCArIHJhbmRDb2xvcjtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJldHVybiB2YWx1ZSB3aXRoIGRlZmF1bHQgZmFsbGJhY2tcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5VdGlsLnByb3RvdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbih2YWwsIGRlZikge1xuICAgICAgICAgICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgUkdCIGNvbXBvbmVudHMgb2YgYSBjb2xvclxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlV0aWwucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb2xvclxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiAvLyBlYWNoIG9mIHRoZSBmb2xsb3dpbmcgZXhhbXBsZXMgcmV0dXJuIHtyOjAsIGc6MCwgYjoyNTV9XG4gICAgICAgICAqIHZhciByZ2IgPSBLaW5ldGljLlV0aWwuZ2V0UkdCKCdibHVlJyk7XG4gICAgICAgICAqIHZhciByZ2IgPSBLaW5ldGljLlV0aWwuZ2V0UkdCKCcjMDAwMGZmJyk7XG4gICAgICAgICAqIHZhciByZ2IgPSBLaW5ldGljLlV0aWwuZ2V0UkdCKCdyZ2IoMCwwLDI1NSknKTtcbiAgICAgICAgICovXG4gICAgICAgIGdldFJHQjogZnVuY3Rpb24oY29sb3IpIHtcbiAgICAgICAgICAgIHZhciByZ2I7XG4gICAgICAgICAgICAvLyBjb2xvciBzdHJpbmdcbiAgICAgICAgICAgIGlmIChjb2xvciBpbiBDT0xPUlMpIHtcbiAgICAgICAgICAgICAgICByZ2IgPSBDT0xPUlNbY29sb3JdO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHI6IHJnYlswXSxcbiAgICAgICAgICAgICAgICAgICAgZzogcmdiWzFdLFxuICAgICAgICAgICAgICAgICAgICBiOiByZ2JbMl1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaGV4XG4gICAgICAgICAgICBlbHNlIGlmIChjb2xvclswXSA9PT0gSEFTSCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9oZXhUb1JnYihjb2xvci5zdWJzdHJpbmcoMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmdiIHN0cmluZ1xuICAgICAgICAgICAgZWxzZSBpZiAoY29sb3Iuc3Vic3RyKDAsIDQpID09PSBSR0JfUEFSRU4pIHtcbiAgICAgICAgICAgICAgICByZ2IgPSBSR0JfUkVHRVguZXhlYyhjb2xvci5yZXBsYWNlKC8gL2csJycpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICByOiBwYXJzZUludChyZ2JbMV0sIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgZzogcGFyc2VJbnQocmdiWzJdLCAxMCksXG4gICAgICAgICAgICAgICAgICAgIGI6IHBhcnNlSW50KHJnYlszXSwgMTApXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRlZmF1bHRcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHI6IDAsXG4gICAgICAgICAgICAgICAgICAgIGc6IDAsXG4gICAgICAgICAgICAgICAgICAgIGI6IDBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyBvMSB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgbzJcbiAgICAgICAgX21lcmdlOiBmdW5jdGlvbihvMSwgbzIpIHtcbiAgICAgICAgICAgIHZhciByZXRPYmogPSB0aGlzLl9jbG9uZShvMik7XG4gICAgICAgICAgICBmb3IodmFyIGtleSBpbiBvMSkge1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuX2lzT2JqZWN0KG8xW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldE9ialtrZXldID0gdGhpcy5fbWVyZ2UobzFba2V5XSwgcmV0T2JqW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0T2JqW2tleV0gPSBvMVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXRPYmo7XG4gICAgICAgIH0sXG4gICAgICAgIGNsb25lT2JqZWN0OiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIHZhciByZXRPYmogPSB7fTtcbiAgICAgICAgICAgIGZvcih2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuX2lzT2JqZWN0KG9ialtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICByZXRPYmpba2V5XSA9IHRoaXMuY2xvbmVPYmplY3Qob2JqW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9pc0FycmF5KG9ialtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICByZXRPYmpba2V5XSA9IHRoaXMuY2xvbmVBcnJheShvYmpba2V5XSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0T2JqO1xuICAgICAgICB9LFxuICAgICAgICBjbG9uZUFycmF5OiBmdW5jdGlvbihhcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnIuc2xpY2UoMCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9kZWdUb1JhZDogZnVuY3Rpb24oZGVnKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVnICogUElfT1ZFUl9ERUcxODA7XG4gICAgICAgIH0sXG4gICAgICAgIF9yYWRUb0RlZzogZnVuY3Rpb24ocmFkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmFkICogREVHMTgwX09WRVJfUEk7XG4gICAgICAgIH0sXG4gICAgICAgIF9jYXBpdGFsaXplOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihLSU5FVElDX0VSUk9SICsgc3RyKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2FybjogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogSUU5IG9uIFdpbmRvd3M3IDY0Yml0IHdpbGwgdGhyb3cgYSBKUyBlcnJvclxuICAgICAgICAgICAgICogaWYgd2UgZG9uJ3QgdXNlIHdpbmRvdy5jb25zb2xlIGluIHRoZSBjb25kaXRpb25hbFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZihLaW5ldGljLnJvb3QuY29uc29sZSAmJiBjb25zb2xlLndhcm4gJiYgS2luZXRpYy5zaG93V2FybmluZ3MpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oS0lORVRJQ19XQVJOSU5HICsgc3RyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZXh0ZW5kOiBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY3RvcigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7XG4gICAgICAgICAgICAgICAgdmFyIG9sZF9wcm90byA9IGNoaWxkLnByb3RvdHlwZTtcbiAgICAgICAgICAgICAgICBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvbGRfcHJvdG8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZF9wcm90by5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5wcm90b3R5cGVba2V5XSA9IG9sZF9wcm90b1trZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhZGRzIG1ldGhvZHMgdG8gYSBjb25zdHJ1Y3RvciBwcm90b3R5cGVcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5VdGlsLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gbWV0aG9kc1xuICAgICAgICAgKi9cbiAgICAgICAgYWRkTWV0aG9kczogZnVuY3Rpb24oY29uc3RydWN0b3IsIG1ldGhvZHMpIHtcbiAgICAgICAgICAgIHZhciBrZXk7XG5cbiAgICAgICAgICAgIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdHJ1Y3Rvci5wcm90b3R5cGVba2V5XSA9IG1ldGhvZHNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2dldENvbnRyb2xQb2ludHM6IGZ1bmN0aW9uKHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHQpIHtcbiAgICAgICAgICAgIHZhciBkMDEgPSBNYXRoLnNxcnQoTWF0aC5wb3coeDEgLSB4MCwgMikgKyBNYXRoLnBvdyh5MSAtIHkwLCAyKSksXG4gICAgICAgICAgICAgICAgZDEyID0gTWF0aC5zcXJ0KE1hdGgucG93KHgyIC0geDEsIDIpICsgTWF0aC5wb3coeTIgLSB5MSwgMikpLFxuICAgICAgICAgICAgICAgIGZhID0gdCAqIGQwMSAvIChkMDEgKyBkMTIpLFxuICAgICAgICAgICAgICAgIGZiID0gdCAqIGQxMiAvIChkMDEgKyBkMTIpLFxuICAgICAgICAgICAgICAgIHAxeCA9IHgxIC0gZmEgKiAoeDIgLSB4MCksXG4gICAgICAgICAgICAgICAgcDF5ID0geTEgLSBmYSAqICh5MiAtIHkwKSxcbiAgICAgICAgICAgICAgICBwMnggPSB4MSArIGZiICogKHgyIC0geDApLFxuICAgICAgICAgICAgICAgIHAyeSA9IHkxICsgZmIgKiAoeTIgLSB5MCk7XG5cbiAgICAgICAgICAgIHJldHVybiBbcDF4ICxwMXksIHAyeCwgcDJ5XTtcbiAgICAgICAgfSxcbiAgICAgICAgX2V4cGFuZFBvaW50czogZnVuY3Rpb24ocCwgdGVuc2lvbikge1xuICAgICAgICAgICAgdmFyIGxlbiA9IHAubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGFsbFBvaW50cyA9IFtdLFxuICAgICAgICAgICAgICAgIG4sIGNwO1xuXG4gICAgICAgICAgICBmb3IgKG49MjsgbjxsZW4tMjsgbis9Mikge1xuICAgICAgICAgICAgICAgIGNwID0gS2luZXRpYy5VdGlsLl9nZXRDb250cm9sUG9pbnRzKHBbbi0yXSwgcFtuLTFdLCBwW25dLCBwW24rMV0sIHBbbisyXSwgcFtuKzNdLCB0ZW5zaW9uKTtcbiAgICAgICAgICAgICAgICBhbGxQb2ludHMucHVzaChjcFswXSk7XG4gICAgICAgICAgICAgICAgYWxsUG9pbnRzLnB1c2goY3BbMV0pO1xuICAgICAgICAgICAgICAgIGFsbFBvaW50cy5wdXNoKHBbbl0pO1xuICAgICAgICAgICAgICAgIGFsbFBvaW50cy5wdXNoKHBbbisxXSk7XG4gICAgICAgICAgICAgICAgYWxsUG9pbnRzLnB1c2goY3BbMl0pO1xuICAgICAgICAgICAgICAgIGFsbFBvaW50cy5wdXNoKGNwWzNdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFsbFBvaW50cztcbiAgICAgICAgfSxcbiAgICAgICAgX3JlbW92ZUxhc3RMZXR0ZXI6IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoMCwgc3RyLmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xuICAgIC8vIGNhbGN1bGF0ZSBwaXhlbCByYXRpb1xuICAgIHZhciBjYW52YXMgPSBLaW5ldGljLlV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpLFxuICAgICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyksXG4gICAgICAgIC8vIGlmIHVzaW5nIGEgbW9iaWxlIGRldmljZSwgY2FsY3VsYXRlIHRoZSBwaXhlbCByYXRpby4gIE90aGVyd2lzZSwganVzdCB1c2VcbiAgICAgICAgLy8gMS4gIEZvciBkZXNrdG9wIGJyb3dzZXJzLCBpZiB0aGUgdXNlciBoYXMgem9vbSBlbmFibGVkLCBpdCBhZmZlY3RzIHRoZSBwaXhlbCByYXRpb1xuICAgICAgICAvLyBhbmQgY2F1c2VzIGFydGlmYWN0cyBvbiB0aGUgY2FudmFzLiAgQXMgb2YgMDIvMjYvMjAxNCwgdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgd2F5XG4gICAgICAgIC8vIHRvIHJlbGlhYmx5IGNhbGN1bGF0ZSB0aGUgYnJvd3NlciB6b29tIGZvciBtb2Rlcm4gYnJvd3NlcnMsIHdoaWNoIGlzIHdoeSB3ZSBqdXN0IHNldFxuICAgICAgICAvLyB0aGUgcGl4ZWwgcmF0aW8gdG8gMSBmb3IgZGVza3RvcHNcbiAgICAgICAgX3BpeGVsUmF0aW8gPSBLaW5ldGljLlVBLm1vYmlsZSA/IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkZXZpY2VQaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSxcbiAgICAgICAgICAgIGJhY2tpbmdTdG9yZVJhdGlvID0gY29udGV4dC53ZWJraXRCYWNraW5nU3RvcmVQaXhlbFJhdGlvXG4gICAgICAgICAgICAgICAgfHwgY29udGV4dC5tb3pCYWNraW5nU3RvcmVQaXhlbFJhdGlvXG4gICAgICAgICAgICAgICAgfHwgY29udGV4dC5tc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW9cbiAgICAgICAgICAgICAgICB8fCBjb250ZXh0Lm9CYWNraW5nU3RvcmVQaXhlbFJhdGlvXG4gICAgICAgICAgICAgICAgfHwgY29udGV4dC5iYWNraW5nU3RvcmVQaXhlbFJhdGlvXG4gICAgICAgICAgICAgICAgfHwgMTtcbiAgICAgICAgICAgIHJldHVybiBkZXZpY2VQaXhlbFJhdGlvIC8gYmFja2luZ1N0b3JlUmF0aW87XG4gICAgICAgIH0pKCkgOiAxO1xuXG4gICAgLyoqXG4gICAgICogQ2FudmFzIFJlbmRlcmVyIGNvbnN0cnVjdG9yXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbmZpZy53aWR0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb25maWcuaGVpZ2h0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbmZpZy5waXhlbFJhdGlvIEtpbmV0aWNKUyBhdXRvbWF0aWNhbGx5IGhhbmRsZXMgcGl4ZWwgcmF0aW8gYWRqdXN0bWVudHMgaW4gb3JkZXIgdG8gcmVuZGVyIGNyaXNwIGRyYXdpbmdzXG4gICAgICogIG9uIGFsbCBkZXZpY2VzLiBNb3N0IGRlc2t0b3BzLCBsb3cgZW5kIHRhYmxldHMsIGFuZCBsb3cgZW5kIHBob25lcywgaGF2ZSBkZXZpY2UgcGl4ZWwgcmF0aW9zXG4gICAgICogIG9mIDEuICBTb21lIGhpZ2ggZW5kIHRhYmxldHMgYW5kIHBob25lcywgbGlrZSBpUGhvbmVzIGFuZCBpUGFkcyAobm90IHRoZSBtaW5pKSBoYXZlIGEgZGV2aWNlIHBpeGVsIHJhdGlvIFxuICAgICAqICBvZiAyLiAgU29tZSBNYWNib29rIFByb3MsIGFuZCBpTWFjcyBhbHNvIGhhdmUgYSBkZXZpY2UgcGl4ZWwgcmF0aW8gb2YgMi4gIFNvbWUgaGlnaCBlbmQgQW5kcm9pZCBkZXZpY2VzIGhhdmUgcGl4ZWwgXG4gICAgICogIHJhdGlvcyBvZiAyIG9yIDMuICBTb21lIGJyb3dzZXJzIGxpa2UgRmlyZWZveCBhbGxvdyB5b3UgdG8gY29uZmlndXJlIHRoZSBwaXhlbCByYXRpbyBvZiB0aGUgdmlld3BvcnQuICBVbmxlc3Mgb3RoZXJ3aXNlXG4gICAgICogIHNwZWNpZmllZCwgdGhlIHBpeGVsIHJhdGlvIHdpbGwgYmUgZGVmYXVsdGVkIHRvIHRoZSBhY3R1YWwgZGV2aWNlIHBpeGVsIHJhdGlvLiAgWW91IGNhbiBvdmVycmlkZSB0aGUgZGV2aWNlIHBpeGVsXG4gICAgICogIHJhdGlvIGZvciBzcGVjaWFsIHNpdHVhdGlvbnMsIG9yLCBpZiB5b3UgZG9uJ3Qgd2FudCB0aGUgcGl4ZWwgcmF0aW8gdG8gYmUgdGFrZW4gaW50byBhY2NvdW50LCB5b3UgY2FuIHNldCBpdCB0byAxLlxuICAgICAqL1xuICAgIEtpbmV0aWMuQ2FudmFzID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHRoaXMuaW5pdChjb25maWcpO1xuICAgIH07XG5cbiAgICBLaW5ldGljLkNhbnZhcy5wcm90b3R5cGUgPSB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgdmFyIGNvbmYgPSBjb25maWcgfHwge307XG5cbiAgICAgICAgICAgIHZhciBwaXhlbFJhdGlvID0gY29uZi5waXhlbFJhdGlvIHx8IEtpbmV0aWMucGl4ZWxSYXRpbyB8fCBfcGl4ZWxSYXRpbztcblxuICAgICAgICAgICAgdGhpcy5waXhlbFJhdGlvID0gcGl4ZWxSYXRpbztcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhcyA9IEtpbmV0aWMuVXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCk7XG5cbiAgICAgICAgICAgIC8vIHNldCBpbmxpbmUgc3R5bGVzXG4gICAgICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGUucGFkZGluZyA9IDA7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGUubWFyZ2luID0gMDtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZS5ib3JkZXIgPSAwO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzLnN0eWxlLmJhY2tncm91bmQgPSAndHJhbnNwYXJlbnQnO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZS50b3AgPSAwO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzLnN0eWxlLmxlZnQgPSAwO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IGNhbnZhcyBjb250ZXh0XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ2FudmFzLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7Q2FudmFzQ29udGV4dH0gY29udGV4dFxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0Q29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IHBpeGVsIHJhdGlvXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ2FudmFzLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBwaXhlbCByYXRpb1xuICAgICAgICAgKi9cbiAgICAgICAgZ2V0UGl4ZWxSYXRpbzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5waXhlbFJhdGlvO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IHBpeGVsIHJhdGlvXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ2FudmFzLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gcGl4ZWxSYXRpbyBLaW5ldGljSlMgYXV0b21hdGljYWxseSBoYW5kbGVzIHBpeGVsIHJhdGlvIGFkdXN0bWVudHMgaW4gb3JkZXIgdG8gcmVuZGVyIGNyaXNwIGRyYXdpbmdzIFxuICAgICAgICAgKiAgb24gYWxsIGRldmljZXMuIE1vc3QgZGVza3RvcHMsIGxvdyBlbmQgdGFibGV0cywgYW5kIGxvdyBlbmQgcGhvbmVzLCBoYXZlIGRldmljZSBwaXhlbCByYXRpb3NcbiAgICAgICAgICogIG9mIDEuICBTb21lIGhpZ2ggZW5kIHRhYmxldHMgYW5kIHBob25lcywgbGlrZSBpUGhvbmVzIGFuZCBpUGFkcyAobm90IHRoZSBtaW5pKSBoYXZlIGEgZGV2aWNlIHBpeGVsIHJhdGlvIFxuICAgICAgICAgKiAgb2YgMi4gIFNvbWUgTWFjYm9vayBQcm9zLCBhbmQgaU1hY3MgYWxzbyBoYXZlIGEgZGV2aWNlIHBpeGVsIHJhdGlvIG9mIDIuICBTb21lIGhpZ2ggZW5kIEFuZHJvaWQgZGV2aWNlcyBoYXZlIHBpeGVsIFxuICAgICAgICAgKiAgcmF0aW9zIG9mIDIgb3IgMy4gIFNvbWUgYnJvd3NlcnMgbGlrZSBGaXJlZm94IGFsbG93IHlvdSB0byBjb25maWd1cmUgdGhlIHBpeGVsIHJhdGlvIG9mIHRoZSB2aWV3cG9ydC4gIFVubGVzcyBvdGhlcndpc2VcbiAgICAgICAgICogIHNwZWNpZmljZWQsIHRoZSBwaXhlbCByYXRpbyB3aWxsIGJlIGRlZmF1bHRlZCB0byB0aGUgYWN0dWFsIGRldmljZSBwaXhlbCByYXRpby4gIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGRldmljZSBwaXhlbFxuICAgICAgICAgKiAgcmF0aW8gZm9yIHNwZWNpYWwgc2l0dWF0aW9ucywgb3IsIGlmIHlvdSBkb24ndCB3YW50IHRoZSBwaXhlbCByYXRpbyB0byBiZSB0YWtlbiBpbnRvIGFjY291bnQsIHlvdSBjYW4gc2V0IGl0IHRvIDEuXG4gICAgICAgICAqL1xuICAgICAgICBzZXRQaXhlbFJhdGlvOiBmdW5jdGlvbihwaXhlbFJhdGlvKSB7XG4gICAgICAgICAgICB0aGlzLnBpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xuICAgICAgICAgICAgdGhpcy5zZXRTaXplKHRoaXMuZ2V0V2lkdGgoKSwgdGhpcy5nZXRIZWlnaHQoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXQgd2lkdGhcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5DYW52YXMucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aFxuICAgICAgICAgKi9cbiAgICAgICAgc2V0V2lkdGg6IGZ1bmN0aW9uKHdpZHRoKSB7XG4gICAgICAgICAgICAvLyB0YWtlIGludG8gYWNjb3VudCBwaXhlbCByYXRpb1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuX2NhbnZhcy53aWR0aCA9IHdpZHRoICogdGhpcy5waXhlbFJhdGlvO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogc2V0IGhlaWdodFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNhbnZhcy5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICAgICAgICAgKi9cbiAgICAgICAgc2V0SGVpZ2h0OiBmdW5jdGlvbihoZWlnaHQpIHtcbiAgICAgICAgICAgIC8vIHRha2UgaW50byBhY2NvdW50IHBpeGVsIHJhdGlvXG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuX2NhbnZhcy5oZWlnaHQgPSBoZWlnaHQgKiB0aGlzLnBpeGVsUmF0aW87XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCB3aWR0aFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNhbnZhcy5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge051bWJlcn0gd2lkdGhcbiAgICAgICAgICovXG4gICAgICAgIGdldFdpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndpZHRoO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IGhlaWdodFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNhbnZhcy5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge051bWJlcn0gaGVpZ2h0XG4gICAgICAgICAqL1xuICAgICAgICBnZXRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGVpZ2h0O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogc2V0IHNpemVcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5DYW52YXMucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aFxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0XG4gICAgICAgICAqL1xuICAgICAgICBzZXRTaXplOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLnNldFdpZHRoKHdpZHRoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0SGVpZ2h0KGhlaWdodCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0byBkYXRhIHVybFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNhbnZhcy5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG1pbWVUeXBlXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBxdWFsaXR5IGJldHdlZW4gMCBhbmQgMSBmb3IganBnIG1pbWUgdHlwZXNcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gZGF0YSB1cmwgc3RyaW5nXG4gICAgICAgICAqL1xuICAgICAgICB0b0RhdGFVUkw6IGZ1bmN0aW9uKG1pbWVUeXBlLCBxdWFsaXR5KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgY2FsbCBmYWlscyAoZHVlIHRvIGJyb3dzZXIgYnVnLCBsaWtlIGluIEZpcmVmb3ggMy42KSxcbiAgICAgICAgICAgICAgICAvLyB0aGVuIHJldmVydCB0byBwcmV2aW91cyBuby1wYXJhbWV0ZXIgaW1hZ2UvcG5nIGJlaGF2aW9yXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcy50b0RhdGFVUkwobWltZVR5cGUsIHF1YWxpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2goZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYW52YXMudG9EYXRhVVJMKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoKGVycikge1xuICAgICAgICAgICAgICAgICAgICBLaW5ldGljLlV0aWwud2FybignVW5hYmxlIHRvIGdldCBkYXRhIFVSTC4gJyArIGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBLaW5ldGljLlNjZW5lQ2FudmFzID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHZhciBjb25mID0gY29uZmlnIHx8IHt9O1xuICAgICAgICB2YXIgd2lkdGggPSBjb25mLndpZHRoIHx8IDAsXG4gICAgICAgICAgICBoZWlnaHQgPSBjb25mLmhlaWdodCB8fCAwO1xuXG4gICAgICAgIEtpbmV0aWMuQ2FudmFzLmNhbGwodGhpcywgY29uZik7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IG5ldyBLaW5ldGljLlNjZW5lQ29udGV4dCh0aGlzKTtcbiAgICAgICAgdGhpcy5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgIH07XG5cbiAgICBLaW5ldGljLlNjZW5lQ2FudmFzLnByb3RvdHlwZSA9IHtcbiAgICAgICAgc2V0V2lkdGg6IGZ1bmN0aW9uKHdpZHRoKSB7XG4gICAgICAgICAgICB2YXIgcGl4ZWxSYXRpbyA9IHRoaXMucGl4ZWxSYXRpbyxcbiAgICAgICAgICAgICAgICBfY29udGV4dCA9IHRoaXMuZ2V0Q29udGV4dCgpLl9jb250ZXh0O1xuXG4gICAgICAgICAgICBLaW5ldGljLkNhbnZhcy5wcm90b3R5cGUuc2V0V2lkdGguY2FsbCh0aGlzLCB3aWR0aCk7XG4gICAgICAgICAgICBfY29udGV4dC5zY2FsZShwaXhlbFJhdGlvLCBwaXhlbFJhdGlvKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0SGVpZ2h0OiBmdW5jdGlvbihoZWlnaHQpIHtcbiAgICAgICAgICAgIHZhciBwaXhlbFJhdGlvID0gdGhpcy5waXhlbFJhdGlvLFxuICAgICAgICAgICAgICAgIF9jb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KCkuX2NvbnRleHQ7XG5cbiAgICAgICAgICAgIEtpbmV0aWMuQ2FudmFzLnByb3RvdHlwZS5zZXRIZWlnaHQuY2FsbCh0aGlzLCBoZWlnaHQpO1xuICAgICAgICAgICAgX2NvbnRleHQuc2NhbGUocGl4ZWxSYXRpbywgcGl4ZWxSYXRpbyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5TY2VuZUNhbnZhcywgS2luZXRpYy5DYW52YXMpO1xuXG4gICAgS2luZXRpYy5IaXRDYW52YXMgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdmFyIGNvbmYgPSBjb25maWcgfHwge307XG4gICAgICAgIHZhciB3aWR0aCA9IGNvbmYud2lkdGggfHwgMCxcbiAgICAgICAgICAgIGhlaWdodCA9IGNvbmYuaGVpZ2h0IHx8IDA7XG4gICAgICAgICAgICBcbiAgICAgICAgS2luZXRpYy5DYW52YXMuY2FsbCh0aGlzLCBjb25mKTtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gbmV3IEtpbmV0aWMuSGl0Q29udGV4dCh0aGlzKTtcbiAgICAgICAgdGhpcy5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLmhpdENhbnZhcyA9IHRydWU7XG4gICAgfTtcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuSGl0Q2FudmFzLCBLaW5ldGljLkNhbnZhcyk7XG5cbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xuICAgIHZhciBDT01NQSA9ICcsJyxcbiAgICAgICAgT1BFTl9QQVJFTiA9ICcoJyxcbiAgICAgICAgQ0xPU0VfUEFSRU4gPSAnKScsXG4gICAgICAgIE9QRU5fUEFSRU5fQlJBQ0tFVCA9ICcoWycsXG4gICAgICAgIENMT1NFX0JSQUNLRVRfUEFSRU4gPSAnXSknLFxuICAgICAgICBTRU1JQ09MT04gPSAnOycsXG4gICAgICAgIERPVUJMRV9QQVJFTiA9ICcoKScsXG4gICAgICAgIC8vIEVNUFRZX1NUUklORyA9ICcnLFxuICAgICAgICBFUVVBTFMgPSAnPScsXG4gICAgICAgIC8vIFNFVCA9ICdzZXQnLFxuICAgICAgICBDT05URVhUX01FVEhPRFMgPSBbXG4gICAgICAgICAgICAnYXJjJyxcbiAgICAgICAgICAgICdhcmNUbycsXG4gICAgICAgICAgICAnYmVnaW5QYXRoJyxcbiAgICAgICAgICAgICdiZXppZXJDdXJ2ZVRvJyxcbiAgICAgICAgICAgICdjbGVhclJlY3QnLFxuICAgICAgICAgICAgJ2NsaXAnLFxuICAgICAgICAgICAgJ2Nsb3NlUGF0aCcsXG4gICAgICAgICAgICAnY3JlYXRlTGluZWFyR3JhZGllbnQnLFxuICAgICAgICAgICAgJ2NyZWF0ZVBhdHRlcm4nLFxuICAgICAgICAgICAgJ2NyZWF0ZVJhZGlhbEdyYWRpZW50JyxcbiAgICAgICAgICAgICdkcmF3SW1hZ2UnLFxuICAgICAgICAgICAgJ2ZpbGwnLFxuICAgICAgICAgICAgJ2ZpbGxUZXh0JyxcbiAgICAgICAgICAgICdnZXRJbWFnZURhdGEnLFxuICAgICAgICAgICAgJ2NyZWF0ZUltYWdlRGF0YScsXG4gICAgICAgICAgICAnbGluZVRvJyxcbiAgICAgICAgICAgICdtb3ZlVG8nLFxuICAgICAgICAgICAgJ3B1dEltYWdlRGF0YScsXG4gICAgICAgICAgICAncXVhZHJhdGljQ3VydmVUbycsXG4gICAgICAgICAgICAncmVjdCcsXG4gICAgICAgICAgICAncmVzdG9yZScsXG4gICAgICAgICAgICAncm90YXRlJyxcbiAgICAgICAgICAgICdzYXZlJyxcbiAgICAgICAgICAgICdzY2FsZScsXG4gICAgICAgICAgICAnc2V0TGluZURhc2gnLFxuICAgICAgICAgICAgJ3NldFRyYW5zZm9ybScsXG4gICAgICAgICAgICAnc3Ryb2tlJyxcbiAgICAgICAgICAgICdzdHJva2VUZXh0JyxcbiAgICAgICAgICAgICd0cmFuc2Zvcm0nLFxuICAgICAgICAgICAgJ3RyYW5zbGF0ZSdcbiAgICAgICAgXTtcblxuICAgIC8qKlxuICAgICAqIENhbnZhcyBDb250ZXh0IGNvbnN0cnVjdG9yXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgKi9cbiAgICBLaW5ldGljLkNvbnRleHQgPSBmdW5jdGlvbihjYW52YXMpIHtcbiAgICAgICAgdGhpcy5pbml0KGNhbnZhcyk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKGNhbnZhcykge1xuICAgICAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0ID0gY2FudmFzLl9jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgICAgICAgICAgaWYgKEtpbmV0aWMuZW5hYmxlVHJhY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyYWNlQXJyID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5fZW5hYmxlVHJhY2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGZpbGwgc2hhcGVcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250ZXh0LnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge0tpbmV0aWMuU2hhcGV9IHNoYXBlXG4gICAgICAgICAqL1xuICAgICAgICBmaWxsU2hhcGU6IGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgICAgICAgICBpZihzaGFwZS5nZXRGaWxsRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsbChzaGFwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzdHJva2Ugc2hhcGVcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250ZXh0LnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge0tpbmV0aWMuU2hhcGV9IHNoYXBlXG4gICAgICAgICAqL1xuICAgICAgICBzdHJva2VTaGFwZTogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgIGlmKHNoYXBlLmdldFN0cm9rZUVuYWJsZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0cm9rZShzaGFwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBmaWxsIHRoZW4gc3Ryb2tlXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ29udGV4dC5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtLaW5ldGljLlNoYXBlfSBzaGFwZVxuICAgICAgICAgKi9cbiAgICAgICAgZmlsbFN0cm9rZVNoYXBlOiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgdmFyIGZpbGxFbmFibGVkID0gc2hhcGUuZ2V0RmlsbEVuYWJsZWQoKTtcbiAgICAgICAgICAgIGlmKGZpbGxFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsbChzaGFwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihzaGFwZS5nZXRTdHJva2VFbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdHJva2Uoc2hhcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IGNvbnRleHQgdHJhY2UgaWYgdHJhY2UgaXMgZW5hYmxlZFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbnRleHQucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVsYXhlZCBpZiBmYWxzZSwgcmV0dXJuIHN0cmljdCBjb250ZXh0IHRyYWNlLCB3aGljaCBpbmNsdWRlcyBtZXRob2QgbmFtZXMsIG1ldGhvZCBwYXJhbWV0ZXJzXG4gICAgICAgICAqICBwcm9wZXJ0aWVzLCBhbmQgcHJvcGVydHkgdmFsdWVzLiAgSWYgdHJ1ZSwgcmV0dXJuIHJlbGF4ZWQgY29udGV4dCB0cmFjZSwgd2hpY2ggb25seSByZXR1cm5zIG1ldGhvZCBuYW1lcyBhbmRcbiAgICAgICAgICogIHByb3Blcml0ZXMuXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRUcmFjZTogZnVuY3Rpb24ocmVsYXhlZCkge1xuICAgICAgICAgICAgdmFyIHRyYWNlQXJyID0gdGhpcy50cmFjZUFycixcbiAgICAgICAgICAgICAgICBsZW4gPSB0cmFjZUFyci5sZW5ndGgsXG4gICAgICAgICAgICAgICAgc3RyID0gJycsXG4gICAgICAgICAgICAgICAgbiwgdHJhY2UsIG1ldGhvZCwgYXJncztcblxuICAgICAgICAgICAgZm9yIChuPTA7IG48bGVuOyBuKyspIHtcbiAgICAgICAgICAgICAgICB0cmFjZSA9IHRyYWNlQXJyW25dO1xuICAgICAgICAgICAgICAgIG1ldGhvZCA9IHRyYWNlLm1ldGhvZDtcblxuICAgICAgICAgICAgICAgIC8vIG1ldGhvZHNcbiAgICAgICAgICAgICAgICBpZiAobWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MgPSB0cmFjZS5hcmdzO1xuICAgICAgICAgICAgICAgICAgICBzdHIgKz0gbWV0aG9kO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVsYXhlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IERPVUJMRV9QQVJFTjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChLaW5ldGljLlV0aWwuX2lzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gT1BFTl9QQVJFTl9CUkFDS0VUICsgYXJncy5qb2luKENPTU1BKSArIENMT1NFX0JSQUNLRVRfUEFSRU47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gT1BFTl9QQVJFTiArIGFyZ3Muam9pbihDT01NQSkgKyBDTE9TRV9QQVJFTjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ciArPSB0cmFjZS5wcm9wZXJ0eTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWxheGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gRVFVQUxTICsgdHJhY2UudmFsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RyICs9IFNFTUlDT0xPTjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNsZWFyIHRyYWNlIGlmIHRyYWNlIGlzIGVuYWJsZWRcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250ZXh0LnByb3RvdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgY2xlYXJUcmFjZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnRyYWNlQXJyID0gW107XG4gICAgICAgIH0sXG4gICAgICAgIF90cmFjZTogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgICB2YXIgdHJhY2VBcnIgPSB0aGlzLnRyYWNlQXJyLFxuICAgICAgICAgICAgICAgIGxlbjtcbiBcbiAgICAgICAgICAgIHRyYWNlQXJyLnB1c2goc3RyKTtcbiAgICAgICAgICAgIGxlbiA9IHRyYWNlQXJyLmxlbmd0aDtcblxuICAgICAgICAgICAgaWYgKGxlbiA+PSBLaW5ldGljLnRyYWNlQXJyTWF4KSB7XG4gICAgICAgICAgICAgICAgdHJhY2VBcnIuc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJlc2V0IGNhbnZhcyBjb250ZXh0IHRyYW5zZm9ybVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbnRleHQucHJvdG90eXBlXG4gICAgICAgICAqL1xuICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcGl4ZWxSYXRpbyA9IHRoaXMuZ2V0Q2FudmFzKCkuZ2V0UGl4ZWxSYXRpbygpO1xuICAgICAgICAgICAgdGhpcy5zZXRUcmFuc2Zvcm0oMSAqIHBpeGVsUmF0aW8sIDAsIDAsIDEgKiBwaXhlbFJhdGlvLCAwLCAwKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCBjYW52YXNcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250ZXh0LnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5DYW52YXN9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRDYW52YXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogY2xlYXIgY2FudmFzXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ29udGV4dC5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtib3VuZHNdXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYm91bmRzLnhdXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYm91bmRzLnldXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYm91bmRzLndpZHRoXVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2JvdW5kcy5oZWlnaHRdXG4gICAgICAgICAqL1xuICAgICAgICBjbGVhcjogZnVuY3Rpb24oYm91bmRzKSB7XG4gICAgICAgICAgICB2YXIgY2FudmFzID0gdGhpcy5nZXRDYW52YXMoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGJvdW5kcykge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJSZWN0KGJvdW5kcy54IHx8IDAsIGJvdW5kcy55IHx8IDAsIGJvdW5kcy53aWR0aCB8fCAwLCBib3VuZHMuaGVpZ2h0IHx8IDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhclJlY3QoMCwgMCwgY2FudmFzLmdldFdpZHRoKCksIGNhbnZhcy5nZXRIZWlnaHQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9hcHBseUxpbmVDYXA6IGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgbGluZUNhcCA9IHNoYXBlLmdldExpbmVDYXAoKTtcbiAgICAgICAgICAgIGlmKGxpbmVDYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHIoJ2xpbmVDYXAnLCBsaW5lQ2FwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2FwcGx5T3BhY2l0eTogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciBhYnNPcGFjaXR5ID0gc2hhcGUuZ2V0QWJzb2x1dGVPcGFjaXR5KCk7XG4gICAgICAgICAgICBpZihhYnNPcGFjaXR5ICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdnbG9iYWxBbHBoYScsIGFic09wYWNpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfYXBwbHlMaW5lSm9pbjogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciBsaW5lSm9pbiA9IHNoYXBlLmdldExpbmVKb2luKCk7XG4gICAgICAgICAgICBpZihsaW5lSm9pbikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cignbGluZUpvaW4nLCBsaW5lSm9pbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNldEF0dHI6IGZ1bmN0aW9uKGF0dHIsIHZhbCkge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dFthdHRyXSA9IHZhbDtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBjb250ZXh0IHBhc3MgdGhyb3VnaCBtZXRob2RzXG4gICAgICAgIGFyYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuYXJjKGFbMF0sIGFbMV0sIGFbMl0sIGFbM10sIGFbNF0sIGFbNV0pO1xuICAgICAgICB9LFxuICAgICAgICBiZWdpblBhdGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgfSxcbiAgICAgICAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyhhWzBdLCBhWzFdLCBhWzJdLCBhWzNdLCBhWzRdLCBhWzVdKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYXJSZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5jbGVhclJlY3QoYVswXSwgYVsxXSwgYVsyXSwgYVszXSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNsaXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5jbGlwKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVJbWFnZURhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICBpZihhLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmNyZWF0ZUltYWdlRGF0YShhWzBdLCBhWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dC5jcmVhdGVJbWFnZURhdGEoYVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZUxpbmVhckdyYWRpZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoYVswXSwgYVsxXSwgYVsyXSwgYVszXSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZVBhdHRlcm46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dC5jcmVhdGVQYXR0ZXJuKGFbMF0sIGFbMV0pO1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVSYWRpYWxHcmFkaWVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmNyZWF0ZVJhZGlhbEdyYWRpZW50KGFbMF0sIGFbMV0sIGFbMl0sIGFbM10sIGFbNF0sIGFbNV0pO1xuICAgICAgICB9LFxuICAgICAgICBkcmF3SW1hZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgX2NvbnRleHQgPSB0aGlzLl9jb250ZXh0O1xuXG4gICAgICAgICAgICBpZihhLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0LmRyYXdJbWFnZShhWzBdLCBhWzFdLCBhWzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYS5sZW5ndGggPT09IDUpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5kcmF3SW1hZ2UoYVswXSwgYVsxXSwgYVsyXSwgYVszXSwgYVs0XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGEubGVuZ3RoID09PSA5KSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQuZHJhd0ltYWdlKGFbMF0sIGFbMV0sIGFbMl0sIGFbM10sIGFbNF0sIGFbNV0sIGFbNl0sIGFbN10sIGFbOF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBmaWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuZmlsbCgpO1xuICAgICAgICB9LFxuICAgICAgICBmaWxsVGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuZmlsbFRleHQoYVswXSwgYVsxXSwgYVsyXSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEltYWdlRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEltYWdlRGF0YShhWzBdLCBhWzFdLCBhWzJdLCBhWzNdKTtcbiAgICAgICAgfSxcbiAgICAgICAgbGluZVRvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oYVswXSwgYVsxXSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1vdmVUbzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKGFbMF0sIGFbMV0pO1xuICAgICAgICB9LFxuICAgICAgICByZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5yZWN0KGFbMF0sIGFbMV0sIGFbMl0sIGFbM10pO1xuICAgICAgICB9LFxuICAgICAgICBwdXRJbWFnZURhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnB1dEltYWdlRGF0YShhWzBdLCBhWzFdLCBhWzJdKTtcbiAgICAgICAgfSxcbiAgICAgICAgcXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQucXVhZHJhdGljQ3VydmVUbyhhWzBdLCBhWzFdLCBhWzJdLCBhWzNdKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzdG9yZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcm90YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5yb3RhdGUoYVswXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNhdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5zYXZlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNjYWxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5zY2FsZShhWzBdLCBhWzFdKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0TGluZURhc2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgX2NvbnRleHQgPSB0aGlzLl9jb250ZXh0O1xuXG4gICAgICAgICAgICAvLyB3b3JrcyBmb3IgQ2hyb21lIGFuZCBJRTExXG4gICAgICAgICAgICBpZih0aGlzLl9jb250ZXh0LnNldExpbmVEYXNoKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQuc2V0TGluZURhc2goYVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2ZXJpZmllZCB0aGF0IHRoaXMgd29ya3MgaW4gZmlyZWZveFxuICAgICAgICAgICAgZWxzZSBpZignbW96RGFzaCcgaW4gX2NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5tb3pEYXNoID0gYVswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRvZXMgbm90IGN1cnJlbnRseSB3b3JrIGZvciBTYWZhcmlcbiAgICAgICAgICAgIGVsc2UgaWYoJ3dlYmtpdExpbmVEYXNoJyBpbiBfY29udGV4dCkge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0LndlYmtpdExpbmVEYXNoID0gYVswXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbm8gc3VwcG9ydCBmb3IgSUU5IGFuZCBJRTEwXG4gICAgICAgIH0sXG4gICAgICAgIHNldFRyYW5zZm9ybTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuc2V0VHJhbnNmb3JtKGFbMF0sIGFbMV0sIGFbMl0sIGFbM10sIGFbNF0sIGFbNV0pO1xuICAgICAgICB9LFxuICAgICAgICBzdHJva2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3Ryb2tlVGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlVGV4dChhWzBdLCBhWzFdLCBhWzJdKTtcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNmb3JtOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC50cmFuc2Zvcm0oYVswXSwgYVsxXSwgYVsyXSwgYVszXSwgYVs0XSwgYVs1XSk7XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQudHJhbnNsYXRlKGFbMF0sIGFbMV0pO1xuICAgICAgICB9LFxuICAgICAgICBfZW5hYmxlVHJhY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGxlbiA9IENPTlRFWFRfTUVUSE9EUy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgX3NpbXBsaWZ5QXJyYXkgPSBLaW5ldGljLlV0aWwuX3NpbXBsaWZ5QXJyYXksXG4gICAgICAgICAgICAgICAgb3JpZ1NldHRlciA9IHRoaXMuc2V0QXR0cixcbiAgICAgICAgICAgICAgICBuLCBhcmdzO1xuXG4gICAgICAgICAgICAvLyB0byBwcmV2ZW50IGNyZWF0aW5nIHNjb3BlIGZ1bmN0aW9uIGF0IGVhY2ggbG9vcFxuICAgICAgICAgICAgdmFyIGZ1bmMgPSBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcmlnTWV0aG9kID0gdGhhdFttZXRob2ROYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldDtcblxuICAgICAgICAgICAgICAgICAgICB0aGF0W21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzID0gX3NpbXBsaWZ5QXJyYXkoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXQgPSBvcmlnTWV0aG9kLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fdHJhY2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBhcmdzXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIG1ldGhvZHNcbiAgICAgICAgICAgIGZvciAobj0wOyBuPGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgZnVuYyhDT05URVhUX01FVEhPRFNbbl0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBhdHRyc1xuICAgICAgICAgICAgdGhhdC5zZXRBdHRyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgb3JpZ1NldHRlci5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIHRoYXQuX3RyYWNlKHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk6IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBhcmd1bWVudHNbMV1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgS2luZXRpYy5TY2VuZUNvbnRleHQgPSBmdW5jdGlvbihjYW52YXMpIHtcbiAgICAgICAgS2luZXRpYy5Db250ZXh0LmNhbGwodGhpcywgY2FudmFzKTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5TY2VuZUNvbnRleHQucHJvdG90eXBlID0ge1xuICAgICAgICBfZmlsbENvbG9yOiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgdmFyIGZpbGwgPSBzaGFwZS5maWxsKClcbiAgICAgICAgICAgICAgICB8fCBLaW5ldGljLlV0aWwuX2dldFJHQkFTdHJpbmcoe1xuICAgICAgICAgICAgICAgICAgICByZWQ6IHNoYXBlLmZpbGxSZWQoKSxcbiAgICAgICAgICAgICAgICAgICAgZ3JlZW46IHNoYXBlLmZpbGxHcmVlbigpLFxuICAgICAgICAgICAgICAgICAgICBibHVlOiBzaGFwZS5maWxsQmx1ZSgpLFxuICAgICAgICAgICAgICAgICAgICBhbHBoYTogc2hhcGUuZmlsbEFscGhhKClcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdmaWxsU3R5bGUnLCBmaWxsKTtcbiAgICAgICAgICAgIHNoYXBlLl9maWxsRnVuYyh0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2ZpbGxQYXR0ZXJuOiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgdmFyIGZpbGxQYXR0ZXJuSW1hZ2UgPSBzaGFwZS5nZXRGaWxsUGF0dGVybkltYWdlKCksXG4gICAgICAgICAgICAgICAgZmlsbFBhdHRlcm5YID0gc2hhcGUuZ2V0RmlsbFBhdHRlcm5YKCksXG4gICAgICAgICAgICAgICAgZmlsbFBhdHRlcm5ZID0gc2hhcGUuZ2V0RmlsbFBhdHRlcm5ZKCksXG4gICAgICAgICAgICAgICAgZmlsbFBhdHRlcm5TY2FsZSA9IHNoYXBlLmdldEZpbGxQYXR0ZXJuU2NhbGUoKSxcbiAgICAgICAgICAgICAgICBmaWxsUGF0dGVyblJvdGF0aW9uID0gS2luZXRpYy5nZXRBbmdsZShzaGFwZS5nZXRGaWxsUGF0dGVyblJvdGF0aW9uKCkpLFxuICAgICAgICAgICAgICAgIGZpbGxQYXR0ZXJuT2Zmc2V0ID0gc2hhcGUuZ2V0RmlsbFBhdHRlcm5PZmZzZXQoKSxcbiAgICAgICAgICAgICAgICBmaWxsUGF0dGVyblJlcGVhdCA9IHNoYXBlLmdldEZpbGxQYXR0ZXJuUmVwZWF0KCk7XG5cbiAgICAgICAgICAgIGlmKGZpbGxQYXR0ZXJuWCB8fCBmaWxsUGF0dGVyblkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZShmaWxsUGF0dGVyblggfHwgMCwgZmlsbFBhdHRlcm5ZIHx8IDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZmlsbFBhdHRlcm5Sb3RhdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMucm90YXRlKGZpbGxQYXR0ZXJuUm90YXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZmlsbFBhdHRlcm5TY2FsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2NhbGUoZmlsbFBhdHRlcm5TY2FsZS54LCBmaWxsUGF0dGVyblNjYWxlLnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZmlsbFBhdHRlcm5PZmZzZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZSgtMSAqIGZpbGxQYXR0ZXJuT2Zmc2V0LngsIC0xICogZmlsbFBhdHRlcm5PZmZzZXQueSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cignZmlsbFN0eWxlJywgdGhpcy5jcmVhdGVQYXR0ZXJuKGZpbGxQYXR0ZXJuSW1hZ2UsIGZpbGxQYXR0ZXJuUmVwZWF0IHx8ICdyZXBlYXQnKSk7XG4gICAgICAgICAgICB0aGlzLmZpbGwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2ZpbGxMaW5lYXJHcmFkaWVudDogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IHNoYXBlLmdldEZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnQoKSxcbiAgICAgICAgICAgICAgICBlbmQgPSBzaGFwZS5nZXRGaWxsTGluZWFyR3JhZGllbnRFbmRQb2ludCgpLFxuICAgICAgICAgICAgICAgIGNvbG9yU3RvcHMgPSBzaGFwZS5nZXRGaWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzKCksXG4gICAgICAgICAgICAgICAgZ3JkID0gdGhpcy5jcmVhdGVMaW5lYXJHcmFkaWVudChzdGFydC54LCBzdGFydC55LCBlbmQueCwgZW5kLnkpO1xuXG4gICAgICAgICAgICBpZiAoY29sb3JTdG9wcykge1xuICAgICAgICAgICAgICAgIC8vIGJ1aWxkIGNvbG9yIHN0b3BzXG4gICAgICAgICAgICAgICAgZm9yKHZhciBuID0gMDsgbiA8IGNvbG9yU3RvcHMubGVuZ3RoOyBuICs9IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JkLmFkZENvbG9yU3RvcChjb2xvclN0b3BzW25dLCBjb2xvclN0b3BzW24gKyAxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cignZmlsbFN0eWxlJywgZ3JkKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2ZpbGxSYWRpYWxHcmFkaWVudDogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IHNoYXBlLmdldEZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnQoKSxcbiAgICAgICAgICAgICAgICBlbmQgPSBzaGFwZS5nZXRGaWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludCgpLFxuICAgICAgICAgICAgICAgIHN0YXJ0UmFkaXVzID0gc2hhcGUuZ2V0RmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXMoKSxcbiAgICAgICAgICAgICAgICBlbmRSYWRpdXMgPSBzaGFwZS5nZXRGaWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXMoKSxcbiAgICAgICAgICAgICAgICBjb2xvclN0b3BzID0gc2hhcGUuZ2V0RmlsbFJhZGlhbEdyYWRpZW50Q29sb3JTdG9wcygpLFxuICAgICAgICAgICAgICAgIGdyZCA9IHRoaXMuY3JlYXRlUmFkaWFsR3JhZGllbnQoc3RhcnQueCwgc3RhcnQueSwgc3RhcnRSYWRpdXMsIGVuZC54LCBlbmQueSwgZW5kUmFkaXVzKTtcbiAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBidWlsZCBjb2xvciBzdG9wc1xuICAgICAgICAgICAgZm9yKHZhciBuID0gMDsgbiA8IGNvbG9yU3RvcHMubGVuZ3RoOyBuICs9IDIpIHtcbiAgICAgICAgICAgICAgICBncmQuYWRkQ29sb3JTdG9wKGNvbG9yU3RvcHNbbl0sIGNvbG9yU3RvcHNbbiArIDFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cignZmlsbFN0eWxlJywgZ3JkKTtcbiAgICAgICAgICAgIHRoaXMuZmlsbCgpO1xuICAgICAgICB9LFxuICAgICAgICBfZmlsbDogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciBoYXNDb2xvciA9IHNoYXBlLmZpbGwoKSB8fCBzaGFwZS5maWxsUmVkKCkgfHwgc2hhcGUuZmlsbEdyZWVuKCkgfHwgc2hhcGUuZmlsbEJsdWUoKSxcbiAgICAgICAgICAgICAgICBoYXNQYXR0ZXJuID0gc2hhcGUuZ2V0RmlsbFBhdHRlcm5JbWFnZSgpLFxuICAgICAgICAgICAgICAgIGhhc0xpbmVhckdyYWRpZW50ID0gc2hhcGUuZ2V0RmlsbExpbmVhckdyYWRpZW50Q29sb3JTdG9wcygpLFxuICAgICAgICAgICAgICAgIGhhc1JhZGlhbEdyYWRpZW50ID0gc2hhcGUuZ2V0RmlsbFJhZGlhbEdyYWRpZW50Q29sb3JTdG9wcygpLFxuICAgICAgICAgICAgICAgIGZpbGxQcmlvcml0eSA9IHNoYXBlLmdldEZpbGxQcmlvcml0eSgpO1xuXG4gICAgICAgICAgICAvLyBwcmlvcml0eSBmaWxsc1xuICAgICAgICAgICAgaWYoaGFzQ29sb3IgJiYgZmlsbFByaW9yaXR5ID09PSAnY29sb3InKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsbENvbG9yKHNoYXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoaGFzUGF0dGVybiAmJiBmaWxsUHJpb3JpdHkgPT09ICdwYXR0ZXJuJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGxQYXR0ZXJuKHNoYXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoaGFzTGluZWFyR3JhZGllbnQgJiYgZmlsbFByaW9yaXR5ID09PSAnbGluZWFyLWdyYWRpZW50Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGxMaW5lYXJHcmFkaWVudChzaGFwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGhhc1JhZGlhbEdyYWRpZW50ICYmIGZpbGxQcmlvcml0eSA9PT0gJ3JhZGlhbC1ncmFkaWVudCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maWxsUmFkaWFsR3JhZGllbnQoc2hhcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbm93IGp1c3QgdHJ5IGFuZCBmaWxsIHdpdGggd2hhdGV2ZXIgaXMgYXZhaWxhYmxlXG4gICAgICAgICAgICBlbHNlIGlmKGhhc0NvbG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsbENvbG9yKHNoYXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoaGFzUGF0dGVybikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGxQYXR0ZXJuKHNoYXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoaGFzTGluZWFyR3JhZGllbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maWxsTGluZWFyR3JhZGllbnQoc2hhcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihoYXNSYWRpYWxHcmFkaWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGxSYWRpYWxHcmFkaWVudChzaGFwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9zdHJva2U6IGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgZGFzaCA9IHNoYXBlLmRhc2goKSxcbiAgICAgICAgICAgICAgICBzdHJva2VTY2FsZUVuYWJsZWQgPSBzaGFwZS5nZXRTdHJva2VTY2FsZUVuYWJsZWQoKTtcblxuICAgICAgICAgICAgaWYoc2hhcGUuaGFzU3Ryb2tlKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXN0cm9rZVNjYWxlRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fYXBwbHlMaW5lQ2FwKHNoYXBlKTtcbiAgICAgICAgICAgICAgICBpZihkYXNoICYmIHNoYXBlLmRhc2hFbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRMaW5lRGFzaChkYXNoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHIoJ2xpbmVXaWR0aCcsIHNoYXBlLnN0cm9rZVdpZHRoKCkpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cignc3Ryb2tlU3R5bGUnLCBzaGFwZS5zdHJva2UoKVxuICAgICAgICAgICAgICAgICAgICB8fCBLaW5ldGljLlV0aWwuX2dldFJHQkFTdHJpbmcoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVkOiBzaGFwZS5zdHJva2VSZWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyZWVuOiBzaGFwZS5zdHJva2VHcmVlbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmx1ZTogc2hhcGUuc3Ryb2tlQmx1ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxwaGE6IHNoYXBlLnN0cm9rZUFscGhhKClcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgc2hhcGUuX3N0cm9rZUZ1bmModGhpcyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCFzdHJva2VTY2FsZUVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfYXBwbHlTaGFkb3c6IGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgdXRpbCA9IEtpbmV0aWMuVXRpbCxcbiAgICAgICAgICAgICAgICBhYnNPcGFjaXR5ID0gc2hhcGUuZ2V0QWJzb2x1dGVPcGFjaXR5KCksXG4gICAgICAgICAgICAgICAgY29sb3IgPSB1dGlsLmdldChzaGFwZS5nZXRTaGFkb3dDb2xvcigpLCAnYmxhY2snKSxcbiAgICAgICAgICAgICAgICBibHVyID0gdXRpbC5nZXQoc2hhcGUuZ2V0U2hhZG93Qmx1cigpLCA1KSxcbiAgICAgICAgICAgICAgICBzaGFkb3dPcGFjaXR5ID0gdXRpbC5nZXQoc2hhcGUuZ2V0U2hhZG93T3BhY2l0eSgpLCAxKSxcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSB1dGlsLmdldChzaGFwZS5nZXRTaGFkb3dPZmZzZXQoKSwge1xuICAgICAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgICAgICB5OiAwXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmKHNoYWRvd09wYWNpdHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHIoJ2dsb2JhbEFscGhhJywgc2hhZG93T3BhY2l0eSAqIGFic09wYWNpdHkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ3NoYWRvd0NvbG9yJywgY29sb3IpO1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdzaGFkb3dCbHVyJywgYmx1cik7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ3NoYWRvd09mZnNldFgnLCBvZmZzZXQueCk7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ3NoYWRvd09mZnNldFknLCBvZmZzZXQueSk7XG4gICAgICAgIFxuICAgICAgICB9XG4gICAgfTtcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuU2NlbmVDb250ZXh0LCBLaW5ldGljLkNvbnRleHQpO1xuXG4gICAgS2luZXRpYy5IaXRDb250ZXh0ID0gZnVuY3Rpb24oY2FudmFzKSB7XG4gICAgICAgIEtpbmV0aWMuQ29udGV4dC5jYWxsKHRoaXMsIGNhbnZhcyk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuSGl0Q29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgICAgIF9maWxsOiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ2ZpbGxTdHlsZScsIHNoYXBlLmNvbG9yS2V5KTtcbiAgICAgICAgICAgIHNoYXBlLl9maWxsRnVuY0hpdCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgICAgICB9LFxuICAgICAgICBfc3Ryb2tlOiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgaWYoc2hhcGUuaGFzU3Ryb2tlKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hcHBseUxpbmVDYXAoc2hhcGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cignbGluZVdpZHRoJywgc2hhcGUuc3Ryb2tlV2lkdGgoKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdzdHJva2VTdHlsZScsIHNoYXBlLmNvbG9yS2V5KTtcbiAgICAgICAgICAgICAgICBzaGFwZS5fc3Ryb2tlRnVuY0hpdCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLkhpdENvbnRleHQsIEtpbmV0aWMuQ29udGV4dCk7XG59KSgpO1xuOy8qanNoaW50IHVudXNlZDpmYWxzZSAqL1xuKGZ1bmN0aW9uKCkge1xuICAgIC8vIENPTlNUQU5UU1xuICAgIHZhciBHRVQgPSAnZ2V0JyxcbiAgICAgICAgUkdCID0gJ1JHQicsXG4gICAgICAgIFNFVCA9ICdzZXQnO1xuXG4gICAgS2luZXRpYy5GYWN0b3J5ID0ge1xuICAgICAgICBhZGRHZXR0ZXJTZXR0ZXI6IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBhdHRyLCBkZWYsIHZhbGlkYXRvciwgYWZ0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkR2V0dGVyKGNvbnN0cnVjdG9yLCBhdHRyLCBkZWYpO1xuICAgICAgICAgICAgdGhpcy5hZGRTZXR0ZXIoY29uc3RydWN0b3IsIGF0dHIsIHZhbGlkYXRvciwgYWZ0ZXIpO1xuICAgICAgICAgICAgdGhpcy5hZGRPdmVybG9hZGVkR2V0dGVyU2V0dGVyKGNvbnN0cnVjdG9yLCBhdHRyKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkR2V0dGVyOiBmdW5jdGlvbihjb25zdHJ1Y3RvciwgYXR0ciwgZGVmKSB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kID0gR0VUICsgS2luZXRpYy5VdGlsLl9jYXBpdGFsaXplKGF0dHIpO1xuXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvci5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB2YWwgPSB0aGlzLmF0dHJzW2F0dHJdO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWwgPT09IHVuZGVmaW5lZCA/IGRlZiA6IHZhbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGFkZFNldHRlcjogZnVuY3Rpb24oY29uc3RydWN0b3IsIGF0dHIsIHZhbGlkYXRvciwgYWZ0ZXIpIHtcbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBTRVQgKyBLaW5ldGljLlV0aWwuX2NhcGl0YWxpemUoYXR0cik7XG5cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgICAgICAgICAgICAgICB2YWwgPSB2YWxpZGF0b3IuY2FsbCh0aGlzLCB2YWwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX3NldEF0dHIoYXR0ciwgdmFsKTtcblxuICAgICAgICAgICAgICAgIGlmIChhZnRlcikge1xuICAgICAgICAgICAgICAgICAgICBhZnRlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkQ29tcG9uZW50c0dldHRlclNldHRlcjogZnVuY3Rpb24oY29uc3RydWN0b3IsIGF0dHIsIGNvbXBvbmVudHMsIHZhbGlkYXRvciwgYWZ0ZXIpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSBjb21wb25lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBjYXBpdGFsaXplID0gS2luZXRpYy5VdGlsLl9jYXBpdGFsaXplLFxuICAgICAgICAgICAgICAgIGdldHRlciA9IEdFVCArIGNhcGl0YWxpemUoYXR0ciksXG4gICAgICAgICAgICAgICAgc2V0dGVyID0gU0VUICsgY2FwaXRhbGl6ZShhdHRyKSxcbiAgICAgICAgICAgICAgICBuLCBjb21wb25lbnQ7XG5cbiAgICAgICAgICAgIC8vIGdldHRlclxuICAgICAgICAgICAgY29uc3RydWN0b3IucHJvdG90eXBlW2dldHRlcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0ge307XG5cbiAgICAgICAgICAgICAgICBmb3IgKG49MDsgbjxsZW47IG4rKykge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQgPSBjb21wb25lbnRzW25dO1xuICAgICAgICAgICAgICAgICAgICByZXRbY29tcG9uZW50XSA9IHRoaXMuZ2V0QXR0cihhdHRyICsgY2FwaXRhbGl6ZShjb21wb25lbnQpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gc2V0dGVyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvci5wcm90b3R5cGVbc2V0dGVyXSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICAgIHZhciBvbGRWYWwgPSB0aGlzLmF0dHJzW2F0dHJdLFxuICAgICAgICAgICAgICAgICAgICBrZXk7XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IHZhbGlkYXRvci5jYWxsKHRoaXMsIHZhbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gdmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldEF0dHIoYXR0ciArIGNhcGl0YWxpemUoa2V5KSwgdmFsW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmVDaGFuZ2VFdmVudChhdHRyLCBvbGRWYWwsIHZhbCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGFmdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGFmdGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLmFkZE92ZXJsb2FkZWRHZXR0ZXJTZXR0ZXIoY29uc3RydWN0b3IsIGF0dHIpO1xuICAgICAgICB9LFxuICAgICAgICBhZGRPdmVybG9hZGVkR2V0dGVyU2V0dGVyOiBmdW5jdGlvbihjb25zdHJ1Y3RvciwgYXR0cikge1xuICAgICAgICAgICAgdmFyIGNhcGl0YWxpemVkQXR0ciA9IEtpbmV0aWMuVXRpbC5fY2FwaXRhbGl6ZShhdHRyKSxcbiAgICAgICAgICAgICAgICBzZXR0ZXIgPSBTRVQgKyBjYXBpdGFsaXplZEF0dHIsXG4gICAgICAgICAgICAgICAgZ2V0dGVyID0gR0VUICsgY2FwaXRhbGl6ZWRBdHRyO1xuXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvci5wcm90b3R5cGVbYXR0cl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBzZXR0aW5nXG4gICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tzZXR0ZXJdKGFyZ3VtZW50c1swXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBnZXR0aW5nXG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2dldHRlcl0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBiYWNrQ29tcGF0OiBmdW5jdGlvbihjb25zdHJ1Y3RvciwgbWV0aG9kcykge1xuICAgICAgICAgICAgdmFyIGtleTtcblxuICAgICAgICAgICAgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yLnByb3RvdHlwZVtrZXldID0gY29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZHNba2V5XV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFmdGVyU2V0RmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpbHRlclVwVG9EYXRlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgS2luZXRpYy5WYWxpZGF0b3JzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgUkdCQ29tcG9uZW50OiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgIGlmICh2YWwgPiAyNTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMjU1O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWwgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFscGhhQ29tcG9uZW50OiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgIGlmICh2YWwgPiAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjaHJvbWUgZG9lcyBub3QgaG9ub3IgYWxwaGEgdmFsdWVzIG9mIDBcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbCA8IDAuMDAwMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwLjAwMDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn0pKCk7OyhmdW5jdGlvbigpIHtcbiAgICAvLyBDT05TVEFOVFNcbiAgICB2YXIgQUJTT0xVVEVfT1BBQ0lUWSA9ICdhYnNvbHV0ZU9wYWNpdHknLFxuICAgICAgICBBQlNPTFVURV9UUkFOU0ZPUk0gPSAnYWJzb2x1dGVUcmFuc2Zvcm0nLFxuICAgICAgICBDSEFOR0UgPSAnQ2hhbmdlJyxcbiAgICAgICAgQ0hJTERSRU4gPSAnY2hpbGRyZW4nLFxuICAgICAgICBET1QgPSAnLicsXG4gICAgICAgIEVNUFRZX1NUUklORyA9ICcnLFxuICAgICAgICBHRVQgPSAnZ2V0JyxcbiAgICAgICAgSUQgPSAnaWQnLFxuICAgICAgICBLSU5FVElDID0gJ2tpbmV0aWMnLFxuICAgICAgICBMSVNURU5JTkcgPSAnbGlzdGVuaW5nJyxcbiAgICAgICAgTU9VU0VFTlRFUiA9ICdtb3VzZWVudGVyJyxcbiAgICAgICAgTU9VU0VMRUFWRSA9ICdtb3VzZWxlYXZlJyxcbiAgICAgICAgTkFNRSA9ICduYW1lJyxcbiAgICAgICAgU0VUID0gJ3NldCcsXG4gICAgICAgIFNIQVBFID0gJ1NoYXBlJyxcbiAgICAgICAgU1BBQ0UgPSAnICcsXG4gICAgICAgIFNUQUdFID0gJ3N0YWdlJyxcbiAgICAgICAgVFJBTlNGT1JNID0gJ3RyYW5zZm9ybScsXG4gICAgICAgIFVQUEVSX1NUQUdFID0gJ1N0YWdlJyxcbiAgICAgICAgVklTSUJMRSA9ICd2aXNpYmxlJyxcbiAgICAgICAgQ0xPTkVfQkxBQ0tfTElTVCA9IFsnaWQnXSxcblxuICAgICAgICBUUkFOU0ZPUk1fQ0hBTkdFX1NUUiA9IFtcbiAgICAgICAgICAgICd4Q2hhbmdlLmtpbmV0aWMnLFxuICAgICAgICAgICAgJ3lDaGFuZ2Uua2luZXRpYycsXG4gICAgICAgICAgICAnc2NhbGVYQ2hhbmdlLmtpbmV0aWMnLFxuICAgICAgICAgICAgJ3NjYWxlWUNoYW5nZS5raW5ldGljJyxcbiAgICAgICAgICAgICdza2V3WENoYW5nZS5raW5ldGljJyxcbiAgICAgICAgICAgICdza2V3WUNoYW5nZS5raW5ldGljJyxcbiAgICAgICAgICAgICdyb3RhdGlvbkNoYW5nZS5raW5ldGljJyxcbiAgICAgICAgICAgICdvZmZzZXRYQ2hhbmdlLmtpbmV0aWMnLFxuICAgICAgICAgICAgJ29mZnNldFlDaGFuZ2Uua2luZXRpYycsXG4gICAgICAgICAgICAndHJhbnNmb3Jtc0VuYWJsZWRDaGFuZ2Uua2luZXRpYydcbiAgICAgICAgXS5qb2luKFNQQUNFKTtcblxuXG4gICAgS2luZXRpYy5VdGlsLmFkZE1ldGhvZHMoS2luZXRpYy5Ob2RlLCB7XG4gICAgICAgIF9pbml0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuX2lkID0gS2luZXRpYy5pZENvdW50ZXIrKztcbiAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuYXR0cnMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgICAgICAgICB0aGlzLl9maWx0ZXJVcFRvRGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRycyhjb25maWcpO1xuXG4gICAgICAgICAgICAvLyBldmVudCBiaW5kaW5ncyBmb3IgY2FjaGUgaGFuZGxpbmdcbiAgICAgICAgICAgIHRoaXMub24oVFJBTlNGT1JNX0NIQU5HRV9TVFIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NsZWFyQ2FjaGUoVFJBTlNGT1JNKTtcbiAgICAgICAgICAgICAgICB0aGF0Ll9jbGVhclNlbGZBbmREZXNjZW5kYW50Q2FjaGUoQUJTT0xVVEVfVFJBTlNGT1JNKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5vbigndmlzaWJsZUNoYW5nZS5raW5ldGljJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5fY2xlYXJTZWxmQW5kRGVzY2VuZGFudENhY2hlKFZJU0lCTEUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm9uKCdsaXN0ZW5pbmdDaGFuZ2Uua2luZXRpYycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoYXQuX2NsZWFyU2VsZkFuZERlc2NlbmRhbnRDYWNoZShMSVNURU5JTkcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm9uKCdvcGFjaXR5Q2hhbmdlLmtpbmV0aWMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGF0Ll9jbGVhclNlbGZBbmREZXNjZW5kYW50Q2FjaGUoQUJTT0xVVEVfT1BBQ0lUWSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgX2NsZWFyQ2FjaGU6IGZ1bmN0aW9uKGF0dHIpe1xuICAgICAgICAgICAgaWYgKGF0dHIpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fY2FjaGVbYXR0cl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZ2V0Q2FjaGU6IGZ1bmN0aW9uKGF0dHIsIHByaXZhdGVHZXR0ZXIpe1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gdGhpcy5fY2FjaGVbYXR0cl07XG5cbiAgICAgICAgICAgIC8vIGlmIG5vdCBjYWNoZWQsIHdlIG5lZWQgdG8gc2V0IGl0IHVzaW5nIHRoZSBwcml2YXRlIGdldHRlciBtZXRob2QuXG4gICAgICAgICAgICBpZiAoY2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlW2F0dHJdID0gcHJpdmF0ZUdldHRlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVbYXR0cl07XG4gICAgICAgIH0sXG4gICAgICAgIC8qXG4gICAgICAgICAqIHdoZW4gdGhlIGxvZ2ljIGZvciBhIGNhY2hlZCByZXN1bHQgZGVwZW5kcyBvbiBhbmNlc3RvciBwcm9wYWdhdGlvbiwgdXNlIHRoaXNcbiAgICAgICAgICogbWV0aG9kIHRvIGNsZWFyIHNlbGYgYW5kIGNoaWxkcmVuIGNhY2hlXG4gICAgICAgICAqL1xuICAgICAgICBfY2xlYXJTZWxmQW5kRGVzY2VuZGFudENhY2hlOiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICAgICAgICB0aGlzLl9jbGVhckNhY2hlKGF0dHIpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q2hpbGRyZW4oKS5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5fY2xlYXJTZWxmQW5kRGVzY2VuZGFudENhY2hlKGF0dHIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgKiBjbGVhciBjYWNoZWQgY2FudmFzXG4gICAgICAgICogQG1ldGhvZFxuICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICogQHJldHVybnMge0tpbmV0aWMuTm9kZX1cbiAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAqIG5vZGUuY2xlYXJDYWNoZSgpO1xuICAgICAgICAqL1xuICAgICAgICBjbGVhckNhY2hlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9jYWNoZS5jYW52YXM7XG4gICAgICAgICAgICB0aGlzLl9maWx0ZXJVcFRvRGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAqIGNhY2hlIG5vZGUgdG8gaW1wcm92ZSBkcmF3aW5nIHBlcmZvcm1hbmNlLCBhcHBseSBmaWx0ZXJzLCBvciBjcmVhdGUgbW9yZSBhY2N1cmF0ZVxuICAgICAgICAqICBoaXQgcmVnaW9uc1xuICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxuICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXG4gICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdXG4gICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxuICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmF3Qm9yZGVyXSB3aGVuIHNldCB0byB0cnVlLCBhIHJlZCBib3JkZXIgd2lsbCBiZSBkcmF3biBhcm91bmQgdGhlIGNhY2hlZFxuICAgICAgICAqICByZWdpb24gZm9yIGRlYnVnZ2luZyBwdXJwb3Nlc1xuICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLk5vZGV9XG4gICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgKiAvLyBjYWNoZSBhIHNoYXBlIHdpdGggdGhlIHgseSBwb3NpdGlvbiBvZiB0aGUgYm91bmRpbmcgYm94IGF0IHRoZSBjZW50ZXIgYW5kXG4gICAgICAgICogLy8gdGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIGJvdW5kaW5nIGJveCBlcXVhbCB0byB0aGUgd2lkdGggYW5kIGhlaWdodCBvZlxuICAgICAgICAqIC8vIHRoZSBzaGFwZSBvYnRhaW5lZCBmcm9tIHNoYXBlLndpZHRoKCkgYW5kIHNoYXBlLmhlaWdodCgpXG4gICAgICAgICogaW1hZ2UuY2FjaGUoKTtcbiAgICAgICAgKlxuICAgICAgICAqIC8vIGNhY2hlIGEgbm9kZSBhbmQgZGVmaW5lIHRoZSBib3VuZGluZyBib3ggcG9zaXRpb24gYW5kIHNpemVcbiAgICAgICAgKiBub2RlLmNhY2hlKHtcbiAgICAgICAgKiAgIHg6IC0zMCxcbiAgICAgICAgKiAgIHk6IC0zMCxcbiAgICAgICAgKiAgIHdpZHRoOiAxMDAsXG4gICAgICAgICogICBoZWlnaHQ6IDIwMFxuICAgICAgICAqIH0pO1xuICAgICAgICAqXG4gICAgICAgICogLy8gY2FjaGUgYSBub2RlIGFuZCBkcmF3IGEgcmVkIGJvcmRlciBhcm91bmQgdGhlIGJvdW5kaW5nIGJveFxuICAgICAgICAqIC8vIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXNcbiAgICAgICAgKiBub2RlLmNhY2hlKHtcbiAgICAgICAgKiAgIHg6IC0zMCxcbiAgICAgICAgKiAgIHk6IC0zMCxcbiAgICAgICAgKiAgIHdpZHRoOiAxMDAsXG4gICAgICAgICogICBoZWlnaHQ6IDIwMCxcbiAgICAgICAgKiAgIGRyYXdCb3JkZXI6IHRydWVcbiAgICAgICAgKiB9KTtcbiAgICAgICAgKi9cbiAgICAgICAgY2FjaGU6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgdmFyIGNvbmYgPSBjb25maWcgfHwge30sXG4gICAgICAgICAgICAgICAgeCA9IGNvbmYueCB8fCAwLFxuICAgICAgICAgICAgICAgIHkgPSBjb25mLnkgfHwgMCxcbiAgICAgICAgICAgICAgICB3aWR0aCA9IGNvbmYud2lkdGggfHwgdGhpcy53aWR0aCgpLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGNvbmYuaGVpZ2h0IHx8IHRoaXMuaGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgZHJhd0JvcmRlciA9IGNvbmYuZHJhd0JvcmRlciB8fCBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKHdpZHRoID09PSAwIHx8IGhlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIEtpbmV0aWMuVXRpbC53YXJuKCdXaWR0aCBvciBoZWlnaHQgb2YgY2FjaGluZyBjb25maWd1cmF0aW9uIGVxdWFscyAwLiBDYWNoZSBpcyBpZ25vcmVkLicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjYWNoZWRTY2VuZUNhbnZhcyA9IG5ldyBLaW5ldGljLlNjZW5lQ2FudmFzKHtcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxSYXRpbzogMSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGNhY2hlZEZpbHRlckNhbnZhcyA9IG5ldyBLaW5ldGljLlNjZW5lQ2FudmFzKHtcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxSYXRpbzogMSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGNhY2hlZEhpdENhbnZhcyA9IG5ldyBLaW5ldGljLkhpdENhbnZhcyh7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBzY2VuZUNvbnRleHQgPSBjYWNoZWRTY2VuZUNhbnZhcy5nZXRDb250ZXh0KCksXG4gICAgICAgICAgICAgICAgaGl0Q29udGV4dCA9IGNhY2hlZEhpdENhbnZhcy5nZXRDb250ZXh0KCk7XG5cbiAgICAgICAgICAgIGNhY2hlZEhpdENhbnZhcy5pc0NhY2hlID0gdHJ1ZTtcblxuICAgICAgICAgICAgdGhpcy5jbGVhckNhY2hlKCk7XG4gICBcbiAgICAgICAgICAgIHNjZW5lQ29udGV4dC5zYXZlKCk7XG4gICAgICAgICAgICBoaXRDb250ZXh0LnNhdmUoKTtcblxuICAgICAgICAgICAgLy8gdGhpcyB3aWxsIGRyYXcgYSByZWQgYm9yZGVyIGFyb3VuZCB0aGUgY2FjaGVkIGJveCBmb3JcbiAgICAgICAgICAgIC8vIGRlYnVnZ2luZyBwdXJwb3Nlc1xuICAgICAgICAgICAgaWYgKGRyYXdCb3JkZXIpIHtcbiAgICAgICAgICAgICAgICBzY2VuZUNvbnRleHQuc2F2ZSgpO1xuICAgICAgICAgICAgICAgIHNjZW5lQ29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBzY2VuZUNvbnRleHQucmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBzY2VuZUNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgc2NlbmVDb250ZXh0LnNldEF0dHIoJ3N0cm9rZVN0eWxlJywgJ3JlZCcpO1xuICAgICAgICAgICAgICAgIHNjZW5lQ29udGV4dC5zZXRBdHRyKCdsaW5lV2lkdGgnLCA1KTtcbiAgICAgICAgICAgICAgICBzY2VuZUNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgc2NlbmVDb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2NlbmVDb250ZXh0LnRyYW5zbGF0ZSh4ICogLTEsIHkgKiAtMSk7XG4gICAgICAgICAgICBoaXRDb250ZXh0LnRyYW5zbGF0ZSh4ICogLTEsIHkgKiAtMSk7XG5cbiAgICAgICAgICAgIC8vIGRvbid0IG5lZWQgdG8gdHJhbnNsYXRlIGNhbnZhcyBpZiBzaGFwZSBpcyBub3QgYWRkZWQgdG8gbGF5ZXJcbiAgICAgICAgICAgIGlmICh0aGlzLm5vZGVUeXBlID09PSAnU2hhcGUnKSB7XG4gICAgICAgICAgICAgICAgc2NlbmVDb250ZXh0LnRyYW5zbGF0ZSh0aGlzLngoKSAqIC0xLCB0aGlzLnkoKSAqIC0xKTtcbiAgICAgICAgICAgICAgICBoaXRDb250ZXh0LnRyYW5zbGF0ZSh0aGlzLngoKSAqIC0xLCB0aGlzLnkoKSAqIC0xKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kcmF3U2NlbmUoY2FjaGVkU2NlbmVDYW52YXMsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kcmF3SGl0KGNhY2hlZEhpdENhbnZhcywgdGhpcyk7XG5cbiAgICAgICAgICAgIHNjZW5lQ29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgICAgICBoaXRDb250ZXh0LnJlc3RvcmUoKTtcblxuICAgICAgICAgICAgdGhpcy5fY2FjaGUuY2FudmFzID0ge1xuICAgICAgICAgICAgICAgIHNjZW5lOiBjYWNoZWRTY2VuZUNhbnZhcyxcbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGNhY2hlZEZpbHRlckNhbnZhcyxcbiAgICAgICAgICAgICAgICBoaXQ6IGNhY2hlZEhpdENhbnZhc1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIF9kcmF3Q2FjaGVkU2NlbmVDYW52YXM6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xuICAgICAgICAgICAgdGhpcy5nZXRMYXllcigpLl9hcHBseVRyYW5zZm9ybSh0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGNvbnRleHQuX2FwcGx5T3BhY2l0eSh0aGlzKTtcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKHRoaXMuX2dldENhY2hlZFNjZW5lQ2FudmFzKCkuX2NhbnZhcywgMCwgMCk7XG4gICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldENhY2hlZFNjZW5lQ2FudmFzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBmaWx0ZXJzID0gdGhpcy5maWx0ZXJzKCksXG4gICAgICAgICAgICAgICAgY2FjaGVkQ2FudmFzID0gdGhpcy5fY2FjaGUuY2FudmFzLFxuICAgICAgICAgICAgICAgIHNjZW5lQ2FudmFzID0gY2FjaGVkQ2FudmFzLnNjZW5lLFxuICAgICAgICAgICAgICAgIGZpbHRlckNhbnZhcyA9IGNhY2hlZENhbnZhcy5maWx0ZXIsXG4gICAgICAgICAgICAgICAgZmlsdGVyQ29udGV4dCA9IGZpbHRlckNhbnZhcy5nZXRDb250ZXh0KCksXG4gICAgICAgICAgICAgICAgbGVuLCBpbWFnZURhdGEsIG4sIGZpbHRlcjtcblxuICAgICAgICAgICAgaWYgKGZpbHRlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2ZpbHRlclVwVG9EYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSBmaWx0ZXJzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlckNvbnRleHQuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvcHkgY2FjaGVkIGNhbnZhcyBvbnRvIGZpbHRlciBjb250ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJDb250ZXh0LmRyYXdJbWFnZShzY2VuZUNhbnZhcy5fY2FudmFzLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlRGF0YSA9IGZpbHRlckNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIGZpbHRlckNhbnZhcy5nZXRXaWR0aCgpLCBmaWx0ZXJDYW52YXMuZ2V0SGVpZ2h0KCkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhcHBseSBmaWx0ZXJzIHRvIGZpbHRlciBjb250ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG49MDsgbjxsZW47IG4rKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlciA9IGZpbHRlcnNbbl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyLmNhbGwodGhpcywgaW1hZ2VEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJDb250ZXh0LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEtpbmV0aWMuVXRpbC53YXJuKCdVbmFibGUgdG8gYXBwbHkgZmlsdGVyLiAnICsgZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbHRlclVwVG9EYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyQ2FudmFzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjZW5lQ2FudmFzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZHJhd0NhY2hlZEhpdENhbnZhczogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlZENhbnZhcyA9IHRoaXMuX2NhY2hlLmNhbnZhcyxcbiAgICAgICAgICAgICAgICBoaXRDYW52YXMgPSBjYWNoZWRDYW52YXMuaGl0O1xuXG4gICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0TGF5ZXIoKS5fYXBwbHlUcmFuc2Zvcm0odGhpcywgY29udGV4dCk7XG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShoaXRDYW52YXMuX2NhbnZhcywgMCwgMCk7XG4gICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGJpbmQgZXZlbnRzIHRvIHRoZSBub2RlLiBLaW5ldGljSlMgc3VwcG9ydHMgbW91c2VvdmVyLCBtb3VzZW1vdmUsXG4gICAgICAgICAqICBtb3VzZW91dCwgbW91c2VlbnRlciwgbW91c2VsZWF2ZSwgbW91c2Vkb3duLCBtb3VzZXVwLCBtb3VzZXdoZWVsLCBjbGljaywgZGJsY2xpY2ssIHRvdWNoc3RhcnQsIHRvdWNobW92ZSxcbiAgICAgICAgICogIHRvdWNoZW5kLCB0YXAsIGRibHRhcCwgZHJhZ3N0YXJ0LCBkcmFnbW92ZSwgYW5kIGRyYWdlbmQgZXZlbnRzLiBUaGUgS2luZXRpYyBTdGFnZSBzdXBwb3J0c1xuICAgICAgICAgKiAgY29udGVudE1vdXNlb3ZlciwgY29udGVudE1vdXNlbW92ZSwgY29udGVudE1vdXNlb3V0LCBjb250ZW50TW91c2Vkb3duLCBjb250ZW50TW91c2V1cCxcbiAgICAgICAgICogIGNvbnRlbnRDbGljaywgY29udGVudERibGNsaWNrLCBjb250ZW50VG91Y2hzdGFydCwgY29udGVudFRvdWNobW92ZSwgY29udGVudFRvdWNoZW5kLCBjb250ZW50VGFwLFxuICAgICAgICAgKiAgYW5kIGNvbnRlbnREYmxUYXAuICBQYXNzIGluIGEgc3RyaW5nIG9mIGV2ZW50cyBkZWxpbW1pdGVkIGJ5IGEgc3BhY2UgdG8gYmluZCBtdWx0aXBsZSBldmVudHMgYXQgb25jZVxuICAgICAgICAgKiAgc3VjaCBhcyAnbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlJy4gSW5jbHVkZSBhIG5hbWVzcGFjZSB0byBiaW5kIGFuXG4gICAgICAgICAqICBldmVudCBieSBuYW1lIHN1Y2ggYXMgJ2NsaWNrLmZvb2JhcicuXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGV2dFN0ciBlLmcuICdjbGljaycsICdtb3VzZWRvd24gdG91Y2hzdGFydCcsICdtb3VzZWRvd24uZm9vIHRvdWNoc3RhcnQuZm9vJ1xuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBoYW5kbGVyIGZ1bmN0aW9uIGlzIHBhc3NlZCBhbiBldmVudCBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuTm9kZX1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogLy8gYWRkIGNsaWNrIGxpc3RlbmVyXG4gICAgICAgICAqIG5vZGUub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAqICAgY29uc29sZS5sb2coJ3lvdSBjbGlja2VkIG1lIScpO1xuICAgICAgICAgKiB9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gZ2V0IHRoZSB0YXJnZXQgbm9kZVxuICAgICAgICAgKiBub2RlLm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgKiAgIGNvbnNvbGUubG9nKGV2dC50YXJnZXQpO1xuICAgICAgICAgKiB9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gc3RvcCBldmVudCBwcm9wYWdhdGlvblxuICAgICAgICAgKiBub2RlLm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgKiAgIGV2dC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgICAgKiB9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gYmluZCBtdWx0aXBsZSBsaXN0ZW5lcnNcbiAgICAgICAgICogbm9kZS5vbignY2xpY2sgdG91Y2hzdGFydCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgKiAgIGNvbnNvbGUubG9nKCd5b3UgY2xpY2tlZC90b3VjaGVkIG1lIScpO1xuICAgICAgICAgKiB9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gbmFtZXNwYWNlIGxpc3RlbmVyXG4gICAgICAgICAqIG5vZGUub24oJ2NsaWNrLmZvbycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgKiAgIGNvbnNvbGUubG9nKCd5b3UgY2xpY2tlZC90b3VjaGVkIG1lIScpO1xuICAgICAgICAgKiB9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gZ2V0IHRoZSBldmVudCB0eXBlXG4gICAgICAgICAqIG5vZGUub24oJ2NsaWNrIHRhcCcsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgKiAgIHZhciBldmVudFR5cGUgPSBldnQudHlwZTtcbiAgICAgICAgICogfSk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIGdldCBuYXRpdmUgZXZlbnQgb2JqZWN0XG4gICAgICAgICAqIG5vZGUub24oJ2NsaWNrIHRhcCcsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgKiAgIHZhciBuYXRpdmVFdmVudCA9IGV2dC5ldnQ7XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBmb3IgY2hhbmdlIGV2ZW50cywgZ2V0IHRoZSBvbGQgYW5kIG5ldyB2YWxcbiAgICAgICAgICogbm9kZS5vbigneENoYW5nZScsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgKiAgIHZhciBvbGRWYWwgPSBldnQub2xkVmFsO1xuICAgICAgICAgKiAgIHZhciBuZXdWYWwgPSBldnQubmV3VmFsO1xuICAgICAgICAgKiB9KTtcbiAgICAgICAgICovXG4gICAgICAgIG9uOiBmdW5jdGlvbihldnRTdHIsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHZhciBldmVudHMgPSBldnRTdHIuc3BsaXQoU1BBQ0UpLFxuICAgICAgICAgICAgICAgIGxlbiA9IGV2ZW50cy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgbiwgZXZlbnQsIHBhcnRzLCBiYXNlRXZlbnQsIG5hbWU7XG5cbiAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogbG9vcCB0aHJvdWdoIHR5cGVzIGFuZCBhdHRhY2ggZXZlbnQgbGlzdGVuZXJzIHRvXG4gICAgICAgICAgICAgKiBlYWNoIG9uZS4gIGVnLiAnY2xpY2sgbW91c2VvdmVyLm5hbWVzcGFjZSBtb3VzZW91dCdcbiAgICAgICAgICAgICAqIHdpbGwgY3JlYXRlIHRocmVlIGV2ZW50IGJpbmRpbmdzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZvcihuID0gMDsgbiA8IGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQgPSBldmVudHNbbl07XG4gICAgICAgICAgICAgICAgcGFydHMgPSBldmVudC5zcGxpdChET1QpO1xuICAgICAgICAgICAgICAgIGJhc2VFdmVudCA9IHBhcnRzWzBdO1xuICAgICAgICAgICAgICAgIG5hbWUgPSBwYXJ0c1sxXSB8fCBFTVBUWV9TVFJJTkc7XG5cbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgZXZlbnRzIGFycmF5IGlmIGl0IGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICAgICAgICBpZighdGhpcy5ldmVudExpc3RlbmVyc1tiYXNlRXZlbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnNbYmFzZUV2ZW50XSA9IFtdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnNbYmFzZUV2ZW50XS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJlbW92ZSBldmVudCBiaW5kaW5ncyBmcm9tIHRoZSBub2RlLiBQYXNzIGluIGEgc3RyaW5nIG9mXG4gICAgICAgICAqICBldmVudCB0eXBlcyBkZWxpbW1pdGVkIGJ5IGEgc3BhY2UgdG8gcmVtb3ZlIG11bHRpcGxlIGV2ZW50XG4gICAgICAgICAqICBiaW5kaW5ncyBhdCBvbmNlIHN1Y2ggYXMgJ21vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZScuXG4gICAgICAgICAqICBpbmNsdWRlIGEgbmFtZXNwYWNlIHRvIHJlbW92ZSBhbiBldmVudCBiaW5kaW5nIGJ5IG5hbWVcbiAgICAgICAgICogIHN1Y2ggYXMgJ2NsaWNrLmZvb2JhcicuIElmIHlvdSBvbmx5IGdpdmUgYSBuYW1lIGxpa2UgJy5mb29iYXInLFxuICAgICAgICAgKiAgYWxsIGV2ZW50cyBpbiB0aGF0IG5hbWVzcGFjZSB3aWxsIGJlIHJlbW92ZWQuXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGV2dFN0ciBlLmcuICdjbGljaycsICdtb3VzZWRvd24gdG91Y2hzdGFydCcsICcuZm9vYmFyJ1xuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5Ob2RlfVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiAvLyByZW1vdmUgbGlzdGVuZXJcbiAgICAgICAgICogbm9kZS5vZmYoJ2NsaWNrJyk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIHJlbW92ZSBtdWx0aXBsZSBsaXN0ZW5lcnNcbiAgICAgICAgICogbm9kZS5vZmYoJ2NsaWNrIHRvdWNoc3RhcnQnKTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gcmVtb3ZlIGxpc3RlbmVyIGJ5IG5hbWVcbiAgICAgICAgICogbm9kZS5vZmYoJ2NsaWNrLmZvbycpO1xuICAgICAgICAgKi9cbiAgICAgICAgb2ZmOiBmdW5jdGlvbihldnRTdHIpIHtcbiAgICAgICAgICAgIHZhciBldmVudHMgPSAoZXZ0U3RyIHx8ICcnKS5zcGxpdChTUEFDRSksXG4gICAgICAgICAgICAgICAgbGVuID0gZXZlbnRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBuLCB0LCBldmVudCwgcGFydHMsIGJhc2VFdmVudCwgbmFtZTtcblxuICAgICAgICAgICAgaWYgKCFldnRTdHIpIHtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgYWxsIGV2ZW50c1xuICAgICAgICAgICAgICAgIGZvcih0IGluIHRoaXMuZXZlbnRMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb2ZmKHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcihuID0gMDsgbiA8IGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQgPSBldmVudHNbbl07XG4gICAgICAgICAgICAgICAgcGFydHMgPSBldmVudC5zcGxpdChET1QpO1xuICAgICAgICAgICAgICAgIGJhc2VFdmVudCA9IHBhcnRzWzBdO1xuICAgICAgICAgICAgICAgIG5hbWUgPSBwYXJ0c1sxXTtcblxuICAgICAgICAgICAgICAgIGlmKGJhc2VFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmV2ZW50TGlzdGVuZXJzW2Jhc2VFdmVudF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29mZihiYXNlRXZlbnQsIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3IodCBpbiB0aGlzLmV2ZW50TGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vZmYodCwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gc29tZSBldmVudCBhbGlhc2VzIGZvciB0aGlyZCBwYXJ0eSBpbnRlZ3JhdGlvbiBsaWtlIEhhbW1lckpTXG4gICAgICAgIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgdmFyIGUgPSB7XG4gICAgICAgICAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgICAgICAgICAgdHlwZTogZXZ0LnR5cGUsXG4gICAgICAgICAgICAgIGV2dDogZXZ0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5maXJlKGV2dC50eXBlLCBlKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24odHlwZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgLy8gd2UgaGF2ZSB0byBwYXNzIG5hdGl2ZSBldmVudCB0byBoYW5kbGVyXG4gICAgICAgICAgICB0aGlzLm9uKHR5cGUsIGZ1bmN0aW9uKGV2dCl7XG4gICAgICAgICAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGV2dC5ldnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIgOiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgICAgICB0aGlzLm9mZih0eXBlKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50LCBidXQgZG9uJ3QgZGVzdHJveVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLk5vZGV9XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIG5vZGUucmVtb3ZlKCk7XG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KCk7XG5cbiAgICAgICAgICAgIGlmKHBhcmVudCAmJiBwYXJlbnQuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKHRoaXMuaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIHBhcmVudC5fc2V0Q2hpbGRyZW5JbmRpY2VzKCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucGFyZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBldmVyeSBjYWNoZWQgYXR0ciB0aGF0IGlzIGNhbGN1bGF0ZWQgdmlhIG5vZGUgdHJlZVxuICAgICAgICAgICAgLy8gdHJhdmVyc2FsIG11c3QgYmUgY2xlYXJlZCB3aGVuIHJlbW92aW5nIGEgbm9kZVxuICAgICAgICAgICAgdGhpcy5fY2xlYXJTZWxmQW5kRGVzY2VuZGFudENhY2hlKFNUQUdFKTtcbiAgICAgICAgICAgIHRoaXMuX2NsZWFyU2VsZkFuZERlc2NlbmRhbnRDYWNoZShBQlNPTFVURV9UUkFOU0ZPUk0pO1xuICAgICAgICAgICAgdGhpcy5fY2xlYXJTZWxmQW5kRGVzY2VuZGFudENhY2hlKFZJU0lCTEUpO1xuICAgICAgICAgICAgdGhpcy5fY2xlYXJTZWxmQW5kRGVzY2VuZGFudENhY2hlKExJU1RFTklORyk7XG4gICAgICAgICAgICB0aGlzLl9jbGVhclNlbGZBbmREZXNjZW5kYW50Q2FjaGUoQUJTT0xVVEVfT1BBQ0lUWSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogcmVtb3ZlIGFuZCBkZXN0cm95IHNlbGZcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBub2RlLmRlc3Ryb3koKTtcbiAgICAgICAgICovXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGZyb20gaWRzIGFuZCBuYW1lcyBoYXNoZXNcbiAgICAgICAgICAgIEtpbmV0aWMuX3JlbW92ZUlkKHRoaXMuZ2V0SWQoKSk7XG4gICAgICAgICAgICBLaW5ldGljLl9yZW1vdmVOYW1lKHRoaXMuZ2V0TmFtZSgpLCB0aGlzLl9pZCk7XG5cbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgYXR0clxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyXG4gICAgICAgICAqIEByZXR1cm5zIHtJbnRlZ2VyfFN0cmluZ3xPYmplY3R8QXJyYXl9XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIHZhciB4ID0gbm9kZS5nZXRBdHRyKCd4Jyk7XG4gICAgICAgICAqL1xuICAgICAgICBnZXRBdHRyOiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kID0gR0VUICsgS2luZXRpYy5VdGlsLl9jYXBpdGFsaXplKGF0dHIpO1xuICAgICAgICAgICAgaWYoS2luZXRpYy5VdGlsLl9pc0Z1bmN0aW9uKHRoaXNbbWV0aG9kXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1ttZXRob2RdKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBvdGhlcndpc2UgZ2V0IGRpcmVjdGx5XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRyc1thdHRyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICogZ2V0IGFuY2VzdG9yc1xuICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLkNvbGxlY3Rpb259XG4gICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgKiBzaGFwZS5nZXRBbmNlc3RvcnMoKS5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgKiAgIGNvbnNvbGUubG9nKG5vZGUuZ2V0SWQoKSk7XG4gICAgICAgICogfSlcbiAgICAgICAgKi9cbiAgICAgICAgZ2V0QW5jZXN0b3JzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLmdldFBhcmVudCgpLFxuICAgICAgICAgICAgICAgIGFuY2VzdG9ycyA9IG5ldyBLaW5ldGljLkNvbGxlY3Rpb24oKTtcblxuICAgICAgICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICAgICAgICAgIGFuY2VzdG9ycy5wdXNoKHBhcmVudCk7XG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LmdldFBhcmVudCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYW5jZXN0b3JzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IGF0dHJzIG9iamVjdCBsaXRlcmFsXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIGdldEF0dHJzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF0dHJzIHx8IHt9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogc2V0IG11bHRpcGxlIGF0dHJzIGF0IG9uY2UgdXNpbmcgYW4gb2JqZWN0IGxpdGVyYWxcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIG9iamVjdCBjb250YWluaW5nIGtleSB2YWx1ZSBwYWlyc1xuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5Ob2RlfVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBub2RlLnNldEF0dHJzKHtcbiAgICAgICAgICogICB4OiA1LFxuICAgICAgICAgKiAgIGZpbGw6ICdyZWQnXG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKi9cbiAgICAgICAgc2V0QXR0cnM6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgdmFyIGtleSwgbWV0aG9kO1xuXG4gICAgICAgICAgICBpZihjb25maWcpIHtcbiAgICAgICAgICAgICAgICBmb3Ioa2V5IGluIGNvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSBDSElMRFJFTiB8fCBjb25maWdba2V5XSBpbnN0YW5jZW9mIEtpbmV0aWMuTm9kZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2QgPSBTRVQgKyBLaW5ldGljLlV0aWwuX2NhcGl0YWxpemUoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzZSBzZXR0ZXIgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihLaW5ldGljLlV0aWwuX2lzRnVuY3Rpb24odGhpc1ttZXRob2RdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbbWV0aG9kXShjb25maWdba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2Ugc2V0IGRpcmVjdGx5XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRBdHRyKGtleSwgY29uZmlnW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZXRlcm1pbmUgaWYgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50cyBieSB0YWtpbmcgaW50byBhY2NvdW50IGFuY2VzdG9ycy5cbiAgICAgICAgICpcbiAgICAgICAgICogUGFyZW50ICAgIHwgU2VsZiAgICAgIHwgaXNMaXN0ZW5pbmdcbiAgICAgICAgICogbGlzdGVuaW5nIHwgbGlzdGVuaW5nIHwgXG4gICAgICAgICAqIC0tLS0tLS0tLS0rLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tXG4gICAgICAgICAqIFQgICAgICAgICB8IFQgICAgICAgICB8IFQgXG4gICAgICAgICAqIFQgICAgICAgICB8IEYgICAgICAgICB8IEZcbiAgICAgICAgICogRiAgICAgICAgIHwgVCAgICAgICAgIHwgVCBcbiAgICAgICAgICogRiAgICAgICAgIHwgRiAgICAgICAgIHwgRlxuICAgICAgICAgKiAtLS0tLS0tLS0tKy0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLVxuICAgICAgICAgKiBUICAgICAgICAgfCBJICAgICAgICAgfCBUXG4gICAgICAgICAqIEYgICAgICAgICB8IEkgICAgICAgICB8IEZcbiAgICAgICAgICogSSAgICAgICAgIHwgSSAgICAgICAgIHwgVFxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgaXNMaXN0ZW5pbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldENhY2hlKExJU1RFTklORywgdGhpcy5faXNMaXN0ZW5pbmcpO1xuICAgICAgICB9LFxuICAgICAgICBfaXNMaXN0ZW5pbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGxpc3RlbmluZyA9IHRoaXMuZ2V0TGlzdGVuaW5nKCksXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gdGhpcy5nZXRQYXJlbnQoKTtcblxuICAgICAgICAgICAgLy8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBhIHNpbXBsaWZpY2F0aW9uIG9mIHRoZSB0cnV0aCB0YWJsZSBhYm92ZS5cbiAgICAgICAgICAgIC8vIHBsZWFzZSBtb2RpZnkgY2FyZWZ1bGx5XG4gICAgICAgICAgICBpZiAobGlzdGVuaW5nID09PSAnaW5oZXJpdCcpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQuaXNMaXN0ZW5pbmcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0ZW5pbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZXRlcm1pbmUgaWYgbm9kZSBpcyB2aXNpYmxlIGJ5IHRha2luZyBpbnRvIGFjY291bnQgYW5jZXN0b3JzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBQYXJlbnQgICAgfCBTZWxmICAgICAgfCBpc1Zpc2libGVcbiAgICAgICAgICogdmlzaWJsZSAgIHwgdmlzaWJsZSAgIHwgXG4gICAgICAgICAqIC0tLS0tLS0tLS0rLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tXG4gICAgICAgICAqIFQgICAgICAgICB8IFQgICAgICAgICB8IFQgXG4gICAgICAgICAqIFQgICAgICAgICB8IEYgICAgICAgICB8IEZcbiAgICAgICAgICogRiAgICAgICAgIHwgVCAgICAgICAgIHwgVCBcbiAgICAgICAgICogRiAgICAgICAgIHwgRiAgICAgICAgIHwgRlxuICAgICAgICAgKiAtLS0tLS0tLS0tKy0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLVxuICAgICAgICAgKiBUICAgICAgICAgfCBJICAgICAgICAgfCBUXG4gICAgICAgICAqIEYgICAgICAgICB8IEkgICAgICAgICB8IEZcbiAgICAgICAgICogSSAgICAgICAgIHwgSSAgICAgICAgIHwgVFxuXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBpc1Zpc2libGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldENhY2hlKFZJU0lCTEUsIHRoaXMuX2lzVmlzaWJsZSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9pc1Zpc2libGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHZpc2libGUgPSB0aGlzLmdldFZpc2libGUoKSxcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSB0aGlzLmdldFBhcmVudCgpO1xuXG4gICAgICAgICAgICAvLyB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIGEgc2ltcGxpZmljYXRpb24gb2YgdGhlIHRydXRoIHRhYmxlIGFib3ZlLlxuICAgICAgICAgICAgLy8gcGxlYXNlIG1vZGlmeSBjYXJlZnVsbHlcbiAgICAgICAgICAgIGlmICh2aXNpYmxlID09PSAnaW5oZXJpdCcpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQuaXNWaXNpYmxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaWJsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRldGVybWluZSBpZiBsaXN0ZW5pbmcgaXMgZW5hYmxlZCBieSB0YWtpbmcgaW50byBhY2NvdW50IGRlc2NlbmRhbnRzLiAgSWYgc2VsZiBvciBhbnkgY2hpbGRyZW5cbiAgICAgICAgICogaGF2ZSBfaXNMaXN0ZW5pbmdFbmFibGVkIHNldCB0byB0cnVlLCB0aGVuIHNlbGYgYWxzbyBoYXMgbGlzdGVuaW5nIGVuYWJsZWQuXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBzaG91bGREcmF3SGl0OiBmdW5jdGlvbihjYW52YXMpIHtcbiAgICAgICAgICAgIHZhciBsYXllciA9IHRoaXMuZ2V0TGF5ZXIoKTtcbiAgICAgICAgICAgIHJldHVybiAgKGNhbnZhcyAmJiBjYW52YXMuaXNDYWNoZSkgfHwgKGxheWVyICYmIGxheWVyLmhpdEdyYXBoRW5hYmxlZCgpKVxuICAgICAgICAgICAgICAgICYmIHRoaXMuaXNMaXN0ZW5pbmcoKSAmJiB0aGlzLmlzVmlzaWJsZSgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogc2hvdyBub2RlXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuTm9kZX1cbiAgICAgICAgICovXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zZXRWaXNpYmxlKHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBoaWRlIG5vZGUuICBIaWRkZW4gbm9kZXMgYXJlIG5vIGxvbmdlciBkZXRlY3RhYmxlXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuTm9kZX1cbiAgICAgICAgICovXG4gICAgICAgIGhpZGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IHpJbmRleCByZWxhdGl2ZSB0byB0aGUgbm9kZSdzIHNpYmxpbmdzIHdobyBzaGFyZSB0aGUgc2FtZSBwYXJlbnRcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7SW50ZWdlcn1cbiAgICAgICAgICovXG4gICAgICAgIGdldFpJbmRleDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbmRleCB8fCAwO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IGFic29sdXRlIHotaW5kZXggd2hpY2ggdGFrZXMgaW50byBhY2NvdW50IHNpYmxpbmdcbiAgICAgICAgICogIGFuZCBhbmNlc3RvciBpbmRpY2VzXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0ludGVnZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRBYnNvbHV0ZVpJbmRleDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZGVwdGggPSB0aGlzLmdldERlcHRoKCksXG4gICAgICAgICAgICAgICAgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgICAgICAgIG5vZGVzLCBsZW4sIG4sIGNoaWxkO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRDaGlsZHJlbihjaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIG5vZGVzID0gW107XG4gICAgICAgICAgICAgICAgbGVuID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvcihuID0gMDsgbiA8IGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkID0gY2hpbGRyZW5bbl07XG4gICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoY2hpbGQubm9kZVR5cGUgIT09IFNIQVBFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlcyA9IG5vZGVzLmNvbmNhdChjaGlsZC5nZXRDaGlsZHJlbigpLnRvQXJyYXkoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZihjaGlsZC5faWQgPT09IHRoYXQuX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gbGVuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYobm9kZXMubGVuZ3RoID4gMCAmJiBub2Rlc1swXS5nZXREZXB0aCgpIDw9IGRlcHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZENoaWxkcmVuKG5vZGVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZih0aGF0Lm5vZGVUeXBlICE9PSBVUFBFUl9TVEFHRSkge1xuICAgICAgICAgICAgICAgIGFkZENoaWxkcmVuKHRoYXQuZ2V0U3RhZ2UoKS5nZXRDaGlsZHJlbigpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IG5vZGUgZGVwdGggaW4gbm9kZSB0cmVlLiAgUmV0dXJucyBhbiBpbnRlZ2VyLlxuICAgICAgICAgKiAgZS5nLiBTdGFnZSBkZXB0aCB3aWxsIGFsd2F5cyBiZSAwLiAgTGF5ZXJzIHdpbGwgYWx3YXlzIGJlIDEuICBHcm91cHMgYW5kIFNoYXBlcyB3aWxsIGFsd2F5c1xuICAgICAgICAgKiAgYmUgPj0gMlxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtJbnRlZ2VyfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RGVwdGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGRlcHRoID0gMCxcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuICAgICAgICAgICAgd2hpbGUocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgZGVwdGgrKztcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlcHRoO1xuICAgICAgICB9LFxuICAgICAgICBzZXRQb3NpdGlvbjogZnVuY3Rpb24ocG9zKSB7XG4gICAgICAgICAgICB0aGlzLnNldFgocG9zLngpO1xuICAgICAgICAgICAgdGhpcy5zZXRZKHBvcy55KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBnZXRQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHg6IHRoaXMuZ2V0WCgpLFxuICAgICAgICAgICAgICAgIHk6IHRoaXMuZ2V0WSgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IGFic29sdXRlIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSB0b3AgbGVmdCBjb3JuZXIgb2YgdGhlIHN0YWdlIGNvbnRhaW5lciBkaXZcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0QWJzb2x1dGVQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYWJzb2x1dGVNYXRyaXggPSB0aGlzLmdldEFic29sdXRlVHJhbnNmb3JtKCkuZ2V0TWF0cml4KCksXG4gICAgICAgICAgICAgICAgYWJzb2x1dGVUcmFuc2Zvcm0gPSBuZXcgS2luZXRpYy5UcmFuc2Zvcm0oKSxcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG4gICAgICAgICAgICAvLyBjbG9uZSB0aGUgbWF0cml4IGFycmF5XG4gICAgICAgICAgICBhYnNvbHV0ZVRyYW5zZm9ybS5tID0gYWJzb2x1dGVNYXRyaXguc2xpY2UoKTtcbiAgICAgICAgICAgIGFic29sdXRlVHJhbnNmb3JtLnRyYW5zbGF0ZShvZmZzZXQueCwgb2Zmc2V0LnkpO1xuXG4gICAgICAgICAgICByZXR1cm4gYWJzb2x1dGVUcmFuc2Zvcm0uZ2V0VHJhbnNsYXRpb24oKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNldCBhYnNvbHV0ZSBwb3NpdGlvblxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb3NcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvcy54XG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3MueVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5Ob2RlfVxuICAgICAgICAgKi9cbiAgICAgICAgc2V0QWJzb2x1dGVQb3NpdGlvbjogZnVuY3Rpb24ocG9zKSB7XG4gICAgICAgICAgICB2YXIgb3JpZ1RyYW5zID0gdGhpcy5fY2xlYXJUcmFuc2Zvcm0oKSxcbiAgICAgICAgICAgICAgICBpdDtcblxuICAgICAgICAgICAgLy8gZG9uJ3QgY2xlYXIgdHJhbnNsYXRpb25cbiAgICAgICAgICAgIHRoaXMuYXR0cnMueCA9IG9yaWdUcmFucy54O1xuICAgICAgICAgICAgdGhpcy5hdHRycy55ID0gb3JpZ1RyYW5zLnk7XG4gICAgICAgICAgICBkZWxldGUgb3JpZ1RyYW5zLng7XG4gICAgICAgICAgICBkZWxldGUgb3JpZ1RyYW5zLnk7XG5cbiAgICAgICAgICAgIC8vIHVucmF2ZWwgdHJhbnNmb3JtXG4gICAgICAgICAgICBpdCA9IHRoaXMuZ2V0QWJzb2x1dGVUcmFuc2Zvcm0oKTtcblxuICAgICAgICAgICAgaXQuaW52ZXJ0KCk7XG4gICAgICAgICAgICBpdC50cmFuc2xhdGUocG9zLngsIHBvcy55KTtcbiAgICAgICAgICAgIHBvcyA9IHtcbiAgICAgICAgICAgICAgICB4OiB0aGlzLmF0dHJzLnggKyBpdC5nZXRUcmFuc2xhdGlvbigpLngsXG4gICAgICAgICAgICAgICAgeTogdGhpcy5hdHRycy55ICsgaXQuZ2V0VHJhbnNsYXRpb24oKS55XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uKHt4OnBvcy54LCB5OnBvcy55fSk7XG4gICAgICAgICAgICB0aGlzLl9zZXRUcmFuc2Zvcm0ob3JpZ1RyYW5zKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIF9zZXRUcmFuc2Zvcm06IGZ1bmN0aW9uKHRyYW5zKSB7XG4gICAgICAgICAgICB2YXIga2V5O1xuXG4gICAgICAgICAgICBmb3Ioa2V5IGluIHRyYW5zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdHRyc1trZXldID0gdHJhbnNba2V5XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fY2xlYXJDYWNoZShUUkFOU0ZPUk0pO1xuICAgICAgICAgICAgdGhpcy5fY2xlYXJTZWxmQW5kRGVzY2VuZGFudENhY2hlKEFCU09MVVRFX1RSQU5TRk9STSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9jbGVhclRyYW5zZm9ybTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdHJhbnMgPSB7XG4gICAgICAgICAgICAgICAgeDogdGhpcy5nZXRYKCksXG4gICAgICAgICAgICAgICAgeTogdGhpcy5nZXRZKCksXG4gICAgICAgICAgICAgICAgcm90YXRpb246IHRoaXMuZ2V0Um90YXRpb24oKSxcbiAgICAgICAgICAgICAgICBzY2FsZVg6IHRoaXMuZ2V0U2NhbGVYKCksXG4gICAgICAgICAgICAgICAgc2NhbGVZOiB0aGlzLmdldFNjYWxlWSgpLFxuICAgICAgICAgICAgICAgIG9mZnNldFg6IHRoaXMuZ2V0T2Zmc2V0WCgpLFxuICAgICAgICAgICAgICAgIG9mZnNldFk6IHRoaXMuZ2V0T2Zmc2V0WSgpLFxuICAgICAgICAgICAgICAgIHNrZXdYOiB0aGlzLmdldFNrZXdYKCksXG4gICAgICAgICAgICAgICAgc2tld1k6IHRoaXMuZ2V0U2tld1koKVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5hdHRycy54ID0gMDtcbiAgICAgICAgICAgIHRoaXMuYXR0cnMueSA9IDA7XG4gICAgICAgICAgICB0aGlzLmF0dHJzLnJvdGF0aW9uID0gMDtcbiAgICAgICAgICAgIHRoaXMuYXR0cnMuc2NhbGVYID0gMTtcbiAgICAgICAgICAgIHRoaXMuYXR0cnMuc2NhbGVZID0gMTtcbiAgICAgICAgICAgIHRoaXMuYXR0cnMub2Zmc2V0WCA9IDA7XG4gICAgICAgICAgICB0aGlzLmF0dHJzLm9mZnNldFkgPSAwO1xuICAgICAgICAgICAgdGhpcy5hdHRycy5za2V3WCA9IDA7XG4gICAgICAgICAgICB0aGlzLmF0dHJzLnNrZXdZID0gMDtcblxuICAgICAgICAgICAgdGhpcy5fY2xlYXJDYWNoZShUUkFOU0ZPUk0pO1xuICAgICAgICAgICAgdGhpcy5fY2xlYXJTZWxmQW5kRGVzY2VuZGFudENhY2hlKEFCU09MVVRFX1RSQU5TRk9STSk7XG5cbiAgICAgICAgICAgIC8vIHJldHVybiBvcmlnaW5hbCB0cmFuc2Zvcm1cbiAgICAgICAgICAgIHJldHVybiB0cmFucztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIG1vdmUgbm9kZSBieSBhbiBhbW91bnQgcmVsYXRpdmUgdG8gaXRzIGN1cnJlbnQgcG9zaXRpb25cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2hhbmdlXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFuZ2UueFxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlLnlcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuTm9kZX1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogLy8gbW92ZSBub2RlIGluIHggZGlyZWN0aW9uIGJ5IDFweCBhbmQgeSBkaXJlY3Rpb24gYnkgMnB4XG4gICAgICAgICAqIG5vZGUubW92ZSh7XG4gICAgICAgICAqICAgeDogMSxcbiAgICAgICAgICogICB5OiAyKVxuICAgICAgICAgKiB9KTtcbiAgICAgICAgICovXG4gICAgICAgIG1vdmU6IGZ1bmN0aW9uKGNoYW5nZSkge1xuICAgICAgICAgICAgdmFyIGNoYW5nZVggPSBjaGFuZ2UueCxcbiAgICAgICAgICAgICAgICBjaGFuZ2VZID0gY2hhbmdlLnksXG4gICAgICAgICAgICAgICAgeCA9IHRoaXMuZ2V0WCgpLFxuICAgICAgICAgICAgICAgIHkgPSB0aGlzLmdldFkoKTtcblxuICAgICAgICAgICAgaWYoY2hhbmdlWCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgeCArPSBjaGFuZ2VYO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihjaGFuZ2VZICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB5ICs9IGNoYW5nZVk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb24oe3g6eCwgeTp5fSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgX2VhY2hBbmNlc3RvclJldmVyc2U6IGZ1bmN0aW9uKGZ1bmMsIHRvcCkge1xuICAgICAgICAgICAgdmFyIGZhbWlseSA9IFtdLFxuICAgICAgICAgICAgICAgIHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KCksXG4gICAgICAgICAgICAgICAgbGVuLCBuO1xuXG4gICAgICAgICAgICAvLyBpZiB0b3Agbm9kZSBpcyBkZWZpbmVkLCBhbmQgdGhpcyBub2RlIGlzIHRvcCBub2RlLFxuICAgICAgICAgICAgLy8gdGhlcmUncyBubyBuZWVkIHRvIGJ1aWxkIGEgZmFtaWx5IHRyZWUuICBqdXN0IGV4ZWN1dGVcbiAgICAgICAgICAgIC8vIGZ1bmMgd2l0aCB0aGlzIGJlY2F1c2UgaXQgd2lsbCBiZSB0aGUgb25seSBub2RlXG4gICAgICAgICAgICBpZiAodG9wICYmIHRvcC5faWQgPT09IHRoaXMuX2lkKSB7XG4gICAgICAgICAgICAgICAgZnVuYyh0aGlzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmFtaWx5LnVuc2hpZnQodGhpcyk7XG5cbiAgICAgICAgICAgIHdoaWxlKHBhcmVudCAmJiAoIXRvcCB8fCBwYXJlbnQuX2lkICE9PSB0b3AuX2lkKSkge1xuICAgICAgICAgICAgICAgIGZhbWlseS51bnNoaWZ0KHBhcmVudCk7XG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGVuID0gZmFtaWx5Lmxlbmd0aDtcbiAgICAgICAgICAgIGZvcihuID0gMDsgbiA8IGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgZnVuYyhmYW1pbHlbbl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogcm90YXRlIG5vZGUgYnkgYW4gYW1vdW50IGluIGRlZ3JlZXMgcmVsYXRpdmUgdG8gaXRzIGN1cnJlbnQgcm90YXRpb25cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gdGhldGFcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuTm9kZX1cbiAgICAgICAgICovXG4gICAgICAgIHJvdGF0ZTogZnVuY3Rpb24odGhldGEpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Um90YXRpb24odGhpcy5nZXRSb3RhdGlvbigpICsgdGhldGEpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtb3ZlIG5vZGUgdG8gdGhlIHRvcCBvZiBpdHMgc2libGluZ3NcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIG1vdmVUb1RvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgS2luZXRpYy5VdGlsLndhcm4oJ05vZGUgaGFzIG5vIHBhcmVudC4gbW92ZVRvVG9wIGZ1bmN0aW9uIGlzIGlnbm9yZWQuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5jaGlsZHJlbi5wdXNoKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuX3NldENoaWxkcmVuSW5kaWNlcygpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtb3ZlIG5vZGUgdXBcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIG1vdmVVcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgS2luZXRpYy5VdGlsLndhcm4oJ05vZGUgaGFzIG5vIHBhcmVudC4gbW92ZVVwIGZ1bmN0aW9uIGlzIGlnbm9yZWQuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCxcbiAgICAgICAgICAgICAgICBsZW4gPSB0aGlzLnBhcmVudC5nZXRDaGlsZHJlbigpLmxlbmd0aDtcbiAgICAgICAgICAgIGlmKGluZGV4IDwgbGVuIC0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4ICsgMSwgMCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuX3NldENoaWxkcmVuSW5kaWNlcygpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogbW92ZSBub2RlIGRvd25cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIG1vdmVEb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBLaW5ldGljLlV0aWwud2FybignTm9kZSBoYXMgbm8gcGFyZW50LiBtb3ZlRG93biBmdW5jdGlvbiBpcyBpZ25vcmVkLicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICBpZihpbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCAtIDEsIDAsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Ll9zZXRDaGlsZHJlbkluZGljZXMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIG1vdmUgbm9kZSB0byB0aGUgYm90dG9tIG9mIGl0cyBzaWJsaW5nc1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgbW92ZVRvQm90dG9tOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBLaW5ldGljLlV0aWwud2FybignTm9kZSBoYXMgbm8gcGFyZW50LiBtb3ZlVG9Cb3R0b20gZnVuY3Rpb24gaXMgaWdub3JlZC4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgaWYoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5jaGlsZHJlbi51bnNoaWZ0KHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Ll9zZXRDaGlsZHJlbkluZGljZXMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNldCB6SW5kZXggcmVsYXRpdmUgdG8gc2libGluZ3NcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IHpJbmRleFxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5Ob2RlfVxuICAgICAgICAgKi9cbiAgICAgICAgc2V0WkluZGV4OiBmdW5jdGlvbih6SW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBLaW5ldGljLlV0aWwud2FybignTm9kZSBoYXMgbm8gcGFyZW50LiB6SW5kZXggcGFyYW1ldGVyIGlzIGlnbm9yZWQuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UoekluZGV4LCAwLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50Ll9zZXRDaGlsZHJlbkluZGljZXMoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IGFic29sdXRlIG9wYWNpdHlcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0QWJzb2x1dGVPcGFjaXR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRDYWNoZShBQlNPTFVURV9PUEFDSVRZLCB0aGlzLl9nZXRBYnNvbHV0ZU9wYWNpdHkpO1xuICAgICAgICB9LFxuICAgICAgICBfZ2V0QWJzb2x1dGVPcGFjaXR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhYnNPcGFjaXR5ID0gdGhpcy5nZXRPcGFjaXR5KCk7XG4gICAgICAgICAgICBpZih0aGlzLmdldFBhcmVudCgpKSB7XG4gICAgICAgICAgICAgICAgYWJzT3BhY2l0eSAqPSB0aGlzLmdldFBhcmVudCgpLmdldEFic29sdXRlT3BhY2l0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFic09wYWNpdHk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtb3ZlIG5vZGUgdG8gYW5vdGhlciBjb250YWluZXJcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge0NvbnRhaW5lcn0gbmV3Q29udGFpbmVyXG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLk5vZGV9XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIC8vIG1vdmUgbm9kZSBmcm9tIGN1cnJlbnQgbGF5ZXIgaW50byBsYXllcjJcbiAgICAgICAgICogbm9kZS5tb3ZlVG8obGF5ZXIyKTtcbiAgICAgICAgICovXG4gICAgICAgIG1vdmVUbzogZnVuY3Rpb24obmV3Q29udGFpbmVyKSB7XG4gICAgICAgICAgICAvLyBkbyBub3RoaW5nIGlmIG5ldyBjb250YWluZXIgaXMgYWxyZWFkeSBwYXJlbnRcbiAgICAgICAgICAgIGlmICh0aGlzLmdldFBhcmVudCgpICE9PSBuZXdDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIG5ld0NvbnRhaW5lci5hZGQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbnZlcnQgTm9kZSBpbnRvIGFuIG9iamVjdCBmb3Igc2VyaWFsaXphdGlvbi4gIFJldHVybnMgYW4gb2JqZWN0LlxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0b09iamVjdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IEtpbmV0aWMuVXRpbCxcbiAgICAgICAgICAgICAgICBvYmogPSB7fSxcbiAgICAgICAgICAgICAgICBhdHRycyA9IHRoaXMuZ2V0QXR0cnMoKSxcbiAgICAgICAgICAgICAgICBrZXksIHZhbCwgZ2V0dGVyLCBkZWZhdWx0VmFsdWU7XG5cbiAgICAgICAgICAgIG9iai5hdHRycyA9IHt9O1xuXG4gICAgICAgICAgICAvLyBzZXJpYWxpemUgb25seSBhdHRyaWJ1dGVzIHRoYXQgYXJlIG5vdCBmdW5jdGlvbiwgaW1hZ2UsIERPTSwgb3Igb2JqZWN0cyB3aXRoIG1ldGhvZHNcbiAgICAgICAgICAgIGZvcihrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSBhdHRyc1trZXldO1xuICAgICAgICAgICAgICAgIGlmICghdHlwZS5faXNGdW5jdGlvbih2YWwpICYmICF0eXBlLl9pc0VsZW1lbnQodmFsKSAmJiAhKHR5cGUuX2lzT2JqZWN0KHZhbCkgJiYgdHlwZS5faGFzTWV0aG9kcyh2YWwpKSkge1xuICAgICAgICAgICAgICAgICAgICBnZXR0ZXIgPSB0aGlzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBhdHRyIHZhbHVlIHNvIHRoYXQgd2UgY2FuIGV4dHJhY3QgdGhlIGRlZmF1bHQgdmFsdWUgZnJvbSB0aGUgZ2V0dGVyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBhdHRyc1trZXldO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbCh0aGlzKSA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc3RvcmUgYXR0ciB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdFZhbHVlICE9PSB2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5hdHRyc1trZXldID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvYmouY2xhc3NOYW1lID0gdGhpcy5nZXRDbGFzc05hbWUoKTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb252ZXJ0IE5vZGUgaW50byBhIEpTT04gc3RyaW5nLiAgUmV0dXJucyBhIEpTT04gc3RyaW5nLlxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9fVxuICAgICAgICAgKi9cbiAgICAgICAgdG9KU09OOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvT2JqZWN0KCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IHBhcmVudCBjb250YWluZXJcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5Ob2RlfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0UGFyZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCBsYXllciBhbmNlc3RvclxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLkxheWVyfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TGF5ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KCk7XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50ID8gcGFyZW50LmdldExheWVyKCkgOiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IHN0YWdlIGFuY2VzdG9yXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuU3RhZ2V9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRTdGFnZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q2FjaGUoU1RBR0UsIHRoaXMuX2dldFN0YWdlKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldFN0YWdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLmdldFBhcmVudCgpO1xuICAgICAgICAgICAgaWYocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5nZXRTdGFnZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGZpcmUgZXZlbnRcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRUeXBlIGV2ZW50IHR5cGUuICBjYW4gYmUgYSByZWd1bGFyIGV2ZW50LCBsaWtlIGNsaWNrLCBtb3VzZW92ZXIsIG9yIG1vdXNlb3V0LCBvciBpdCBjYW4gYmUgYSBjdXN0b20gZXZlbnQsIGxpa2UgbXlDdXN0b21FdmVudFxuICAgICAgICAgKiBAcGFyYW0ge0V2ZW50fSBbZXZ0XSBldmVudCBvYmplY3RcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBbYnViYmxlXSBzZXR0aW5nIHRoZSB2YWx1ZSB0byBmYWxzZSwgb3IgbGVhdmluZyBpdCB1bmRlZmluZWQsIHdpbGwgcmVzdWx0IGluIHRoZSBldmVudFxuICAgICAgICAgKiAgbm90IGJ1YmJsaW5nLiAgU2V0dGluZyB0aGUgdmFsdWUgdG8gdHJ1ZSB3aWxsIHJlc3VsdCBpbiB0aGUgZXZlbnQgYnViYmxpbmcuXG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLk5vZGV9XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIC8vIG1hbnVhbGx5IGZpcmUgY2xpY2sgZXZlbnRcbiAgICAgICAgICogbm9kZS5maXJlKCdjbGljaycpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBmaXJlIGN1c3RvbSBldmVudFxuICAgICAgICAgKiBub2RlLmZpcmUoJ2ZvbycpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBmaXJlIGN1c3RvbSBldmVudCB3aXRoIGN1c3RvbSBldmVudCBvYmplY3RcbiAgICAgICAgICogbm9kZS5maXJlKCdmb28nLCB7XG4gICAgICAgICAqICAgYmFyOiAxMFxuICAgICAgICAgKiB9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gZmlyZSBjbGljayBldmVudCB0aGF0IGJ1YmJsZXNcbiAgICAgICAgICogbm9kZS5maXJlKCdjbGljaycsIG51bGwsIHRydWUpO1xuICAgICAgICAgKi9cbiAgICAgICAgZmlyZTogZnVuY3Rpb24oZXZlbnRUeXBlLCBldnQsIGJ1YmJsZSkge1xuICAgICAgICAgICAgLy8gYnViYmxlXG4gICAgICAgICAgICBpZiAoYnViYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZUFuZEJ1YmJsZShldmVudFR5cGUsIGV2dCB8fCB7fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBubyBidWJibGVcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmUoZXZlbnRUeXBlLCBldnQgfHwge30pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgYWJzb2x1dGUgdHJhbnNmb3JtIG9mIHRoZSBub2RlIHdoaWNoIHRha2VzIGludG9cbiAgICAgICAgICogIGFjY291bnQgaXRzIGFuY2VzdG9yIHRyYW5zZm9ybXNcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5UcmFuc2Zvcm19XG4gICAgICAgICAqL1xuICAgICAgICBnZXRBYnNvbHV0ZVRyYW5zZm9ybTogZnVuY3Rpb24odG9wKSB7XG4gICAgICAgICAgICAvLyBpZiB1c2luZyBhbiBhcmd1bWVudCwgd2UgY2FuJ3QgY2FjaGUgdGhlIHJlc3VsdC5cbiAgICAgICAgICAgIGlmICh0b3ApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QWJzb2x1dGVUcmFuc2Zvcm0odG9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIG5vIGFyZ3VtZW50LCB3ZSBjYW4gY2FjaGUgdGhlIHJlc3VsdFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldENhY2hlKEFCU09MVVRFX1RSQU5TRk9STSwgdGhpcy5fZ2V0QWJzb2x1dGVUcmFuc2Zvcm0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZ2V0QWJzb2x1dGVUcmFuc2Zvcm06IGZ1bmN0aW9uKHRvcCkge1xuICAgICAgICAgICAgdmFyIGF0ID0gbmV3IEtpbmV0aWMuVHJhbnNmb3JtKCksXG4gICAgICAgICAgICAgICAgdHJhbnNmb3Jtc0VuYWJsZWQsIHRyYW5zO1xuXG4gICAgICAgICAgICAvLyBzdGFydCB3aXRoIHN0YWdlIGFuZCB0cmF2ZXJzZSBkb3dud2FyZHMgdG8gc2VsZlxuICAgICAgICAgICAgdGhpcy5fZWFjaEFuY2VzdG9yUmV2ZXJzZShmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3Jtc0VuYWJsZWQgPSBub2RlLnRyYW5zZm9ybXNFbmFibGVkKCk7XG4gICAgICAgICAgICAgICAgdHJhbnMgPSBub2RlLmdldFRyYW5zZm9ybSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zZm9ybXNFbmFibGVkID09PSAnYWxsJykge1xuICAgICAgICAgICAgICAgICAgICBhdC5tdWx0aXBseSh0cmFucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRyYW5zZm9ybXNFbmFibGVkID09PSAncG9zaXRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0LnRyYW5zbGF0ZShub2RlLngoKSwgbm9kZS55KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRvcCk7XG4gICAgICAgICAgICByZXR1cm4gYXQ7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgdHJhbnNmb3JtIG9mIHRoZSBub2RlXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuVHJhbnNmb3JtfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0VHJhbnNmb3JtOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRDYWNoZShUUkFOU0ZPUk0sIHRoaXMuX2dldFRyYW5zZm9ybSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRUcmFuc2Zvcm06IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgS2luZXRpYy5UcmFuc2Zvcm0oKSxcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5nZXRYKCksXG4gICAgICAgICAgICAgICAgeSA9IHRoaXMuZ2V0WSgpLFxuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gS2luZXRpYy5nZXRBbmdsZSh0aGlzLmdldFJvdGF0aW9uKCkpLFxuICAgICAgICAgICAgICAgIHNjYWxlWCA9IHRoaXMuZ2V0U2NhbGVYKCksXG4gICAgICAgICAgICAgICAgc2NhbGVZID0gdGhpcy5nZXRTY2FsZVkoKSxcbiAgICAgICAgICAgICAgICBza2V3WCA9IHRoaXMuZ2V0U2tld1goKSxcbiAgICAgICAgICAgICAgICBza2V3WSA9IHRoaXMuZ2V0U2tld1koKSxcbiAgICAgICAgICAgICAgICBvZmZzZXRYID0gdGhpcy5nZXRPZmZzZXRYKCksXG4gICAgICAgICAgICAgICAgb2Zmc2V0WSA9IHRoaXMuZ2V0T2Zmc2V0WSgpO1xuXG4gICAgICAgICAgICBpZih4ICE9PSAwIHx8IHkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBtLnRyYW5zbGF0ZSh4LCB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHJvdGF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgbS5yb3RhdGUocm90YXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoc2tld1ggIT09IDAgfHwgc2tld1kgIT09IDApIHtcbiAgICAgICAgICAgICAgICBtLnNrZXcoc2tld1gsIHNrZXdZKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHNjYWxlWCAhPT0gMSB8fCBzY2FsZVkgIT09IDEpIHtcbiAgICAgICAgICAgICAgICBtLnNjYWxlKHNjYWxlWCwgc2NhbGVZKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG9mZnNldFggIT09IDAgfHwgb2Zmc2V0WSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIG0udHJhbnNsYXRlKC0xICogb2Zmc2V0WCwgLTEgKiBvZmZzZXRZKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjbG9uZSBub2RlLiAgUmV0dXJucyBhIG5ldyBOb2RlIGluc3RhbmNlIHdpdGggaWRlbnRpY2FsIGF0dHJpYnV0ZXMuICBZb3UgY2FuIGFsc28gb3ZlcnJpZGVcbiAgICAgICAgICogIHRoZSBub2RlIHByb3BlcnRpZXMgd2l0aCBhbiBvYmplY3QgbGl0ZXJhbCwgZW5hYmxpbmcgeW91IHRvIHVzZSBhbiBleGlzdGluZyBub2RlIGFzIGEgdGVtcGxhdGVcbiAgICAgICAgICogIGZvciBhbm90aGVyIG5vZGVcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIG92ZXJyaWRlIGF0dHJzXG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLk5vZGV9XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIC8vIHNpbXBsZSBjbG9uZVxuICAgICAgICAgKiB2YXIgY2xvbmUgPSBub2RlLmNsb25lKCk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIGNsb25lIGEgbm9kZSBhbmQgb3ZlcnJpZGUgdGhlIHggcG9zaXRpb25cbiAgICAgICAgICogdmFyIGNsb25lID0gcmVjdC5jbG9uZSh7XG4gICAgICAgICAqICAgeDogNVxuICAgICAgICAgKiB9KTtcbiAgICAgICAgICovXG4gICAgICAgIGNsb25lOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIC8vIGluc3RhbnRpYXRlIG5ldyBub2RlXG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gdGhpcy5nZXRDbGFzc05hbWUoKSxcbiAgICAgICAgICAgICAgICBhdHRycyA9IEtpbmV0aWMuVXRpbC5jbG9uZU9iamVjdCh0aGlzLmF0dHJzKSxcbiAgICAgICAgICAgICAgICBrZXksIGFsbExpc3RlbmVycywgbGVuLCBuLCBsaXN0ZW5lcjtcbiAgICAgICAgICAgIC8vIGZpbHRlciBibGFjayBhdHRyc1xuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBDTE9ORV9CTEFDS19MSVNUKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJsb2NrQXR0ciA9IENMT05FX0JMQUNLX0xJU1RbaV07XG4gICAgICAgICAgICAgICAgZGVsZXRlIGF0dHJzW2Jsb2NrQXR0cl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhcHBseSBhdHRyIG92ZXJyaWRlc1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgYXR0cnNba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbm9kZSA9IG5ldyBLaW5ldGljW2NsYXNzTmFtZV0oYXR0cnMpO1xuICAgICAgICAgICAgLy8gY29weSBvdmVyIGxpc3RlbmVyc1xuICAgICAgICAgICAgZm9yKGtleSBpbiB0aGlzLmV2ZW50TGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgYWxsTGlzdGVuZXJzID0gdGhpcy5ldmVudExpc3RlbmVyc1trZXldO1xuICAgICAgICAgICAgICAgIGxlbiA9IGFsbExpc3RlbmVycy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZm9yKG4gPSAwOyBuIDwgbGVuOyBuKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIgPSBhbGxMaXN0ZW5lcnNbbl07XG4gICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAqIGRvbid0IGluY2x1ZGUga2luZXRpYyBuYW1lc3BhY2VkIGxpc3RlbmVycyBiZWNhdXNlXG4gICAgICAgICAgICAgICAgICAgICAqICB0aGVzZSBhcmUgZ2VuZXJhdGVkIGJ5IHRoZSBjb25zdHJ1Y3RvcnNcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGlmKGxpc3RlbmVyLm5hbWUuaW5kZXhPZihLSU5FVElDKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGxpc3RlbmVycyBhcnJheSBkb2Vzbid0IGV4aXN0LCB0aGVuIGNyZWF0ZSBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIW5vZGUuZXZlbnRMaXN0ZW5lcnNba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZXZlbnRMaXN0ZW5lcnNba2V5XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5ldmVudExpc3RlbmVyc1trZXldLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgY29tcG9zaXRlIGRhdGEgVVJMLiBJZiBNSU1FIHR5cGUgaXMgbm90XG4gICAgICAgICAqIHNwZWNpZmllZCwgdGhlbiBcImltYWdlL3BuZ1wiIHdpbGwgcmVzdWx0LiBGb3IgXCJpbWFnZS9qcGVnXCIsIHNwZWNpZnkgYSBxdWFsaXR5XG4gICAgICAgICAqIGxldmVsIGFzIHF1YWxpdHkgKHJhbmdlIDAuMCAtIDEuMClcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm1pbWVUeXBlXSBjYW4gYmUgXCJpbWFnZS9wbmdcIiBvciBcImltYWdlL2pwZWdcIi5cbiAgICAgICAgICogIFwiaW1hZ2UvcG5nXCIgaXMgdGhlIGRlZmF1bHRcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF0geCBwb3NpdGlvbiBvZiBjYW52YXMgc2VjdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XSB5IHBvc2l0aW9uIG9mIGNhbnZhcyBzZWN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXSB3aWR0aCBvZiBjYW52YXMgc2VjdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdIGhlaWdodCBvZiBjYW52YXMgc2VjdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5xdWFsaXR5XSBqcGVnIHF1YWxpdHkuICBJZiB1c2luZyBhbiBcImltYWdlL2pwZWdcIiBtaW1lVHlwZSxcbiAgICAgICAgICogIHlvdSBjYW4gc3BlY2lmeSB0aGUgcXVhbGl0eSBmcm9tIDAgdG8gMSwgd2hlcmUgMCBpcyB2ZXJ5IHBvb3IgcXVhbGl0eSBhbmQgMVxuICAgICAgICAgKiAgaXMgdmVyeSBoaWdoIHF1YWxpdHlcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRvRGF0YVVSTDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcgPSBjb25maWcgfHwge307XG5cbiAgICAgICAgICAgIHZhciBtaW1lVHlwZSA9IGNvbmZpZy5taW1lVHlwZSB8fCBudWxsLFxuICAgICAgICAgICAgICAgIHF1YWxpdHkgPSBjb25maWcucXVhbGl0eSB8fCBudWxsLFxuICAgICAgICAgICAgICAgIHN0YWdlID0gdGhpcy5nZXRTdGFnZSgpLFxuICAgICAgICAgICAgICAgIHggPSBjb25maWcueCB8fCAwLFxuICAgICAgICAgICAgICAgIHkgPSBjb25maWcueSB8fCAwLFxuICAgICAgICAgICAgICAgIGNhbnZhcyA9IG5ldyBLaW5ldGljLlNjZW5lQ2FudmFzKHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGNvbmZpZy53aWR0aCB8fCB0aGlzLmdldFdpZHRoKCkgfHwgKHN0YWdlID8gc3RhZ2UuZ2V0V2lkdGgoKSA6IDApLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGNvbmZpZy5oZWlnaHQgfHwgdGhpcy5nZXRIZWlnaHQoKSB8fCAoc3RhZ2UgPyBzdGFnZS5nZXRIZWlnaHQoKSA6IDApLFxuICAgICAgICAgICAgICAgICAgICBwaXhlbFJhdGlvOiAxXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCk7XG5cbiAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xuXG4gICAgICAgICAgICBpZih4IHx8IHkpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZSgtMSAqIHgsIC0xICogeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZHJhd1NjZW5lKGNhbnZhcyk7XG4gICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcblxuICAgICAgICAgICAgcmV0dXJuIGNhbnZhcy50b0RhdGFVUkwobWltZVR5cGUsIHF1YWxpdHkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogY29udmVydHMgbm9kZSBpbnRvIGFuIGltYWdlLiAgU2luY2UgdGhlIHRvSW1hZ2VcbiAgICAgICAgICogIG1ldGhvZCBpcyBhc3luY2hyb25vdXMsIGEgY2FsbGJhY2sgaXMgcmVxdWlyZWQuICB0b0ltYWdlIGlzIG1vc3QgY29tbW9ubHkgdXNlZFxuICAgICAgICAgKiAgdG8gY2FjaGUgY29tcGxleCBkcmF3aW5ncyBhcyBhbiBpbWFnZSBzbyB0aGF0IHRoZXkgZG9uJ3QgaGF2ZSB0byBjb25zdGFudGx5IGJlIHJlZHJhd25cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbmZpZy5jYWxsYmFjayBmdW5jdGlvbiBleGVjdXRlZCB3aGVuIHRoZSBjb21wb3NpdGUgaGFzIGNvbXBsZXRlZFxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5taW1lVHlwZV0gY2FuIGJlIFwiaW1hZ2UvcG5nXCIgb3IgXCJpbWFnZS9qcGVnXCIuXG4gICAgICAgICAqICBcImltYWdlL3BuZ1wiIGlzIHRoZSBkZWZhdWx0XG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdIHggcG9zaXRpb24gb2YgY2FudmFzIHNlY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV0geSBwb3NpdGlvbiBvZiBjYW52YXMgc2VjdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF0gd2lkdGggb2YgY2FudmFzIHNlY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XSBoZWlnaHQgb2YgY2FudmFzIHNlY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucXVhbGl0eV0ganBlZyBxdWFsaXR5LiAgSWYgdXNpbmcgYW4gXCJpbWFnZS9qcGVnXCIgbWltZVR5cGUsXG4gICAgICAgICAqICB5b3UgY2FuIHNwZWNpZnkgdGhlIHF1YWxpdHkgZnJvbSAwIHRvIDEsIHdoZXJlIDAgaXMgdmVyeSBwb29yIHF1YWxpdHkgYW5kIDFcbiAgICAgICAgICogIGlzIHZlcnkgaGlnaCBxdWFsaXR5XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIHZhciBpbWFnZSA9IG5vZGUudG9JbWFnZSh7XG4gICAgICAgICAqICAgY2FsbGJhY2s6IGZ1bmN0aW9uKGltZykge1xuICAgICAgICAgKiAgICAgLy8gZG8gc3R1ZmYgd2l0aCBpbWdcbiAgICAgICAgICogICB9XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKi9cbiAgICAgICAgdG9JbWFnZTogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICBLaW5ldGljLlV0aWwuX2dldEltYWdlKHRoaXMudG9EYXRhVVJMKGNvbmZpZyksIGZ1bmN0aW9uKGltZykge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5jYWxsYmFjayhpbWcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFNpemU6IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0V2lkdGgoc2l6ZS53aWR0aCk7XG4gICAgICAgICAgICB0aGlzLnNldEhlaWdodChzaXplLmhlaWdodCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0U2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmdldFdpZHRoKCksXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmdldEhlaWdodCgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBnZXRXaWR0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRycy53aWR0aCB8fCAwO1xuICAgICAgICB9LFxuICAgICAgICBnZXRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cnMuaGVpZ2h0IHx8IDA7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgY2xhc3MgbmFtZSwgd2hpY2ggbWF5IHJldHVybiBTdGFnZSwgTGF5ZXIsIEdyb3VwLCBvciBzaGFwZSBjbGFzcyBuYW1lcyBsaWtlIFJlY3QsIENpcmNsZSwgVGV4dCwgZXRjLlxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRDbGFzc05hbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xhc3NOYW1lIHx8IHRoaXMubm9kZVR5cGU7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgdGhlIG5vZGUgdHlwZSwgd2hpY2ggbWF5IHJldHVybiBTdGFnZSwgTGF5ZXIsIEdyb3VwLCBvciBOb2RlXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZVR5cGU7XG4gICAgICAgIH0sXG4gICAgICAgIGdldERyYWdEaXN0YW5jZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBjb21wYXJlIHdpdGggdW5kZWZpbmVkIGJlY2F1c2Ugd2UgbmVlZCB0byB0cmFjayAwIHZhbHVlXG4gICAgICAgICAgICBpZiAodGhpcy5hdHRycy5kcmFnRGlzdGFuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmF0dHJzLmRyYWdEaXN0YW5jZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0RHJhZ0Rpc3RhbmNlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBLaW5ldGljLmRyYWdEaXN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2dldDogZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsYXNzTmFtZSA9PT0gc2VsZWN0b3IgfHwgdGhpcy5ub2RlVHlwZSA9PT0gc2VsZWN0b3IgPyBbdGhpc10gOiBbXTtcbiAgICAgICAgfSxcbiAgICAgICAgX29mZjogZnVuY3Rpb24odHlwZSwgbmFtZSkge1xuICAgICAgICAgICAgdmFyIGV2dExpc3RlbmVycyA9IHRoaXMuZXZlbnRMaXN0ZW5lcnNbdHlwZV0sXG4gICAgICAgICAgICAgICAgaSwgZXZ0TmFtZTtcblxuICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgZXZ0TGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZXZ0TmFtZSA9IGV2dExpc3RlbmVyc1tpXS5uYW1lO1xuICAgICAgICAgICAgICAgIC8vIHRoZSBmb2xsb3dpbmcgdHdvIGNvbmRpdGlvbnMgbXVzdCBiZSB0cnVlIGluIG9yZGVyIHRvIHJlbW92ZSBhIGhhbmRsZXI6XG4gICAgICAgICAgICAgICAgLy8gMSkgdGhlIGN1cnJlbnQgZXZlbnQgbmFtZSBjYW5ub3QgYmUga2luZXRpYyB1bmxlc3MgdGhlIGV2ZW50IG5hbWUgaXMga2luZXRpY1xuICAgICAgICAgICAgICAgIC8vICAgIHRoaXMgZW5hYmxlcyBkZXZlbG9wZXJzIHRvIGZvcmNlIHJlbW92ZSBhIGtpbmV0aWMgc3BlY2lmaWMgbGlzdGVuZXIgZm9yIHdoYXRldmVyIHJlYXNvblxuICAgICAgICAgICAgICAgIC8vIDIpIGFuIGV2ZW50IG5hbWUgaXMgbm90IHNwZWNpZmllZCwgb3IgaWYgb25lIGlzIHNwZWNpZmllZCwgaXQgbWF0Y2hlcyB0aGUgY3VycmVudCBldmVudCBuYW1lXG4gICAgICAgICAgICAgICAgaWYoKGV2dE5hbWUgIT09ICdraW5ldGljJyB8fCBuYW1lID09PSAna2luZXRpYycpICYmICghbmFtZSB8fCBldnROYW1lID09PSBuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBldnRMaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBpZihldnRMaXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5ldmVudExpc3RlbmVyc1t0eXBlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9maXJlQ2hhbmdlRXZlbnQ6IGZ1bmN0aW9uKGF0dHIsIG9sZFZhbCwgbmV3VmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9maXJlKGF0dHIgKyBDSEFOR0UsIHtcbiAgICAgICAgICAgICAgICBvbGRWYWw6IG9sZFZhbCxcbiAgICAgICAgICAgICAgICBuZXdWYWw6IG5ld1ZhbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldElkOiBmdW5jdGlvbihpZCkge1xuICAgICAgICAgICAgdmFyIG9sZElkID0gdGhpcy5nZXRJZCgpO1xuXG4gICAgICAgICAgICBLaW5ldGljLl9yZW1vdmVJZChvbGRJZCk7XG4gICAgICAgICAgICBLaW5ldGljLl9hZGRJZCh0aGlzLCBpZCk7XG4gICAgICAgICAgICB0aGlzLl9zZXRBdHRyKElELCBpZCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0TmFtZTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgdmFyIG9sZE5hbWUgPSB0aGlzLmdldE5hbWUoKTtcblxuICAgICAgICAgICAgS2luZXRpYy5fcmVtb3ZlTmFtZShvbGROYW1lLCB0aGlzLl9pZCk7XG4gICAgICAgICAgICBLaW5ldGljLl9hZGROYW1lKHRoaXMsIG5hbWUpO1xuICAgICAgICAgICAgdGhpcy5fc2V0QXR0cihOQU1FLCBuYW1lKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogc2V0IGF0dHJcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0clxuICAgICAgICAgKiBAcGFyYW0geyp9IHZhbFxuICAgICAgICAgKiBAcmV0dXJucyB7S2luZXRpYy5Ob2RlfVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBub2RlLnNldEF0dHIoJ3gnLCA1KTtcbiAgICAgICAgICovXG4gICAgICAgIHNldEF0dHI6IGZ1bmN0aW9uKGF0dHIsIHZhbCkge1xuICAgICAgICAgICAgdmFyIG1ldGhvZCA9IFNFVCArIEtpbmV0aWMuVXRpbC5fY2FwaXRhbGl6ZShhdHRyKSxcbiAgICAgICAgICAgICAgICBmdW5jID0gdGhpc1ttZXRob2RdO1xuXG4gICAgICAgICAgICBpZihLaW5ldGljLlV0aWwuX2lzRnVuY3Rpb24oZnVuYykpIHtcbiAgICAgICAgICAgICAgICBmdW5jLmNhbGwodGhpcywgdmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSBzZXQgZGlyZWN0bHlcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldEF0dHIoYXR0ciwgdmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBfc2V0QXR0cjogZnVuY3Rpb24oa2V5LCB2YWwpIHtcbiAgICAgICAgICAgIHZhciBvbGRWYWw7XG4gICAgICAgICAgICBpZih2YWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG9sZFZhbCA9IHRoaXMuYXR0cnNba2V5XTtcbiAgICAgICAgICAgICAgICB0aGlzLmF0dHJzW2tleV0gPSB2YWw7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZUNoYW5nZUV2ZW50KGtleSwgb2xkVmFsLCB2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfc2V0Q29tcG9uZW50QXR0cjogZnVuY3Rpb24oa2V5LCBjb21wb25lbnQsIHZhbCkge1xuICAgICAgICAgICAgdmFyIG9sZFZhbDtcbiAgICAgICAgICAgIGlmKHZhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgb2xkVmFsID0gdGhpcy5hdHRyc1trZXldO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFvbGRWYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHZhbHVlIHRvIGRlZmF1bHQgdmFsdWUgdXNpbmcgZ2V0QXR0clxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJzW2tleV0gPSB0aGlzLmdldEF0dHIoa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5hdHRyc1trZXldW2NvbXBvbmVudF0gPSB2YWw7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZUNoYW5nZUV2ZW50KGtleSwgb2xkVmFsLCB2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZmlyZUFuZEJ1YmJsZTogZnVuY3Rpb24oZXZlbnRUeXBlLCBldnQsIGNvbXBhcmVTaGFwZSkge1xuICAgICAgICAgICAgdmFyIG9rYXlUb1J1biA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmKGV2dCAmJiB0aGlzLm5vZGVUeXBlID09PSBTSEFQRSkge1xuICAgICAgICAgICAgICAgIGV2dC50YXJnZXQgPSB0aGlzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihldmVudFR5cGUgPT09IE1PVVNFRU5URVIgJiYgY29tcGFyZVNoYXBlICYmICh0aGlzLl9pZCA9PT0gY29tcGFyZVNoYXBlLl9pZCB8fCAodGhpcy5pc0FuY2VzdG9yT2YgJiYgdGhpcy5pc0FuY2VzdG9yT2YoY29tcGFyZVNoYXBlKSkpKSB7XG4gICAgICAgICAgICAgICAgb2theVRvUnVuID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGV2ZW50VHlwZSA9PT0gTU9VU0VMRUFWRSAmJiBjb21wYXJlU2hhcGUgJiYgKHRoaXMuX2lkID09PSBjb21wYXJlU2hhcGUuX2lkIHx8ICh0aGlzLmlzQW5jZXN0b3JPZiAmJiB0aGlzLmlzQW5jZXN0b3JPZihjb21wYXJlU2hhcGUpKSkpIHtcbiAgICAgICAgICAgICAgICBva2F5VG9SdW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG9rYXlUb1J1bikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmUoZXZlbnRUeXBlLCBldnQpO1xuXG4gICAgICAgICAgICAgICAgLy8gc2ltdWxhdGUgZXZlbnQgYnViYmxpbmdcbiAgICAgICAgICAgICAgICB2YXIgc3RvcEJ1YmJsZSA9IChldmVudFR5cGUgPT09IE1PVVNFRU5URVIgfHwgZXZlbnRUeXBlID09PSBNT1VTRUxFQVZFKSAmJiAoKGNvbXBhcmVTaGFwZSAmJiBjb21wYXJlU2hhcGUuaXNBbmNlc3Rvck9mICYmIGNvbXBhcmVTaGFwZS5pc0FuY2VzdG9yT2YodGhpcykpIHx8ICEhKGNvbXBhcmVTaGFwZSAmJiBjb21wYXJlU2hhcGUuaXNBbmNlc3Rvck9mKSk7XG4gICAgICAgICAgICAgICAgaWYoZXZ0ICYmICFldnQuY2FuY2VsQnViYmxlICYmIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LmlzTGlzdGVuaW5nKCkgJiYgKCFzdG9wQnViYmxlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZihjb21wYXJlU2hhcGUgJiYgY29tcGFyZVNoYXBlLnBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlyZUFuZEJ1YmJsZS5jYWxsKHRoaXMucGFyZW50LCBldmVudFR5cGUsIGV2dCwgY29tcGFyZVNoYXBlLnBhcmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maXJlQW5kQnViYmxlLmNhbGwodGhpcy5wYXJlbnQsIGV2ZW50VHlwZSwgZXZ0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2ZpcmU6IGZ1bmN0aW9uKGV2ZW50VHlwZSwgZXZ0KSB7XG4gICAgICAgICAgICB2YXIgZXZlbnRzID0gdGhpcy5ldmVudExpc3RlbmVyc1tldmVudFR5cGVdLFxuICAgICAgICAgICAgICAgIGk7XG5cbiAgICAgICAgICAgIGV2dC50eXBlID0gZXZlbnRUeXBlO1xuXG4gICAgICAgICAgICBpZiAoZXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50c1tpXS5oYW5kbGVyLmNhbGwodGhpcywgZXZ0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkcmF3IGJvdGggc2NlbmUgYW5kIGhpdCBncmFwaHMuICBJZiB0aGUgbm9kZSBiZWluZyBkcmF3biBpcyB0aGUgc3RhZ2UsIGFsbCBvZiB0aGUgbGF5ZXJzIHdpbGwgYmUgY2xlYXJlZCBhbmQgcmVkcmF3blxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLk5vZGV9XG4gICAgICAgICAqL1xuICAgICAgICBkcmF3OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd1NjZW5lKCk7XG4gICAgICAgICAgICB0aGlzLmRyYXdIaXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGUgbm9kZSB3aXRoIEpTT04gc3RyaW5nLiAgRGUtc2VyaWFsaXp0aW9uIGRvZXMgbm90IGdlbmVyYXRlIGN1c3RvbVxuICAgICAqICBzaGFwZSBkcmF3aW5nIGZ1bmN0aW9ucywgaW1hZ2VzLCBvciBldmVudCBoYW5kbGVycyAodGhpcyB3b3VsZCBtYWtlIHRoZVxuICAgICAqICBzZXJpYWxpemVkIG9iamVjdCBodWdlKS4gIElmIHlvdXIgYXBwIHVzZXMgY3VzdG9tIHNoYXBlcywgaW1hZ2VzLCBhbmRcbiAgICAgKiAgZXZlbnQgaGFuZGxlcnMgKGl0IHByb2JhYmx5IGRvZXMpLCB0aGVuIHlvdSBuZWVkIHRvIHNlbGVjdCB0aGUgYXBwcm9wcmlhdGVcbiAgICAgKiAgc2hhcGVzIGFmdGVyIGxvYWRpbmcgdGhlIHN0YWdlIGFuZCBzZXQgdGhlc2UgcHJvcGVydGllcyB2aWEgb24oKSwgc2V0RHJhd0Z1bmMoKSxcbiAgICAgKiAgYW5kIHNldEltYWdlKCkgbWV0aG9kc1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGpzb25cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IFtjb250YWluZXJdIG9wdGlvbmFsIGNvbnRhaW5lciBkb20gZWxlbWVudCB1c2VkIG9ubHkgaWYgeW91J3JlXG4gICAgICogIGNyZWF0aW5nIGEgc3RhZ2Ugbm9kZVxuICAgICAqL1xuICAgIEtpbmV0aWMuTm9kZS5jcmVhdGUgPSBmdW5jdGlvbihqc29uLCBjb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZU5vZGUoSlNPTi5wYXJzZShqc29uKSwgY29udGFpbmVyKTtcbiAgICB9O1xuICAgIEtpbmV0aWMuTm9kZS5fY3JlYXRlTm9kZSA9IGZ1bmN0aW9uKG9iaiwgY29udGFpbmVyKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBLaW5ldGljLk5vZGUucHJvdG90eXBlLmdldENsYXNzTmFtZS5jYWxsKG9iaiksXG4gICAgICAgICAgICBjaGlsZHJlbiA9IG9iai5jaGlsZHJlbixcbiAgICAgICAgICAgIG5vLCBsZW4sIG47XG5cbiAgICAgICAgLy8gaWYgY29udGFpbmVyIHdhcyBwYXNzZWQgaW4sIGFkZCBpdCB0byBhdHRyc1xuICAgICAgICBpZihjb250YWluZXIpIHtcbiAgICAgICAgICAgIG9iai5hdHRycy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIH1cblxuICAgICAgICBubyA9IG5ldyBLaW5ldGljW2NsYXNzTmFtZV0ob2JqLmF0dHJzKTtcbiAgICAgICAgaWYoY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGxlbiA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgIGZvcihuID0gMDsgbiA8IGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgbm8uYWRkKHRoaXMuX2NyZWF0ZU5vZGUoY2hpbGRyZW5bbl0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBubztcbiAgICB9O1xuXG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gYWRkIGdldHRlcnMgc2V0dGVycyA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRPdmVybG9hZGVkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3Bvc2l0aW9uJyk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBub2RlIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHBhcmVudFxuICAgICAqIEBuYW1lIHBvc2l0aW9uXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBvc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3MueFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3MueVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgcG9zaXRpb25cbiAgICAgKiB2YXIgcG9zaXRpb24gPSBub2RlLnBvc2l0aW9uKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgcG9zaXRpb25cbiAgICAgKiBub2RlLnBvc2l0aW9uKHtcbiAgICAgKiAgIHg6IDVcbiAgICAgKiAgIHk6IDEwXG4gICAgICogfSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3gnLCAwKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgeCBwb3NpdGlvblxuICAgICAqIEBuYW1lIHhcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgeFxuICAgICAqIHZhciB4ID0gbm9kZS54KCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgeFxuICAgICAqIG5vZGUueCg1KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAneScsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCB5IHBvc2l0aW9uXG4gICAgICogQG5hbWUgeVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQHJldHVybnMge0ludGVnZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgeVxuICAgICAqIHZhciB5ID0gbm9kZS55KCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgeVxuICAgICAqIG5vZGUueSg1KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnb3BhY2l0eScsIDEpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBvcGFjaXR5LiAgT3BhY2l0eSB2YWx1ZXMgcmFuZ2UgZnJvbSAwIHRvIDEuXG4gICAgICogIEEgbm9kZSB3aXRoIGFuIG9wYWNpdHkgb2YgMCBpcyBmdWxseSB0cmFuc3BhcmVudCwgYW5kIGEgbm9kZVxuICAgICAqICB3aXRoIGFuIG9wYWNpdHkgb2YgMSBpcyBmdWxseSBvcGFxdWVcbiAgICAgKiBAbmFtZSBvcGFjaXR5XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wYWNpdHlcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IG9wYWNpdHlcbiAgICAgKiB2YXIgb3BhY2l0eSA9IG5vZGUub3BhY2l0eSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IG9wYWNpdHlcbiAgICAgKiBub2RlLm9wYWNpdHkoMC41KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXIoS2luZXRpYy5Ob2RlLCAnbmFtZScpO1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRPdmVybG9hZGVkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ25hbWUnKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgbmFtZVxuICAgICAqIEBuYW1lIG5hbWVcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgbmFtZVxuICAgICAqIHZhciBuYW1lID0gbm9kZS5uYW1lKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgbmFtZVxuICAgICAqIG5vZGUubmFtZSgnZm9vJyk7XG4gICAgICpcbiAgICAgKiAvLyBhbHNvIG5vZGUgbWF5IGhhdmUgbXVsdGlwbGUgbmFtZXMgKGFzIGNzcyBjbGFzc2VzKVxuICAgICAqIG5vZGUubmFtZSgnZm9vIGJhcicpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlcihLaW5ldGljLk5vZGUsICdpZCcpO1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRPdmVybG9hZGVkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2lkJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGlkXG4gICAgICogQG5hbWUgaWRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGlkXG4gICAgICogdmFyIG5hbWUgPSBub2RlLmlkKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgaWRcbiAgICAgKiBub2RlLmlkKCdmb28nKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAncm90YXRpb24nLCAwKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgcm90YXRpb24gaW4gZGVncmVlc1xuICAgICAqIEBuYW1lIHJvdGF0aW9uXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJvdGF0aW9uXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCByb3RhdGlvbiBpbiBkZWdyZWVzXG4gICAgICogdmFyIHJvdGF0aW9uID0gbm9kZS5yb3RhdGlvbigpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHJvdGF0aW9uIGluIGRlZ3JlZXNcbiAgICAgKiBub2RlLnJvdGF0aW9uKDQ1KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRDb21wb25lbnRzR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3NjYWxlJywgWyd4JywgJ3knXSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHNjYWxlXG4gICAgICogQG5hbWUgc2NhbGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc2NhbGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUueFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZS55XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBzY2FsZVxuICAgICAqIHZhciBzY2FsZSA9IG5vZGUuc2NhbGUoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzY2FsZSBcbiAgICAgKiBzaGFwZS5zY2FsZSh7XG4gICAgICogICB4OiAyXG4gICAgICogICB5OiAzXG4gICAgICogfSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3NjYWxlWCcsIDEpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBzY2FsZSB4XG4gICAgICogQG5hbWUgc2NhbGVYXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHNjYWxlIHhcbiAgICAgKiB2YXIgc2NhbGVYID0gbm9kZS5zY2FsZVgoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzY2FsZSB4XG4gICAgICogbm9kZS5zY2FsZVgoMik7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3NjYWxlWScsIDEpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBzY2FsZSB5XG4gICAgICogQG5hbWUgc2NhbGVZXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHNjYWxlIHlcbiAgICAgKiB2YXIgc2NhbGVZID0gbm9kZS5zY2FsZVkoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzY2FsZSB5XG4gICAgICogbm9kZS5zY2FsZVkoMik7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkQ29tcG9uZW50c0dldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdza2V3JywgWyd4JywgJ3knXSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHNrZXdcbiAgICAgKiBAbmFtZSBza2V3XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNrZXdcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2tldy54XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNrZXcueVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc2tld1xuICAgICAqIHZhciBza2V3ID0gbm9kZS5za2V3KCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc2tldyBcbiAgICAgKiBub2RlLnNrZXcoe1xuICAgICAqICAgeDogMjBcbiAgICAgKiAgIHk6IDEwXG4gICAgICogfSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3NrZXdYJywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHNrZXcgeFxuICAgICAqIEBuYW1lIHNrZXdYXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHNrZXcgeFxuICAgICAqIHZhciBza2V3WCA9IG5vZGUuc2tld1goKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBza2V3IHhcbiAgICAgKiBub2RlLnNrZXdYKDMpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdza2V3WScsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBza2V3IHlcbiAgICAgKiBAbmFtZSBza2V3WVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBza2V3IHlcbiAgICAgKiB2YXIgc2tld1kgPSBub2RlLnNrZXdZKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc2tldyB5XG4gICAgICogbm9kZS5za2V3WSgzKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRDb21wb25lbnRzR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ29mZnNldCcsIFsneCcsICd5J10pO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBvZmZzZXQuICBPZmZzZXRzIHRoZSBkZWZhdWx0IHBvc2l0aW9uIGFuZCByb3RhdGlvbiBwb2ludFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvZmZzZXRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0LnhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0LnlcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IG9mZnNldFxuICAgICAqIHZhciBvZmZzZXQgPSBub2RlLm9mZnNldCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IG9mZnNldFxuICAgICAqIG5vZGUub2Zmc2V0KHtcbiAgICAgKiAgIHg6IDIwXG4gICAgICogICB5OiAxMFxuICAgICAqIH0pO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdvZmZzZXRYJywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IG9mZnNldCB4XG4gICAgICogQG5hbWUgb2Zmc2V0WFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBvZmZzZXQgeFxuICAgICAqIHZhciBvZmZzZXRYID0gbm9kZS5vZmZzZXRYKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgb2Zmc2V0IHhcbiAgICAgKiBub2RlLm9mZnNldFgoMyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ29mZnNldFknLCAwKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgb2Zmc2V0IHlcbiAgICAgKiBAbmFtZSBvZmZzZXRZXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IG9mZnNldCB5XG4gICAgICogdmFyIG9mZnNldFkgPSBub2RlLm9mZnNldFkoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBvZmZzZXQgeVxuICAgICAqIG5vZGUub2Zmc2V0WSgzKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnZHJhZ0Rpc3RhbmNlJyk7XG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZE92ZXJsb2FkZWRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnZHJhZ0Rpc3RhbmNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGRyYWcgZGlzdGFuY2VcbiAgICAgKiBAbmFtZSBkcmFnRGlzdGFuY2VcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZGlzdGFuY2VcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGRyYWcgZGlzdGFuY2VcbiAgICAgKiB2YXIgZHJhZ0Rpc3RhbmNlID0gbm9kZS5kcmFnRGlzdGFuY2UoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBkaXN0YW5jZVxuICAgICAqIC8vIG5vZGUgc3RhcnRzIGRyYWdnaW5nIG9ubHkgaWYgcG9pbnRlciBtb3ZlZCBtb3JlIHRoZW4gMyBwaXhlbHNcbiAgICAgKiBub2RlLmRyYWdEaXN0YW5jZSgzKTtcbiAgICAgKiAvLyBvciBzZXQgZ2xvYmFsbHlcbiAgICAgKiBLaW5ldGljLmRyYWdEaXN0YW5jZSA9IDM7XG4gICAgICovXG5cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnd2lkdGgnLCAwKTtcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkT3ZlcmxvYWRlZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICd3aWR0aCcpO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgd2lkdGhcbiAgICAgKiBAbmFtZSB3aWR0aFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgd2lkdGhcbiAgICAgKiB2YXIgd2lkdGggPSBub2RlLndpZHRoKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgd2lkdGhcbiAgICAgKiBub2RlLndpZHRoKDEwMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2hlaWdodCcsIDApO1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRPdmVybG9hZGVkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2hlaWdodCcpO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgaGVpZ2h0XG4gICAgICogQG5hbWUgaGVpZ2h0XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgaGVpZ2h0XG4gICAgICogdmFyIGhlaWdodCA9IG5vZGUuaGVpZ2h0KCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgaGVpZ2h0XG4gICAgICogbm9kZS5oZWlnaHQoMTAwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnbGlzdGVuaW5nJywgJ2luaGVyaXQnKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGxpc3RlbmlnIGF0dHIuICBJZiB5b3UgbmVlZCB0byBkZXRlcm1pbmUgaWYgYSBub2RlIGlzIGxpc3RlbmluZyBvciBub3RcbiAgICAgKiAgIGJ5IHRha2luZyBpbnRvIGFjY291bnQgaXRzIHBhcmVudHMsIHVzZSB0aGUgaXNMaXN0ZW5pbmcoKSBtZXRob2QgIFxuICAgICAqIEBuYW1lIGxpc3RlbmluZ1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbnxTdHJpbmd9IGxpc3RlbmluZyBDYW4gYmUgXCJpbmhlcml0XCIsIHRydWUsIG9yIGZhbHNlLiAgVGhlIGRlZmF1bHQgaXMgXCJpbmhlcml0XCIuXG4gICAgICogQHJldHVybnMge0Jvb2xlYW58U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGxpc3RlbmluZyBhdHRyXG4gICAgICogdmFyIGxpc3RlbmluZyA9IG5vZGUubGlzdGVuaW5nKCk7XG4gICAgICpcbiAgICAgKiAvLyBzdG9wIGxpc3RlbmluZyBmb3IgZXZlbnRzXG4gICAgICogbm9kZS5saXN0ZW5pbmcoZmFsc2UpO1xuICAgICAqXG4gICAgICogLy8gbGlzdGVuIGZvciBldmVudHNcbiAgICAgKiBub2RlLmxpc3RlbmluZyh0cnVlKTtcbiAgICAgKlxuICAgICAqIC8vIGxpc3RlbiB0byBldmVudHMgYWNjb3JkaW5nIHRvIHRoZSBwYXJlbnRcbiAgICAgKiBub2RlLmxpc3RlbmluZygnaW5oZXJpdCcpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdmaWx0ZXJzJywgdW5kZWZpbmVkLCBmdW5jdGlvbih2YWwpIHt0aGlzLl9maWx0ZXJVcFRvRGF0ZSA9IGZhbHNlO3JldHVybiB2YWw7fSk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWx0ZXJzLiAgRmlsdGVycyBhcmUgYXBwbGllZCB0byBjYWNoZWQgY2FudmFzZXNcbiAgICAgKiBAbmFtZSBmaWx0ZXJzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtBcnJheX0gZmlsdGVycyBhcnJheSBvZiBmaWx0ZXJzXG4gICAgICogQHJldHVybnMge0FycmF5fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbHRlcnNcbiAgICAgKiB2YXIgZmlsdGVycyA9IG5vZGUuZmlsdGVycygpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGEgc2luZ2xlIGZpbHRlclxuICAgICAqIG5vZGUuY2FjaGUoKTtcbiAgICAgKiBub2RlLmZpbHRlcnMoW0tpbmV0aWMuRmlsdGVycy5CbHVyXSk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgbXVsdGlwbGUgZmlsdGVyc1xuICAgICAqIG5vZGUuY2FjaGUoKTtcbiAgICAgKiBub2RlLmZpbHRlcnMoW1xuICAgICAqICAgS2luZXRpYy5GaWx0ZXJzLkJsdXIsXG4gICAgICogICBLaW5ldGljLkZpbHRlcnMuU2VwaWEsXG4gICAgICogICBLaW5ldGljLkZpbHRlcnMuSW52ZXJ0XG4gICAgICogXSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3Zpc2libGUnLCAnaW5oZXJpdCcpO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgdmlzaWJsZSBhdHRyLiAgQ2FuIGJlIFwiaW5oZXJpdFwiLCB0cnVlLCBvciBmYWxzZS4gIFRoZSBkZWZhdWx0IGlzIFwiaW5oZXJpdFwiLlxuICAgICAqICAgSWYgeW91IG5lZWQgdG8gZGV0ZXJtaW5lIGlmIGEgbm9kZSBpcyB2aXNpYmxlIG9yIG5vdFxuICAgICAqICAgYnkgdGFraW5nIGludG8gYWNjb3VudCBpdHMgcGFyZW50cywgdXNlIHRoZSBpc1Zpc2libGUoKSBtZXRob2QgIFxuICAgICAqIEBuYW1lIHZpc2libGVcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW58U3RyaW5nfSB2aXNpYmxlXG4gICAgICogQHJldHVybnMge0Jvb2xlYW58U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHZpc2libGUgYXR0clxuICAgICAqIHZhciB2aXNpYmxlID0gbm9kZS52aXNpYmxlKCk7XG4gICAgICpcbiAgICAgKiAvLyBtYWtlIGludmlzaWJsZVxuICAgICAqIG5vZGUudmlzaWJsZShmYWxzZSk7XG4gICAgICpcbiAgICAgKiAvLyBtYWtlIHZpc2libGVcbiAgICAgKiBub2RlLnZpc2libGUodHJ1ZSk7XG4gICAgICpcbiAgICAgKiAvLyBtYWtlIHZpc2libGUgYWNjb3JkaW5nIHRvIHRoZSBwYXJlbnRcbiAgICAgKiBub2RlLnZpc2libGUoJ2luaGVyaXQnKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAndHJhbnNmb3Jtc0VuYWJsZWQnLCAnYWxsJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHRyYW5zZm9ybXMgdGhhdCBhcmUgZW5hYmxlZC4gIENhbiBiZSBcImFsbFwiLCBcIm5vbmVcIiwgb3IgXCJwb3NpdGlvblwiLiAgVGhlIGRlZmF1bHRcbiAgICAgKiAgaXMgXCJhbGxcIlxuICAgICAqIEBuYW1lIHRyYW5zZm9ybXNFbmFibGVkXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGVuYWJsZWRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZW5hYmxlIHBvc2l0aW9uIHRyYW5zZm9ybSBvbmx5IHRvIGltcHJvdmUgZHJhdyBwZXJmb3JtYW5jZVxuICAgICAqIG5vZGUudHJhbnNmb3Jtc0VuYWJsZWQoJ3Bvc2l0aW9uJyk7XG4gICAgICpcbiAgICAgKiAvLyBlbmFibGUgYWxsIHRyYW5zZm9ybXNcbiAgICAgKiBub2RlLnRyYW5zZm9ybXNFbmFibGVkKCdhbGwnKTtcbiAgICAgKi9cblxuXG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IG5vZGUgc2l6ZVxuICAgICAqIEBuYW1lIHNpemVcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc2l6ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzaXplLndpZHRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNpemUuaGVpZ2h0XG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBub2RlIHNpemVcbiAgICAgKiB2YXIgc2l6ZSA9IG5vZGUuc2l6ZSgpO1xuICAgICAqIHZhciB4ID0gc2l6ZS54O1xuICAgICAqIHZhciB5ID0gc2l6ZS55O1xuICAgICAqXG4gICAgICogLy8gc2V0IHNpemVcbiAgICAgKiBub2RlLnNpemUoe1xuICAgICAqICAgd2lkdGg6IDEwMCxcbiAgICAgKiAgIGhlaWdodDogMjAwXG4gICAgICogfSk7XG4gICAgICovXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZE92ZXJsb2FkZWRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnc2l6ZScpO1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmJhY2tDb21wYXQoS2luZXRpYy5Ob2RlLCB7XG4gICAgICAgIHJvdGF0ZURlZzogJ3JvdGF0ZScsXG4gICAgICAgIHNldFJvdGF0aW9uRGVnOiAnc2V0Um90YXRpb24nLFxuICAgICAgICBnZXRSb3RhdGlvbkRlZzogJ2dldFJvdGF0aW9uJ1xuICAgIH0pO1xuXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5Ob2RlKTtcbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xyXG4gICAgLyoqXHJcbiAgICAqIEdyYXlzY2FsZSBGaWx0ZXJcclxuICAgICogQGZ1bmN0aW9uXHJcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcclxuICAgICogQHBhcmFtIHtPYmplY3R9IGltYWdlRGF0YVxyXG4gICAgKiBAZXhhbXBsZVxyXG4gICAgKiBub2RlLmNhY2hlKCk7XHJcbiAgICAqIG5vZGUuZmlsdGVycyhbS2luZXRpYy5GaWx0ZXJzLkdyYXlzY2FsZV0pO1xyXG4gICAgKi9cclxuICAgIEtpbmV0aWMuRmlsdGVycy5HcmF5c2NhbGUgPSBmdW5jdGlvbihpbWFnZURhdGEpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IGltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgICAgICBsZW4gPSBkYXRhLmxlbmd0aCxcclxuICAgICAgICAgICAgaSwgYnJpZ2h0bmVzcztcclxuXHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcclxuICAgICAgICAgICAgYnJpZ2h0bmVzcyA9IDAuMzQgKiBkYXRhW2ldICsgMC41ICogZGF0YVtpICsgMV0gKyAwLjE2ICogZGF0YVtpICsgMl07XHJcbiAgICAgICAgICAgIC8vIHJlZFxyXG4gICAgICAgICAgICBkYXRhW2ldID0gYnJpZ2h0bmVzcztcclxuICAgICAgICAgICAgLy8gZ3JlZW5cclxuICAgICAgICAgICAgZGF0YVtpICsgMV0gPSBicmlnaHRuZXNzO1xyXG4gICAgICAgICAgICAvLyBibHVlXHJcbiAgICAgICAgICAgIGRhdGFbaSArIDJdID0gYnJpZ2h0bmVzcztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KSgpO1xyXG47KGZ1bmN0aW9uKCkge1xuICAgIC8qKlxuICAgICAqIEJyaWdodGVuIEZpbHRlci4gIFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW1hZ2VEYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBub2RlLmNhY2hlKCk7XG4gICAgICogbm9kZS5maWx0ZXJzKFtLaW5ldGljLkZpbHRlcnMuQnJpZ2h0ZW5dKTtcbiAgICAgKiBub2RlLmJyaWdodG5lc3MoMC44KTtcbiAgICAgKi9cbiAgICBLaW5ldGljLkZpbHRlcnMuQnJpZ2h0ZW4gPSBmdW5jdGlvbihpbWFnZURhdGEpIHtcbiAgICAgICAgdmFyIGJyaWdodG5lc3MgPSB0aGlzLmJyaWdodG5lc3MoKSAqIDI1NSxcbiAgICAgICAgICAgIGRhdGEgPSBpbWFnZURhdGEuZGF0YSxcbiAgICAgICAgICAgIGxlbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgaTtcblxuICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgICAgICAgICAgLy8gcmVkXG4gICAgICAgICAgICBkYXRhW2ldICs9IGJyaWdodG5lc3M7XG4gICAgICAgICAgICAvLyBncmVlblxuICAgICAgICAgICAgZGF0YVtpICsgMV0gKz0gYnJpZ2h0bmVzcztcbiAgICAgICAgICAgIC8vIGJsdWVcbiAgICAgICAgICAgIGRhdGFbaSArIDJdICs9IGJyaWdodG5lc3M7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdicmlnaHRuZXNzJywgMCwgbnVsbCwgS2luZXRpYy5GYWN0b3J5LmFmdGVyU2V0RmlsdGVyKTtcbiAgICAvKipcbiAgICAqIGdldC9zZXQgZmlsdGVyIGJyaWdodG5lc3MuICBUaGUgYnJpZ2h0bmVzcyBpcyBhIG51bWJlciBiZXR3ZWVuIC0xIGFuZCAxLiZuYnNwOyBQb3NpdGl2ZSB2YWx1ZXMgXG4gICAgKiAgYnJpZ2h0ZW4gdGhlIHBpeGVscyBhbmQgbmVnYXRpdmUgdmFsdWVzIGRhcmtlbiB0aGVtLiBVc2Ugd2l0aCB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLkJyaWdodGVufSBmaWx0ZXIuXG4gICAgKiBAbmFtZSBicmlnaHRuZXNzXG4gICAgKiBAbWV0aG9kXG4gICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGJyaWdodG5lc3MgdmFsdWUgYmV0d2VlbiAtMSBhbmQgMVxuICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAqL1xuXG59KSgpO1xuOyhmdW5jdGlvbigpIHtcclxuICAgIC8qKlxyXG4gICAgKiBJbnZlcnQgRmlsdGVyXHJcbiAgICAqIEBmdW5jdGlvblxyXG4gICAgKiBAbWVtYmVyb2YgS2luZXRpYy5GaWx0ZXJzXHJcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZURhdGFcclxuICAgICogQGV4YW1wbGVcclxuICAgICogbm9kZS5jYWNoZSgpO1xyXG4gICAgKiBub2RlLmZpbHRlcnMoW0tpbmV0aWMuRmlsdGVycy5JbnZlcnRdKTtcclxuICAgICovXHJcbiAgICBLaW5ldGljLkZpbHRlcnMuSW52ZXJ0ID0gZnVuY3Rpb24oaW1hZ2VEYXRhKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBpbWFnZURhdGEuZGF0YSxcclxuICAgICAgICAgICAgbGVuID0gZGF0YS5sZW5ndGgsXHJcbiAgICAgICAgICAgIGk7XHJcblxyXG4gICAgICAgIGZvcihpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XHJcbiAgICAgICAgICAgIC8vIHJlZFxyXG4gICAgICAgICAgICBkYXRhW2ldID0gMjU1IC0gZGF0YVtpXTtcclxuICAgICAgICAgICAgLy8gZ3JlZW5cclxuICAgICAgICAgICAgZGF0YVtpICsgMV0gPSAyNTUgLSBkYXRhW2kgKyAxXTtcclxuICAgICAgICAgICAgLy8gYmx1ZVxyXG4gICAgICAgICAgICBkYXRhW2kgKyAyXSA9IDI1NSAtIGRhdGFbaSArIDJdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0pKCk7Oy8qXG4gdGhlIEdhdXNzIGZpbHRlclxuIG1hc3RlciByZXBvOiBodHRwczovL2dpdGh1Yi5jb20vcGF2ZWxwb3dlci9raW5ldGljanNHYXVzc0ZpbHRlci9cbiovXG4oZnVuY3Rpb24oKSB7XG4gICAgLypcblxuICAgICBTdGFja0JsdXIgLSBhIGZhc3QgYWxtb3N0IEdhdXNzaWFuIEJsdXIgRm9yIENhbnZhc1xuXG4gICAgIFZlcnNpb246ICAgMC41XG4gICAgIEF1dGhvcjogICAgTWFyaW8gS2xpbmdlbWFublxuICAgICBDb250YWN0OiAgIG1hcmlvQHF1YXNpbW9uZG8uY29tXG4gICAgIFdlYnNpdGU6ICAgaHR0cDovL3d3dy5xdWFzaW1vbmRvLmNvbS9TdGFja0JsdXJGb3JDYW52YXNcbiAgICAgVHdpdHRlcjogICBAcXVhc2ltb25kb1xuXG4gICAgIEluIGNhc2UgeW91IGZpbmQgdGhpcyBjbGFzcyB1c2VmdWwgLSBlc3BlY2lhbGx5IGluIGNvbW1lcmNpYWwgcHJvamVjdHMgLVxuICAgICBJIGFtIG5vdCB0b3RhbGx5IHVuaGFwcHkgZm9yIGEgc21hbGwgZG9uYXRpb24gdG8gbXkgUGF5UGFsIGFjY291bnRcbiAgICAgbWFyaW9AcXVhc2ltb25kby5kZVxuXG4gICAgIE9yIHN1cHBvcnQgbWUgb24gZmxhdHRyOlxuICAgICBodHRwczovL2ZsYXR0ci5jb20vdGhpbmcvNzI3OTEvU3RhY2tCbHVyLWEtZmFzdC1hbG1vc3QtR2F1c3NpYW4tQmx1ci1FZmZlY3QtZm9yLUNhbnZhc0phdmFzY3JpcHRcblxuICAgICBDb3B5cmlnaHQgKGMpIDIwMTAgTWFyaW8gS2xpbmdlbWFublxuXG4gICAgIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gICAgIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uXG4gICAgIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dFxuICAgICByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSxcbiAgICAgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAgICAgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlXG4gICAgIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nXG4gICAgIGNvbmRpdGlvbnM6XG5cbiAgICAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAgICAgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiAgICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAgICAgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTXG4gICAgIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4gICAgIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4gICAgIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLFxuICAgICBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkdcbiAgICAgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUlxuICAgICBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gICAgICovXG5cbiAgICBmdW5jdGlvbiBCbHVyU3RhY2soKSB7XG4gICAgICAgIHRoaXMuciA9IDA7XG4gICAgICAgIHRoaXMuZyA9IDA7XG4gICAgICAgIHRoaXMuYiA9IDA7XG4gICAgICAgIHRoaXMuYSA9IDA7XG4gICAgICAgIHRoaXMubmV4dCA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG11bF90YWJsZSA9IFtcbiAgICAgICAgNTEyLDUxMiw0NTYsNTEyLDMyOCw0NTYsMzM1LDUxMiw0MDUsMzI4LDI3MSw0NTYsMzg4LDMzNSwyOTIsNTEyLFxuICAgICAgICA0NTQsNDA1LDM2NCwzMjgsMjk4LDI3MSw0OTYsNDU2LDQyMCwzODgsMzYwLDMzNSwzMTIsMjkyLDI3Myw1MTIsXG4gICAgICAgIDQ4Miw0NTQsNDI4LDQwNSwzODMsMzY0LDM0NSwzMjgsMzEyLDI5OCwyODQsMjcxLDI1OSw0OTYsNDc1LDQ1NixcbiAgICAgICAgNDM3LDQyMCw0MDQsMzg4LDM3NCwzNjAsMzQ3LDMzNSwzMjMsMzEyLDMwMiwyOTIsMjgyLDI3MywyNjUsNTEyLFxuICAgICAgICA0OTcsNDgyLDQ2OCw0NTQsNDQxLDQyOCw0MTcsNDA1LDM5NCwzODMsMzczLDM2NCwzNTQsMzQ1LDMzNywzMjgsXG4gICAgICAgIDMyMCwzMTIsMzA1LDI5OCwyOTEsMjg0LDI3OCwyNzEsMjY1LDI1OSw1MDcsNDk2LDQ4NSw0NzUsNDY1LDQ1NixcbiAgICAgICAgNDQ2LDQzNyw0MjgsNDIwLDQxMiw0MDQsMzk2LDM4OCwzODEsMzc0LDM2NywzNjAsMzU0LDM0NywzNDEsMzM1LFxuICAgICAgICAzMjksMzIzLDMxOCwzMTIsMzA3LDMwMiwyOTcsMjkyLDI4NywyODIsMjc4LDI3MywyNjksMjY1LDI2MSw1MTIsXG4gICAgICAgIDUwNSw0OTcsNDg5LDQ4Miw0NzUsNDY4LDQ2MSw0NTQsNDQ3LDQ0MSw0MzUsNDI4LDQyMiw0MTcsNDExLDQwNSxcbiAgICAgICAgMzk5LDM5NCwzODksMzgzLDM3OCwzNzMsMzY4LDM2NCwzNTksMzU0LDM1MCwzNDUsMzQxLDMzNywzMzIsMzI4LFxuICAgICAgICAzMjQsMzIwLDMxNiwzMTIsMzA5LDMwNSwzMDEsMjk4LDI5NCwyOTEsMjg3LDI4NCwyODEsMjc4LDI3NCwyNzEsXG4gICAgICAgIDI2OCwyNjUsMjYyLDI1OSwyNTcsNTA3LDUwMSw0OTYsNDkxLDQ4NSw0ODAsNDc1LDQ3MCw0NjUsNDYwLDQ1NixcbiAgICAgICAgNDUxLDQ0Niw0NDIsNDM3LDQzMyw0MjgsNDI0LDQyMCw0MTYsNDEyLDQwOCw0MDQsNDAwLDM5NiwzOTIsMzg4LFxuICAgICAgICAzODUsMzgxLDM3NywzNzQsMzcwLDM2NywzNjMsMzYwLDM1NywzNTQsMzUwLDM0NywzNDQsMzQxLDMzOCwzMzUsXG4gICAgICAgIDMzMiwzMjksMzI2LDMyMywzMjAsMzE4LDMxNSwzMTIsMzEwLDMwNywzMDQsMzAyLDI5OSwyOTcsMjk0LDI5MixcbiAgICAgICAgMjg5LDI4NywyODUsMjgyLDI4MCwyNzgsMjc1LDI3MywyNzEsMjY5LDI2NywyNjUsMjYzLDI2MSwyNTlcbiAgICBdO1xuXG4gICAgdmFyIHNoZ190YWJsZSA9IFtcbiAgICAgICAgOSwgMTEsIDEyLCAxMywgMTMsIDE0LCAxNCwgMTUsIDE1LCAxNSwgMTUsIDE2LCAxNiwgMTYsIDE2LCAxNyxcbiAgICAgICAgMTcsIDE3LCAxNywgMTcsIDE3LCAxNywgMTgsIDE4LCAxOCwgMTgsIDE4LCAxOCwgMTgsIDE4LCAxOCwgMTksXG4gICAgICAgIDE5LCAxOSwgMTksIDE5LCAxOSwgMTksIDE5LCAxOSwgMTksIDE5LCAxOSwgMTksIDE5LCAyMCwgMjAsIDIwLFxuICAgICAgICAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMSxcbiAgICAgICAgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsXG4gICAgICAgIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLFxuICAgICAgICAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMixcbiAgICAgICAgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjMsXG4gICAgICAgIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLFxuICAgICAgICAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMyxcbiAgICAgICAgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsXG4gICAgICAgIDIzLCAyMywgMjMsIDIzLCAyMywgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LFxuICAgICAgICAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCxcbiAgICAgICAgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsXG4gICAgICAgIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LFxuICAgICAgICAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0XG4gICAgXTtcblxuICAgIGZ1bmN0aW9uIGZpbHRlckdhdXNzQmx1clJHQkEoIGltYWdlRGF0YSwgcmFkaXVzKSB7XG5cbiAgICAgICAgdmFyIHBpeGVscyA9IGltYWdlRGF0YS5kYXRhLFxuICAgICAgICAgICAgd2lkdGggPSBpbWFnZURhdGEud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQgPSBpbWFnZURhdGEuaGVpZ2h0O1xuXG4gICAgICAgIHZhciB4LCB5LCBpLCBwLCB5cCwgeWksIHl3LCByX3N1bSwgZ19zdW0sIGJfc3VtLCBhX3N1bSxcbiAgICAgICAgICAgIHJfb3V0X3N1bSwgZ19vdXRfc3VtLCBiX291dF9zdW0sIGFfb3V0X3N1bSxcbiAgICAgICAgICAgIHJfaW5fc3VtLCBnX2luX3N1bSwgYl9pbl9zdW0sIGFfaW5fc3VtLFxuICAgICAgICAgICAgcHIsIHBnLCBwYiwgcGEsIHJicztcblxuICAgICAgICB2YXIgZGl2ID0gcmFkaXVzICsgcmFkaXVzICsgMSxcbiAgICAgICAgICAgIHdpZHRoTWludXMxICA9IHdpZHRoIC0gMSxcbiAgICAgICAgICAgIGhlaWdodE1pbnVzMSA9IGhlaWdodCAtIDEsXG4gICAgICAgICAgICByYWRpdXNQbHVzMSAgPSByYWRpdXMgKyAxLFxuICAgICAgICAgICAgc3VtRmFjdG9yID0gcmFkaXVzUGx1czEgKiAoIHJhZGl1c1BsdXMxICsgMSApIC8gMixcbiAgICAgICAgICAgIHN0YWNrU3RhcnQgPSBuZXcgQmx1clN0YWNrKCksXG4gICAgICAgICAgICBzdGFja0VuZCA9IG51bGwsXG4gICAgICAgICAgICBzdGFjayA9IHN0YWNrU3RhcnQsXG4gICAgICAgICAgICBzdGFja0luID0gbnVsbCxcbiAgICAgICAgICAgIHN0YWNrT3V0ID0gbnVsbCxcbiAgICAgICAgICAgIG11bF9zdW0gPSBtdWxfdGFibGVbcmFkaXVzXSxcbiAgICAgICAgICAgIHNoZ19zdW0gPSBzaGdfdGFibGVbcmFkaXVzXTtcblxuICAgICAgICBmb3IgKCBpID0gMTsgaSA8IGRpdjsgaSsrICkge1xuICAgICAgICAgICAgc3RhY2sgPSBzdGFjay5uZXh0ID0gbmV3IEJsdXJTdGFjaygpO1xuICAgICAgICAgICAgaWYgKCBpID09IHJhZGl1c1BsdXMxICl7XG4gICAgICAgICAgICAgICAgc3RhY2tFbmQgPSBzdGFjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YWNrLm5leHQgPSBzdGFja1N0YXJ0O1xuXG4gICAgICAgIHl3ID0geWkgPSAwO1xuXG4gICAgICAgIGZvciAoIHkgPSAwOyB5IDwgaGVpZ2h0OyB5KysgKVxuICAgICAgICB7XG4gICAgICAgICAgICByX2luX3N1bSA9IGdfaW5fc3VtID0gYl9pbl9zdW0gPSBhX2luX3N1bSA9IHJfc3VtID0gZ19zdW0gPSBiX3N1bSA9IGFfc3VtID0gMDtcblxuICAgICAgICAgICAgcl9vdXRfc3VtID0gcmFkaXVzUGx1czEgKiAoIHByID0gcGl4ZWxzW3lpXSApO1xuICAgICAgICAgICAgZ19vdXRfc3VtID0gcmFkaXVzUGx1czEgKiAoIHBnID0gcGl4ZWxzW3lpKzFdICk7XG4gICAgICAgICAgICBiX291dF9zdW0gPSByYWRpdXNQbHVzMSAqICggcGIgPSBwaXhlbHNbeWkrMl0gKTtcbiAgICAgICAgICAgIGFfb3V0X3N1bSA9IHJhZGl1c1BsdXMxICogKCBwYSA9IHBpeGVsc1t5aSszXSApO1xuXG4gICAgICAgICAgICByX3N1bSArPSBzdW1GYWN0b3IgKiBwcjtcbiAgICAgICAgICAgIGdfc3VtICs9IHN1bUZhY3RvciAqIHBnO1xuICAgICAgICAgICAgYl9zdW0gKz0gc3VtRmFjdG9yICogcGI7XG4gICAgICAgICAgICBhX3N1bSArPSBzdW1GYWN0b3IgKiBwYTtcblxuICAgICAgICAgICAgc3RhY2sgPSBzdGFja1N0YXJ0O1xuXG4gICAgICAgICAgICBmb3IoIGkgPSAwOyBpIDwgcmFkaXVzUGx1czE7IGkrKyApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhY2suciA9IHByO1xuICAgICAgICAgICAgICAgIHN0YWNrLmcgPSBwZztcbiAgICAgICAgICAgICAgICBzdGFjay5iID0gcGI7XG4gICAgICAgICAgICAgICAgc3RhY2suYSA9IHBhO1xuICAgICAgICAgICAgICAgIHN0YWNrID0gc3RhY2submV4dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yKCBpID0gMTsgaSA8IHJhZGl1c1BsdXMxOyBpKysgKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHAgPSB5aSArICgoIHdpZHRoTWludXMxIDwgaSA/IHdpZHRoTWludXMxIDogaSApIDw8IDIgKTtcbiAgICAgICAgICAgICAgICByX3N1bSArPSAoIHN0YWNrLnIgPSAoIHByID0gcGl4ZWxzW3BdKSkgKiAoIHJicyA9IHJhZGl1c1BsdXMxIC0gaSApO1xuICAgICAgICAgICAgICAgIGdfc3VtICs9ICggc3RhY2suZyA9ICggcGcgPSBwaXhlbHNbcCsxXSkpICogcmJzO1xuICAgICAgICAgICAgICAgIGJfc3VtICs9ICggc3RhY2suYiA9ICggcGIgPSBwaXhlbHNbcCsyXSkpICogcmJzO1xuICAgICAgICAgICAgICAgIGFfc3VtICs9ICggc3RhY2suYSA9ICggcGEgPSBwaXhlbHNbcCszXSkpICogcmJzO1xuXG4gICAgICAgICAgICAgICAgcl9pbl9zdW0gKz0gcHI7XG4gICAgICAgICAgICAgICAgZ19pbl9zdW0gKz0gcGc7XG4gICAgICAgICAgICAgICAgYl9pbl9zdW0gKz0gcGI7XG4gICAgICAgICAgICAgICAgYV9pbl9zdW0gKz0gcGE7XG5cbiAgICAgICAgICAgICAgICBzdGFjayA9IHN0YWNrLm5leHQ7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgc3RhY2tJbiA9IHN0YWNrU3RhcnQ7XG4gICAgICAgICAgICBzdGFja091dCA9IHN0YWNrRW5kO1xuICAgICAgICAgICAgZm9yICggeCA9IDA7IHggPCB3aWR0aDsgeCsrIClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwaXhlbHNbeWkrM10gPSBwYSA9IChhX3N1bSAqIG11bF9zdW0pID4+IHNoZ19zdW07XG4gICAgICAgICAgICAgICAgaWYgKCBwYSAhPT0gMCApXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwYSA9IDI1NSAvIHBhO1xuICAgICAgICAgICAgICAgICAgICBwaXhlbHNbeWldICAgPSAoKHJfc3VtICogbXVsX3N1bSkgPj4gc2hnX3N1bSkgKiBwYTtcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxzW3lpKzFdID0gKChnX3N1bSAqIG11bF9zdW0pID4+IHNoZ19zdW0pICogcGE7XG4gICAgICAgICAgICAgICAgICAgIHBpeGVsc1t5aSsyXSA9ICgoYl9zdW0gKiBtdWxfc3VtKSA+PiBzaGdfc3VtKSAqIHBhO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBpeGVsc1t5aV0gPSBwaXhlbHNbeWkrMV0gPSBwaXhlbHNbeWkrMl0gPSAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJfc3VtIC09IHJfb3V0X3N1bTtcbiAgICAgICAgICAgICAgICBnX3N1bSAtPSBnX291dF9zdW07XG4gICAgICAgICAgICAgICAgYl9zdW0gLT0gYl9vdXRfc3VtO1xuICAgICAgICAgICAgICAgIGFfc3VtIC09IGFfb3V0X3N1bTtcblxuICAgICAgICAgICAgICAgIHJfb3V0X3N1bSAtPSBzdGFja0luLnI7XG4gICAgICAgICAgICAgICAgZ19vdXRfc3VtIC09IHN0YWNrSW4uZztcbiAgICAgICAgICAgICAgICBiX291dF9zdW0gLT0gc3RhY2tJbi5iO1xuICAgICAgICAgICAgICAgIGFfb3V0X3N1bSAtPSBzdGFja0luLmE7XG5cbiAgICAgICAgICAgICAgICBwID0gICggeXcgKyAoICggcCA9IHggKyByYWRpdXMgKyAxICkgPCB3aWR0aE1pbnVzMSA/IHAgOiB3aWR0aE1pbnVzMSApICkgPDwgMjtcblxuICAgICAgICAgICAgICAgIHJfaW5fc3VtICs9ICggc3RhY2tJbi5yID0gcGl4ZWxzW3BdKTtcbiAgICAgICAgICAgICAgICBnX2luX3N1bSArPSAoIHN0YWNrSW4uZyA9IHBpeGVsc1twKzFdKTtcbiAgICAgICAgICAgICAgICBiX2luX3N1bSArPSAoIHN0YWNrSW4uYiA9IHBpeGVsc1twKzJdKTtcbiAgICAgICAgICAgICAgICBhX2luX3N1bSArPSAoIHN0YWNrSW4uYSA9IHBpeGVsc1twKzNdKTtcblxuICAgICAgICAgICAgICAgIHJfc3VtICs9IHJfaW5fc3VtO1xuICAgICAgICAgICAgICAgIGdfc3VtICs9IGdfaW5fc3VtO1xuICAgICAgICAgICAgICAgIGJfc3VtICs9IGJfaW5fc3VtO1xuICAgICAgICAgICAgICAgIGFfc3VtICs9IGFfaW5fc3VtO1xuXG4gICAgICAgICAgICAgICAgc3RhY2tJbiA9IHN0YWNrSW4ubmV4dDtcblxuICAgICAgICAgICAgICAgIHJfb3V0X3N1bSArPSAoIHByID0gc3RhY2tPdXQuciApO1xuICAgICAgICAgICAgICAgIGdfb3V0X3N1bSArPSAoIHBnID0gc3RhY2tPdXQuZyApO1xuICAgICAgICAgICAgICAgIGJfb3V0X3N1bSArPSAoIHBiID0gc3RhY2tPdXQuYiApO1xuICAgICAgICAgICAgICAgIGFfb3V0X3N1bSArPSAoIHBhID0gc3RhY2tPdXQuYSApO1xuXG4gICAgICAgICAgICAgICAgcl9pbl9zdW0gLT0gcHI7XG4gICAgICAgICAgICAgICAgZ19pbl9zdW0gLT0gcGc7XG4gICAgICAgICAgICAgICAgYl9pbl9zdW0gLT0gcGI7XG4gICAgICAgICAgICAgICAgYV9pbl9zdW0gLT0gcGE7XG5cbiAgICAgICAgICAgICAgICBzdGFja091dCA9IHN0YWNrT3V0Lm5leHQ7XG5cbiAgICAgICAgICAgICAgICB5aSArPSA0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeXcgKz0gd2lkdGg7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGZvciAoIHggPSAwOyB4IDwgd2lkdGg7IHgrKyApXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdfaW5fc3VtID0gYl9pbl9zdW0gPSBhX2luX3N1bSA9IHJfaW5fc3VtID0gZ19zdW0gPSBiX3N1bSA9IGFfc3VtID0gcl9zdW0gPSAwO1xuXG4gICAgICAgICAgICB5aSA9IHggPDwgMjtcbiAgICAgICAgICAgIHJfb3V0X3N1bSA9IHJhZGl1c1BsdXMxICogKCBwciA9IHBpeGVsc1t5aV0pO1xuICAgICAgICAgICAgZ19vdXRfc3VtID0gcmFkaXVzUGx1czEgKiAoIHBnID0gcGl4ZWxzW3lpKzFdKTtcbiAgICAgICAgICAgIGJfb3V0X3N1bSA9IHJhZGl1c1BsdXMxICogKCBwYiA9IHBpeGVsc1t5aSsyXSk7XG4gICAgICAgICAgICBhX291dF9zdW0gPSByYWRpdXNQbHVzMSAqICggcGEgPSBwaXhlbHNbeWkrM10pO1xuXG4gICAgICAgICAgICByX3N1bSArPSBzdW1GYWN0b3IgKiBwcjtcbiAgICAgICAgICAgIGdfc3VtICs9IHN1bUZhY3RvciAqIHBnO1xuICAgICAgICAgICAgYl9zdW0gKz0gc3VtRmFjdG9yICogcGI7XG4gICAgICAgICAgICBhX3N1bSArPSBzdW1GYWN0b3IgKiBwYTtcblxuICAgICAgICAgICAgc3RhY2sgPSBzdGFja1N0YXJ0O1xuXG4gICAgICAgICAgICBmb3IoIGkgPSAwOyBpIDwgcmFkaXVzUGx1czE7IGkrKyApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhY2suciA9IHByO1xuICAgICAgICAgICAgICAgIHN0YWNrLmcgPSBwZztcbiAgICAgICAgICAgICAgICBzdGFjay5iID0gcGI7XG4gICAgICAgICAgICAgICAgc3RhY2suYSA9IHBhO1xuICAgICAgICAgICAgICAgIHN0YWNrID0gc3RhY2submV4dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgeXAgPSB3aWR0aDtcblxuICAgICAgICAgICAgZm9yKCBpID0gMTsgaSA8PSByYWRpdXM7IGkrKyApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeWkgPSAoIHlwICsgeCApIDw8IDI7XG5cbiAgICAgICAgICAgICAgICByX3N1bSArPSAoIHN0YWNrLnIgPSAoIHByID0gcGl4ZWxzW3lpXSkpICogKCByYnMgPSByYWRpdXNQbHVzMSAtIGkgKTtcbiAgICAgICAgICAgICAgICBnX3N1bSArPSAoIHN0YWNrLmcgPSAoIHBnID0gcGl4ZWxzW3lpKzFdKSkgKiByYnM7XG4gICAgICAgICAgICAgICAgYl9zdW0gKz0gKCBzdGFjay5iID0gKCBwYiA9IHBpeGVsc1t5aSsyXSkpICogcmJzO1xuICAgICAgICAgICAgICAgIGFfc3VtICs9ICggc3RhY2suYSA9ICggcGEgPSBwaXhlbHNbeWkrM10pKSAqIHJicztcblxuICAgICAgICAgICAgICAgIHJfaW5fc3VtICs9IHByO1xuICAgICAgICAgICAgICAgIGdfaW5fc3VtICs9IHBnO1xuICAgICAgICAgICAgICAgIGJfaW5fc3VtICs9IHBiO1xuICAgICAgICAgICAgICAgIGFfaW5fc3VtICs9IHBhO1xuXG4gICAgICAgICAgICAgICAgc3RhY2sgPSBzdGFjay5uZXh0O1xuXG4gICAgICAgICAgICAgICAgaWYoIGkgPCBoZWlnaHRNaW51czEgKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgeXAgKz0gd2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB5aSA9IHg7XG4gICAgICAgICAgICBzdGFja0luID0gc3RhY2tTdGFydDtcbiAgICAgICAgICAgIHN0YWNrT3V0ID0gc3RhY2tFbmQ7XG4gICAgICAgICAgICBmb3IgKCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrIClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwID0geWkgPDwgMjtcbiAgICAgICAgICAgICAgICBwaXhlbHNbcCszXSA9IHBhID0gKGFfc3VtICogbXVsX3N1bSkgPj4gc2hnX3N1bTtcbiAgICAgICAgICAgICAgICBpZiAoIHBhID4gMCApXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwYSA9IDI1NSAvIHBhO1xuICAgICAgICAgICAgICAgICAgICBwaXhlbHNbcF0gICA9ICgocl9zdW0gKiBtdWxfc3VtKSA+PiBzaGdfc3VtICkgKiBwYTtcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxzW3ArMV0gPSAoKGdfc3VtICogbXVsX3N1bSkgPj4gc2hnX3N1bSApICogcGE7XG4gICAgICAgICAgICAgICAgICAgIHBpeGVsc1twKzJdID0gKChiX3N1bSAqIG11bF9zdW0pID4+IHNoZ19zdW0gKSAqIHBhO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBpeGVsc1twXSA9IHBpeGVsc1twKzFdID0gcGl4ZWxzW3ArMl0gPSAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJfc3VtIC09IHJfb3V0X3N1bTtcbiAgICAgICAgICAgICAgICBnX3N1bSAtPSBnX291dF9zdW07XG4gICAgICAgICAgICAgICAgYl9zdW0gLT0gYl9vdXRfc3VtO1xuICAgICAgICAgICAgICAgIGFfc3VtIC09IGFfb3V0X3N1bTtcblxuICAgICAgICAgICAgICAgIHJfb3V0X3N1bSAtPSBzdGFja0luLnI7XG4gICAgICAgICAgICAgICAgZ19vdXRfc3VtIC09IHN0YWNrSW4uZztcbiAgICAgICAgICAgICAgICBiX291dF9zdW0gLT0gc3RhY2tJbi5iO1xuICAgICAgICAgICAgICAgIGFfb3V0X3N1bSAtPSBzdGFja0luLmE7XG5cbiAgICAgICAgICAgICAgICBwID0gKCB4ICsgKCggKCBwID0geSArIHJhZGl1c1BsdXMxKSA8IGhlaWdodE1pbnVzMSA/IHAgOiBoZWlnaHRNaW51czEgKSAqIHdpZHRoICkpIDw8IDI7XG5cbiAgICAgICAgICAgICAgICByX3N1bSArPSAoIHJfaW5fc3VtICs9ICggc3RhY2tJbi5yID0gcGl4ZWxzW3BdKSk7XG4gICAgICAgICAgICAgICAgZ19zdW0gKz0gKCBnX2luX3N1bSArPSAoIHN0YWNrSW4uZyA9IHBpeGVsc1twKzFdKSk7XG4gICAgICAgICAgICAgICAgYl9zdW0gKz0gKCBiX2luX3N1bSArPSAoIHN0YWNrSW4uYiA9IHBpeGVsc1twKzJdKSk7XG4gICAgICAgICAgICAgICAgYV9zdW0gKz0gKCBhX2luX3N1bSArPSAoIHN0YWNrSW4uYSA9IHBpeGVsc1twKzNdKSk7XG5cbiAgICAgICAgICAgICAgICBzdGFja0luID0gc3RhY2tJbi5uZXh0O1xuXG4gICAgICAgICAgICAgICAgcl9vdXRfc3VtICs9ICggcHIgPSBzdGFja091dC5yICk7XG4gICAgICAgICAgICAgICAgZ19vdXRfc3VtICs9ICggcGcgPSBzdGFja091dC5nICk7XG4gICAgICAgICAgICAgICAgYl9vdXRfc3VtICs9ICggcGIgPSBzdGFja091dC5iICk7XG4gICAgICAgICAgICAgICAgYV9vdXRfc3VtICs9ICggcGEgPSBzdGFja091dC5hICk7XG5cbiAgICAgICAgICAgICAgICByX2luX3N1bSAtPSBwcjtcbiAgICAgICAgICAgICAgICBnX2luX3N1bSAtPSBwZztcbiAgICAgICAgICAgICAgICBiX2luX3N1bSAtPSBwYjtcbiAgICAgICAgICAgICAgICBhX2luX3N1bSAtPSBwYTtcblxuICAgICAgICAgICAgICAgIHN0YWNrT3V0ID0gc3RhY2tPdXQubmV4dDtcblxuICAgICAgICAgICAgICAgIHlpICs9IHdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmx1ciBGaWx0ZXJcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAbmFtZSBCbHVyXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRmlsdGVyc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZURhdGFcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG5vZGUuY2FjaGUoKTtcbiAgICAgKiBub2RlLmZpbHRlcnMoW0tpbmV0aWMuRmlsdGVycy5CbHVyXSk7XG4gICAgICogbm9kZS5ibHVyUmFkaXVzKDEwKTtcbiAgICAgKi9cbiAgICBLaW5ldGljLkZpbHRlcnMuQmx1ciA9IGZ1bmN0aW9uIEJsdXIoaW1hZ2VEYXRhKSB7XG4gICAgICAgIHZhciByYWRpdXMgPSBNYXRoLnJvdW5kKHRoaXMuYmx1clJhZGl1cygpKTtcblxuICAgICAgICBpZiAocmFkaXVzID4gMCkge1xuICAgICAgICAgICAgZmlsdGVyR2F1c3NCbHVyUkdCQShpbWFnZURhdGEsIHJhZGl1cyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdibHVyUmFkaXVzJywgMCwgbnVsbCwgS2luZXRpYy5GYWN0b3J5LmFmdGVyU2V0RmlsdGVyKTtcblxuICAgIC8qKlxuICAgICogZ2V0L3NldCBibHVyIHJhZGl1cy4gVXNlIHdpdGgge0BsaW5rIEtpbmV0aWMuRmlsdGVycy5CbHVyfSBmaWx0ZXJcbiAgICAqIEBuYW1lIGJsdXJSYWRpdXNcbiAgICAqIEBtZXRob2RcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgKiBAcGFyYW0ge0ludGVnZXJ9IHJhZGl1c1xuICAgICogQHJldHVybnMge0ludGVnZXJ9XG4gICAgKi9cbn0pKCk7OyhmdW5jdGlvbigpIHtcblxuXHRmdW5jdGlvbiBwaXhlbEF0KGlkYXRhLCB4LCB5KSB7XG5cdFx0dmFyIGlkeCA9ICh5ICogaWRhdGEud2lkdGggKyB4KSAqIDQ7XG5cdFx0dmFyIGQgPSBbXTtcblx0XHRkLnB1c2goaWRhdGEuZGF0YVtpZHgrK10sIGlkYXRhLmRhdGFbaWR4KytdLCBpZGF0YS5kYXRhW2lkeCsrXSwgaWRhdGEuZGF0YVtpZHgrK10pO1xuXHRcdHJldHVybiBkO1xuXHR9XG5cblx0ZnVuY3Rpb24gcmdiRGlzdGFuY2UocDEsIHAyKSB7XG5cdFx0cmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhwMVswXSAtIHAyWzBdLCAyKSArIE1hdGgucG93KHAxWzFdIC0gcDJbMV0sIDIpICsgTWF0aC5wb3cocDFbMl0gLSBwMlsyXSwgMikpO1xuXHR9XG5cblx0ZnVuY3Rpb24gcmdiTWVhbihwVGFiKSB7XG5cdFx0dmFyIG0gPSBbMCwgMCwgMF07XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHBUYWIubGVuZ3RoOyBpKyspIHtcblx0XHRcdG1bMF0gKz0gcFRhYltpXVswXTtcblx0XHRcdG1bMV0gKz0gcFRhYltpXVsxXTtcblx0XHRcdG1bMl0gKz0gcFRhYltpXVsyXTtcblx0XHR9XG5cblx0XHRtWzBdIC89IHBUYWIubGVuZ3RoO1xuXHRcdG1bMV0gLz0gcFRhYi5sZW5ndGg7XG5cdFx0bVsyXSAvPSBwVGFiLmxlbmd0aDtcblxuXHRcdHJldHVybiBtO1xuXHR9XG5cblx0ZnVuY3Rpb24gYmFja2dyb3VuZE1hc2soaWRhdGEsIHRocmVzaG9sZCkge1xuXHRcdHZhciByZ2J2X25vID0gcGl4ZWxBdChpZGF0YSwgMCwgMCk7XG5cdFx0dmFyIHJnYnZfbmUgPSBwaXhlbEF0KGlkYXRhLCBpZGF0YS53aWR0aCAtIDEsIDApO1xuXHRcdHZhciByZ2J2X3NvID0gcGl4ZWxBdChpZGF0YSwgMCwgaWRhdGEuaGVpZ2h0IC0gMSk7XG5cdFx0dmFyIHJnYnZfc2UgPSBwaXhlbEF0KGlkYXRhLCBpZGF0YS53aWR0aCAtIDEsIGlkYXRhLmhlaWdodCAtIDEpO1xuXG5cblx0XHR2YXIgdGhyZXMgPSB0aHJlc2hvbGQgfHwgMTA7XG5cdFx0aWYgKHJnYkRpc3RhbmNlKHJnYnZfbm8sIHJnYnZfbmUpIDwgdGhyZXMgJiYgcmdiRGlzdGFuY2Uocmdidl9uZSwgcmdidl9zZSkgPCB0aHJlcyAmJiByZ2JEaXN0YW5jZShyZ2J2X3NlLCByZ2J2X3NvKSA8IHRocmVzICYmIHJnYkRpc3RhbmNlKHJnYnZfc28sIHJnYnZfbm8pIDwgdGhyZXMpIHtcblxuXHRcdFx0Ly8gTWVhbiBjb2xvclxuXHRcdFx0dmFyIG1lYW4gPSByZ2JNZWFuKFtyZ2J2X25lLCByZ2J2X25vLCByZ2J2X3NlLCByZ2J2X3NvXSk7XG5cblx0XHRcdC8vIE1hc2sgYmFzZWQgb24gY29sb3IgZGlzdGFuY2Vcblx0XHRcdHZhciBtYXNrID0gW107XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGlkYXRhLndpZHRoICogaWRhdGEuaGVpZ2h0OyBpKyspIHtcblx0XHRcdFx0dmFyIGQgPSByZ2JEaXN0YW5jZShtZWFuLCBbaWRhdGEuZGF0YVtpICogNF0sIGlkYXRhLmRhdGFbaSAqIDQgKyAxXSwgaWRhdGEuZGF0YVtpICogNCArIDJdXSk7XG5cdFx0XHRcdG1hc2tbaV0gPSAoZCA8IHRocmVzKSA/IDAgOiAyNTU7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXNrO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGFwcGx5TWFzayhpZGF0YSwgbWFzaykge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaWRhdGEud2lkdGggKiBpZGF0YS5oZWlnaHQ7IGkrKykge1xuXHRcdFx0aWRhdGEuZGF0YVs0ICogaSArIDNdID0gbWFza1tpXTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBlcm9kZU1hc2sobWFzaywgc3csIHNoKSB7XG5cblx0XHR2YXIgd2VpZ2h0cyA9IFsxLCAxLCAxLCAxLCAwLCAxLCAxLCAxLCAxXTtcblx0XHR2YXIgc2lkZSA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KHdlaWdodHMubGVuZ3RoKSk7XG5cdFx0dmFyIGhhbGZTaWRlID0gTWF0aC5mbG9vcihzaWRlIC8gMik7XG5cblx0XHR2YXIgbWFza1Jlc3VsdCA9IFtdO1xuXHRcdGZvciAodmFyIHkgPSAwOyB5IDwgc2g7IHkrKykge1xuXHRcdFx0Zm9yICh2YXIgeCA9IDA7IHggPCBzdzsgeCsrKSB7XG5cblx0XHRcdFx0dmFyIHNvID0geSAqIHN3ICsgeDtcblx0XHRcdFx0dmFyIGEgPSAwO1xuXHRcdFx0XHRmb3IgKHZhciBjeSA9IDA7IGN5IDwgc2lkZTsgY3krKykge1xuXHRcdFx0XHRcdGZvciAodmFyIGN4ID0gMDsgY3ggPCBzaWRlOyBjeCsrKSB7XG5cdFx0XHRcdFx0XHR2YXIgc2N5ID0geSArIGN5IC0gaGFsZlNpZGU7XG5cdFx0XHRcdFx0XHR2YXIgc2N4ID0geCArIGN4IC0gaGFsZlNpZGU7XG5cblx0XHRcdFx0XHRcdGlmIChzY3kgPj0gMCAmJiBzY3kgPCBzaCAmJiBzY3ggPj0gMCAmJiBzY3ggPCBzdykge1xuXG5cdFx0XHRcdFx0XHRcdHZhciBzcmNPZmYgPSBzY3kgKiBzdyArIHNjeDtcblx0XHRcdFx0XHRcdFx0dmFyIHd0ID0gd2VpZ2h0c1tjeSAqIHNpZGUgKyBjeF07XG5cblx0XHRcdFx0XHRcdFx0YSArPSBtYXNrW3NyY09mZl0gKiB3dDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtYXNrUmVzdWx0W3NvXSA9IChhID09PSAyNTUgKiA4KSA/IDI1NSA6IDA7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc2tSZXN1bHQ7XG5cdH1cblxuXHRmdW5jdGlvbiBkaWxhdGVNYXNrKG1hc2ssIHN3LCBzaCkge1xuXG5cdFx0dmFyIHdlaWdodHMgPSBbMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMV07XG5cdFx0dmFyIHNpZGUgPSBNYXRoLnJvdW5kKE1hdGguc3FydCh3ZWlnaHRzLmxlbmd0aCkpO1xuXHRcdHZhciBoYWxmU2lkZSA9IE1hdGguZmxvb3Ioc2lkZSAvIDIpO1xuXG5cdFx0dmFyIG1hc2tSZXN1bHQgPSBbXTtcblx0XHRmb3IgKHZhciB5ID0gMDsgeSA8IHNoOyB5KyspIHtcblx0XHRcdGZvciAodmFyIHggPSAwOyB4IDwgc3c7IHgrKykge1xuXG5cdFx0XHRcdHZhciBzbyA9IHkgKiBzdyArIHg7XG5cdFx0XHRcdHZhciBhID0gMDtcblx0XHRcdFx0Zm9yICh2YXIgY3kgPSAwOyBjeSA8IHNpZGU7IGN5KyspIHtcblx0XHRcdFx0XHRmb3IgKHZhciBjeCA9IDA7IGN4IDwgc2lkZTsgY3grKykge1xuXHRcdFx0XHRcdFx0dmFyIHNjeSA9IHkgKyBjeSAtIGhhbGZTaWRlO1xuXHRcdFx0XHRcdFx0dmFyIHNjeCA9IHggKyBjeCAtIGhhbGZTaWRlO1xuXG5cdFx0XHRcdFx0XHRpZiAoc2N5ID49IDAgJiYgc2N5IDwgc2ggJiYgc2N4ID49IDAgJiYgc2N4IDwgc3cpIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgc3JjT2ZmID0gc2N5ICogc3cgKyBzY3g7XG5cdFx0XHRcdFx0XHRcdHZhciB3dCA9IHdlaWdodHNbY3kgKiBzaWRlICsgY3hdO1xuXG5cdFx0XHRcdFx0XHRcdGEgKz0gbWFza1tzcmNPZmZdICogd3Q7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWFza1Jlc3VsdFtzb10gPSAoYSA+PSAyNTUgKiA0KSA/IDI1NSA6IDA7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc2tSZXN1bHQ7XG5cdH1cblxuXHRmdW5jdGlvbiBzbW9vdGhFZGdlTWFzayhtYXNrLCBzdywgc2gpIHtcblxuXHRcdHZhciB3ZWlnaHRzID0gWzEgLyA5LCAxIC8gOSwgMSAvIDksIDEgLyA5LCAxIC8gOSwgMSAvIDksIDEgLyA5LCAxIC8gOSwgMSAvIDldO1xuXHRcdHZhciBzaWRlID0gTWF0aC5yb3VuZChNYXRoLnNxcnQod2VpZ2h0cy5sZW5ndGgpKTtcblx0XHR2YXIgaGFsZlNpZGUgPSBNYXRoLmZsb29yKHNpZGUgLyAyKTtcblxuXHRcdHZhciBtYXNrUmVzdWx0ID0gW107XG5cdFx0Zm9yICh2YXIgeSA9IDA7IHkgPCBzaDsgeSsrKSB7XG5cdFx0XHRmb3IgKHZhciB4ID0gMDsgeCA8IHN3OyB4KyspIHtcblxuXHRcdFx0XHR2YXIgc28gPSB5ICogc3cgKyB4O1xuXHRcdFx0XHR2YXIgYSA9IDA7XG5cdFx0XHRcdGZvciAodmFyIGN5ID0gMDsgY3kgPCBzaWRlOyBjeSsrKSB7XG5cdFx0XHRcdFx0Zm9yICh2YXIgY3ggPSAwOyBjeCA8IHNpZGU7IGN4KyspIHtcblx0XHRcdFx0XHRcdHZhciBzY3kgPSB5ICsgY3kgLSBoYWxmU2lkZTtcblx0XHRcdFx0XHRcdHZhciBzY3ggPSB4ICsgY3ggLSBoYWxmU2lkZTtcblxuXHRcdFx0XHRcdFx0aWYgKHNjeSA+PSAwICYmIHNjeSA8IHNoICYmIHNjeCA+PSAwICYmIHNjeCA8IHN3KSB7XG5cblx0XHRcdFx0XHRcdFx0dmFyIHNyY09mZiA9IHNjeSAqIHN3ICsgc2N4O1xuXHRcdFx0XHRcdFx0XHR2YXIgd3QgPSB3ZWlnaHRzW2N5ICogc2lkZSArIGN4XTtcblxuXHRcdFx0XHRcdFx0XHRhICs9IG1hc2tbc3JjT2ZmXSAqIHd0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1hc2tSZXN1bHRbc29dID0gYTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWFza1Jlc3VsdDtcblx0fVxuXHRcblx0LyoqXG5cdCAqIE1hc2sgRmlsdGVyXG5cdCAqIEBmdW5jdGlvblxuXHQgKiBAbmFtZSBNYXNrXG5cdCAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcblx0ICogQHBhcmFtIHtPYmplY3R9IGltYWdlRGF0YVxuXHQgKiBAZXhhbXBsZVxuICAgICAqIG5vZGUuY2FjaGUoKTtcbiAgICAgKiBub2RlLmZpbHRlcnMoW0tpbmV0aWMuRmlsdGVycy5NYXNrXSk7XG4gICAgICogbm9kZS50aHJlc2hvbGQoMC4xKTtcblx0ICovXG5cdEtpbmV0aWMuRmlsdGVycy5NYXNrID0gZnVuY3Rpb24oaW1hZ2VEYXRhKSB7XG5cdFx0Ly8gRGV0ZWN0IHBpeGVscyBjbG9zZSB0byB0aGUgYmFja2dyb3VuZCBjb2xvclxuXHRcdHZhciB0aHJlc2hvbGQgPSB0aGlzLnRocmVzaG9sZCgpLFxuICAgICAgICBtYXNrID0gYmFja2dyb3VuZE1hc2soaW1hZ2VEYXRhLCB0aHJlc2hvbGQpO1xuXHRcdGlmIChtYXNrKSB7XG5cdFx0XHQvLyBFcm9kZVxuXHRcdFx0bWFzayA9IGVyb2RlTWFzayhtYXNrLCBpbWFnZURhdGEud2lkdGgsIGltYWdlRGF0YS5oZWlnaHQpO1xuXG5cdFx0XHQvLyBEaWxhdGVcblx0XHRcdG1hc2sgPSBkaWxhdGVNYXNrKG1hc2ssIGltYWdlRGF0YS53aWR0aCwgaW1hZ2VEYXRhLmhlaWdodCk7XG5cblx0XHRcdC8vIEdyYWRpZW50XG5cdFx0XHRtYXNrID0gc21vb3RoRWRnZU1hc2sobWFzaywgaW1hZ2VEYXRhLndpZHRoLCBpbWFnZURhdGEuaGVpZ2h0KTtcblxuXHRcdFx0Ly8gQXBwbHkgbWFza1xuXHRcdFx0YXBwbHlNYXNrKGltYWdlRGF0YSwgbWFzayk7XG5cdFx0XHRcblx0XHRcdC8vIHRvZG8gOiBVcGRhdGUgaGl0IHJlZ2lvbiBmdW5jdGlvbiBhY2NvcmRpbmcgdG8gbWFza1xuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZURhdGE7XG5cdH07XG5cblx0S2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICd0aHJlc2hvbGQnLCAwLCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xufSkoKTtcbjsoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIFJHQiBGaWx0ZXJcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAbmFtZSBSR0JcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5GaWx0ZXJzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGltYWdlRGF0YVxuICAgICAqIEBhdXRob3IgaXBwbzYxNVxuICAgICAqIEBleGFtcGxlXG4gICAgICogbm9kZS5jYWNoZSgpO1xuICAgICAqIG5vZGUuZmlsdGVycyhbS2luZXRpYy5GaWx0ZXJzLlJHQl0pO1xuICAgICAqIG5vZGUuYmx1ZSgxMjApO1xuICAgICAqIG5vZGUuZ3JlZW4oMjAwKTtcbiAgICAgKi9cbiAgICBLaW5ldGljLkZpbHRlcnMuUkdCID0gZnVuY3Rpb24gKGltYWdlRGF0YSkge1xuICAgICAgICB2YXIgZGF0YSA9IGltYWdlRGF0YS5kYXRhLFxuICAgICAgICAgICAgblBpeGVscyA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgcmVkID0gdGhpcy5yZWQoKSxcbiAgICAgICAgICAgIGdyZWVuID0gdGhpcy5ncmVlbigpLFxuICAgICAgICAgICAgYmx1ZSA9IHRoaXMuYmx1ZSgpLFxuICAgICAgICAgICAgaSwgYnJpZ2h0bmVzcztcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgblBpeGVsczsgaSArPSA0KSB7XG4gICAgICAgICAgICBicmlnaHRuZXNzID0gKDAuMzQgKiBkYXRhW2ldICsgMC41ICogZGF0YVtpICsgMV0gKyAwLjE2ICogZGF0YVtpICsgMl0pLzI1NTtcbiAgICAgICAgICAgIGRhdGFbaSAgICBdID0gYnJpZ2h0bmVzcypyZWQ7IC8vIHJcbiAgICAgICAgICAgIGRhdGFbaSArIDFdID0gYnJpZ2h0bmVzcypncmVlbjsgLy8gZ1xuICAgICAgICAgICAgZGF0YVtpICsgMl0gPSBicmlnaHRuZXNzKmJsdWU7IC8vIGJcbiAgICAgICAgICAgIGRhdGFbaSArIDNdID0gZGF0YVtpICsgM107IC8vIGFscGhhXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdyZWQnLCAwLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgdGhpcy5fZmlsdGVyVXBUb0RhdGUgPSBmYWxzZTtcbiAgICAgICAgaWYgKHZhbCA+IDI1NSkge1xuICAgICAgICAgICAgcmV0dXJuIDI1NTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWwgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvKipcbiAgICAqIGdldC9zZXQgZmlsdGVyIHJlZCB2YWx1ZS4gVXNlIHdpdGgge0BsaW5rIEtpbmV0aWMuRmlsdGVycy5SR0J9IGZpbHRlci5cbiAgICAqIEBuYW1lIHJlZFxuICAgICogQG1ldGhvZFxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAqIEBwYXJhbSB7SW50ZWdlcn0gcmVkIHZhbHVlIGJldHdlZW4gMCBhbmQgMjU1XG4gICAgKiBAcmV0dXJucyB7SW50ZWdlcn1cbiAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdncmVlbicsIDAsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICB0aGlzLl9maWx0ZXJVcFRvRGF0ZSA9IGZhbHNlO1xuICAgICAgICBpZiAodmFsID4gMjU1KSB7XG4gICAgICAgICAgICByZXR1cm4gMjU1O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8qKlxuICAgICogZ2V0L3NldCBmaWx0ZXIgZ3JlZW4gdmFsdWUuIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuUkdCfSBmaWx0ZXIuXG4gICAgKiBAbmFtZSBncmVlblxuICAgICogQG1ldGhvZFxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAqIEBwYXJhbSB7SW50ZWdlcn0gZ3JlZW4gdmFsdWUgYmV0d2VlbiAwIGFuZCAyNTVcbiAgICAqIEByZXR1cm5zIHtJbnRlZ2VyfVxuICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2JsdWUnLCAwLCBLaW5ldGljLlZhbGlkYXRvcnMuUkdCQ29tcG9uZW50LCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xuICAgIC8qKlxuICAgICogZ2V0L3NldCBmaWx0ZXIgYmx1ZSB2YWx1ZS4gVXNlIHdpdGgge0BsaW5rIEtpbmV0aWMuRmlsdGVycy5SR0J9IGZpbHRlci5cbiAgICAqIEBuYW1lIGJsdWVcbiAgICAqIEBtZXRob2RcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgKiBAcGFyYW0ge0ludGVnZXJ9IGJsdWUgdmFsdWUgYmV0d2VlbiAwIGFuZCAyNTVcbiAgICAqIEByZXR1cm5zIHtJbnRlZ2VyfVxuICAgICovXG59KSgpO1xuOyhmdW5jdGlvbiAoKSB7XG5cbiAgICAvKipcbiAgICAqIEhTViBGaWx0ZXIuIEFkanVzdHMgdGhlIGh1ZSwgc2F0dXJhdGlvbiBhbmQgdmFsdWVcbiAgICAqIEBmdW5jdGlvblxuICAgICogQG5hbWUgSFNWXG4gICAgKiBAbWVtYmVyb2YgS2luZXRpYy5GaWx0ZXJzXG4gICAgKiBAcGFyYW0ge09iamVjdH0gaW1hZ2VEYXRhXG4gICAgKiBAYXV0aG9yIGlwcG82MTVcbiAgICAqIEBleGFtcGxlXG4gICAgKiBpbWFnZS5maWx0ZXJzKFtLaW5ldGljLkZpbHRlcnMuSFNWXSk7XG4gICAgKiBpbWFnZS52YWx1ZSgyMDApO1xuICAgICovXG5cbiAgICBLaW5ldGljLkZpbHRlcnMuSFNWID0gZnVuY3Rpb24gKGltYWdlRGF0YSkge1xuICAgICAgICB2YXIgZGF0YSA9IGltYWdlRGF0YS5kYXRhLFxuICAgICAgICAgICAgblBpeGVscyA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgdiA9IE1hdGgucG93KDIsdGhpcy52YWx1ZSgpKSxcbiAgICAgICAgICAgIHMgPSBNYXRoLnBvdygyLHRoaXMuc2F0dXJhdGlvbigpKSxcbiAgICAgICAgICAgIGggPSBNYXRoLmFicygodGhpcy5odWUoKSkgKyAzNjApICUgMzYwLFxuICAgICAgICAgICAgaTtcblxuICAgICAgICAvLyBCYXNpcyBmb3IgdGhlIHRlY2huaXF1ZSB1c2VkOlxuICAgICAgICAvLyBodHRwOi8vYmVlc2J1enouYml6L2NvZGUvaHN2X2NvbG9yX3RyYW5zZm9ybXMucGhwXG4gICAgICAgIC8vIFYgaXMgdGhlIHZhbHVlIG11bHRpcGxpZXIgKDEgZm9yIG5vbmUsIDIgZm9yIGRvdWJsZSwgMC41IGZvciBoYWxmKVxuICAgICAgICAvLyBTIGlzIHRoZSBzYXR1cmF0aW9uIG11bHRpcGxpZXIgKDEgZm9yIG5vbmUsIDIgZm9yIGRvdWJsZSwgMC41IGZvciBoYWxmKVxuICAgICAgICAvLyBIIGlzIHRoZSBodWUgc2hpZnQgaW4gZGVncmVlcyAoMCB0byAzNjApXG4gICAgICAgIC8vIHZzdSA9IFYqUypjb3MoSCpQSS8xODApO1xuICAgICAgICAvLyB2c3cgPSBWKlMqc2luKEgqUEkvMTgwKTtcbiAgICAgICAgLy9bIC4yOTlWKy43MDF2c3UrLjE2OHZzdyAgICAuNTg3Vi0uNTg3dnN1Ky4zMzB2c3cgICAgLjExNFYtLjExNHZzdS0uNDk3dnN3IF0gW1JdXG4gICAgICAgIC8vWyAuMjk5Vi0uMjk5dnN1LS4zMjh2c3cgICAgLjU4N1YrLjQxM3ZzdSsuMDM1dnN3ICAgIC4xMTRWLS4xMTR2c3UrLjI5MnZzdyBdKltHXVxuICAgICAgICAvL1sgLjI5OVYtLjMwMHZzdSsxLjI1dnN3ICAgIC41ODdWLS41ODh2c3UtMS4wNXZzdyAgICAuMTE0VisuODg2dnN1LS4yMDN2c3cgXSBbQl1cblxuICAgICAgICAvLyBQcmVjb21wdXRlIHRoZSB2YWx1ZXMgaW4gdGhlIG1hdHJpeDpcbiAgICAgICAgdmFyIHZzdSA9IHYqcypNYXRoLmNvcyhoKk1hdGguUEkvMTgwKSxcbiAgICAgICAgICAgIHZzdyA9IHYqcypNYXRoLnNpbihoKk1hdGguUEkvMTgwKTtcbiAgICAgICAgLy8gKHJlc3VsdCBzcG90KShzb3VyY2Ugc3BvdClcbiAgICAgICAgdmFyIHJyID0gMC4yOTkqdiswLjcwMSp2c3UrMC4xNjcqdnN3LFxuICAgICAgICAgICAgcmcgPSAwLjU4Nyp2LTAuNTg3KnZzdSswLjMzMCp2c3csXG4gICAgICAgICAgICByYiA9IDAuMTE0KnYtMC4xMTQqdnN1LTAuNDk3KnZzdztcbiAgICAgICAgdmFyIGdyID0gMC4yOTkqdi0wLjI5OSp2c3UtMC4zMjgqdnN3LFxuICAgICAgICAgICAgZ2cgPSAwLjU4Nyp2KzAuNDEzKnZzdSswLjAzNSp2c3csXG4gICAgICAgICAgICBnYiA9IDAuMTE0KnYtMC4xMTQqdnN1KzAuMjkzKnZzdztcbiAgICAgICAgdmFyIGJyID0gMC4yOTkqdi0wLjMwMCp2c3UrMS4yNTAqdnN3LFxuICAgICAgICAgICAgYmcgPSAwLjU4Nyp2LTAuNTg2KnZzdS0xLjA1MCp2c3csXG4gICAgICAgICAgICBiYiA9IDAuMTE0KnYrMC44ODYqdnN1LTAuMjAwKnZzdztcblxuICAgICAgICB2YXIgcixnLGIsYTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgblBpeGVsczsgaSArPSA0KSB7XG4gICAgICAgICAgICByID0gZGF0YVtpKzBdO1xuICAgICAgICAgICAgZyA9IGRhdGFbaSsxXTtcbiAgICAgICAgICAgIGIgPSBkYXRhW2krMl07XG4gICAgICAgICAgICBhID0gZGF0YVtpKzNdO1xuXG4gICAgICAgICAgICBkYXRhW2krMF0gPSBycipyICsgcmcqZyArIHJiKmI7XG4gICAgICAgICAgICBkYXRhW2krMV0gPSBncipyICsgZ2cqZyArIGdiKmI7XG4gICAgICAgICAgICBkYXRhW2krMl0gPSBicipyICsgYmcqZyArIGJiKmI7XG4gICAgICAgICAgICBkYXRhW2krM10gPSBhOyAvLyBhbHBoYVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdodWUnLCAwLCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xuICAgIC8qKlxuICAgICogZ2V0L3NldCBoc3YgaHVlIGluIGRlZ3JlZXMuIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuSFNWfSBvciB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLkhTTH0gZmlsdGVyLlxuICAgICogQG5hbWUgaHVlXG4gICAgKiBAbWV0aG9kXG4gICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGh1ZSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDM1OVxuICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdzYXR1cmF0aW9uJywgMCwgbnVsbCwgS2luZXRpYy5GYWN0b3J5LmFmdGVyU2V0RmlsdGVyKTtcbiAgICAvKipcbiAgICAqIGdldC9zZXQgaHN2IHNhdHVyYXRpb24uIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuSFNWfSBvciB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLkhTTH0gZmlsdGVyLlxuICAgICogQG5hbWUgc2F0dXJhdGlvblxuICAgICogQG1ldGhvZFxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBzYXR1cmF0aW9uIDAgaXMgbm8gY2hhbmdlLCAtMS4wIGhhbHZlcyB0aGUgc2F0dXJhdGlvbiwgMS4wIGRvdWJsZXMsIGV0Yy4uXG4gICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ3ZhbHVlJywgMCwgbnVsbCwgS2luZXRpYy5GYWN0b3J5LmFmdGVyU2V0RmlsdGVyKTtcbiAgICAvKipcbiAgICAqIGdldC9zZXQgaHN2IHZhbHVlLiBVc2Ugd2l0aCB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLkhTVn0gZmlsdGVyLlxuICAgICogQG5hbWUgdmFsdWVcbiAgICAqIEBtZXRob2RcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgMCBpcyBubyBjaGFuZ2UsIC0xLjAgaGFsdmVzIHRoZSB2YWx1ZSwgMS4wIGRvdWJsZXMsIGV0Yy4uXG4gICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICovXG5cbn0pKCk7XG47KGZ1bmN0aW9uICgpIHtcblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnaHVlJywgMCwgbnVsbCwgS2luZXRpYy5GYWN0b3J5LmFmdGVyU2V0RmlsdGVyKTtcbiAgICAvKipcbiAgICAqIGdldC9zZXQgaHN2IGh1ZSBpbiBkZWdyZWVzLiBVc2Ugd2l0aCB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLkhTVn0gb3Ige0BsaW5rIEtpbmV0aWMuRmlsdGVycy5IU0x9IGZpbHRlci5cbiAgICAqIEBuYW1lIGh1ZVxuICAgICogQG1ldGhvZFxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBodWUgdmFsdWUgYmV0d2VlbiAwIGFuZCAzNTlcbiAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnc2F0dXJhdGlvbicsIDAsIG51bGwsIEtpbmV0aWMuRmFjdG9yeS5hZnRlclNldEZpbHRlcik7XG4gICAgLyoqXG4gICAgKiBnZXQvc2V0IGhzdiBzYXR1cmF0aW9uLiBVc2Ugd2l0aCB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLkhTVn0gb3Ige0BsaW5rIEtpbmV0aWMuRmlsdGVycy5IU0x9IGZpbHRlci5cbiAgICAqIEBuYW1lIHNhdHVyYXRpb25cbiAgICAqIEBtZXRob2RcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgKiBAcGFyYW0ge051bWJlcn0gc2F0dXJhdGlvbiAwIGlzIG5vIGNoYW5nZSwgLTEuMCBoYWx2ZXMgdGhlIHNhdHVyYXRpb24sIDEuMCBkb3VibGVzLCBldGMuLlxuICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdsdW1pbmFuY2UnLCAwLCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xuICAgIC8qKlxuICAgICogZ2V0L3NldCBoc2wgbHVtaW5hbmNlLiBVc2Ugd2l0aCB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLkhTTH0gZmlsdGVyLlxuICAgICogQG5hbWUgdmFsdWVcbiAgICAqIEBtZXRob2RcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgMCBpcyBubyBjaGFuZ2UsIC0xLjAgaGFsdmVzIHRoZSB2YWx1ZSwgMS4wIGRvdWJsZXMsIGV0Yy4uXG4gICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEhTTCBGaWx0ZXIuIEFkanVzdHMgdGhlIGh1ZSwgc2F0dXJhdGlvbiBhbmQgbHVtaW5hbmNlIChvciBsaWdodG5lc3MpXG4gICAgKiBAZnVuY3Rpb25cbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZURhdGFcbiAgICAqIEBhdXRob3IgaXBwbzYxNVxuICAgICogQGV4YW1wbGVcbiAgICAqIGltYWdlLmZpbHRlcnMoW0tpbmV0aWMuRmlsdGVycy5IU0xdKTtcbiAgICAqIGltYWdlLmx1bWluYW5jZSgyMDApO1xuICAgICovXG5cbiAgICBLaW5ldGljLkZpbHRlcnMuSFNMID0gZnVuY3Rpb24gKGltYWdlRGF0YSkge1xuICAgICAgICB2YXIgZGF0YSA9IGltYWdlRGF0YS5kYXRhLFxuICAgICAgICAgICAgblBpeGVscyA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgdiA9IDEsXG4gICAgICAgICAgICBzID0gTWF0aC5wb3coMix0aGlzLnNhdHVyYXRpb24oKSksXG4gICAgICAgICAgICBoID0gTWF0aC5hYnMoKHRoaXMuaHVlKCkpICsgMzYwKSAlIDM2MCxcbiAgICAgICAgICAgIGwgPSB0aGlzLmx1bWluYW5jZSgpKjEyNyxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgLy8gQmFzaXMgZm9yIHRoZSB0ZWNobmlxdWUgdXNlZDpcbiAgICAgICAgLy8gaHR0cDovL2JlZXNidXp6LmJpei9jb2RlL2hzdl9jb2xvcl90cmFuc2Zvcm1zLnBocFxuICAgICAgICAvLyBWIGlzIHRoZSB2YWx1ZSBtdWx0aXBsaWVyICgxIGZvciBub25lLCAyIGZvciBkb3VibGUsIDAuNSBmb3IgaGFsZilcbiAgICAgICAgLy8gUyBpcyB0aGUgc2F0dXJhdGlvbiBtdWx0aXBsaWVyICgxIGZvciBub25lLCAyIGZvciBkb3VibGUsIDAuNSBmb3IgaGFsZilcbiAgICAgICAgLy8gSCBpcyB0aGUgaHVlIHNoaWZ0IGluIGRlZ3JlZXMgKDAgdG8gMzYwKVxuICAgICAgICAvLyB2c3UgPSBWKlMqY29zKEgqUEkvMTgwKTtcbiAgICAgICAgLy8gdnN3ID0gVipTKnNpbihIKlBJLzE4MCk7XG4gICAgICAgIC8vWyAuMjk5VisuNzAxdnN1Ky4xNjh2c3cgICAgLjU4N1YtLjU4N3ZzdSsuMzMwdnN3ICAgIC4xMTRWLS4xMTR2c3UtLjQ5N3ZzdyBdIFtSXVxuICAgICAgICAvL1sgLjI5OVYtLjI5OXZzdS0uMzI4dnN3ICAgIC41ODdWKy40MTN2c3UrLjAzNXZzdyAgICAuMTE0Vi0uMTE0dnN1Ky4yOTJ2c3cgXSpbR11cbiAgICAgICAgLy9bIC4yOTlWLS4zMDB2c3UrMS4yNXZzdyAgICAuNTg3Vi0uNTg4dnN1LTEuMDV2c3cgICAgLjExNFYrLjg4NnZzdS0uMjAzdnN3IF0gW0JdXG5cbiAgICAgICAgLy8gUHJlY29tcHV0ZSB0aGUgdmFsdWVzIGluIHRoZSBtYXRyaXg6XG4gICAgICAgIHZhciB2c3UgPSB2KnMqTWF0aC5jb3MoaCpNYXRoLlBJLzE4MCksXG4gICAgICAgICAgICB2c3cgPSB2KnMqTWF0aC5zaW4oaCpNYXRoLlBJLzE4MCk7XG4gICAgICAgIC8vIChyZXN1bHQgc3BvdCkoc291cmNlIHNwb3QpXG4gICAgICAgIHZhciByciA9IDAuMjk5KnYrMC43MDEqdnN1KzAuMTY3KnZzdyxcbiAgICAgICAgICAgIHJnID0gMC41ODcqdi0wLjU4Nyp2c3UrMC4zMzAqdnN3LFxuICAgICAgICAgICAgcmIgPSAwLjExNCp2LTAuMTE0KnZzdS0wLjQ5Nyp2c3c7XG4gICAgICAgIHZhciBnciA9IDAuMjk5KnYtMC4yOTkqdnN1LTAuMzI4KnZzdyxcbiAgICAgICAgICAgIGdnID0gMC41ODcqdiswLjQxMyp2c3UrMC4wMzUqdnN3LFxuICAgICAgICAgICAgZ2IgPSAwLjExNCp2LTAuMTE0KnZzdSswLjI5Myp2c3c7XG4gICAgICAgIHZhciBiciA9IDAuMjk5KnYtMC4zMDAqdnN1KzEuMjUwKnZzdyxcbiAgICAgICAgICAgIGJnID0gMC41ODcqdi0wLjU4Nip2c3UtMS4wNTAqdnN3LFxuICAgICAgICAgICAgYmIgPSAwLjExNCp2KzAuODg2KnZzdS0wLjIwMCp2c3c7XG5cbiAgICAgICAgdmFyIHIsZyxiLGE7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG5QaXhlbHM7IGkgKz0gNCkge1xuICAgICAgICAgICAgciA9IGRhdGFbaSswXTtcbiAgICAgICAgICAgIGcgPSBkYXRhW2krMV07XG4gICAgICAgICAgICBiID0gZGF0YVtpKzJdO1xuICAgICAgICAgICAgYSA9IGRhdGFbaSszXTtcblxuICAgICAgICAgICAgZGF0YVtpKzBdID0gcnIqciArIHJnKmcgKyByYipiICsgbDtcbiAgICAgICAgICAgIGRhdGFbaSsxXSA9IGdyKnIgKyBnZypnICsgZ2IqYiArIGw7XG4gICAgICAgICAgICBkYXRhW2krMl0gPSBicipyICsgYmcqZyArIGJiKmIgKyBsO1xuICAgICAgICAgICAgZGF0YVtpKzNdID0gYTsgLy8gYWxwaGFcbiAgICAgICAgfVxuICAgIH07XG59KSgpO1xuOyhmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogRW1ib3NzIEZpbHRlci5cbiAgICAgKiBQaXhhc3RpYyBMaWIgLSBFbWJvc3MgZmlsdGVyIC0gdjAuMS4wXG4gICAgICogQ29weXJpZ2h0IChjKSAyMDA4IEphY29iIFNlaWRlbGluLCBqc2VpZGVsaW5AbmloaWxvZ2ljLmRrLCBodHRwOi8vYmxvZy5uaWhpbG9naWMuZGsvXG4gICAgICogTGljZW5zZTogW2h0dHA6Ly93d3cucGl4YXN0aWMuY29tL2xpYi9saWNlbnNlLnR4dF1cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5GaWx0ZXJzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGltYWdlRGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogbm9kZS5jYWNoZSgpO1xuICAgICAqIG5vZGUuZmlsdGVycyhbS2luZXRpYy5GaWx0ZXJzLkVtYm9zc10pO1xuICAgICAqIG5vZGUuZW1ib3NzU3RyZW5ndGgoMC44KTtcbiAgICAgKiBub2RlLmVtYm9zc1doaXRlTGV2ZWwoMC4zKTtcbiAgICAgKiBub2RlLmVtYm9zc0RpcmVjdGlvbigncmlnaHQnKTtcbiAgICAgKiBub2RlLmVtYm9zc0JsZW5kKHRydWUpO1xuICAgICAqL1xuICAgIEtpbmV0aWMuRmlsdGVycy5FbWJvc3MgPSBmdW5jdGlvbiAoaW1hZ2VEYXRhKSB7XG5cbiAgICAgICAgLy8gcGl4YXN0aWMgc3RyZW5ndGggaXMgYmV0d2VlbiAwIGFuZCAxMC4gIEkgd2FudCBpdCBiZXR3ZWVuIDAgYW5kIDFcbiAgICAgICAgLy8gcGl4YXN0aWMgZ3JleUxldmVsIGlzIGJldHdlZW4gMCBhbmQgMjU1LiAgSSB3YW50IGl0IGJldHdlZW4gMCBhbmQgMS4gIEFsc28sXG4gICAgICAgIC8vIGEgbWF4IHZhbHVlIG9mIGdyZXlMZXZlbCB5aWVsZHMgYSB3aGl0ZSBlbWJvc3MsIGFuZCB0aGUgbWluIHZhbHVlIHlpZWxkcyBhIGJsYWNrXG4gICAgICAgIC8vIGVtYm9zcy4gIFRoZXJlZm9yZSwgSSBjaGFuZ2VkIGdyZXlMZXZlbCB0byB3aGl0ZUxldmVsXG4gICAgICAgIHZhciBzdHJlbmd0aCA9IHRoaXMuZW1ib3NzU3RyZW5ndGgoKSAqIDEwLFxuICAgICAgICAgICAgZ3JleUxldmVsID0gdGhpcy5lbWJvc3NXaGl0ZUxldmVsKCkgKiAyNTUsXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSB0aGlzLmVtYm9zc0RpcmVjdGlvbigpLFxuICAgICAgICAgICAgYmxlbmQgPSB0aGlzLmVtYm9zc0JsZW5kKCksXG4gICAgICAgICAgICBkaXJZID0gMCxcbiAgICAgICAgICAgIGRpclggPSAwLFxuICAgICAgICAgICAgZGF0YSA9IGltYWdlRGF0YS5kYXRhLFxuICAgICAgICAgICAgdyA9IGltYWdlRGF0YS53aWR0aCxcbiAgICAgICAgICAgIGggPSBpbWFnZURhdGEuaGVpZ2h0LFxuICAgICAgICAgICAgdzQgPSB3KjQsXG4gICAgICAgICAgICB5ID0gaDtcblxuICAgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgY2FzZSAndG9wLWxlZnQnOlxuICAgICAgICAgICAgICAgIGRpclkgPSAtMTtcbiAgICAgICAgICAgICAgICBkaXJYID0gLTE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgICAgIGRpclkgPSAtMTtcbiAgICAgICAgICAgICAgICBkaXJYID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RvcC1yaWdodCc6XG4gICAgICAgICAgICAgICAgZGlyWSA9IC0xO1xuICAgICAgICAgICAgICAgIGRpclggPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgIGRpclkgPSAwO1xuICAgICAgICAgICAgICAgIGRpclggPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYm90dG9tLXJpZ2h0JzpcbiAgICAgICAgICAgICAgICBkaXJZID0gMTtcbiAgICAgICAgICAgICAgICBkaXJYID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgZGlyWSA9IDE7XG4gICAgICAgICAgICAgICAgZGlyWCA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdib3R0b20tbGVmdCc6XG4gICAgICAgICAgICAgICAgZGlyWSA9IDE7XG4gICAgICAgICAgICAgICAgZGlyWCA9IC0xO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgZGlyWSA9IDA7XG4gICAgICAgICAgICAgICAgZGlyWCA9IC0xO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgdmFyIG9mZnNldFkgPSAoeS0xKSp3NDtcblxuICAgICAgICAgICAgdmFyIG90aGVyWSA9IGRpclk7XG4gICAgICAgICAgICBpZiAoeSArIG90aGVyWSA8IDEpe1xuICAgICAgICAgICAgICAgIG90aGVyWSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoeSArIG90aGVyWSA+IGgpIHtcbiAgICAgICAgICAgICAgICBvdGhlclkgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgb2Zmc2V0WU90aGVyID0gKHktMStvdGhlclkpKncqNDtcblxuICAgICAgICAgICAgdmFyIHggPSB3O1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBvZmZzZXRZICsgKHgtMSkqNDtcblxuICAgICAgICAgICAgICAgIHZhciBvdGhlclggPSBkaXJYO1xuICAgICAgICAgICAgICAgIGlmICh4ICsgb3RoZXJYIDwgMSl7XG4gICAgICAgICAgICAgICAgICAgIG90aGVyWCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh4ICsgb3RoZXJYID4gdykge1xuICAgICAgICAgICAgICAgICAgICBvdGhlclggPSAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXRPdGhlciA9IG9mZnNldFlPdGhlciArICh4LTErb3RoZXJYKSo0O1xuXG4gICAgICAgICAgICAgICAgdmFyIGRSID0gZGF0YVtvZmZzZXRdIC0gZGF0YVtvZmZzZXRPdGhlcl07XG4gICAgICAgICAgICAgICAgdmFyIGRHID0gZGF0YVtvZmZzZXQrMV0gLSBkYXRhW29mZnNldE90aGVyKzFdO1xuICAgICAgICAgICAgICAgIHZhciBkQiA9IGRhdGFbb2Zmc2V0KzJdIC0gZGF0YVtvZmZzZXRPdGhlcisyXTtcblxuICAgICAgICAgICAgICAgIHZhciBkaWYgPSBkUjtcbiAgICAgICAgICAgICAgICB2YXIgYWJzRGlmID0gZGlmID4gMCA/IGRpZiA6IC1kaWY7XG5cbiAgICAgICAgICAgICAgICB2YXIgYWJzRyA9IGRHID4gMCA/IGRHIDogLWRHO1xuICAgICAgICAgICAgICAgIHZhciBhYnNCID0gZEIgPiAwID8gZEIgOiAtZEI7XG5cbiAgICAgICAgICAgICAgICBpZiAoYWJzRyA+IGFic0RpZikge1xuICAgICAgICAgICAgICAgICAgICBkaWYgPSBkRztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFic0IgPiBhYnNEaWYpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlmID0gZEI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGlmICo9IHN0cmVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgaWYgKGJsZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByID0gZGF0YVtvZmZzZXRdICsgZGlmO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZyA9IGRhdGFbb2Zmc2V0KzFdICsgZGlmO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IGRhdGFbb2Zmc2V0KzJdICsgZGlmO1xuXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbb2Zmc2V0XSA9IChyID4gMjU1KSA/IDI1NSA6IChyIDwgMCA/IDAgOiByKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtvZmZzZXQrMV0gPSAoZyA+IDI1NSkgPyAyNTUgOiAoZyA8IDAgPyAwIDogZyk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFbb2Zmc2V0KzJdID0gKGIgPiAyNTUpID8gMjU1IDogKGIgPCAwID8gMCA6IGIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBncmV5ID0gZ3JleUxldmVsIC0gZGlmO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JleSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyZXkgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGdyZXkgPiAyNTUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyZXkgPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkYXRhW29mZnNldF0gPSBkYXRhW29mZnNldCsxXSA9IGRhdGFbb2Zmc2V0KzJdID0gZ3JleTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gd2hpbGUgKC0teCk7XG4gICAgICAgIH0gd2hpbGUgKC0teSk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnZW1ib3NzU3RyZW5ndGgnLCAwLjUsIG51bGwsIEtpbmV0aWMuRmFjdG9yeS5hZnRlclNldEZpbHRlcik7XG4gICAgLyoqXG4gICAgKiBnZXQvc2V0IGVtYm9zcyBzdHJlbmd0aC4gVXNlIHdpdGgge0BsaW5rIEtpbmV0aWMuRmlsdGVycy5FbWJvc3N9IGZpbHRlci5cbiAgICAqIEBuYW1lIGVtYm9zc1N0cmVuZ3RoXG4gICAgKiBAbWV0aG9kXG4gICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsIGJldHdlZW4gMCBhbmQgMS4gIERlZmF1bHQgaXMgMC41XG4gICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2VtYm9zc1doaXRlTGV2ZWwnLCAwLjUsIG51bGwsIEtpbmV0aWMuRmFjdG9yeS5hZnRlclNldEZpbHRlcik7XG4gICAgLyoqXG4gICAgKiBnZXQvc2V0IGVtYm9zcyB3aGl0ZSBsZXZlbC4gVXNlIHdpdGgge0BsaW5rIEtpbmV0aWMuRmlsdGVycy5FbWJvc3N9IGZpbHRlci5cbiAgICAqIEBuYW1lIGVtYm9zc1doaXRlTGV2ZWxcbiAgICAqIEBtZXRob2RcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgKiBAcGFyYW0ge051bWJlcn0gZW1ib3NzV2hpdGVMZXZlbCBiZXR3ZWVuIDAgYW5kIDEuICBEZWZhdWx0IGlzIDAuNVxuICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdlbWJvc3NEaXJlY3Rpb24nLCAndG9wLWxlZnQnLCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xuICAgIC8qKlxuICAgICogZ2V0L3NldCBlbWJvc3MgZGlyZWN0aW9uLiBVc2Ugd2l0aCB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLkVtYm9zc30gZmlsdGVyLlxuICAgICogQG5hbWUgZW1ib3NzRGlyZWN0aW9uXG4gICAgKiBAbWV0aG9kXG4gICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICogQHBhcmFtIHtTdHJpbmd9IGVtYm9zc0RpcmVjdGlvbiBjYW4gYmUgdG9wLWxlZnQsIHRvcCwgdG9wLXJpZ2h0LCByaWdodCwgYm90dG9tLXJpZ2h0LCBib3R0b20sIGJvdHRvbS1sZWZ0IG9yIGxlZnRcbiAgICAqICAgVGhlIGRlZmF1bHQgaXMgdG9wLWxlZnRcbiAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Ob2RlLCAnZW1ib3NzQmxlbmQnLCBmYWxzZSwgbnVsbCwgS2luZXRpYy5GYWN0b3J5LmFmdGVyU2V0RmlsdGVyKTtcbiAgICAvKipcbiAgICAqIGdldC9zZXQgZW1ib3NzIGJsZW5kLiBVc2Ugd2l0aCB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLkVtYm9zc30gZmlsdGVyLlxuICAgICogQG5hbWUgZW1ib3NzQmxlbmRcbiAgICAqIEBtZXRob2RcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVtYm9zc0JsZW5kXG4gICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAqL1xufSkoKTtcblxuXG47KGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiByZW1hcChmcm9tVmFsdWUsIGZyb21NaW4sIGZyb21NYXgsIHRvTWluLCB0b01heCkge1xuICAgICAgICAvLyBDb21wdXRlIHRoZSByYW5nZSBvZiB0aGUgZGF0YVxuICAgICAgICB2YXIgZnJvbVJhbmdlID0gZnJvbU1heCAtIGZyb21NaW4sXG4gICAgICAgICAgdG9SYW5nZSA9IHRvTWF4IC0gdG9NaW4sXG4gICAgICAgICAgdG9WYWx1ZTtcblxuICAgICAgICAvLyBJZiBlaXRoZXIgcmFuZ2UgaXMgMCwgdGhlbiB0aGUgdmFsdWUgY2FuIG9ubHkgYmUgbWFwcGVkIHRvIDEgdmFsdWVcbiAgICAgICAgaWYgKGZyb21SYW5nZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRvTWluICsgdG9SYW5nZSAvIDI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvUmFuZ2UgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0b01pbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vICgxKSB1bnRyYW5zbGF0ZSwgKDIpIHVuc2NhbGUsICgzKSByZXNjYWxlLCAoNCkgcmV0cmFuc2xhdGVcbiAgICAgICAgdG9WYWx1ZSA9IChmcm9tVmFsdWUgLSBmcm9tTWluKSAvIGZyb21SYW5nZTtcbiAgICAgICAgdG9WYWx1ZSA9ICh0b1JhbmdlICogdG9WYWx1ZSkgKyB0b01pbjtcblxuICAgICAgICByZXR1cm4gdG9WYWx1ZTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICogRW5oYW5jZSBGaWx0ZXIuIEFkanVzdHMgdGhlIGNvbG9ycyBzbyB0aGF0IHRoZXkgc3BhbiB0aGUgd2lkZXN0XG4gICAgKiAgcG9zc2libGUgcmFuZ2UgKGllIDAtMjU1KS4gUGVyZm9ybXMgdypoIHBpeGVsIHJlYWRzIGFuZCB3KmggcGl4ZWxcbiAgICAqICB3cml0ZXMuXG4gICAgKiBAZnVuY3Rpb25cbiAgICAqIEBuYW1lIEVuaGFuY2VcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZURhdGFcbiAgICAqIEBhdXRob3IgaXBwbzYxNVxuICAgICogQGV4YW1wbGVcbiAgICAqIG5vZGUuY2FjaGUoKTtcbiAgICAqIG5vZGUuZmlsdGVycyhbS2luZXRpYy5GaWx0ZXJzLkVuaGFuY2VdKTtcbiAgICAqIG5vZGUuZW5oYW5jZSgwLjQpO1xuICAgICovXG4gICAgS2luZXRpYy5GaWx0ZXJzLkVuaGFuY2UgPSBmdW5jdGlvbiAoaW1hZ2VEYXRhKSB7XG4gICAgICAgIHZhciBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsXG4gICAgICAgICAgICBuU3ViUGl4ZWxzID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICByTWluID0gZGF0YVswXSwgck1heCA9IHJNaW4sIHIsXG4gICAgICAgICAgICBnTWluID0gZGF0YVsxXSwgZ01heCA9IGdNaW4sIGcsXG4gICAgICAgICAgICBiTWluID0gZGF0YVsyXSwgYk1heCA9IGJNaW4sIGIsXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIC8vIElmIHdlIGFyZSBub3QgZW5oYW5jaW5nIGFueXRoaW5nIC0gZG9uJ3QgZG8gYW55IGNvbXB1dGF0aW9uXG4gICAgICAgIHZhciBlbmhhbmNlQW1vdW50ID0gdGhpcy5lbmhhbmNlKCk7XG4gICAgICAgIGlmKCBlbmhhbmNlQW1vdW50ID09PSAwICl7IHJldHVybjsgfVxuXG4gICAgICAgIC8vIDFzdCBQYXNzIC0gZmluZCB0aGUgbWluIGFuZCBtYXggZm9yIGVhY2ggY2hhbm5lbDpcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG5TdWJQaXhlbHM7IGkgKz0gNCkge1xuICAgICAgICAgICAgciA9IGRhdGFbaSArIDBdO1xuICAgICAgICAgICAgaWYgKHIgPCByTWluKSB7IHJNaW4gPSByOyB9XG4gICAgICAgICAgICBlbHNlIGlmIChyID4gck1heCkgeyByTWF4ID0gcjsgfVxuICAgICAgICAgICAgZyA9IGRhdGFbaSArIDFdO1xuICAgICAgICAgICAgaWYgKGcgPCBnTWluKSB7IGdNaW4gPSBnOyB9IGVsc2VcbiAgICAgICAgICAgIGlmIChnID4gZ01heCkgeyBnTWF4ID0gZzsgfVxuICAgICAgICAgICAgYiA9IGRhdGFbaSArIDJdO1xuICAgICAgICAgICAgaWYgKGIgPCBiTWluKSB7IGJNaW4gPSBiOyB9IGVsc2VcbiAgICAgICAgICAgIGlmIChiID4gYk1heCkgeyBiTWF4ID0gYjsgfVxuICAgICAgICAgICAgLy9hID0gZGF0YVtpICsgM107XG4gICAgICAgICAgICAvL2lmIChhIDwgYU1pbikgeyBhTWluID0gYTsgfSBlbHNlXG4gICAgICAgICAgICAvL2lmIChhID4gYU1heCkgeyBhTWF4ID0gYTsgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgb25seSAxIGxldmVsIC0gZG9uJ3QgcmVtYXBcbiAgICAgICAgaWYoIHJNYXggPT09IHJNaW4gKXsgck1heCA9IDI1NTsgck1pbiA9IDA7IH1cbiAgICAgICAgaWYoIGdNYXggPT09IGdNaW4gKXsgZ01heCA9IDI1NTsgZ01pbiA9IDA7IH1cbiAgICAgICAgaWYoIGJNYXggPT09IGJNaW4gKXsgYk1heCA9IDI1NTsgYk1pbiA9IDA7IH1cblxuICAgICAgICB2YXIgck1pZCwgckdvYWxNYXgsckdvYWxNaW4sXG4gICAgICAgICAgICBnTWlkLCBnR29hbE1heCxnR29hbE1pbixcbiAgICAgICAgICAgIGJNaWQsIGJHb2FsTWF4LGJHb2FsTWluO1xuXG4gICAgICAgIC8vIElmIHRoZSBlbmhhbmNlbWVudCBpcyBwb3NpdGl2ZSAtIHN0cmV0Y2ggdGhlIGhpc3RvZ3JhbSBcbiAgICAgICAgaWYgKCBlbmhhbmNlQW1vdW50ID4gMCApe1xuICAgICAgICAgICAgckdvYWxNYXggPSByTWF4ICsgZW5oYW5jZUFtb3VudCooMjU1LXJNYXgpO1xuICAgICAgICAgICAgckdvYWxNaW4gPSByTWluIC0gZW5oYW5jZUFtb3VudCoock1pbi0wKTtcbiAgICAgICAgICAgIGdHb2FsTWF4ID0gZ01heCArIGVuaGFuY2VBbW91bnQqKDI1NS1nTWF4KTtcbiAgICAgICAgICAgIGdHb2FsTWluID0gZ01pbiAtIGVuaGFuY2VBbW91bnQqKGdNaW4tMCk7XG4gICAgICAgICAgICBiR29hbE1heCA9IGJNYXggKyBlbmhhbmNlQW1vdW50KigyNTUtYk1heCk7XG4gICAgICAgICAgICBiR29hbE1pbiA9IGJNaW4gLSBlbmhhbmNlQW1vdW50KihiTWluLTApO1xuICAgICAgICAvLyBJZiB0aGUgZW5oYW5jZW1lbnQgaXMgbmVnYXRpdmUgLSBjb21wcmVzcyB0aGUgaGlzdG9ncmFtXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByTWlkID0gKHJNYXggKyByTWluKSowLjU7XG4gICAgICAgICAgICByR29hbE1heCA9IHJNYXggKyBlbmhhbmNlQW1vdW50KihyTWF4LXJNaWQpO1xuICAgICAgICAgICAgckdvYWxNaW4gPSByTWluICsgZW5oYW5jZUFtb3VudCoock1pbi1yTWlkKTtcbiAgICAgICAgICAgIGdNaWQgPSAoZ01heCArIGdNaW4pKjAuNTtcbiAgICAgICAgICAgIGdHb2FsTWF4ID0gZ01heCArIGVuaGFuY2VBbW91bnQqKGdNYXgtZ01pZCk7XG4gICAgICAgICAgICBnR29hbE1pbiA9IGdNaW4gKyBlbmhhbmNlQW1vdW50KihnTWluLWdNaWQpO1xuICAgICAgICAgICAgYk1pZCA9IChiTWF4ICsgYk1pbikqMC41O1xuICAgICAgICAgICAgYkdvYWxNYXggPSBiTWF4ICsgZW5oYW5jZUFtb3VudCooYk1heC1iTWlkKTtcbiAgICAgICAgICAgIGJHb2FsTWluID0gYk1pbiArIGVuaGFuY2VBbW91bnQqKGJNaW4tYk1pZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQYXNzIDIgLSByZW1hcCBldmVyeXRoaW5nLCBleGNlcHQgdGhlIGFscGhhXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuU3ViUGl4ZWxzOyBpICs9IDQpIHtcbiAgICAgICAgICAgIGRhdGFbaSArIDBdID0gcmVtYXAoZGF0YVtpICsgMF0sIHJNaW4sIHJNYXgsIHJHb2FsTWluLCByR29hbE1heCk7XG4gICAgICAgICAgICBkYXRhW2kgKyAxXSA9IHJlbWFwKGRhdGFbaSArIDFdLCBnTWluLCBnTWF4LCBnR29hbE1pbiwgZ0dvYWxNYXgpO1xuICAgICAgICAgICAgZGF0YVtpICsgMl0gPSByZW1hcChkYXRhW2kgKyAyXSwgYk1pbiwgYk1heCwgYkdvYWxNaW4sIGJHb2FsTWF4KTtcbiAgICAgICAgICAgIC8vZGF0YVtpICsgM10gPSByZW1hcChkYXRhW2kgKyAzXSwgYU1pbiwgYU1heCwgYUdvYWxNaW4sIGFHb2FsTWF4KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2VuaGFuY2UnLCAwLCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xuXG4gICAgLyoqXG4gICAgKiBnZXQvc2V0IGVuaGFuY2UuIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuRW5oYW5jZX0gZmlsdGVyLlxuICAgICogQG5hbWUgZW5oYW5jZVxuICAgICogQG1ldGhvZFxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAqIEBwYXJhbSB7RmxvYXR9IGFtb3VudFxuICAgICogQHJldHVybnMge0Zsb2F0fVxuICAgICovXG59KSgpO1xuOyhmdW5jdGlvbiAoKSB7XG5cbiAgICAvKipcbiAgICAgKiBQb3N0ZXJpemUgRmlsdGVyLiBBZGp1c3RzIHRoZSBjaGFubmVscyBzbyB0aGF0IHRoZXJlIGFyZSBubyBtb3JlXG4gICAgICogIHRoYW4gbiBkaWZmZXJlbnQgdmFsdWVzIGZvciB0aGF0IGNoYW5uZWwuIFRoaXMgaXMgYWxzbyBhcHBsaWVkXG4gICAgICogIHRvIHRoZSBhbHBoYSBjaGFubmVsLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lIFBvc3Rlcml6ZVxuICAgICAqIEBhdXRob3IgaXBwbzYxNVxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW1hZ2VEYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBub2RlLmNhY2hlKCk7XG4gICAgICogbm9kZS5maWx0ZXJzKFtLaW5ldGljLkZpbHRlcnMuUG9zdGVyaXplXSk7XG4gICAgICogbm9kZS5sZXZlbHMoMC44KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmlsdGVycy5Qb3N0ZXJpemUgPSBmdW5jdGlvbiAoaW1hZ2VEYXRhKSB7XG4gICAgICAgIC8vIGxldmVsIG11c3QgYmUgYmV0d2VlbiAxIGFuZCAyNTVcbiAgICAgICAgdmFyIGxldmVscyA9IE1hdGgucm91bmQodGhpcy5sZXZlbHMoKSAqIDI1NCkgKyAxLFxuICAgICAgICAgICAgZGF0YSA9IGltYWdlRGF0YS5kYXRhLFxuICAgICAgICAgICAgbGVuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICBzY2FsZSA9ICgyNTUgLyBsZXZlbHMpLFxuICAgICAgICAgICAgaTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGRhdGFbaV0gPSBNYXRoLmZsb29yKGRhdGFbaV0gLyBzY2FsZSkgKiBzY2FsZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2xldmVscycsIDAuNSwgbnVsbCwgS2luZXRpYy5GYWN0b3J5LmFmdGVyU2V0RmlsdGVyKTtcblxuICAgIC8qKlxuICAgICogZ2V0L3NldCBsZXZlbHMuICBNdXN0IGJlIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMS4gIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuUG9zdGVyaXplfSBmaWx0ZXIuXG4gICAgKiBAbmFtZSBsZXZlbHNcbiAgICAqIEBtZXRob2RcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgKiBAcGFyYW0ge051bWJlcn0gbGV2ZWwgYmV0d2VlbiAwIGFuZCAxXG4gICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICovXG59KSgpOzsoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTm9pc2UgRmlsdGVyLiBSYW5kb21seSBhZGRzIG9yIHN1YnN0cmFjdHMgdG8gdGhlIGNvbG9yIGNoYW5uZWxzXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBuYW1lIE5vaXNlXHJcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5GaWx0ZXJzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW1hZ2VEYXRhXHJcbiAgICAgKiBAYXV0aG9yIGlwcG82MTVcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBub2RlLmNhY2hlKCk7XHJcbiAgICAgKiBub2RlLmZpbHRlcnMoW0tpbmV0aWMuRmlsdGVycy5Ob2lzZV0pO1xyXG4gICAgICogbm9kZS5ub2lzZSgwLjgpO1xyXG4gICAgICovXHJcbiAgICBLaW5ldGljLkZpbHRlcnMuTm9pc2UgPSBmdW5jdGlvbiAoaW1hZ2VEYXRhKSB7XHJcbiAgICAgICAgdmFyIGFtb3VudCA9IHRoaXMubm9pc2UoKSAqIDI1NSxcclxuICAgICAgICAgICAgZGF0YSA9IGltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgICAgICBuUGl4ZWxzID0gZGF0YS5sZW5ndGgsXHJcbiAgICAgICAgICAgIGhhbGYgPSBhbW91bnQgLyAyLFxyXG4gICAgICAgICAgICBpO1xyXG5cclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgblBpeGVsczsgaSArPSA0KSB7XHJcbiAgICAgICAgICAgIGRhdGFbaSArIDBdICs9IGhhbGYgLSAyICogaGFsZiAqIE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgICAgIGRhdGFbaSArIDFdICs9IGhhbGYgLSAyICogaGFsZiAqIE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgICAgIGRhdGFbaSArIDJdICs9IGhhbGYgLSAyICogaGFsZiAqIE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ25vaXNlJywgMC4yLCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgKiBnZXQvc2V0IG5vaXNlIGFtb3VudC4gIE11c3QgYmUgYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEuIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuTm9pc2V9IGZpbHRlci5cclxuICAgICogQG5hbWUgbm9pc2VcclxuICAgICogQG1ldGhvZFxyXG4gICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxyXG4gICAgKiBAcGFyYW0ge051bWJlcn0gbm9pc2VcclxuICAgICogQHJldHVybnMge051bWJlcn1cclxuICAgICovXHJcbn0pKCk7XHJcbjsoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGl4ZWxhdGUgRmlsdGVyLiBBdmVyYWdlcyBncm91cHMgb2YgcGl4ZWxzIGFuZCByZWRyYXdzXHJcbiAgICAgKiAgdGhlbSBhcyBsYXJnZXIgcGl4ZWxzXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBuYW1lIFBpeGVsYXRlXHJcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5GaWx0ZXJzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW1hZ2VEYXRhXHJcbiAgICAgKiBAYXV0aG9yIGlwcG82MTVcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBub2RlLmNhY2hlKCk7XHJcbiAgICAgKiBub2RlLmZpbHRlcnMoW0tpbmV0aWMuRmlsdGVycy5QaXhlbGF0ZV0pO1xyXG4gICAgICogbm9kZS5waXhlbFNpemUoMTApO1xyXG4gICAgICovXHJcblxyXG4gICAgS2luZXRpYy5GaWx0ZXJzLlBpeGVsYXRlID0gZnVuY3Rpb24gKGltYWdlRGF0YSkge1xyXG5cclxuICAgICAgICB2YXIgcGl4ZWxTaXplID0gTWF0aC5jZWlsKHRoaXMucGl4ZWxTaXplKCkpLFxyXG4gICAgICAgICAgICB3aWR0aCA9IGltYWdlRGF0YS53aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0ID0gaW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICAgICAgeCwgeSwgaSxcclxuICAgICAgICAgICAgLy9waXhlbHNQZXJCaW4gPSBwaXhlbFNpemUgKiBwaXhlbFNpemUsXHJcbiAgICAgICAgICAgIHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhLFxyXG4gICAgICAgICAgICBuQmluc1ggPSBNYXRoLmNlaWwod2lkdGggLyBwaXhlbFNpemUpLFxyXG4gICAgICAgICAgICBuQmluc1kgPSBNYXRoLmNlaWwoaGVpZ2h0IC8gcGl4ZWxTaXplKSxcclxuICAgICAgICAgICAgeEJpblN0YXJ0LCB4QmluRW5kLCB5QmluU3RhcnQsIHlCaW5FbmQsXHJcbiAgICAgICAgICAgIHhCaW4sIHlCaW4sIHBpeGVsc0luQmluO1xyXG4gICAgICAgIGltYWdlRGF0YSA9IGltYWdlRGF0YS5kYXRhO1xyXG5cclxuICAgICAgICBmb3IgKHhCaW4gPSAwOyB4QmluIDwgbkJpbnNYOyB4QmluICs9IDEpIHtcclxuICAgICAgICAgICAgZm9yICh5QmluID0gMDsgeUJpbiA8IG5CaW5zWTsgeUJpbiArPSAxKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBjb2xvciBhY2N1bWxhdG9ycyB0byAwXHJcbiAgICAgICAgICAgICAgICByZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgZ3JlZW4gPSAwO1xyXG4gICAgICAgICAgICAgICAgYmx1ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICBhbHBoYSA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHdoaWNoIHBpeGVscyBhcmUgaW5jbHVkZWQgaW4gdGhpcyBiaW5cclxuICAgICAgICAgICAgICAgIHhCaW5TdGFydCA9IHhCaW4gKiBwaXhlbFNpemU7XHJcbiAgICAgICAgICAgICAgICB4QmluRW5kID0geEJpblN0YXJ0ICsgcGl4ZWxTaXplO1xyXG4gICAgICAgICAgICAgICAgeUJpblN0YXJ0ID0geUJpbiAqIHBpeGVsU2l6ZTtcclxuICAgICAgICAgICAgICAgIHlCaW5FbmQgPSB5QmluU3RhcnQgKyBwaXhlbFNpemU7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQWRkIGFsbCBvZiB0aGUgcGl4ZWxzIHRvIHRoaXMgYmluIVxyXG4gICAgICAgICAgICAgICAgcGl4ZWxzSW5CaW4gPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yICh4ID0geEJpblN0YXJ0OyB4IDwgeEJpbkVuZDsgeCArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIHggPj0gd2lkdGggKXsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHkgPSB5QmluU3RhcnQ7IHkgPCB5QmluRW5kOyB5ICs9IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHkgPj0gaGVpZ2h0ICl7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAod2lkdGggKiB5ICsgeCkgKiA0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWQgKz0gaW1hZ2VEYXRhW2kgKyAwXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JlZW4gKz0gaW1hZ2VEYXRhW2kgKyAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmx1ZSArPSBpbWFnZURhdGFbaSArIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHBoYSArPSBpbWFnZURhdGFbaSArIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaXhlbHNJbkJpbiArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIGNoYW5uZWxzIGFyZSBiZXR3ZWVuIDAtMjU1XHJcbiAgICAgICAgICAgICAgICByZWQgPSByZWQgLyBwaXhlbHNJbkJpbjtcclxuICAgICAgICAgICAgICAgIGdyZWVuID0gZ3JlZW4gLyBwaXhlbHNJbkJpbjtcclxuICAgICAgICAgICAgICAgIGJsdWUgPSBibHVlIC8gcGl4ZWxzSW5CaW47XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRHJhdyB0aGlzIGJpblxyXG4gICAgICAgICAgICAgICAgZm9yICh4ID0geEJpblN0YXJ0OyB4IDwgeEJpbkVuZDsgeCArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIHggPj0gd2lkdGggKXsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHkgPSB5QmluU3RhcnQ7IHkgPCB5QmluRW5kOyB5ICs9IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHkgPj0gaGVpZ2h0ICl7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAod2lkdGggKiB5ICsgeCkgKiA0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZURhdGFbaSArIDBdID0gcmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZURhdGFbaSArIDFdID0gZ3JlZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlRGF0YVtpICsgMl0gPSBibHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZURhdGFbaSArIDNdID0gYWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICBcclxuICAgIH07XHJcblxyXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdwaXhlbFNpemUnLCA4LCBudWxsLCBLaW5ldGljLkZhY3RvcnkuYWZ0ZXJTZXRGaWx0ZXIpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgKiBnZXQvc2V0IHBpeGVsIHNpemUuIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuUGl4ZWxhdGV9IGZpbHRlci5cclxuICAgICogQG5hbWUgcGl4ZWxTaXplXHJcbiAgICAqIEBtZXRob2RcclxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcclxuICAgICogQHBhcmFtIHtJbnRlZ2VyfSBwaXhlbFNpemVcclxuICAgICogQHJldHVybnMge0ludGVnZXJ9XHJcbiAgICAqL1xyXG59KSgpOzsoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhyZXNob2xkIEZpbHRlci4gUHVzaGVzIGFueSB2YWx1ZSBhYm92ZSB0aGUgbWlkIHBvaW50IHRvIFxyXG4gICAgICogIHRoZSBtYXggYW5kIGFueSB2YWx1ZSBiZWxvdyB0aGUgbWlkIHBvaW50IHRvIHRoZSBtaW4uXHJcbiAgICAgKiAgVGhpcyBhZmZlY3RzIHRoZSBhbHBoYSBjaGFubmVsLlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAbmFtZSBUaHJlc2hvbGRcclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZURhdGFcclxuICAgICAqIEBhdXRob3IgaXBwbzYxNVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIG5vZGUuY2FjaGUoKTtcclxuICAgICAqIG5vZGUuZmlsdGVycyhbS2luZXRpYy5GaWx0ZXJzLlRocmVzaG9sZF0pO1xyXG4gICAgICogbm9kZS50aHJlc2hvbGQoMC4xKTtcclxuICAgICAqL1xyXG5cclxuICAgIEtpbmV0aWMuRmlsdGVycy5UaHJlc2hvbGQgPSBmdW5jdGlvbiAoaW1hZ2VEYXRhKSB7XHJcbiAgICAgICAgdmFyIGxldmVsID0gdGhpcy50aHJlc2hvbGQoKSAqIDI1NSxcclxuICAgICAgICAgICAgZGF0YSA9IGltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgICAgICBsZW4gPSBkYXRhLmxlbmd0aCxcclxuICAgICAgICAgICAgaTtcclxuXHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgIGRhdGFbaV0gPSBkYXRhW2ldIDwgbGV2ZWwgPyAwIDogMjU1O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICd0aHJlc2hvbGQnLCAwLjUsIG51bGwsIEtpbmV0aWMuRmFjdG9yeS5hZnRlclNldEZpbHRlcik7XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIGdldC9zZXQgdGhyZXNob2xkLiAgTXVzdCBiZSBhIHZhbHVlIGJldHdlZW4gMCBhbmQgMS4gVXNlIHdpdGgge0BsaW5rIEtpbmV0aWMuRmlsdGVycy5UaHJlc2hvbGR9IG9yIHtAbGluayBLaW5ldGljLkZpbHRlcnMuTWFza30gZmlsdGVyLlxyXG4gICAgKiBAbmFtZSB0aHJlc2hvbGRcclxuICAgICogQG1ldGhvZFxyXG4gICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxyXG4gICAgKiBAcGFyYW0ge051bWJlcn0gdGhyZXNob2xkXHJcbiAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcbiAgICAqL1xyXG59KSgpOzsoZnVuY3Rpb24oKSB7XG4gICAgLyoqXG4gICAgICogU2VwaWEgRmlsdGVyXG4gICAgICogQmFzZWQgb246IFBpeGFzdGljIExpYiAtIFNlcGlhIGZpbHRlciAtIHYwLjEuMFxuICAgICAqIENvcHlyaWdodCAoYykgMjAwOCBKYWNvYiBTZWlkZWxpbiwganNlaWRlbGluQG5paGlsb2dpYy5kaywgaHR0cDovL2Jsb2cubmloaWxvZ2ljLmRrL1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lIFNlcGlhXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRmlsdGVyc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZURhdGFcbiAgICAgKiBAYXV0aG9yIEphY29iIFNlaWRlbGluIDxqc2VpZGVsaW5AbmloaWxvZ2ljLmRrPlxuICAgICAqIEBsaWNlbnNlIE1QTCB2MS4xIFtodHRwOi8vd3d3LnBpeGFzdGljLmNvbS9saWIvbGljZW5zZS50eHRdXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBub2RlLmNhY2hlKCk7XG4gICAgICogbm9kZS5maWx0ZXJzKFtLaW5ldGljLkZpbHRlcnMuU2VwaWFdKTtcbiAgICAgKi9cbiAgICBLaW5ldGljLkZpbHRlcnMuU2VwaWEgPSBmdW5jdGlvbiAoaW1hZ2VEYXRhKSB7XG4gICAgICAgIHZhciBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsXG4gICAgICAgICAgICB3ID0gaW1hZ2VEYXRhLndpZHRoLFxuICAgICAgICAgICAgeSA9IGltYWdlRGF0YS5oZWlnaHQsXG4gICAgICAgICAgICB3NCA9IHcqNCxcbiAgICAgICAgICAgIG9mZnNldFksIHgsIG9mZnNldCwgb3IsIG9nLCBvYiwgciwgZywgYjtcbiAgICAgICAgXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIG9mZnNldFkgPSAoeS0xKSp3NDtcbiAgICAgICAgICAgIHggPSB3O1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IG9mZnNldFkgKyAoeC0xKSo0O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG9yID0gZGF0YVtvZmZzZXRdO1xuICAgICAgICAgICAgICAgIG9nID0gZGF0YVtvZmZzZXQrMV07XG4gICAgICAgICAgICAgICAgb2IgPSBkYXRhW29mZnNldCsyXTtcblxuICAgICAgICAgICAgICAgIHIgPSBvciAqIDAuMzkzICsgb2cgKiAwLjc2OSArIG9iICogMC4xODk7XG4gICAgICAgICAgICAgICAgZyA9IG9yICogMC4zNDkgKyBvZyAqIDAuNjg2ICsgb2IgKiAwLjE2ODtcbiAgICAgICAgICAgICAgICBiID0gb3IgKiAwLjI3MiArIG9nICogMC41MzQgKyBvYiAqIDAuMTMxO1xuXG4gICAgICAgICAgICAgICAgZGF0YVtvZmZzZXRdID0gciA+IDI1NSA/IDI1NSA6IHI7XG4gICAgICAgICAgICAgICAgZGF0YVtvZmZzZXQrMV0gPSBnID4gMjU1ID8gMjU1IDogZztcbiAgICAgICAgICAgICAgICBkYXRhW29mZnNldCsyXSA9IGIgPiAyNTUgPyAyNTUgOiBiO1xuICAgICAgICAgICAgICAgIGRhdGFbb2Zmc2V0KzNdID0gZGF0YVtvZmZzZXQrM107XG4gICAgICAgICAgICB9IHdoaWxlICgtLXgpO1xuICAgICAgICB9IHdoaWxlICgtLXkpO1xuICAgIH07XG59KSgpO1xuOyhmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogU29sYXJpemUgRmlsdGVyXG4gICAgICogUGl4YXN0aWMgTGliIC0gU29sYXJpemUgZmlsdGVyIC0gdjAuMS4wXG4gICAgICogQ29weXJpZ2h0IChjKSAyMDA4IEphY29iIFNlaWRlbGluLCBqc2VpZGVsaW5AbmloaWxvZ2ljLmRrLCBodHRwOi8vYmxvZy5uaWhpbG9naWMuZGsvXG4gICAgICogTGljZW5zZTogW2h0dHA6Ly93d3cucGl4YXN0aWMuY29tL2xpYi9saWNlbnNlLnR4dF1cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAbmFtZSBTb2xhcml6ZVxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW1hZ2VEYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBub2RlLmNhY2hlKCk7XG4gICAgICogbm9kZS5maWx0ZXJzKFtLaW5ldGljLkZpbHRlcnMuU29sYXJpemVdKTtcbiAgICAgKi9cbiAgICBLaW5ldGljLkZpbHRlcnMuU29sYXJpemUgPSBmdW5jdGlvbiAoaW1hZ2VEYXRhKSB7XG4gICAgICAgIHZhciBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsXG4gICAgICAgICAgICB3ID0gaW1hZ2VEYXRhLndpZHRoLFxuICAgICAgICAgICAgaCA9IGltYWdlRGF0YS5oZWlnaHQsXG4gICAgICAgICAgICB3NCA9IHcqNCxcbiAgICAgICAgICAgIHkgPSBoO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXRZID0gKHktMSkqdzQ7XG4gICAgICAgICAgICB2YXIgeCA9IHc7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IG9mZnNldFkgKyAoeC0xKSo0O1xuICAgICAgICAgICAgICAgIHZhciByID0gZGF0YVtvZmZzZXRdO1xuICAgICAgICAgICAgICAgIHZhciBnID0gZGF0YVtvZmZzZXQrMV07XG4gICAgICAgICAgICAgICAgdmFyIGIgPSBkYXRhW29mZnNldCsyXTtcblxuICAgICAgICAgICAgICAgIGlmIChyID4gMTI3KSB7XG4gICAgICAgICAgICAgICAgICAgIHIgPSAyNTUgLSByO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZyA+IDEyNykge1xuICAgICAgICAgICAgICAgICAgICBnID0gMjU1IC0gZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGIgPiAxMjcpIHtcbiAgICAgICAgICAgICAgICAgICAgYiA9IDI1NSAtIGI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGF0YVtvZmZzZXRdID0gcjtcbiAgICAgICAgICAgICAgICBkYXRhW29mZnNldCsxXSA9IGc7XG4gICAgICAgICAgICAgICAgZGF0YVtvZmZzZXQrMl0gPSBiO1xuICAgICAgICAgICAgfSB3aGlsZSAoLS14KTtcbiAgICAgICAgfSB3aGlsZSAoLS15KTtcbiAgICB9O1xufSkoKTtcblxuXG47Lypqc2hpbnQgbmV3Y2FwOmZhbHNlICovXG4oZnVuY3Rpb24gKCkge1xuXG4gIC8qXG4gICAqIFRvUG9sYXIgRmlsdGVyLiBDb252ZXJ0cyBpbWFnZSBkYXRhIHRvIHBvbGFyIGNvb3JkaW5hdGVzLiBQZXJmb3JtcyBcbiAgICogIHcqaCo0IHBpeGVsIHJlYWRzIGFuZCB3KmggcGl4ZWwgd3JpdGVzLiBUaGUgciBheGlzIGlzIHBsYWNlZCBhbG9uZ1xuICAgKiAgd2hhdCB3b3VsZCBiZSB0aGUgeSBheGlzIGFuZCB0aGUgdGhldGEgYXhpcyBhbG9uZyB0aGUgeCBheGlzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGF1dGhvciBpcHBvNjE1XG4gICAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcbiAgICogQHBhcmFtIHtJbWFnZURhdGF9IHNyYywgdGhlIHNvdXJjZSBpbWFnZSBkYXRhICh3aGF0IHdpbGwgYmUgdHJhbnNmb3JtZWQpXG4gICAqIEBwYXJhbSB7SW1hZ2VEYXRhfSBkc3QsIHRoZSBkZXN0aW5hdGlvbiBpbWFnZSBkYXRhICh3aGVyZSBpdCB3aWxsIGJlIHNhdmVkKVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0LnBvbGFyQ2VudGVyWF0gaG9yaXpvbnRhbCBsb2NhdGlvbiBmb3IgdGhlIGNlbnRlciBvZiB0aGUgY2lyY2xlLFxuICAgKiAgZGVmYXVsdCBpcyBpbiB0aGUgbWlkZGxlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0LnBvbGFyQ2VudGVyWV0gdmVydGljYWwgbG9jYXRpb24gZm9yIHRoZSBjZW50ZXIgb2YgdGhlIGNpcmNsZSxcbiAgICogIGRlZmF1bHQgaXMgaW4gdGhlIG1pZGRsZVxuICAgKi9cblxuICAgIHZhciBUb1BvbGFyID0gZnVuY3Rpb24oc3JjLGRzdCxvcHQpe1xuXG4gICAgICAgIHZhciBzcmNQaXhlbHMgPSBzcmMuZGF0YSxcbiAgICAgICAgICAgIGRzdFBpeGVscyA9IGRzdC5kYXRhLFxuICAgICAgICAgICAgeFNpemUgPSBzcmMud2lkdGgsXG4gICAgICAgICAgICB5U2l6ZSA9IHNyYy5oZWlnaHQsXG4gICAgICAgICAgICB4TWlkID0gb3B0LnBvbGFyQ2VudGVyWCB8fCB4U2l6ZS8yLFxuICAgICAgICAgICAgeU1pZCA9IG9wdC5wb2xhckNlbnRlclkgfHwgeVNpemUvMixcbiAgICAgICAgICAgIGksIHgsIHksIHI9MCxnPTAsYj0wLGE9MDtcblxuICAgICAgICAvLyBGaW5kIHRoZSBsYXJnZXN0IHJhZGl1c1xuICAgICAgICB2YXIgcmFkLCByTWF4ID0gTWF0aC5zcXJ0KCB4TWlkKnhNaWQgKyB5TWlkKnlNaWQgKTtcbiAgICAgICAgeCA9IHhTaXplIC0geE1pZDtcbiAgICAgICAgeSA9IHlTaXplIC0geU1pZDtcbiAgICAgICAgcmFkID0gTWF0aC5zcXJ0KCB4KnggKyB5KnkgKTtcbiAgICAgICAgck1heCA9IChyYWQgPiByTWF4KT9yYWQ6ck1heDtcblxuICAgICAgICAvLyBXZSdsbCBiZSB1aXNuZyB5IGFzIHRoZSByYWRpdXMsIGFuZCB4IGFzIHRoZSBhbmdsZSAodGhldGE9dClcbiAgICAgICAgdmFyIHJTaXplID0geVNpemUsXG4gICAgICAgICAgICB0U2l6ZSA9IHhTaXplLFxuICAgICAgICAgICAgcmFkaXVzLCB0aGV0YTtcblxuICAgICAgICAvLyBXZSB3YW50IHRvIGNvdmVyIGFsbCBhbmdsZXMgKDAtMzYwKSBhbmQgd2UgbmVlZCB0byBjb252ZXJ0IHRvXG4gICAgICAgIC8vIHJhZGlhbnMgKCpQSS8xODApXG4gICAgICAgIHZhciBjb252ZXJzaW9uID0gMzYwL3RTaXplKk1hdGguUEkvMTgwLCBzaW4sIGNvcztcblxuICAgICAgICAvLyB2YXIgeDEsIHgyLCB4MWksIHgyaSwgeTEsIHkyLCB5MWksIHkyaSwgc2NhbGU7XG5cbiAgICAgICAgZm9yKCB0aGV0YT0wOyB0aGV0YTx0U2l6ZTsgdGhldGErPTEgKXtcbiAgICAgICAgICAgIHNpbiA9IE1hdGguc2luKHRoZXRhKmNvbnZlcnNpb24pO1xuICAgICAgICAgICAgY29zID0gTWF0aC5jb3ModGhldGEqY29udmVyc2lvbik7XG4gICAgICAgICAgICBmb3IoIHJhZGl1cz0wOyByYWRpdXM8clNpemU7IHJhZGl1cys9MSApe1xuICAgICAgICAgICAgICAgIHggPSBNYXRoLmZsb29yKHhNaWQrck1heCpyYWRpdXMvclNpemUqY29zKTtcbiAgICAgICAgICAgICAgICB5ID0gTWF0aC5mbG9vcih5TWlkK3JNYXgqcmFkaXVzL3JTaXplKnNpbik7XG4gICAgICAgICAgICAgICAgaSA9ICh5KnhTaXplICsgeCkqNDtcbiAgICAgICAgICAgICAgICByID0gc3JjUGl4ZWxzW2krMF07XG4gICAgICAgICAgICAgICAgZyA9IHNyY1BpeGVsc1tpKzFdO1xuICAgICAgICAgICAgICAgIGIgPSBzcmNQaXhlbHNbaSsyXTtcbiAgICAgICAgICAgICAgICBhID0gc3JjUGl4ZWxzW2krM107XG5cbiAgICAgICAgICAgICAgICAvLyBTdG9yZSBpdFxuICAgICAgICAgICAgICAgIC8vaSA9ICh0aGV0YSAqIHhTaXplICsgcmFkaXVzKSAqIDQ7XG4gICAgICAgICAgICAgICAgaSA9ICh0aGV0YSArIHJhZGl1cyp4U2l6ZSkgKiA0O1xuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1tpKzBdID0gcjtcbiAgICAgICAgICAgICAgICBkc3RQaXhlbHNbaSsxXSA9IGc7XG4gICAgICAgICAgICAgICAgZHN0UGl4ZWxzW2krMl0gPSBiO1xuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1tpKzNdID0gYTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qXG4gICAgICogRnJvbVBvbGFyIEZpbHRlci4gQ29udmVydHMgaW1hZ2UgZGF0YSBmcm9tIHBvbGFyIGNvb3JkaW5hdGVzIGJhY2sgdG8gcmVjdGFuZ3VsYXIuXG4gICAgICogIFBlcmZvcm1zIHcqaCo0IHBpeGVsIHJlYWRzIGFuZCB3KmggcGl4ZWwgd3JpdGVzLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhdXRob3IgaXBwbzYxNVxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkZpbHRlcnNcbiAgICAgKiBAcGFyYW0ge0ltYWdlRGF0YX0gc3JjLCB0aGUgc291cmNlIGltYWdlIGRhdGEgKHdoYXQgd2lsbCBiZSB0cmFuc2Zvcm1lZClcbiAgICAgKiBAcGFyYW0ge0ltYWdlRGF0YX0gZHN0LCB0aGUgZGVzdGluYXRpb24gaW1hZ2UgZGF0YSAod2hlcmUgaXQgd2lsbCBiZSBzYXZlZClcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHQucG9sYXJDZW50ZXJYXSBob3Jpem9udGFsIGxvY2F0aW9uIGZvciB0aGUgY2VudGVyIG9mIHRoZSBjaXJjbGUsXG4gICAgICogIGRlZmF1bHQgaXMgaW4gdGhlIG1pZGRsZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0LnBvbGFyQ2VudGVyWV0gdmVydGljYWwgbG9jYXRpb24gZm9yIHRoZSBjZW50ZXIgb2YgdGhlIGNpcmNsZSxcbiAgICAgKiAgZGVmYXVsdCBpcyBpbiB0aGUgbWlkZGxlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHQucG9sYXJSb3RhdGlvbl0gYW1vdW50IHRvIHJvdGF0ZSB0aGUgaW1hZ2UgY291bnRlcmNsb2Nrd2lzLFxuICAgICAqICAwIGlzIG5vIHJvdGF0aW9uLCAzNjAgZGVncmVlcyBpcyBhIGZ1bGwgcm90YXRpb25cbiAgICAgKi9cblxuICAgIHZhciBGcm9tUG9sYXIgPSBmdW5jdGlvbihzcmMsZHN0LG9wdCl7XG5cbiAgICAgICAgdmFyIHNyY1BpeGVscyA9IHNyYy5kYXRhLFxuICAgICAgICAgICAgZHN0UGl4ZWxzID0gZHN0LmRhdGEsXG4gICAgICAgICAgICB4U2l6ZSA9IHNyYy53aWR0aCxcbiAgICAgICAgICAgIHlTaXplID0gc3JjLmhlaWdodCxcbiAgICAgICAgICAgIHhNaWQgPSBvcHQucG9sYXJDZW50ZXJYIHx8IHhTaXplLzIsXG4gICAgICAgICAgICB5TWlkID0gb3B0LnBvbGFyQ2VudGVyWSB8fCB5U2l6ZS8yLFxuICAgICAgICAgICAgaSwgeCwgeSwgZHgsIGR5LCByPTAsZz0wLGI9MCxhPTA7XG5cblxuICAgICAgICAvLyBGaW5kIHRoZSBsYXJnZXN0IHJhZGl1c1xuICAgICAgICB2YXIgcmFkLCByTWF4ID0gTWF0aC5zcXJ0KCB4TWlkKnhNaWQgKyB5TWlkKnlNaWQgKTtcbiAgICAgICAgeCA9IHhTaXplIC0geE1pZDtcbiAgICAgICAgeSA9IHlTaXplIC0geU1pZDtcbiAgICAgICAgcmFkID0gTWF0aC5zcXJ0KCB4KnggKyB5KnkgKTtcbiAgICAgICAgck1heCA9IChyYWQgPiByTWF4KT9yYWQ6ck1heDtcblxuICAgICAgICAvLyBXZSdsbCBiZSB1aXNuZyB4IGFzIHRoZSByYWRpdXMsIGFuZCB5IGFzIHRoZSBhbmdsZSAodGhldGE9dClcbiAgICAgICAgdmFyIHJTaXplID0geVNpemUsXG4gICAgICAgIHRTaXplID0geFNpemUsXG4gICAgICAgIHJhZGl1cywgdGhldGEsXG4gICAgICAgIHBoYXNlU2hpZnQgPSBvcHQucG9sYXJSb3RhdGlvbiB8fCAwO1xuXG4gICAgICAgIC8vIFdlIG5lZWQgdG8gY29udmVydCB0byBkZWdyZWVzIGFuZCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZVxuICAgICAgICAvLyBpdCdzIGJldHdlZW4gKDAtMzYwKVxuICAgICAgICAvLyB2YXIgY29udmVyc2lvbiA9IHRTaXplLzM2MCoxODAvTWF0aC5QSTtcbiAgICAgICAgLy92YXIgY29udmVyc2lvbiA9IHRTaXplLzM2MCoxODAvTWF0aC5QSTtcblxuICAgICAgICB2YXIgeDEsIHkxO1xuXG4gICAgICAgIGZvciggeD0wOyB4PHhTaXplOyB4Kz0xICl7XG4gICAgICAgICAgICBmb3IoIHk9MDsgeTx5U2l6ZTsgeSs9MSApe1xuICAgICAgICAgICAgICAgIGR4ID0geCAtIHhNaWQ7XG4gICAgICAgICAgICAgICAgZHkgPSB5IC0geU1pZDtcbiAgICAgICAgICAgICAgICByYWRpdXMgPSBNYXRoLnNxcnQoZHgqZHggKyBkeSpkeSkqclNpemUvck1heDtcbiAgICAgICAgICAgICAgICB0aGV0YSA9IChNYXRoLmF0YW4yKGR5LGR4KSoxODAvTWF0aC5QSSArIDM2MCArIHBoYXNlU2hpZnQpJTM2MDtcbiAgICAgICAgICAgICAgICB0aGV0YSA9IHRoZXRhKnRTaXplLzM2MDtcbiAgICAgICAgICAgICAgICB4MSA9IE1hdGguZmxvb3IodGhldGEpO1xuICAgICAgICAgICAgICAgIHkxID0gTWF0aC5mbG9vcihyYWRpdXMpO1xuICAgICAgICAgICAgICAgIGkgPSAoeTEqeFNpemUgKyB4MSkqNDtcbiAgICAgICAgICAgICAgICByID0gc3JjUGl4ZWxzW2krMF07XG4gICAgICAgICAgICAgICAgZyA9IHNyY1BpeGVsc1tpKzFdO1xuICAgICAgICAgICAgICAgIGIgPSBzcmNQaXhlbHNbaSsyXTtcbiAgICAgICAgICAgICAgICBhID0gc3JjUGl4ZWxzW2krM107XG5cbiAgICAgICAgICAgICAgICAvLyBTdG9yZSBpdFxuICAgICAgICAgICAgICAgIGkgPSAoeSp4U2l6ZSArIHgpKjQ7XG4gICAgICAgICAgICAgICAgZHN0UGl4ZWxzW2krMF0gPSByO1xuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1tpKzFdID0gZztcbiAgICAgICAgICAgICAgICBkc3RQaXhlbHNbaSsyXSA9IGI7XG4gICAgICAgICAgICAgICAgZHN0UGl4ZWxzW2krM10gPSBhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgLy9LaW5ldGljLkZpbHRlcnMuVG9Qb2xhciA9IEtpbmV0aWMuVXRpbC5fRmlsdGVyV3JhcERvdWJsZUJ1ZmZlcihUb1BvbGFyKTtcbiAgICAvL0tpbmV0aWMuRmlsdGVycy5Gcm9tUG9sYXIgPSBLaW5ldGljLlV0aWwuX0ZpbHRlcldyYXBEb3VibGVCdWZmZXIoRnJvbVBvbGFyKTtcblxuICAgIC8vIGNyZWF0ZSBhIHRlbXBvcmFyeSBjYW52YXMgZm9yIHdvcmtpbmcgLSBzaGFyZWQgYmV0d2VlbiBtdWx0aXBsZSBjYWxsc1xuICAgIHZhciB0ZW1wQ2FudmFzID0gS2luZXRpYy5VdGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcblxuICAgIC8qXG4gICAgICogS2FsZWlkb3Njb3BlIEZpbHRlci4gXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG5hbWUgS2FsZWlkb3Njb3BlXG4gICAgICogQGF1dGhvciBpcHBvNjE1XG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRmlsdGVyc1xuICAgICAqIEBleGFtcGxlXG4gICAgICogbm9kZS5jYWNoZSgpO1xuICAgICAqIG5vZGUuZmlsdGVycyhbS2luZXRpYy5GaWx0ZXJzLkthbGVpZG9zY29wZV0pO1xuICAgICAqIG5vZGUua2FsZWlkb3Njb3BlUG93ZXIoMyk7XG4gICAgICogbm9kZS5rYWxlaWRvc2NvcGVBbmdsZSg0NSk7XG4gICAgICovXG4gICAgS2luZXRpYy5GaWx0ZXJzLkthbGVpZG9zY29wZSA9IGZ1bmN0aW9uKGltYWdlRGF0YSl7XG4gICAgICAgIHZhciB4U2l6ZSA9IGltYWdlRGF0YS53aWR0aCxcbiAgICAgICAgICAgIHlTaXplID0gaW1hZ2VEYXRhLmhlaWdodDtcblxuICAgICAgICB2YXIgeCx5LHhvZmYsaSwgcixnLGIsYSwgc3JjUG9zLCBkc3RQb3M7XG4gICAgICAgIHZhciBwb3dlciA9IE1hdGgucm91bmQoIHRoaXMua2FsZWlkb3Njb3BlUG93ZXIoKSApO1xuICAgICAgICB2YXIgYW5nbGUgPSBNYXRoLnJvdW5kKCB0aGlzLmthbGVpZG9zY29wZUFuZ2xlKCkgKTtcbiAgICAgICAgdmFyIG9mZnNldCA9IE1hdGguZmxvb3IoeFNpemUqKGFuZ2xlJTM2MCkvMzYwKTtcblxuICAgICAgICBpZiggcG93ZXIgPCAxICl7cmV0dXJuO31cblxuICAgICAgICAvLyBXb3JrIHdpdGggb3VyIHNoYXJlZCBidWZmZXIgY2FudmFzXG4gICAgICAgIHRlbXBDYW52YXMud2lkdGggPSB4U2l6ZTtcbiAgICAgICAgdGVtcENhbnZhcy5oZWlnaHQgPSB5U2l6ZTtcbiAgICAgICAgdmFyIHNjcmF0Y2hEYXRhID0gdGVtcENhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmdldEltYWdlRGF0YSgwLDAseFNpemUseVNpemUpO1xuXG4gICAgICAgIC8vIENvbnZlcnQgdGhoZSBvcmlnaW5hbCB0byBwb2xhciBjb29yZGluYXRlc1xuICAgICAgICBUb1BvbGFyKCBpbWFnZURhdGEsIHNjcmF0Y2hEYXRhLCB7XG4gICAgICAgICAgICBwb2xhckNlbnRlclg6eFNpemUvMixcbiAgICAgICAgICAgIHBvbGFyQ2VudGVyWTp5U2l6ZS8yXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIERldGVybWluZSBob3cgYmlnIGVhY2ggc2VjdGlvbiB3aWxsIGJlLCBpZiBpdCdzIHRvbyBzbWFsbCBcbiAgICAgICAgLy8gbWFrZSBpdCBiaWdnZXJcbiAgICAgICAgdmFyIG1pblNlY3Rpb25TaXplID0geFNpemUgLyBNYXRoLnBvdygyLHBvd2VyKTtcbiAgICAgICAgd2hpbGUoIG1pblNlY3Rpb25TaXplIDw9IDgpe1xuICAgICAgICAgICAgbWluU2VjdGlvblNpemUgPSBtaW5TZWN0aW9uU2l6ZSoyO1xuICAgICAgICAgICAgcG93ZXIgLT0gMTtcbiAgICAgICAgfVxuICAgICAgICBtaW5TZWN0aW9uU2l6ZSA9IE1hdGguY2VpbChtaW5TZWN0aW9uU2l6ZSk7XG4gICAgICAgIHZhciBzZWN0aW9uU2l6ZSA9IG1pblNlY3Rpb25TaXplO1xuXG4gICAgICAgIC8vIENvcHkgdGhlIG9mZnNldCByZWdpb24gdG8gMFxuICAgICAgICAvLyBEZXBlbmRpbmcgb24gdGhlIHNpemUgb2YgZmlsdGVyIGFuZCBsb2NhdGlvbiBvZiB0aGUgb2Zmc2V0IHdlIG1heSBuZWVkXG4gICAgICAgIC8vIHRvIGNvcHkgdGhlIHNlY3Rpb24gYmFja3dhcmRzIHRvIHByZXZlbnQgaXQgZnJvbSByZXdyaXRpbmcgaXRzZWxmXG4gICAgICAgIHZhciB4U3RhcnQgPSAwLFxuICAgICAgICAgIHhFbmQgPSBzZWN0aW9uU2l6ZSxcbiAgICAgICAgICB4RGVsdGEgPSAxO1xuICAgICAgICBpZiggb2Zmc2V0K21pblNlY3Rpb25TaXplID4geFNpemUgKXtcbiAgICAgICAgICAgIHhTdGFydCA9IHNlY3Rpb25TaXplO1xuICAgICAgICAgICAgeEVuZCA9IDA7XG4gICAgICAgICAgICB4RGVsdGEgPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoIHk9MDsgeTx5U2l6ZTsgeSs9MSApe1xuICAgICAgICAgICAgZm9yKCB4PXhTdGFydDsgeCAhPT0geEVuZDsgeCs9eERlbHRhICl7XG4gICAgICAgICAgICAgICAgeG9mZiA9IE1hdGgucm91bmQoeCtvZmZzZXQpJXhTaXplO1xuICAgICAgICAgICAgICAgIHNyY1BvcyA9ICh4U2l6ZSp5K3hvZmYpKjQ7XG4gICAgICAgICAgICAgICAgciA9IHNjcmF0Y2hEYXRhLmRhdGFbc3JjUG9zKzBdO1xuICAgICAgICAgICAgICAgIGcgPSBzY3JhdGNoRGF0YS5kYXRhW3NyY1BvcysxXTtcbiAgICAgICAgICAgICAgICBiID0gc2NyYXRjaERhdGEuZGF0YVtzcmNQb3MrMl07XG4gICAgICAgICAgICAgICAgYSA9IHNjcmF0Y2hEYXRhLmRhdGFbc3JjUG9zKzNdO1xuICAgICAgICAgICAgICAgIGRzdFBvcyA9ICh4U2l6ZSp5K3gpKjQ7XG4gICAgICAgICAgICAgICAgc2NyYXRjaERhdGEuZGF0YVtkc3RQb3MrMF0gPSByO1xuICAgICAgICAgICAgICAgIHNjcmF0Y2hEYXRhLmRhdGFbZHN0UG9zKzFdID0gZztcbiAgICAgICAgICAgICAgICBzY3JhdGNoRGF0YS5kYXRhW2RzdFBvcysyXSA9IGI7XG4gICAgICAgICAgICAgICAgc2NyYXRjaERhdGEuZGF0YVtkc3RQb3MrM10gPSBhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGVyZm9ybSB0aGUgYWN0dWFsIGVmZmVjdFxuICAgICAgICBmb3IoIHk9MDsgeTx5U2l6ZTsgeSs9MSApe1xuICAgICAgICAgICAgc2VjdGlvblNpemUgPSBNYXRoLmZsb29yKCBtaW5TZWN0aW9uU2l6ZSApO1xuICAgICAgICAgICAgZm9yKCBpPTA7IGk8cG93ZXI7IGkrPTEgKXtcbiAgICAgICAgICAgICAgICBmb3IoIHg9MDsgeDxzZWN0aW9uU2l6ZSsxOyB4Kz0xICl7XG4gICAgICAgICAgICAgICAgICAgIHNyY1BvcyA9ICh4U2l6ZSp5K3gpKjQ7XG4gICAgICAgICAgICAgICAgICAgIHIgPSBzY3JhdGNoRGF0YS5kYXRhW3NyY1BvcyswXTtcbiAgICAgICAgICAgICAgICAgICAgZyA9IHNjcmF0Y2hEYXRhLmRhdGFbc3JjUG9zKzFdO1xuICAgICAgICAgICAgICAgICAgICBiID0gc2NyYXRjaERhdGEuZGF0YVtzcmNQb3MrMl07XG4gICAgICAgICAgICAgICAgICAgIGEgPSBzY3JhdGNoRGF0YS5kYXRhW3NyY1BvcyszXTtcbiAgICAgICAgICAgICAgICAgICAgZHN0UG9zID0gKHhTaXplKnkrc2VjdGlvblNpemUqMi14LTEpKjQ7XG4gICAgICAgICAgICAgICAgICAgIHNjcmF0Y2hEYXRhLmRhdGFbZHN0UG9zKzBdID0gcjtcbiAgICAgICAgICAgICAgICAgICAgc2NyYXRjaERhdGEuZGF0YVtkc3RQb3MrMV0gPSBnO1xuICAgICAgICAgICAgICAgICAgICBzY3JhdGNoRGF0YS5kYXRhW2RzdFBvcysyXSA9IGI7XG4gICAgICAgICAgICAgICAgICAgIHNjcmF0Y2hEYXRhLmRhdGFbZHN0UG9zKzNdID0gYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VjdGlvblNpemUgKj0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbnZlcnQgYmFjayBmcm9tIHBvbGFyIGNvb3JkaW5hdGVzXG4gICAgICAgIEZyb21Qb2xhcihzY3JhdGNoRGF0YSxpbWFnZURhdGEse3BvbGFyUm90YXRpb246MH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAqIGdldC9zZXQga2FsZWlkb3Njb3BlIHBvd2VyLiBVc2Ugd2l0aCB7QGxpbmsgS2luZXRpYy5GaWx0ZXJzLkthbGVpZG9zY29wZX0gZmlsdGVyLlxuICAgICogQG5hbWUga2FsZWlkb3Njb3BlUG93ZXJcbiAgICAqIEBtZXRob2RcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgKiBAcGFyYW0ge0ludGVnZXJ9IHBvd2VyIG9mIGthbGVpZG9zY29wZVxuICAgICogQHJldHVybnMge0ludGVnZXJ9XG4gICAgKi9cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2thbGVpZG9zY29wZVBvd2VyJywgMiwgbnVsbCwgS2luZXRpYy5GYWN0b3J5LmFmdGVyU2V0RmlsdGVyKTtcblxuICAgIC8qKlxuICAgICogZ2V0L3NldCBrYWxlaWRvc2NvcGUgYW5nbGUuIFVzZSB3aXRoIHtAbGluayBLaW5ldGljLkZpbHRlcnMuS2FsZWlkb3Njb3BlfSBmaWx0ZXIuXG4gICAgKiBAbmFtZSBrYWxlaWRvc2NvcGVBbmdsZVxuICAgICogQG1ldGhvZFxuICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAqIEBwYXJhbSB7SW50ZWdlcn0gZGVncmVlc1xuICAgICogQHJldHVybnMge0ludGVnZXJ9XG4gICAgKi9cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2thbGVpZG9zY29wZUFuZ2xlJywgMCwgbnVsbCwgS2luZXRpYy5GYWN0b3J5LmFmdGVyU2V0RmlsdGVyKTtcblxufSkoKTtcbjsoZnVuY3Rpb24oKSB7XG4gICAgdmFyIEJBVENIX0RSQVdfU1RPUF9USU1FX0RJRkYgPSA1MDA7XG5cbiAgICB2YXIgbm93ID0oZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChLaW5ldGljLnJvb3QucGVyZm9ybWFuY2UgJiYgS2luZXRpYy5yb290LnBlcmZvcm1hbmNlLm5vdykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBLaW5ldGljLnJvb3QucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9KSgpO1xuXG4gICAgdmFyIFJBRiA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEtpbmV0aWMucm9vdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICAgICAgICAgIHx8IEtpbmV0aWMucm9vdC53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICAgICAgICAgIHx8IEtpbmV0aWMucm9vdC5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICAgICAgICAgIHx8IEtpbmV0aWMucm9vdC5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICAgICAgICB8fCBLaW5ldGljLnJvb3QubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICAgICAgICAgIHx8IEZSQUY7XG4gICAgfSkoKTtcblxuICAgIGZ1bmN0aW9uIEZSQUYoY2FsbGJhY2spIHtcbiAgICAgICAgc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXF1ZXN0QW5pbUZyYW1lKCkge1xuICAgICAgICByZXR1cm4gUkFGLmFwcGx5KEtpbmV0aWMucm9vdCwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQW5pbWF0aW9uIGNvbnN0cnVjdG9yLiAgQSBzdGFnZSBpcyB1c2VkIHRvIGNvbnRhaW4gbXVsdGlwbGUgbGF5ZXJzIGFuZCBoYW5kbGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgZnVuY3Rpb24gZXhlY3V0ZWQgb24gZWFjaCBhbmltYXRpb24gZnJhbWUuICBUaGUgZnVuY3Rpb24gaXMgcGFzc2VkIGEgZnJhbWUgb2JqZWN0LCB3aGljaCBjb250YWluc1xuICAgICAqICB0aW1lRGlmZiwgbGFzdFRpbWUsIHRpbWUsIGFuZCBmcmFtZVJhdGUgcHJvcGVydGllcy4gIFRoZSB0aW1lRGlmZiBwcm9wZXJ0eSBpcyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgcGFzc2VkXG4gICAgICogIHNpbmNlIHRoZSBsYXN0IGFuaW1hdGlvbiBmcmFtZS4gIFRoZSBsYXN0VGltZSBwcm9wZXJ0eSBpcyB0aW1lIGluIG1pbGxpc2Vjb25kcyB0aGF0IGVsYXBzZWQgZnJvbSB0aGUgbW9tZW50IHRoZSBhbmltYXRpb24gc3RhcnRlZFxuICAgICAqICB0byB0aGUgbGFzdCBhbmltYXRpb24gZnJhbWUuICBUaGUgdGltZSBwcm9wZXJ0eSBpcyB0aGUgdGltZSBpbiBtaWxsaXNlY29uZHMgdGhhdCBlbGxhcHNlZCBmcm9tIHRoZSBtb21lbnQgdGhlIGFuaW1hdGlvbiBzdGFydGVkXG4gICAgICogIHRvIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBmcmFtZS4gIFRoZSBmcmFtZVJhdGUgcHJvcGVydHkgaXMgdGhlIGN1cnJlbnQgZnJhbWUgcmF0ZSBpbiBmcmFtZXMgLyBzZWNvbmQuIFJldHVybiBmYWxzZSBmcm9tIGZ1bmN0aW9uLFxuICAgICAqICBpZiB5b3UgZG9uJ3QgbmVlZCB0byByZWRyYXcgbGF5ZXIvbGF5ZXJzIG9uIHNvbWUgZnJhbWVzLlxuICAgICAqIEBwYXJhbSB7S2luZXRpYy5MYXllcnxBcnJheX0gW2xheWVyc10gbGF5ZXIocykgdG8gYmUgcmVkcmF3biBvbiBlYWNoIGFuaW1hdGlvbiBmcmFtZS4gQ2FuIGJlIGEgbGF5ZXIsIGFuIGFycmF5IG9mIGxheWVycywgb3IgbnVsbC5cbiAgICAgKiAgTm90IHNwZWNpZnlpbmcgYSBub2RlIHdpbGwgcmVzdWx0IGluIG5vIHJlZHJhdy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIG1vdmUgYSBub2RlIHRvIHRoZSByaWdodCBhdCA1MCBwaXhlbHMgLyBzZWNvbmRcbiAgICAgKiB2YXIgdmVsb2NpdHkgPSA1MDtcbiAgICAgKlxuICAgICAqIHZhciBhbmltID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKGZyYW1lKSB7XG4gICAgICogICB2YXIgZGlzdCA9IHZlbG9jaXR5ICogKGZyYW1lLnRpbWVEaWZmIC8gMTAwMCk7XG4gICAgICogICBub2RlLm1vdmUoZGlzdCwgMCk7XG4gICAgICogfSwgbGF5ZXIpO1xuICAgICAqXG4gICAgICogYW5pbS5zdGFydCgpO1xuICAgICAqL1xuICAgIEtpbmV0aWMuQW5pbWF0aW9uID0gZnVuY3Rpb24oZnVuYywgbGF5ZXJzKSB7XG4gICAgICAgIHZhciBBbmltID0gS2luZXRpYy5BbmltYXRpb247XG4gICAgICAgIHRoaXMuZnVuYyA9IGZ1bmM7XG4gICAgICAgIHRoaXMuc2V0TGF5ZXJzKGxheWVycyk7XG4gICAgICAgIHRoaXMuaWQgPSBBbmltLmFuaW1JZENvdW50ZXIrKztcbiAgICAgICAgdGhpcy5mcmFtZSA9IHtcbiAgICAgICAgICAgIHRpbWU6IDAsXG4gICAgICAgICAgICB0aW1lRGlmZjogMCxcbiAgICAgICAgICAgIGxhc3RUaW1lOiBub3coKVxuICAgICAgICB9O1xuICAgIH07XG4gICAgLypcbiAgICAgKiBBbmltYXRpb24gbWV0aG9kc1xuICAgICAqL1xuICAgIEtpbmV0aWMuQW5pbWF0aW9uLnByb3RvdHlwZSA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNldCBsYXllcnMgdG8gYmUgcmVkcmF3biBvbiBlYWNoIGFuaW1hdGlvbiBmcmFtZVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkFuaW1hdGlvbi5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtLaW5ldGljLkxheWVyfEFycmF5fSBbbGF5ZXJzXSBsYXllcihzKSB0byBiZSByZWRyYXduLiZuYnNwOyBDYW4gYmUgYSBsYXllciwgYW4gYXJyYXkgb2YgbGF5ZXJzLCBvciBudWxsLiAgTm90IHNwZWNpZnlpbmcgYSBub2RlIHdpbGwgcmVzdWx0IGluIG5vIHJlZHJhdy5cbiAgICAgICAgICovXG4gICAgICAgIHNldExheWVyczogZnVuY3Rpb24obGF5ZXJzKSB7XG4gICAgICAgICAgICB2YXIgbGF5cyA9IFtdO1xuICAgICAgICAgICAgLy8gaWYgcGFzc2luZyBpbiBubyBsYXllcnNcbiAgICAgICAgICAgIGlmICghbGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgbGF5cyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgcGFzc2luZyBpbiBhbiBhcnJheSBvZiBMYXllcnNcbiAgICAgICAgICAgIC8vIE5PVEU6IGxheWVycyBjb3VsZCBiZSBhbiBhcnJheSBvciBLaW5ldGljLkNvbGxlY3Rpb24uICBmb3Igc2ltcGxpY2l0eSwgSSdtIGp1c3QgaW5zcGVjdGluZ1xuICAgICAgICAgICAgLy8gdGhlIGxlbmd0aCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgYm90aCBjYXNlc1xuICAgICAgICAgICAgZWxzZSBpZiAobGF5ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBsYXlzID0gbGF5ZXJzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgcGFzc2luZyBpbiBhIExheWVyXG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsYXlzID0gW2xheWVyc107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMubGF5ZXJzID0gbGF5cztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCBsYXllcnNcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5BbmltYXRpb24ucHJvdG90eXBlXG4gICAgICAgICAqL1xuICAgICAgICBnZXRMYXllcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGF5ZXJzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogYWRkIGxheWVyLiAgUmV0dXJucyB0cnVlIGlmIHRoZSBsYXllciB3YXMgYWRkZWQsIGFuZCBmYWxzZSBpZiBpdCB3YXMgbm90XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQW5pbWF0aW9uLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge0tpbmV0aWMuTGF5ZXJ9IGxheWVyXG4gICAgICAgICAqL1xuICAgICAgICBhZGRMYXllcjogZnVuY3Rpb24obGF5ZXIpIHtcbiAgICAgICAgICAgIHZhciBsYXllcnMgPSB0aGlzLmxheWVycyxcbiAgICAgICAgICAgICAgICBsZW4sIG47XG5cbiAgICAgICAgICAgIGlmIChsYXllcnMpIHtcbiAgICAgICAgICAgICAgICBsZW4gPSBsYXllcnMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgLy8gZG9uJ3QgYWRkIHRoZSBsYXllciBpZiBpdCBhbHJlYWR5IGV4aXN0c1xuICAgICAgICAgICAgICAgIGZvciAobiA9IDA7IG4gPCBsZW47IG4rKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJzW25dLl9pZCA9PT0gbGF5ZXIuX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxheWVycyA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmxheWVycy5wdXNoKGxheWVyKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZGV0ZXJtaW5lIGlmIGFuaW1hdGlvbiBpcyBydW5uaW5nIG9yIG5vdC4gIHJldHVybnMgdHJ1ZSBvciBmYWxzZVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkFuaW1hdGlvbi5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIGlzUnVubmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IEtpbmV0aWMuQW5pbWF0aW9uLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbnMgPSBhLmFuaW1hdGlvbnMsXG4gICAgICAgICAgICAgICAgbGVuID0gYW5pbWF0aW9ucy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgbjtcblxuICAgICAgICAgICAgZm9yKG4gPSAwOyBuIDwgbGVuOyBuKyspIHtcbiAgICAgICAgICAgICAgICBpZihhbmltYXRpb25zW25dLmlkID09PSB0aGlzLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHN0YXJ0IGFuaW1hdGlvblxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkFuaW1hdGlvbi5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBBbmltID0gS2luZXRpYy5BbmltYXRpb247XG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgIHRoaXMuZnJhbWUudGltZURpZmYgPSAwO1xuICAgICAgICAgICAgdGhpcy5mcmFtZS5sYXN0VGltZSA9IG5vdygpO1xuICAgICAgICAgICAgQW5pbS5fYWRkQW5pbWF0aW9uKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogc3RvcCBhbmltYXRpb25cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5BbmltYXRpb24ucHJvdG90eXBlXG4gICAgICAgICAqL1xuICAgICAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuQW5pbWF0aW9uLl9yZW1vdmVBbmltYXRpb24odGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIF91cGRhdGVGcmFtZU9iamVjdDogZnVuY3Rpb24odGltZSkge1xuICAgICAgICAgICAgdGhpcy5mcmFtZS50aW1lRGlmZiA9IHRpbWUgLSB0aGlzLmZyYW1lLmxhc3RUaW1lO1xuICAgICAgICAgICAgdGhpcy5mcmFtZS5sYXN0VGltZSA9IHRpbWU7XG4gICAgICAgICAgICB0aGlzLmZyYW1lLnRpbWUgKz0gdGhpcy5mcmFtZS50aW1lRGlmZjtcbiAgICAgICAgICAgIHRoaXMuZnJhbWUuZnJhbWVSYXRlID0gMTAwMCAvIHRoaXMuZnJhbWUudGltZURpZmY7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEtpbmV0aWMuQW5pbWF0aW9uLmFuaW1hdGlvbnMgPSBbXTtcbiAgICBLaW5ldGljLkFuaW1hdGlvbi5hbmltSWRDb3VudGVyID0gMDtcbiAgICBLaW5ldGljLkFuaW1hdGlvbi5hbmltUnVubmluZyA9IGZhbHNlO1xuXG4gICAgS2luZXRpYy5BbmltYXRpb24uX2FkZEFuaW1hdGlvbiA9IGZ1bmN0aW9uKGFuaW0pIHtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLnB1c2goYW5pbSk7XG4gICAgICAgIHRoaXMuX2hhbmRsZUFuaW1hdGlvbigpO1xuICAgIH07XG4gICAgS2luZXRpYy5BbmltYXRpb24uX3JlbW92ZUFuaW1hdGlvbiA9IGZ1bmN0aW9uKGFuaW0pIHtcbiAgICAgICAgdmFyIGlkID0gYW5pbS5pZCxcbiAgICAgICAgICAgIGFuaW1hdGlvbnMgPSB0aGlzLmFuaW1hdGlvbnMsXG4gICAgICAgICAgICBsZW4gPSBhbmltYXRpb25zLmxlbmd0aCxcbiAgICAgICAgICAgIG47XG5cbiAgICAgICAgZm9yKG4gPSAwOyBuIDwgbGVuOyBuKyspIHtcbiAgICAgICAgICAgIGlmKGFuaW1hdGlvbnNbbl0uaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zLnNwbGljZShuLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBLaW5ldGljLkFuaW1hdGlvbi5fcnVuRnJhbWVzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBsYXllckhhc2ggPSB7fSxcbiAgICAgICAgICAgIGFuaW1hdGlvbnMgPSB0aGlzLmFuaW1hdGlvbnMsXG4gICAgICAgICAgICBhbmltLCBsYXllcnMsIGZ1bmMsIG4sIGksIGxheWVyc0xlbiwgbGF5ZXIsIGtleSwgbmVlZFJlZHJhdztcbiAgICAgICAgLypcbiAgICAgICAgICogbG9vcCB0aHJvdWdoIGFsbCBhbmltYXRpb25zIGFuZCBleGVjdXRlIGFuaW1hdGlvblxuICAgICAgICAgKiAgZnVuY3Rpb24uICBpZiB0aGUgYW5pbWF0aW9uIG9iamVjdCBoYXMgc3BlY2lmaWVkIG5vZGUsXG4gICAgICAgICAqICB3ZSBjYW4gYWRkIHRoZSBub2RlIHRvIHRoZSBub2RlcyBoYXNoIHRvIGVsaW1pbmF0ZVxuICAgICAgICAgKiAgZHJhd2luZyB0aGUgc2FtZSBub2RlIG11bHRpcGxlIHRpbWVzLiAgVGhlIG5vZGUgcHJvcGVydHlcbiAgICAgICAgICogIGNhbiBiZSB0aGUgc3RhZ2UgaXRzZWxmIG9yIGEgbGF5ZXJcbiAgICAgICAgICovXG4gICAgICAgIC8qXG4gICAgICAgICAqIFdBUk5JTkc6IGRvbid0IGNhY2hlIGFuaW1hdGlvbnMubGVuZ3RoIGJlY2F1c2UgaXQgY291bGQgY2hhbmdlIHdoaWxlXG4gICAgICAgICAqIHRoZSBmb3IgbG9vcCBpcyBydW5uaW5nLCBjYXVzaW5nIGEgSlMgZXJyb3JcbiAgICAgICAgICovXG5cbiAgICAgICAgZm9yKG4gPSAwOyBuIDwgYW5pbWF0aW9ucy5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgYW5pbSA9IGFuaW1hdGlvbnNbbl07XG4gICAgICAgICAgICBsYXllcnMgPSBhbmltLmxheWVycztcbiAgICAgICAgICAgIGZ1bmMgPSBhbmltLmZ1bmM7XG5cblxuICAgICAgICAgICAgYW5pbS5fdXBkYXRlRnJhbWVPYmplY3Qobm93KCkpO1xuICAgICAgICAgICAgbGF5ZXJzTGVuID0gbGF5ZXJzLmxlbmd0aDtcblxuICAgICAgICAgICAgLy8gaWYgYW5pbWF0aW9uIG9iamVjdCBoYXMgYSBmdW5jdGlvbiwgZXhlY3V0ZSBpdFxuICAgICAgICAgICAgaWYgKGZ1bmMpIHtcbiAgICAgICAgICAgICAgICAvLyBhbGxvdyBhbmltIGJ5cGFzc2luZyBkcmF3aW5nXG4gICAgICAgICAgICAgICAgbmVlZFJlZHJhdyA9IChmdW5jLmNhbGwoYW5pbSwgYW5pbS5mcmFtZSkgIT09IGZhbHNlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmVlZFJlZHJhdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmVlZFJlZHJhdykge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsYXllcnNMZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsYXllciA9IGxheWVyc1tpXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuX2lkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVySGFzaFtsYXllci5faWRdID0gbGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGtleSBpbiBsYXllckhhc2gpIHtcbiAgICAgICAgICAgIGxheWVySGFzaFtrZXldLmRyYXcoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgS2luZXRpYy5BbmltYXRpb24uX2FuaW1hdGlvbkxvb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIEFuaW0gPSBLaW5ldGljLkFuaW1hdGlvbjtcblxuICAgICAgICBpZihBbmltLmFuaW1hdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbUZyYW1lKEFuaW0uX2FuaW1hdGlvbkxvb3ApO1xuICAgICAgICAgICAgQW5pbS5fcnVuRnJhbWVzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBBbmltLmFuaW1SdW5uaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEtpbmV0aWMuQW5pbWF0aW9uLl9oYW5kbGVBbmltYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICBpZighdGhpcy5hbmltUnVubmluZykge1xuICAgICAgICAgICAgdGhpcy5hbmltUnVubmluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGF0Ll9hbmltYXRpb25Mb29wKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIG1vdmVUbyA9IEtpbmV0aWMuTm9kZS5wcm90b3R5cGUubW92ZVRvO1xuICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUubW92ZVRvID0gZnVuY3Rpb24oY29udGFpbmVyKSB7XG4gICAgICAgIG1vdmVUby5jYWxsKHRoaXMsIGNvbnRhaW5lcik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIGJhdGNoIGRyYXdcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQmFzZS5wcm90b3R5cGVcbiAgICAgKi9cbiAgICBLaW5ldGljLkJhc2VMYXllci5wcm90b3R5cGUuYmF0Y2hEcmF3ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgIEFuaW0gPSBLaW5ldGljLkFuaW1hdGlvbjtcblxuICAgICAgICBpZiAoIXRoaXMuYmF0Y2hBbmltKSB7XG4gICAgICAgICAgICB0aGlzLmJhdGNoQW5pbSA9IG5ldyBBbmltKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGF0Lmxhc3RCYXRjaERyYXdUaW1lICYmIG5vdygpIC0gdGhhdC5sYXN0QmF0Y2hEcmF3VGltZSA+IEJBVENIX0RSQVdfU1RPUF9USU1FX0RJRkYpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5iYXRjaEFuaW0uc3RvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sYXN0QmF0Y2hEcmF3VGltZSA9IG5vdygpO1xuXG4gICAgICAgIGlmICghdGhpcy5iYXRjaEFuaW0uaXNSdW5uaW5nKCkpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICAgICAgdGhpcy5iYXRjaEFuaW0uc3RhcnQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBiYXRjaCBkcmF3XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YWdlLnByb3RvdHlwZVxuICAgICAqL1xuICAgIEtpbmV0aWMuU3RhZ2UucHJvdG90eXBlLmJhdGNoRHJhdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmdldENoaWxkcmVuKCkuZWFjaChmdW5jdGlvbihsYXllcikge1xuICAgICAgICAgICAgbGF5ZXIuYmF0Y2hEcmF3KCk7XG4gICAgICAgIH0pO1xuICAgIH07XG59KSh0aGlzKTtcbjsoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJsYWNrbGlzdCA9IHtcbiAgICAgICAgbm9kZTogMSxcbiAgICAgICAgZHVyYXRpb246IDEsXG4gICAgICAgIGVhc2luZzogMSxcbiAgICAgICAgb25GaW5pc2g6IDEsXG4gICAgICAgIHlveW86IDFcbiAgICB9LFxuXG4gICAgUEFVU0VEID0gMSxcbiAgICBQTEFZSU5HID0gMixcbiAgICBSRVZFUlNJTkcgPSAzLFxuXG4gICAgaWRDb3VudGVyID0gMDtcblxuICAgIC8qKlxuICAgICAqIFR3ZWVuIGNvbnN0cnVjdG9yLiAgVHdlZW5zIGVuYWJsZSB5b3UgdG8gYW5pbWF0ZSBhIG5vZGUgYmV0d2VlbiB0aGUgY3VycmVudCBzdGF0ZSBhbmQgYSBuZXcgc3RhdGUuXG4gICAgICogIFlvdSBjYW4gcGxheSwgcGF1c2UsIHJldmVyc2UsIHNlZWssIHJlc2V0LCBhbmQgZmluaXNoIHR3ZWVucy4gIEJ5IGRlZmF1bHQsIHR3ZWVucyBhcmUgYW5pbWF0ZWQgdXNpbmdcbiAgICAgKiAgYSBsaW5lYXIgZWFzaW5nLiAgRm9yIG1vcmUgdHdlZW5pbmcgb3B0aW9ucywgY2hlY2sgb3V0IHtAbGluayBLaW5ldGljLkVhc2luZ3N9XG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGluc3RhbnRpYXRlIG5ldyB0d2VlbiB3aGljaCBmdWxseSByb3RhdGVzIGEgbm9kZSBpbiAxIHNlY29uZFxuICAgICAqIHZhciB0d2VlbiA9IG5ldyBLaW5ldGljLlR3ZWVuKHtcbiAgICAgKiAgIG5vZGU6IG5vZGUsXG4gICAgICogICByb3RhdGlvbkRlZzogMzYwLFxuICAgICAqICAgZHVyYXRpb246IDEsXG4gICAgICogICBlYXNpbmc6IEtpbmV0aWMuRWFzaW5ncy5FYXNlSW5PdXRcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vIHBsYXkgdHdlZW5cbiAgICAgKiB0d2Vlbi5wbGF5KCk7XG4gICAgICpcbiAgICAgKiAvLyBwYXVzZSB0d2VlblxuICAgICAqIHR3ZWVuLnBhdXNlKCk7XG4gICAgICovXG4gICAgS2luZXRpYy5Ud2VlbiA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICBub2RlID0gY29uZmlnLm5vZGUsXG4gICAgICAgICAgICBub2RlSWQgPSBub2RlLl9pZCxcbiAgICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICAgICAgZWFzaW5nID0gY29uZmlnLmVhc2luZyB8fCBLaW5ldGljLkVhc2luZ3MuTGluZWFyLFxuICAgICAgICAgICAgeW95byA9ICEhY29uZmlnLnlveW8sXG4gICAgICAgICAgICBrZXk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcuZHVyYXRpb24gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLmR1cmF0aW9uID09PSAwKSB7ICAvLyB6ZXJvIGlzIGJhZCB2YWx1ZSBmb3IgZHVyYXRpb25cbiAgICAgICAgICAgIGR1cmF0aW9uID0gMC4wMDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IGNvbmZpZy5kdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgICAgICB0aGlzLl9pZCA9IGlkQ291bnRlcisrO1xuXG4gICAgICAgIHRoaXMuYW5pbSA9IG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoYXQudHdlZW4ub25FbnRlckZyYW1lKCk7XG4gICAgICAgIH0sIG5vZGUuZ2V0TGF5ZXIoKSB8fCAoKG5vZGUgaW5zdGFuY2VvZiBLaW5ldGljLlN0YWdlKSA/IG5vZGUuZ2V0TGF5ZXJzKCkgOiBudWxsKSk7XG5cbiAgICAgICAgdGhpcy50d2VlbiA9IG5ldyBUd2VlbihrZXksIGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgIHRoYXQuX3R3ZWVuRnVuYyhpKTtcbiAgICAgICAgfSwgZWFzaW5nLCAwLCAxLCBkdXJhdGlvbiAqIDEwMDAsIHlveW8pO1xuXG4gICAgICAgIHRoaXMuX2FkZExpc3RlbmVycygpO1xuXG4gICAgICAgIC8vIGluaXQgYXR0cnMgbWFwXG4gICAgICAgIGlmICghS2luZXRpYy5Ud2Vlbi5hdHRyc1tub2RlSWRdKSB7XG4gICAgICAgICAgICBLaW5ldGljLlR3ZWVuLmF0dHJzW25vZGVJZF0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUtpbmV0aWMuVHdlZW4uYXR0cnNbbm9kZUlkXVt0aGlzLl9pZF0pIHtcbiAgICAgICAgICAgIEtpbmV0aWMuVHdlZW4uYXR0cnNbbm9kZUlkXVt0aGlzLl9pZF0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbml0IHR3ZWVucyBtYXBcbiAgICAgICAgaWYgKCFLaW5ldGljLlR3ZWVuLnR3ZWVuc1tub2RlSWRdKSB7XG4gICAgICAgICAgICBLaW5ldGljLlR3ZWVuLnR3ZWVuc1tub2RlSWRdID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGtleSBpbiBjb25maWcpIHtcbiAgICAgICAgICAgIGlmIChibGFja2xpc3Rba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkQXR0cihrZXksIGNvbmZpZ1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVzZXQoKTtcblxuICAgICAgICAvLyBjYWxsYmFja3NcbiAgICAgICAgdGhpcy5vbkZpbmlzaCA9IGNvbmZpZy5vbkZpbmlzaDtcbiAgICAgICAgdGhpcy5vblJlc2V0ID0gY29uZmlnLm9uUmVzZXQ7XG4gICAgfTtcblxuICAgIC8vIHN0YXJ0L2RpZmYgb2JqZWN0ID0gYXR0cnMubm9kZUlkLnR3ZWVuSWQuYXR0clxuICAgIEtpbmV0aWMuVHdlZW4uYXR0cnMgPSB7fTtcbiAgICAvLyB0d2VlbklkID0gdHdlZW5zLm5vZGVJZC5hdHRyXG4gICAgS2luZXRpYy5Ud2Vlbi50d2VlbnMgPSB7fTtcblxuICAgIEtpbmV0aWMuVHdlZW4ucHJvdG90eXBlID0ge1xuICAgICAgICBfYWRkQXR0cjogZnVuY3Rpb24oa2V5LCBlbmQpIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlLFxuICAgICAgICAgICAgICAgIG5vZGVJZCA9IG5vZGUuX2lkLFxuICAgICAgICAgICAgICAgIHN0YXJ0LCBkaWZmLCB0d2VlbklkLCBuLCBsZW47XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSBjb25mbGljdCBmcm9tIHR3ZWVuIG1hcCBpZiBpdCBleGlzdHNcbiAgICAgICAgICAgIHR3ZWVuSWQgPSBLaW5ldGljLlR3ZWVuLnR3ZWVuc1tub2RlSWRdW2tleV07XG5cbiAgICAgICAgICAgIGlmICh0d2VlbklkKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIEtpbmV0aWMuVHdlZW4uYXR0cnNbbm9kZUlkXVt0d2VlbklkXVtrZXldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBhZGQgdG8gdHdlZW4gbWFwXG4gICAgICAgICAgICBzdGFydCA9IG5vZGUuZ2V0QXR0cihrZXkpO1xuXG4gICAgICAgICAgICBpZiAoS2luZXRpYy5VdGlsLl9pc0FycmF5KGVuZCkpIHtcbiAgICAgICAgICAgICAgICBkaWZmID0gW107XG4gICAgICAgICAgICAgICAgbGVuID0gZW5kLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKG49MDsgbjxsZW47IG4rKykge1xuICAgICAgICAgICAgICAgICAgICBkaWZmLnB1c2goZW5kW25dIC0gc3RhcnRbbl0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGlmZiA9IGVuZCAtIHN0YXJ0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBLaW5ldGljLlR3ZWVuLmF0dHJzW25vZGVJZF1bdGhpcy5faWRdW2tleV0gPSB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICAgICAgICAgIGRpZmY6IGRpZmZcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBLaW5ldGljLlR3ZWVuLnR3ZWVuc1tub2RlSWRdW2tleV0gPSB0aGlzLl9pZDtcbiAgICAgICAgfSxcbiAgICAgICAgX3R3ZWVuRnVuYzogZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUsXG4gICAgICAgICAgICAgICAgYXR0cnMgPSBLaW5ldGljLlR3ZWVuLmF0dHJzW25vZGUuX2lkXVt0aGlzLl9pZF0sXG4gICAgICAgICAgICAgICAga2V5LCBhdHRyLCBzdGFydCwgZGlmZiwgbmV3VmFsLCBuLCBsZW47XG5cbiAgICAgICAgICAgIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgYXR0ciA9IGF0dHJzW2tleV07XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBhdHRyLnN0YXJ0O1xuICAgICAgICAgICAgICAgIGRpZmYgPSBhdHRyLmRpZmY7XG5cbiAgICAgICAgICAgICAgICBpZiAoS2luZXRpYy5VdGlsLl9pc0FycmF5KHN0YXJ0KSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdWYWwgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbGVuID0gc3RhcnQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKG49MDsgbjxsZW47IG4rKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsLnB1c2goc3RhcnRbbl0gKyAoZGlmZltuXSAqIGkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsID0gc3RhcnQgKyAoZGlmZiAqIGkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cihrZXksIG5ld1ZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9hZGRMaXN0ZW5lcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgICAgICAvLyBzdGFydCBsaXN0ZW5lcnNcbiAgICAgICAgICAgIHRoaXMudHdlZW4ub25QbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5hbmltLnN0YXJ0KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy50d2Vlbi5vblJldmVyc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGF0LmFuaW0uc3RhcnQoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIHN0b3AgbGlzdGVuZXJzXG4gICAgICAgICAgICB0aGlzLnR3ZWVuLm9uUGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGF0LmFuaW0uc3RvcCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMudHdlZW4ub25GaW5pc2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhhdC5vbkZpbmlzaCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Lm9uRmluaXNoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMudHdlZW4ub25SZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGF0Lm9uUmVzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5vblJlc2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHBsYXlcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ud2Vlbi5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge1R3ZWVufVxuICAgICAgICAgKi9cbiAgICAgICAgcGxheTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnR3ZWVuLnBsYXkoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogcmV2ZXJzZVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlR3ZWVuLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7VHdlZW59XG4gICAgICAgICAqL1xuICAgICAgICByZXZlcnNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMudHdlZW4ucmV2ZXJzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiByZXNldFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlR3ZWVuLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7VHdlZW59XG4gICAgICAgICAqL1xuICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnR3ZWVuLnJlc2V0KCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNlZWtcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ud2Vlbi5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtJbnRlZ2VyfSB0IHRpbWUgaW4gc2Vjb25kcyBiZXR3ZWVuIDAgYW5kIHRoZSBkdXJhdGlvblxuICAgICAgICAgKiBAcmV0dXJucyB7VHdlZW59XG4gICAgICAgICAqL1xuICAgICAgICBzZWVrOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0aGlzLnR3ZWVuLnNlZWsodCAqIDEwMDApO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBwYXVzZVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlR3ZWVuLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7VHdlZW59XG4gICAgICAgICAqL1xuICAgICAgICBwYXVzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnR3ZWVuLnBhdXNlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGZpbmlzaFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlR3ZWVuLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7VHdlZW59XG4gICAgICAgICAqL1xuICAgICAgICBmaW5pc2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy50d2Vlbi5maW5pc2goKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZGVzdHJveVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlR3ZWVuLnByb3RvdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbm9kZUlkID0gdGhpcy5ub2RlLl9pZCxcbiAgICAgICAgICAgICAgICB0aGlzSWQgPSB0aGlzLl9pZCxcbiAgICAgICAgICAgICAgICBhdHRycyA9IEtpbmV0aWMuVHdlZW4udHdlZW5zW25vZGVJZF0sXG4gICAgICAgICAgICAgICAga2V5O1xuXG4gICAgICAgICAgICB0aGlzLnBhdXNlKCk7XG5cbiAgICAgICAgICAgIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIEtpbmV0aWMuVHdlZW4udHdlZW5zW25vZGVJZF1ba2V5XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsZXRlIEtpbmV0aWMuVHdlZW4uYXR0cnNbbm9kZUlkXVt0aGlzSWRdO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBUd2VlbiA9IGZ1bmN0aW9uKHByb3AsIHByb3BGdW5jLCBmdW5jLCBiZWdpbiwgZmluaXNoLCBkdXJhdGlvbiwgeW95bykge1xuICAgICAgICB0aGlzLnByb3AgPSBwcm9wO1xuICAgICAgICB0aGlzLnByb3BGdW5jID0gcHJvcEZ1bmM7XG4gICAgICAgIHRoaXMuYmVnaW4gPSBiZWdpbjtcbiAgICAgICAgdGhpcy5fcG9zID0gYmVnaW47XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5fY2hhbmdlID0gMDtcbiAgICAgICAgdGhpcy5wcmV2UG9zID0gMDtcbiAgICAgICAgdGhpcy55b3lvID0geW95bztcbiAgICAgICAgdGhpcy5fdGltZSA9IDA7XG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgdGhpcy5fc3RhcnRUaW1lID0gMDtcbiAgICAgICAgdGhpcy5fZmluaXNoID0gMDtcbiAgICAgICAgdGhpcy5mdW5jID0gZnVuYztcbiAgICAgICAgdGhpcy5fY2hhbmdlID0gZmluaXNoIC0gdGhpcy5iZWdpbjtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgIH07XG4gICAgLypcbiAgICAgKiBUd2VlbiBtZXRob2RzXG4gICAgICovXG4gICAgVHdlZW4ucHJvdG90eXBlID0ge1xuICAgICAgICBmaXJlOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gdGhpc1tzdHJdO1xuICAgICAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRpbWU6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmKHQgPiB0aGlzLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYodGhpcy55b3lvKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RpbWUgPSB0aGlzLmR1cmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZih0IDwgMCkge1xuICAgICAgICAgICAgICAgIGlmKHRoaXMueW95bykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90aW1lID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGltZSA9IHQ7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VGltZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGltZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0UG9zaXRpb246IGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICAgIHRoaXMucHJldlBvcyA9IHRoaXMuX3BvcztcbiAgICAgICAgICAgIHRoaXMucHJvcEZ1bmMocCk7XG4gICAgICAgICAgICB0aGlzLl9wb3MgPSBwO1xuICAgICAgICB9LFxuICAgICAgICBnZXRQb3NpdGlvbjogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdCA9IHRoaXMuX3RpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mdW5jKHQsIHRoaXMuYmVnaW4sIHRoaXMuX2NoYW5nZSwgdGhpcy5kdXJhdGlvbik7XG4gICAgICAgIH0sXG4gICAgICAgIHBsYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFBMQVlJTkc7XG4gICAgICAgICAgICB0aGlzLl9zdGFydFRpbWUgPSB0aGlzLmdldFRpbWVyKCkgLSB0aGlzLl90aW1lO1xuICAgICAgICAgICAgdGhpcy5vbkVudGVyRnJhbWUoKTtcbiAgICAgICAgICAgIHRoaXMuZmlyZSgnb25QbGF5Jyk7XG4gICAgICAgIH0sXG4gICAgICAgIHJldmVyc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFJFVkVSU0lORztcbiAgICAgICAgICAgIHRoaXMuX3RpbWUgPSB0aGlzLmR1cmF0aW9uIC0gdGhpcy5fdGltZTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0VGltZSA9IHRoaXMuZ2V0VGltZXIoKSAtIHRoaXMuX3RpbWU7XG4gICAgICAgICAgICB0aGlzLm9uRW50ZXJGcmFtZSgpO1xuICAgICAgICAgICAgdGhpcy5maXJlKCdvblJldmVyc2UnKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2VlazogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICAgICAgdGhpcy5fdGltZSA9IHQ7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5maXJlKCdvblNlZWsnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICAgICAgdGhpcy5fdGltZSA9IDA7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5maXJlKCdvblJlc2V0Jyk7XG4gICAgICAgIH0sXG4gICAgICAgIGZpbmlzaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgICAgICB0aGlzLl90aW1lID0gdGhpcy5kdXJhdGlvbjtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgICAgICB0aGlzLmZpcmUoJ29uRmluaXNoJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uKHRoaXMuZ2V0UG9zaXRpb24odGhpcy5fdGltZSkpO1xuICAgICAgICB9LFxuICAgICAgICBvbkVudGVyRnJhbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmdldFRpbWVyKCkgLSB0aGlzLl9zdGFydFRpbWU7XG4gICAgICAgICAgICBpZih0aGlzLnN0YXRlID09PSBQTEFZSU5HKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUaW1lKHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gUkVWRVJTSU5HKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUaW1lKHRoaXMuZHVyYXRpb24gLSB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcGF1c2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFBBVVNFRDtcbiAgICAgICAgICAgIHRoaXMuZmlyZSgnb25QYXVzZScpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRUaW1lcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLypcbiAgICAqIFRoZXNlIGVhc2VzIHdlcmUgcG9ydGVkIGZyb20gYW4gQWRvYmUgRmxhc2ggdHdlZW5pbmcgbGlicmFyeSB0byBKYXZhU2NyaXB0XG4gICAgKiBieSBYYXJpY1xuICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlIEVhc2luZ3NcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAqL1xuICAgIEtpbmV0aWMuRWFzaW5ncyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICogYmFjayBlYXNlIGluXG4gICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRWFzaW5nc1xuICAgICAgICAqL1xuICAgICAgICAnQmFja0Vhc2VJbic6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIHZhciBzID0gMS43MDE1ODtcbiAgICAgICAgICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICogKChzICsgMSkgKiB0IC0gcykgKyBiO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgKiBiYWNrIGVhc2Ugb3V0XG4gICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRWFzaW5nc1xuICAgICAgICAqL1xuICAgICAgICAnQmFja0Vhc2VPdXQnOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgICAgICAgICB2YXIgcyA9IDEuNzAxNTg7XG4gICAgICAgICAgICByZXR1cm4gYyAqICgoIHQgPSB0IC8gZCAtIDEpICogdCAqICgocyArIDEpICogdCArIHMpICsgMSkgKyBiO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgKiBiYWNrIGVhc2UgaW4gb3V0XG4gICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRWFzaW5nc1xuICAgICAgICAqL1xuICAgICAgICAnQmFja0Vhc2VJbk91dCc6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIHZhciBzID0gMS43MDE1ODtcbiAgICAgICAgICAgIGlmKCh0IC89IGQgLyAyKSA8IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYyAvIDIgKiAodCAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0IC0gcykpICsgYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjIC8gMiAqICgodCAtPSAyKSAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0ICsgcykgKyAyKSArIGI7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAqIGVsYXN0aWMgZWFzZSBpblxuICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkVhc2luZ3NcbiAgICAgICAgKi9cbiAgICAgICAgJ0VsYXN0aWNFYXNlSW4nOiBmdW5jdGlvbih0LCBiLCBjLCBkLCBhLCBwKSB7XG4gICAgICAgICAgICAvLyBhZGRlZCBzID0gMFxuICAgICAgICAgICAgdmFyIHMgPSAwO1xuICAgICAgICAgICAgaWYodCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoKHQgLz0gZCkgPT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBiICsgYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCFwKSB7XG4gICAgICAgICAgICAgICAgcCA9IGQgKiAwLjM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZighYSB8fCBhIDwgTWF0aC5hYnMoYykpIHtcbiAgICAgICAgICAgICAgICBhID0gYztcbiAgICAgICAgICAgICAgICBzID0gcCAvIDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzID0gcCAvICgyICogTWF0aC5QSSkgKiBNYXRoLmFzaW4oYyAvIGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIC0oYSAqIE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgKiBkIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkpICsgYjtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICogZWxhc3RpYyBlYXNlIG91dFxuICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkVhc2luZ3NcbiAgICAgICAgKi9cbiAgICAgICAgJ0VsYXN0aWNFYXNlT3V0JzogZnVuY3Rpb24odCwgYiwgYywgZCwgYSwgcCkge1xuICAgICAgICAgICAgLy8gYWRkZWQgcyA9IDBcbiAgICAgICAgICAgIHZhciBzID0gMDtcbiAgICAgICAgICAgIGlmKHQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCh0IC89IGQpID09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYiArIGM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZighcCkge1xuICAgICAgICAgICAgICAgIHAgPSBkICogMC4zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoIWEgfHwgYSA8IE1hdGguYWJzKGMpKSB7XG4gICAgICAgICAgICAgICAgYSA9IGM7XG4gICAgICAgICAgICAgICAgcyA9IHAgLyA0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luKGMgLyBhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoYSAqIE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHQgKiBkIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkgKyBjICsgYik7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAqIGVsYXN0aWMgZWFzZSBpbiBvdXRcbiAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5FYXNpbmdzXG4gICAgICAgICovXG4gICAgICAgICdFbGFzdGljRWFzZUluT3V0JzogZnVuY3Rpb24odCwgYiwgYywgZCwgYSwgcCkge1xuICAgICAgICAgICAgLy8gYWRkZWQgcyA9IDBcbiAgICAgICAgICAgIHZhciBzID0gMDtcbiAgICAgICAgICAgIGlmKHQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCh0IC89IGQgLyAyKSA9PSAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGIgKyBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoIXApIHtcbiAgICAgICAgICAgICAgICBwID0gZCAqICgwLjMgKiAxLjUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoIWEgfHwgYSA8IE1hdGguYWJzKGMpKSB7XG4gICAgICAgICAgICAgICAgYSA9IGM7XG4gICAgICAgICAgICAgICAgcyA9IHAgLyA0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luKGMgLyBhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHQgPCAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0wLjUgKiAoYSAqIE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgKiBkIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkpICsgYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhICogTWF0aC5wb3coMiwgLTEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgKiBkIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkgKiAwLjUgKyBjICsgYjtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICogYm91bmNlIGVhc2Ugb3V0XG4gICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRWFzaW5nc1xuICAgICAgICAqL1xuICAgICAgICAnQm91bmNlRWFzZU91dCc6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIGlmKCh0IC89IGQpIDwgKDEgLyAyLjc1KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjICogKDcuNTYyNSAqIHQgKiB0KSArIGI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKHQgPCAoMiAvIDIuNzUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGMgKiAoNy41NjI1ICogKHQgLT0gKDEuNSAvIDIuNzUpKSAqIHQgKyAwLjc1KSArIGI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKHQgPCAoMi41IC8gMi43NSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYyAqICg3LjU2MjUgKiAodCAtPSAoMi4yNSAvIDIuNzUpKSAqIHQgKyAwLjkzNzUpICsgYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjICogKDcuNTYyNSAqICh0IC09ICgyLjYyNSAvIDIuNzUpKSAqIHQgKyAwLjk4NDM3NSkgKyBiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgKiBib3VuY2UgZWFzZSBpblxuICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkVhc2luZ3NcbiAgICAgICAgKi9cbiAgICAgICAgJ0JvdW5jZUVhc2VJbic6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBjIC0gS2luZXRpYy5FYXNpbmdzLkJvdW5jZUVhc2VPdXQoZCAtIHQsIDAsIGMsIGQpICsgYjtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICogYm91bmNlIGVhc2UgaW4gb3V0XG4gICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRWFzaW5nc1xuICAgICAgICAqL1xuICAgICAgICAnQm91bmNlRWFzZUluT3V0JzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgICAgICAgICAgaWYodCA8IGQgLyAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEtpbmV0aWMuRWFzaW5ncy5Cb3VuY2VFYXNlSW4odCAqIDIsIDAsIGMsIGQpICogMC41ICsgYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBLaW5ldGljLkVhc2luZ3MuQm91bmNlRWFzZU91dCh0ICogMiAtIGQsIDAsIGMsIGQpICogMC41ICsgYyAqIDAuNSArIGI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAqIGVhc2UgaW5cbiAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5FYXNpbmdzXG4gICAgICAgICovXG4gICAgICAgICdFYXNlSW4nOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgICAgICAgICByZXR1cm4gYyAqICh0IC89IGQpICogdCArIGI7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAqIGVhc2Ugb3V0XG4gICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRWFzaW5nc1xuICAgICAgICAqL1xuICAgICAgICAnRWFzZU91dCc6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIHJldHVybiAtYyAqICh0IC89IGQpICogKHQgLSAyKSArIGI7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAqIGVhc2UgaW4gb3V0XG4gICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRWFzaW5nc1xuICAgICAgICAqL1xuICAgICAgICAnRWFzZUluT3V0JzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgICAgICAgICAgaWYoKHQgLz0gZCAvIDIpIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjIC8gMiAqIHQgKiB0ICsgYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtYyAvIDIgKiAoKC0tdCkgKiAodCAtIDIpIC0gMSkgKyBiO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgKiBzdHJvbmcgZWFzZSBpblxuICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkVhc2luZ3NcbiAgICAgICAgKi9cbiAgICAgICAgJ1N0cm9uZ0Vhc2VJbic6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICogdCAqIHQgKiB0ICsgYjtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICogc3Ryb25nIGVhc2Ugb3V0XG4gICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRWFzaW5nc1xuICAgICAgICAqL1xuICAgICAgICAnU3Ryb25nRWFzZU91dCc6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBjICogKCggdCA9IHQgLyBkIC0gMSkgKiB0ICogdCAqIHQgKiB0ICsgMSkgKyBiO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgKiBzdHJvbmcgZWFzZSBpbiBvdXRcbiAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5FYXNpbmdzXG4gICAgICAgICovXG4gICAgICAgICdTdHJvbmdFYXNlSW5PdXQnOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgICAgICAgICBpZigodCAvPSBkIC8gMikgPCAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGMgLyAyICogdCAqIHQgKiB0ICogdCAqIHQgKyBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGMgLyAyICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpICsgYjtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICogbGluZWFyXG4gICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuRWFzaW5nc1xuICAgICAgICAqL1xuICAgICAgICAnTGluZWFyJzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgICAgICAgICAgcmV0dXJuIGMgKiB0IC8gZCArIGI7XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcbjsoZnVuY3Rpb24oKSB7XG4gICAgS2luZXRpYy5ERCA9IHtcbiAgICAgICAgLy8gcHJvcGVydGllc1xuICAgICAgICBhbmltOiBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYiA9IHRoaXMuZGlydHk7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfSksXG4gICAgICAgIGlzRHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgICBqdXN0RHJhZ2dlZDogZmFsc2UsXG4gICAgICAgIG9mZnNldDoge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDBcbiAgICAgICAgfSxcbiAgICAgICAgbm9kZTogbnVsbCxcblxuICAgICAgICAvLyBtZXRob2RzXG4gICAgICAgIF9kcmFnOiBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgIHZhciBkZCA9IEtpbmV0aWMuREQsXG4gICAgICAgICAgICAgICAgbm9kZSA9IGRkLm5vZGU7XG5cbiAgICAgICAgICAgIGlmKG5vZGUpIHtcbiAgICAgICAgICAgICAgIGlmKCFkZC5pc0RyYWdnaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSBub2RlLmdldFN0YWdlKCkuZ2V0UG9pbnRlclBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkcmFnRGlzdGFuY2UgPSBub2RlLmRyYWdEaXN0YW5jZSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguYWJzKHBvcy54IC0gZGQuc3RhcnRQb2ludGVyUG9zLngpLFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnMocG9zLnkgLSBkZC5zdGFydFBvaW50ZXJQb3MueSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDwgZHJhZ0Rpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBub2RlLl9zZXREcmFnUG9zaXRpb24oZXZ0KTtcbiAgICAgICAgICAgICAgICBpZighZGQuaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgICAgICAgICBkZC5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5maXJlKCdkcmFnc3RhcnQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlIDogJ2RyYWdzdGFydCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQgOiBub2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZ0IDogZXZ0XG4gICAgICAgICAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGV4ZWN1dGUgb25kcmFnbW92ZSBpZiBkZWZpbmVkXG4gICAgICAgICAgICAgICAgbm9kZS5maXJlKCdkcmFnbW92ZScsIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA6ICdkcmFnbW92ZScsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA6IG5vZGUsXG4gICAgICAgICAgICAgICAgICAgIGV2dCA6IGV2dFxuICAgICAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZW5kRHJhZ0JlZm9yZTogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICB2YXIgZGQgPSBLaW5ldGljLkRELFxuICAgICAgICAgICAgICAgIG5vZGUgPSBkZC5ub2RlLFxuICAgICAgICAgICAgICAgIG5vZGVUeXBlLCBsYXllcjtcblxuICAgICAgICAgICAgaWYobm9kZSkge1xuICAgICAgICAgICAgICAgIG5vZGVUeXBlID0gbm9kZS5ub2RlVHlwZTtcbiAgICAgICAgICAgICAgICBsYXllciA9IG5vZGUuZ2V0TGF5ZXIoKTtcbiAgICAgICAgICAgICAgICBkZC5hbmltLnN0b3AoKTtcblxuICAgICAgICAgICAgICAgIC8vIG9ubHkgZmlyZSBkcmFnZW5kIGV2ZW50IGlmIHRoZSBkcmFnIGFuZCBkcm9wXG4gICAgICAgICAgICAgICAgLy8gb3BlcmF0aW9uIGFjdHVhbGx5IHN0YXJ0ZWQuXG4gICAgICAgICAgICAgICAgaWYoZGQuaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgICAgICAgICBkZC5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGRkLmp1c3REcmFnZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgS2luZXRpYy5saXN0ZW5DbGlja1RhcCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2dC5kcmFnRW5kTm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkZWxldGUgZGQubm9kZTtcblxuICAgICAgICAgICAgICAgIChsYXllciB8fCBub2RlKS5kcmF3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9lbmREcmFnQWZ0ZXI6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgZXZ0ID0gZXZ0IHx8IHt9O1xuXG4gICAgICAgICAgICB2YXIgZHJhZ0VuZE5vZGUgPSBldnQuZHJhZ0VuZE5vZGU7XG5cbiAgICAgICAgICAgIGlmIChldnQgJiYgZHJhZ0VuZE5vZGUpIHtcbiAgICAgICAgICAgICAgICBkcmFnRW5kTm9kZS5maXJlKCdkcmFnZW5kJywge1xuICAgICAgICAgICAgICAgICAgICB0eXBlIDogJ2RyYWdlbmQnLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgOiBkcmFnRW5kTm9kZSxcbiAgICAgICAgICAgICAgICAgICAgZXZ0IDogZXZ0XG4gICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gTm9kZSBleHRlbmRlcnNcblxuICAgIC8qKlxuICAgICAqIGluaXRpYXRlIGRyYWcgYW5kIGRyb3BcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKi9cbiAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLnN0YXJ0RHJhZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGQgPSBLaW5ldGljLkRELFxuICAgICAgICAgICAgc3RhZ2UgPSB0aGlzLmdldFN0YWdlKCksXG4gICAgICAgICAgICBsYXllciA9IHRoaXMuZ2V0TGF5ZXIoKSxcbiAgICAgICAgICAgIHBvcyA9IHN0YWdlLmdldFBvaW50ZXJQb3NpdGlvbigpLFxuICAgICAgICAgICAgYXAgPSB0aGlzLmdldEFic29sdXRlUG9zaXRpb24oKTtcblxuICAgICAgICBpZihwb3MpIHtcbiAgICAgICAgICAgIGlmIChkZC5ub2RlKSB7XG4gICAgICAgICAgICAgICAgZGQubm9kZS5zdG9wRHJhZygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZC5ub2RlID0gdGhpcztcbiAgICAgICAgICAgIGRkLnN0YXJ0UG9pbnRlclBvcyA9IHBvcztcbiAgICAgICAgICAgIGRkLm9mZnNldC54ID0gcG9zLnggLSBhcC54O1xuICAgICAgICAgICAgZGQub2Zmc2V0LnkgPSBwb3MueSAtIGFwLnk7XG4gICAgICAgICAgICBkZC5hbmltLnNldExheWVycyhsYXllciB8fCB0aGlzLmdldExheWVycygpKTtcbiAgICAgICAgICAgIGRkLmFuaW0uc3RhcnQoKTtcblxuICAgICAgICAgICAgdGhpcy5fc2V0RHJhZ1Bvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5fc2V0RHJhZ1Bvc2l0aW9uID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHZhciBkZCA9IEtpbmV0aWMuREQsXG4gICAgICAgICAgICBwb3MgPSB0aGlzLmdldFN0YWdlKCkuZ2V0UG9pbnRlclBvc2l0aW9uKCksXG4gICAgICAgICAgICBkYmYgPSB0aGlzLmdldERyYWdCb3VuZEZ1bmMoKTtcbiAgICAgICAgaWYgKCFwb3MpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV3Tm9kZVBvcyA9IHtcbiAgICAgICAgICAgIHg6IHBvcy54IC0gZGQub2Zmc2V0LngsXG4gICAgICAgICAgICB5OiBwb3MueSAtIGRkLm9mZnNldC55XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYoZGJmICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld05vZGVQb3MgPSBkYmYuY2FsbCh0aGlzLCBuZXdOb2RlUG9zLCBldnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0QWJzb2x1dGVQb3NpdGlvbihuZXdOb2RlUG9zKTtcblxuICAgICAgICBpZiAoIXRoaXMuX2xhc3RQb3MgfHwgdGhpcy5fbGFzdFBvcy54ICE9PSBuZXdOb2RlUG9zLnggfHxcbiAgICAgICAgICAgIHRoaXMuX2xhc3RQb3MueSAhPT0gbmV3Tm9kZVBvcy55KSB7XG4gICAgICAgICAgICBkZC5hbmltLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xhc3RQb3MgPSBuZXdOb2RlUG9zO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBzdG9wIGRyYWcgYW5kIGRyb3BcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTm9kZS5wcm90b3R5cGVcbiAgICAgKi9cbiAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLnN0b3BEcmFnID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkZCA9IEtpbmV0aWMuREQsXG4gICAgICAgICAgICBldnQgPSB7fTtcbiAgICAgICAgZGQuX2VuZERyYWdCZWZvcmUoZXZ0KTtcbiAgICAgICAgZGQuX2VuZERyYWdBZnRlcihldnQpO1xuICAgIH07XG5cbiAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLnNldERyYWdnYWJsZSA9IGZ1bmN0aW9uKGRyYWdnYWJsZSkge1xuICAgICAgICB0aGlzLl9zZXRBdHRyKCdkcmFnZ2FibGUnLCBkcmFnZ2FibGUpO1xuICAgICAgICB0aGlzLl9kcmFnQ2hhbmdlKCk7XG4gICAgfTtcblxuICAgIHZhciBvcmlnRGVzdHJveSA9IEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuZGVzdHJveTtcblxuICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGQgPSBLaW5ldGljLkREO1xuXG4gICAgICAgIC8vIHN0b3AgRERcbiAgICAgICAgaWYoZGQubm9kZSAmJiBkZC5ub2RlLl9pZCA9PT0gdGhpcy5faWQpIHtcblxuICAgICAgICAgICAgdGhpcy5zdG9wRHJhZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3JpZ0Rlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogZGV0ZXJtaW5lIGlmIG5vZGUgaXMgY3VycmVudGx5IGluIGRyYWcgYW5kIGRyb3AgbW9kZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqL1xuICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuaXNEcmFnZ2luZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGQgPSBLaW5ldGljLkREO1xuICAgICAgICByZXR1cm4gISEoZGQubm9kZSAmJiBkZC5ub2RlLl9pZCA9PT0gdGhpcy5faWQgJiYgZGQuaXNEcmFnZ2luZyk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuX2xpc3RlbkRyYWcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuX2RyYWdDbGVhbnVwKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZ2V0Q2xhc3NOYW1lKCkgPT09ICdTdGFnZScpIHtcbiAgICAgICAgICAgIHRoaXMub24oJ2NvbnRlbnRNb3VzZWRvd24ua2luZXRpYyBjb250ZW50VG91Y2hzdGFydC5raW5ldGljJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICAgICAgaWYoIUtpbmV0aWMuREQubm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LnN0YXJ0RHJhZyhldnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vbignbW91c2Vkb3duLmtpbmV0aWMgdG91Y2hzdGFydC5raW5ldGljJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICAgICAgLy8gaWdub3JlIHJpZ2h0IGFuZCBtaWRkbGUgYnV0dG9uc1xuICAgICAgICAgICAgICAgIGlmIChldnQuZXZ0LmJ1dHRvbiA9PT0gMSB8fCBldnQuZXZ0LmJ1dHRvbiA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKCFLaW5ldGljLkRELm5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zdGFydERyYWcoZXZ0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGxpc3RlbmluZyBpcyByZXF1aXJlZCBmb3IgZHJhZyBhbmQgZHJvcFxuICAgICAgICAvKlxuICAgICAgICB0aGlzLl9saXN0ZW5pbmdFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fY2xlYXJTZWxmQW5kQW5jZXN0b3JDYWNoZSgnbGlzdGVuaW5nRW5hYmxlZCcpO1xuICAgICAgICAqL1xuICAgIH07XG5cbiAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLl9kcmFnQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmKHRoaXMuYXR0cnMuZHJhZ2dhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl9saXN0ZW5EcmFnKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgICAgICB0aGlzLl9kcmFnQ2xlYW51cCgpO1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogZm9yY2UgZHJhZyBhbmQgZHJvcCB0byBlbmRcbiAgICAgICAgICAgICAqIGlmIHRoaXMgbm9kZSBpcyBjdXJyZW50bHkgaW5cbiAgICAgICAgICAgICAqIGRyYWcgYW5kIGRyb3AgbW9kZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgc3RhZ2UgPSB0aGlzLmdldFN0YWdlKCk7XG4gICAgICAgICAgICB2YXIgZGQgPSBLaW5ldGljLkREO1xuICAgICAgICAgICAgaWYoc3RhZ2UgJiYgZGQubm9kZSAmJiBkZC5ub2RlLl9pZCA9PT0gdGhpcy5faWQpIHtcbiAgICAgICAgICAgICAgICBkZC5ub2RlLnN0b3BEcmFnKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5fZHJhZ0NsZWFudXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0Q2xhc3NOYW1lKCkgPT09ICdTdGFnZScpIHtcbiAgICAgICAgICAgIHRoaXMub2ZmKCdjb250ZW50TW91c2Vkb3duLmtpbmV0aWMnKTtcbiAgICAgICAgICAgIHRoaXMub2ZmKCdjb250ZW50VG91Y2hzdGFydC5raW5ldGljJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9mZignbW91c2Vkb3duLmtpbmV0aWMnKTtcbiAgICAgICAgICAgIHRoaXMub2ZmKCd0b3VjaHN0YXJ0LmtpbmV0aWMnKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2RyYWdCb3VuZEZ1bmMnKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZHJhZyBib3VuZCBmdW5jdGlvbi4gIFRoaXMgaXMgdXNlZCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdFxuICAgICAqICBkcmFnIGFuZCBkcm9wIHBvc2l0aW9uXG4gICAgICogQG5hbWUgZHJhZ0JvdW5kRnVuY1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Ob2RlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGRyYWdCb3VuZEZ1bmNcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZHJhZyBib3VuZCBmdW5jdGlvblxuICAgICAqIHZhciBkcmFnQm91bmRGdW5jID0gbm9kZS5kcmFnQm91bmRGdW5jKCk7XG4gICAgICpcbiAgICAgKiAvLyBjcmVhdGUgdmVydGljYWwgZHJhZyBhbmQgZHJvcFxuICAgICAqIG5vZGUuZHJhZ0JvdW5kRnVuYyhmdW5jdGlvbihwb3Mpe1xuICAgICAqICAgcmV0dXJuIHtcbiAgICAgKiAgICAgeDogdGhpcy5nZXRBYnNvbHV0ZVBvc2l0aW9uKCkueCxcbiAgICAgKiAgICAgeTogcG9zLnlcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyKEtpbmV0aWMuTm9kZSwgJ2RyYWdnYWJsZScsIGZhbHNlKTtcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkT3ZlcmxvYWRlZEdldHRlclNldHRlcihLaW5ldGljLk5vZGUsICdkcmFnZ2FibGUnKTtcblxuICAgICAvKipcbiAgICAgKiBnZXQvc2V0IGRyYWdnYWJsZSBmbGFnXG4gICAgICogQG5hbWUgZHJhZ2dhYmxlXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLk5vZGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBkcmFnZ2FibGVcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBkcmFnZ2FibGUgZmxhZ1xuICAgICAqIHZhciBkcmFnZ2FibGUgPSBub2RlLmRyYWdnYWJsZSgpO1xuICAgICAqXG4gICAgICogLy8gZW5hYmxlIGRyYWcgYW5kIGRyb3BcbiAgICAgKiBub2RlLmRyYWdnYWJsZSh0cnVlKTtcbiAgICAgKlxuICAgICAqIC8vIGRpc2FibGUgZHJhZyBhbmQgZHJvcFxuICAgICAqIG5vZGUuZHJhZ2dhYmxlKGZhbHNlKTtcbiAgICAgKi9cblxuICAgIHZhciBodG1sID0gS2luZXRpYy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgaHRtbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgS2luZXRpYy5ERC5fZW5kRHJhZ0JlZm9yZSwgdHJ1ZSk7XG4gICAgaHRtbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIEtpbmV0aWMuREQuX2VuZERyYWdCZWZvcmUsIHRydWUpO1xuXG4gICAgaHRtbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgS2luZXRpYy5ERC5fZW5kRHJhZ0FmdGVyLCBmYWxzZSk7XG4gICAgaHRtbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIEtpbmV0aWMuREQuX2VuZERyYWdBZnRlciwgZmFsc2UpO1xuXG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICBLaW5ldGljLlV0aWwuYWRkTWV0aG9kcyhLaW5ldGljLkNvbnRhaW5lciwge1xuICAgICAgICBfX2luaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG5ldyBLaW5ldGljLkNvbGxlY3Rpb24oKTtcbiAgICAgICAgICAgIEtpbmV0aWMuTm9kZS5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiByZXR1cm5zIGEge0BsaW5rIEtpbmV0aWMuQ29sbGVjdGlvbn0gb2YgZGlyZWN0IGRlc2NlbmRhbnQgbm9kZXNcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250YWluZXIucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtmaWx0ZXJGdW5jXSBmaWx0ZXIgZnVuY3Rpb25cbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuQ29sbGVjdGlvbn1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogLy8gZ2V0IGFsbCBjaGlsZHJlblxuICAgICAgICAgKiB2YXIgY2hpbGRyZW4gPSBsYXllci5nZXRDaGlsZHJlbigpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBnZXQgb25seSBjaXJjbGVzXG4gICAgICAgICAqIHZhciBjaXJjbGVzID0gbGF5ZXIuZ2V0Q2hpbGRyZW4oZnVuY3Rpb24obm9kZSl7XG4gICAgICAgICAqICAgIHJldHVybiBub2RlLmdldENsYXNzTmFtZSgpID09PSAnQ2lyY2xlJztcbiAgICAgICAgICogfSk7XG4gICAgICAgICAqL1xuICAgICAgICBnZXRDaGlsZHJlbjogZnVuY3Rpb24oZmlsdGVyRnVuYykge1xuICAgICAgICAgICAgaWYgKCFmaWx0ZXJGdW5jKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHRzID0gbmV3IEtpbmV0aWMuQ29sbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uZWFjaChmdW5jdGlvbihjaGlsZCl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJGdW5jKGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZGV0ZXJtaW5lIGlmIG5vZGUgaGFzIGNoaWxkcmVuXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ29udGFpbmVyLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIGhhc0NoaWxkcmVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENoaWxkcmVuKCkubGVuZ3RoID4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJlbW92ZSBhbGwgY2hpbGRyZW5cbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250YWluZXIucHJvdG90eXBlXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmVDaGlsZHJlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBLaW5ldGljLkNvbGxlY3Rpb24udG9Db2xsZWN0aW9uKHRoaXMuY2hpbGRyZW4pO1xuICAgICAgICAgICAgdmFyIGNoaWxkO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgcGFyZW50IHRvIHByZXZlbnQgbWFueSBfc2V0Q2hpbGRyZW5JbmRpY2VzIGNhbGxzXG4gICAgICAgICAgICAgICAgZGVsZXRlIGNoaWxkLnBhcmVudDtcbiAgICAgICAgICAgICAgICBjaGlsZC5pbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmhhc0NoaWxkcmVuKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQucmVtb3ZlQ2hpbGRyZW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2hpbGQucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuID0gbmV3IEtpbmV0aWMuQ29sbGVjdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZXN0cm95IGFsbCBjaGlsZHJlblxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbnRhaW5lci5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIGRlc3Ryb3lDaGlsZHJlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHZhciBjaGlsZHJlbiA9IEtpbmV0aWMuQ29sbGVjdGlvbi50b0NvbGxlY3Rpb24odGhpcy5jaGlsZHJlbik7XG4gICAgICAgICAgICB2YXIgY2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICAvLyByZXNldCBwYXJlbnQgdG8gcHJldmVudCBtYW55IF9zZXRDaGlsZHJlbkluZGljZXMgY2FsbHNcbiAgICAgICAgICAgICAgICBkZWxldGUgY2hpbGQucGFyZW50O1xuICAgICAgICAgICAgICAgIGNoaWxkLmluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICBjaGlsZC5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuID0gbmV3IEtpbmV0aWMuQ29sbGVjdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGQgbm9kZSBvciBub2RlcyB0byBjb250YWluZXIuXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ29udGFpbmVyLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0gey4uLktpbmV0aWMuTm9kZX0gY2hpbGRcbiAgICAgICAgICogQHJldHVybnMge0NvbnRhaW5lcn1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogbGF5ZXIuYWRkKHNoYXBlMSwgc2hhcGUyLCBzaGFwZTMpO1xuICAgICAgICAgKi9cbiAgICAgICAgYWRkOiBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGQoYXJndW1lbnRzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hpbGQuZ2V0UGFyZW50KCkpIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5tb3ZlVG8odGhpcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICAgICAgdGhpcy5fdmFsaWRhdGVBZGQoY2hpbGQpO1xuICAgICAgICAgICAgY2hpbGQuaW5kZXggPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgICAgICB0aGlzLl9maXJlKCdhZGQnLCB7XG4gICAgICAgICAgICAgICAgY2hpbGQ6IGNoaWxkXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gaWYgbm9kZSB1bmRlciBkcmFnIHdlIG5lZWQgdG8gdXBkYXRlIGRyYWcgYW5pbWF0aW9uXG4gICAgICAgICAgICBpZiAoY2hpbGQuaXNEcmFnZ2luZygpKSB7XG4gICAgICAgICAgICAgICAgS2luZXRpYy5ERC5hbmltLnNldExheWVycyhjaGlsZC5nZXRMYXllcigpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY2hhaW5hYmxlXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBkZXN0cm95IGNoaWxkcmVuXG4gICAgICAgICAgICBpZiAodGhpcy5oYXNDaGlsZHJlbigpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95Q2hpbGRyZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoZW4gZGVzdHJveSBzZWxmXG4gICAgICAgICAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJldHVybiBhIHtAbGluayBLaW5ldGljLkNvbGxlY3Rpb259IG9mIG5vZGVzIHRoYXQgbWF0Y2ggdGhlIHNlbGVjdG9yLiAgVXNlICcjJyBmb3IgaWQgc2VsZWN0aW9uc1xuICAgICAgICAgKiBhbmQgJy4nIGZvciBuYW1lIHNlbGVjdGlvbnMuICBZb3UgY2FuIGFsc28gc2VsZWN0IGJ5IHR5cGUgb3IgY2xhc3MgbmFtZS4gUGFzcyBtdWx0aXBsZSBzZWxlY3RvcnNcbiAgICAgICAgICogc2VwYXJhdGVkIGJ5IGEgc3BhY2UuXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ29udGFpbmVyLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAgICAgICAgICogQHJldHVybnMge0NvbGxlY3Rpb259XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIC8vIHNlbGVjdCBub2RlIHdpdGggaWQgZm9vXG4gICAgICAgICAqIHZhciBub2RlID0gc3RhZ2UuZmluZCgnI2ZvbycpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBzZWxlY3Qgbm9kZXMgd2l0aCBuYW1lIGJhciBpbnNpZGUgbGF5ZXJcbiAgICAgICAgICogdmFyIG5vZGVzID0gbGF5ZXIuZmluZCgnLmJhcicpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBzZWxlY3QgYWxsIGdyb3VwcyBpbnNpZGUgbGF5ZXJcbiAgICAgICAgICogdmFyIG5vZGVzID0gbGF5ZXIuZmluZCgnR3JvdXAnKTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gc2VsZWN0IGFsbCByZWN0YW5nbGVzIGluc2lkZSBsYXllclxuICAgICAgICAgKiB2YXIgbm9kZXMgPSBsYXllci5maW5kKCdSZWN0Jyk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIHNlbGVjdCBub2RlIHdpdGggYW4gaWQgb2YgZm9vIG9yIGEgbmFtZSBvZiBiYXIgaW5zaWRlIGxheWVyXG4gICAgICAgICAqIHZhciBub2RlcyA9IGxheWVyLmZpbmQoJyNmb28sIC5iYXInKTtcbiAgICAgICAgICovXG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICB2YXIgcmV0QXJyID0gW10sXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JBcnIgPSBzZWxlY3Rvci5yZXBsYWNlKC8gL2csICcnKS5zcGxpdCgnLCcpLFxuICAgICAgICAgICAgICAgIGxlbiA9IHNlbGVjdG9yQXJyLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBuLCBpLCBzZWwsIGFyciwgbm9kZSwgY2hpbGRyZW4sIGNsZW47XG5cbiAgICAgICAgICAgIGZvciAobiA9IDA7IG4gPCBsZW47IG4rKykge1xuICAgICAgICAgICAgICAgIHNlbCA9IHNlbGVjdG9yQXJyW25dO1xuXG4gICAgICAgICAgICAgICAgLy8gaWQgc2VsZWN0b3JcbiAgICAgICAgICAgICAgICBpZihzZWwuY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHRoaXMuX2dldE5vZGVCeUlkKHNlbC5zbGljZSgxKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldEFyci5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG5hbWUgc2VsZWN0b3JcbiAgICAgICAgICAgICAgICBlbHNlIGlmKHNlbC5jaGFyQXQoMCkgPT09ICcuJykge1xuICAgICAgICAgICAgICAgICAgICBhcnIgPSB0aGlzLl9nZXROb2Rlc0J5TmFtZShzZWwuc2xpY2UoMSkpO1xuICAgICAgICAgICAgICAgICAgICByZXRBcnIgPSByZXRBcnIuY29uY2F0KGFycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHVucmVjb2duaXplZCBzZWxlY3RvciwgcGFzcyB0byBjaGlsZHJlblxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IHRoaXMuZ2V0Q2hpbGRyZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlbiA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgY2xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXRBcnIgPSByZXRBcnIuY29uY2F0KGNoaWxkcmVuW2ldLl9nZXQoc2VsKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBLaW5ldGljLkNvbGxlY3Rpb24udG9Db2xsZWN0aW9uKHJldEFycik7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXROb2RlQnlJZDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IEtpbmV0aWMuaWRzW2tleV07XG5cbiAgICAgICAgICAgIGlmKG5vZGUgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmlzQW5jZXN0b3JPZihub2RlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXROb2Rlc0J5TmFtZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICB2YXIgYXJyID0gS2luZXRpYy5uYW1lc1trZXldIHx8IFtdO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldERlc2NlbmRhbnRzKGFycik7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXQ6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICB2YXIgcmV0QXJyID0gS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5fZ2V0LmNhbGwodGhpcywgc2VsZWN0b3IpO1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5nZXRDaGlsZHJlbigpO1xuICAgICAgICAgICAgdmFyIGxlbiA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgIGZvcih2YXIgbiA9IDA7IG4gPCBsZW47IG4rKykge1xuICAgICAgICAgICAgICAgIHJldEFyciA9IHJldEFyci5jb25jYXQoY2hpbGRyZW5bbl0uX2dldChzZWxlY3RvcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldEFycjtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZXh0ZW5kZXJzXG4gICAgICAgIHRvT2JqZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBLaW5ldGljLk5vZGUucHJvdG90eXBlLnRvT2JqZWN0LmNhbGwodGhpcyk7XG5cbiAgICAgICAgICAgIG9iai5jaGlsZHJlbiA9IFtdO1xuXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmdldENoaWxkcmVuKCk7XG4gICAgICAgICAgICB2YXIgbGVuID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgZm9yKHZhciBuID0gMDsgbiA8IGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5bbl07XG4gICAgICAgICAgICAgICAgb2JqLmNoaWxkcmVuLnB1c2goY2hpbGQudG9PYmplY3QoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXREZXNjZW5kYW50czogZnVuY3Rpb24oYXJyKSB7XG4gICAgICAgICAgICB2YXIgcmV0QXJyID0gW107XG4gICAgICAgICAgICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgICAgICAgICAgIGZvcih2YXIgbiA9IDA7IG4gPCBsZW47IG4rKykge1xuICAgICAgICAgICAgICAgIHZhciBub2RlID0gYXJyW25dO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuaXNBbmNlc3Rvck9mKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldEFyci5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJldEFycjtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRldGVybWluZSBpZiBub2RlIGlzIGFuIGFuY2VzdG9yXG4gICAgICAgICAqIG9mIGRlc2NlbmRhbnRcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250YWluZXIucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7S2luZXRpYy5Ob2RlfSBub2RlXG4gICAgICAgICAqL1xuICAgICAgICBpc0FuY2VzdG9yT2Y6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLmdldFBhcmVudCgpO1xuICAgICAgICAgICAgd2hpbGUocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgaWYocGFyZW50Ll9pZCA9PT0gdGhpcy5faWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5nZXRQYXJlbnQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBjbG9uZTogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICAvLyBjYWxsIHN1cGVyIG1ldGhvZFxuICAgICAgICAgICAgdmFyIG5vZGUgPSBLaW5ldGljLk5vZGUucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcywgb2JqKTtcblxuICAgICAgICAgICAgdGhpcy5nZXRDaGlsZHJlbigpLmVhY2goZnVuY3Rpb24obm8pIHtcbiAgICAgICAgICAgICAgICBub2RlLmFkZChuby5jbG9uZSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgYWxsIHNoYXBlcyB0aGF0IGludGVyc2VjdCBhIHBvaW50LiAgTm90ZTogYmVjYXVzZSB0aGlzIG1ldGhvZCBtdXN0IGNsZWFyIGEgdGVtcG9yYXJ5XG4gICAgICAgICAqIGNhbnZhcyBhbmQgcmVkcmF3IGV2ZXJ5IHNoYXBlIGluc2lkZSB0aGUgY29udGFpbmVyLCBpdCBzaG91bGQgb25seSBiZSB1c2VkIGZvciBzcGVjaWFsIHNpdGF0aW9uc1xuICAgICAgICAgKiBiZWNhdXNlIGl0IHBlcmZvcm1zIHZlcnkgcG9vcmx5LiAgUGxlYXNlIHVzZSB0aGUge0BsaW5rIEtpbmV0aWMuU3RhZ2UjZ2V0SW50ZXJzZWN0aW9ufSBtZXRob2QgaWYgYXQgYWxsIHBvc3NpYmxlXG4gICAgICAgICAqIGJlY2F1c2UgaXQgcGVyZm9ybXMgbXVjaCBiZXR0ZXJcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250YWluZXIucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb3NcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvcy54XG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3MueVxuICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGFycmF5IG9mIHNoYXBlc1xuICAgICAgICAgKi9cbiAgICAgICAgZ2V0QWxsSW50ZXJzZWN0aW9uczogZnVuY3Rpb24ocG9zKSB7XG4gICAgICAgICAgICB2YXIgYXJyID0gW107XG5cbiAgICAgICAgICAgIHRoaXMuZmluZCgnU2hhcGUnKS5lYWNoKGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgICAgICAgICAgICAgaWYoc2hhcGUuaXNWaXNpYmxlKCkgJiYgc2hhcGUuaW50ZXJzZWN0cyhwb3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKHNoYXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgICAgfSxcbiAgICAgICAgX3NldENoaWxkcmVuSW5kaWNlczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmVhY2goZnVuY3Rpb24oY2hpbGQsIG4pIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5pbmRleCA9IG47XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZHJhd1NjZW5lOiBmdW5jdGlvbihjYW4sIHRvcCkge1xuICAgICAgICAgICAgdmFyIGxheWVyID0gdGhpcy5nZXRMYXllcigpLFxuICAgICAgICAgICAgICAgIGNhbnZhcyA9IGNhbiB8fCAobGF5ZXIgJiYgbGF5ZXIuZ2V0Q2FudmFzKCkpLFxuICAgICAgICAgICAgICAgIGNvbnRleHQgPSBjYW52YXMgJiYgY2FudmFzLmdldENvbnRleHQoKSxcbiAgICAgICAgICAgICAgICBjYWNoZWRDYW52YXMgPSB0aGlzLl9jYWNoZS5jYW52YXMsXG4gICAgICAgICAgICAgICAgY2FjaGVkU2NlbmVDYW52YXMgPSBjYWNoZWRDYW52YXMgJiYgY2FjaGVkQ2FudmFzLnNjZW5lO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgICAgIGlmIChjYWNoZWRTY2VuZUNhbnZhcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kcmF3Q2FjaGVkU2NlbmVDYW52YXMoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kcmF3Q2hpbGRyZW4oY2FudmFzLCAnZHJhd1NjZW5lJywgdG9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZHJhd0hpdDogZnVuY3Rpb24oY2FuLCB0b3ApIHtcbiAgICAgICAgICAgIHZhciBsYXllciA9IHRoaXMuZ2V0TGF5ZXIoKSxcbiAgICAgICAgICAgICAgICBjYW52YXMgPSBjYW4gfHwgKGxheWVyICYmIGxheWVyLmhpdENhbnZhcyksXG4gICAgICAgICAgICAgICAgY29udGV4dCA9IGNhbnZhcyAmJiBjYW52YXMuZ2V0Q29udGV4dCgpLFxuICAgICAgICAgICAgICAgIGNhY2hlZENhbnZhcyA9IHRoaXMuX2NhY2hlLmNhbnZhcyxcbiAgICAgICAgICAgICAgICBjYWNoZWRIaXRDYW52YXMgPSBjYWNoZWRDYW52YXMgJiYgY2FjaGVkQ2FudmFzLmhpdDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkRHJhd0hpdChjYW52YXMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyLmNsZWFySGl0Q2FjaGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZEhpdENhbnZhcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kcmF3Q2FjaGVkSGl0Q2FudmFzKGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZHJhd0NoaWxkcmVuKGNhbnZhcywgJ2RyYXdIaXQnLCB0b3ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBfZHJhd0NoaWxkcmVuOiBmdW5jdGlvbihjYW52YXMsIGRyYXdNZXRob2QsIHRvcCkge1xuICAgICAgICAgICAgdmFyIGxheWVyID0gdGhpcy5nZXRMYXllcigpLFxuICAgICAgICAgICAgICAgIGNvbnRleHQgPSBjYW52YXMgJiYgY2FudmFzLmdldENvbnRleHQoKSxcbiAgICAgICAgICAgICAgICBjbGlwV2lkdGggPSB0aGlzLmdldENsaXBXaWR0aCgpLFxuICAgICAgICAgICAgICAgIGNsaXBIZWlnaHQgPSB0aGlzLmdldENsaXBIZWlnaHQoKSxcbiAgICAgICAgICAgICAgICBoYXNDbGlwID0gY2xpcFdpZHRoICYmIGNsaXBIZWlnaHQsXG4gICAgICAgICAgICAgICAgY2xpcFgsIGNsaXBZO1xuXG4gICAgICAgICAgICBpZiAoaGFzQ2xpcCAmJiBsYXllcikge1xuICAgICAgICAgICAgICAgIGNsaXBYID0gdGhpcy5nZXRDbGlwWCgpO1xuICAgICAgICAgICAgICAgIGNsaXBZID0gdGhpcy5nZXRDbGlwWSgpO1xuXG4gICAgICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgbGF5ZXIuX2FwcGx5VHJhbnNmb3JtKHRoaXMsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5yZWN0KGNsaXBYLCBjbGlwWSwgY2xpcFdpZHRoLCBjbGlwSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNsaXAoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlc2V0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uZWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgICAgIGNoaWxkW2RyYXdNZXRob2RdKGNhbnZhcywgdG9wKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoaGFzQ2xpcCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzaG91bGREcmF3SGl0OiBmdW5jdGlvbihjYW52YXMpIHtcbiAgICAgICAgICAgIHZhciBsYXllciA9IHRoaXMuZ2V0TGF5ZXIoKTtcbiAgICAgICAgICAgIHZhciBkZCA9IEtpbmV0aWMuREQ7XG4gICAgICAgICAgICB2YXIgbGF5ZXJVbmRlckRyYWcgPSBkZCAmJiBLaW5ldGljLmlzRHJhZ2dpbmcoKSAmJiAoS2luZXRpYy5ERC5hbmltLmdldExheWVycygpLmluZGV4T2YobGF5ZXIpICE9PSAtMSk7XG4gICAgICAgICAgICByZXR1cm4gIChjYW52YXMgJiYgY2FudmFzLmlzQ2FjaGUpIHx8IChsYXllciAmJiBsYXllci5oaXRHcmFwaEVuYWJsZWQoKSlcbiAgICAgICAgICAgICAgICAmJiB0aGlzLmlzVmlzaWJsZSgpICYmICFsYXllclVuZGVyRHJhZztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLkNvbnRhaW5lciwgS2luZXRpYy5Ob2RlKTtcbiAgICAvLyBkZXByZWNhdGVkIG1ldGhvZHNcbiAgICBLaW5ldGljLkNvbnRhaW5lci5wcm90b3R5cGUuZ2V0ID0gS2luZXRpYy5Db250YWluZXIucHJvdG90eXBlLmZpbmQ7XG5cbiAgICAvLyBhZGQgZ2V0dGVycyBzZXR0ZXJzXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZENvbXBvbmVudHNHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Db250YWluZXIsICdjbGlwJywgWyd4JywgJ3knLCAnd2lkdGgnLCAnaGVpZ2h0J10pO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgY2xpcFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbmFtZSBjbGlwXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ29udGFpbmVyLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjbGlwXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNsaXAueFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjbGlwLnlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY2xpcC53aWR0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjbGlwLmhlaWdodFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgY2xpcFxuICAgICAqIHZhciBjbGlwID0gY29udGFpbmVyLmNsaXAoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBjbGlwXG4gICAgICogY29udGFpbmVyLnNldENsaXAoe1xuICAgICAqICAgeDogMjAsXG4gICAgICogICB5OiAyMCxcbiAgICAgKiAgIHdpZHRoOiAyMCxcbiAgICAgKiAgIGhlaWdodDogMjBcbiAgICAgKiB9KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5Db250YWluZXIsICdjbGlwWCcpO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgY2xpcCB4XG4gICAgICogQG5hbWUgY2xpcFhcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ29udGFpbmVyLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBjbGlwIHhcbiAgICAgKiB2YXIgY2xpcFggPSBjb250YWluZXIuY2xpcFgoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBjbGlwIHhcbiAgICAgKiBjb250YWluZXIuY2xpcFgoMTApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkNvbnRhaW5lciwgJ2NsaXBZJyk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBjbGlwIHlcbiAgICAgKiBAbmFtZSBjbGlwWVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5Db250YWluZXIucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGNsaXAgeVxuICAgICAqIHZhciBjbGlwWSA9IGNvbnRhaW5lci5jbGlwWSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGNsaXAgeVxuICAgICAqIGNvbnRhaW5lci5jbGlwWSgxMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuQ29udGFpbmVyLCAnY2xpcFdpZHRoJyk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBjbGlwIHdpZHRoXG4gICAgICogQG5hbWUgY2xpcFdpZHRoXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbnRhaW5lci5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gd2lkdGhcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGNsaXAgd2lkdGhcbiAgICAgKiB2YXIgY2xpcFdpZHRoID0gY29udGFpbmVyLmNsaXBXaWR0aCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGNsaXAgd2lkdGhcbiAgICAgKiBjb250YWluZXIuY2xpcFdpZHRoKDEwMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuQ29udGFpbmVyLCAnY2xpcEhlaWdodCcpO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgY2xpcCBoZWlnaHRcbiAgICAgKiBAbmFtZSBjbGlwSGVpZ2h0XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkNvbnRhaW5lci5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBjbGlwIGhlaWdodFxuICAgICAqIHZhciBjbGlwSGVpZ2h0ID0gY29udGFpbmVyLmNsaXBIZWlnaHQoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBjbGlwIGhlaWdodFxuICAgICAqIGNvbnRhaW5lci5jbGlwSGVpZ2h0KDEwMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLkNvbnRhaW5lcik7XG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICB2YXIgSEFTX1NIQURPVyA9ICdoYXNTaGFkb3cnO1xuXG4gICAgZnVuY3Rpb24gX2ZpbGxGdW5jKGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9zdHJva2VGdW5jKGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2ZpbGxGdW5jSGl0KGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9zdHJva2VGdW5jSGl0KGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfY2xlYXJIYXNTaGFkb3dDYWNoZSgpIHtcbiAgICAgICAgdGhpcy5fY2xlYXJDYWNoZShIQVNfU0hBRE9XKTtcbiAgICB9XG5cbiAgICBLaW5ldGljLlV0aWwuYWRkTWV0aG9kcyhLaW5ldGljLlNoYXBlLCB7XG4gICAgICAgIF9faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGVUeXBlID0gJ1NoYXBlJztcbiAgICAgICAgICAgIHRoaXMuX2ZpbGxGdW5jID0gX2ZpbGxGdW5jO1xuICAgICAgICAgICAgdGhpcy5fc3Ryb2tlRnVuYyA9IF9zdHJva2VGdW5jO1xuICAgICAgICAgICAgdGhpcy5fZmlsbEZ1bmNIaXQgPSBfZmlsbEZ1bmNIaXQ7XG4gICAgICAgICAgICB0aGlzLl9zdHJva2VGdW5jSGl0ID0gX3N0cm9rZUZ1bmNIaXQ7XG5cbiAgICAgICAgICAgIC8vIHNldCBjb2xvcktleVxuICAgICAgICAgICAgdmFyIHNoYXBlcyA9IEtpbmV0aWMuc2hhcGVzO1xuICAgICAgICAgICAgdmFyIGtleTtcblxuICAgICAgICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGtleSA9IEtpbmV0aWMuVXRpbC5nZXRSYW5kb21Db2xvcigpO1xuICAgICAgICAgICAgICAgIGlmKGtleSAmJiAhKCBrZXkgaW4gc2hhcGVzKSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY29sb3JLZXkgPSBrZXk7XG4gICAgICAgICAgICBzaGFwZXNba2V5XSA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8vIGNhbGwgc3VwZXIgY29uc3RydWN0b3JcbiAgICAgICAgICAgIEtpbmV0aWMuTm9kZS5jYWxsKHRoaXMsIGNvbmZpZyk7XG5cbiAgICAgICAgICAgIHRoaXMub24oJ3NoYWRvd0NvbG9yQ2hhbmdlLmtpbmV0aWMgc2hhZG93Qmx1ckNoYW5nZS5raW5ldGljIHNoYWRvd09mZnNldENoYW5nZS5raW5ldGljIHNoYWRvd09wYWNpdHlDaGFuZ2Uua2luZXRpYyBzaGFkb3dFbmFibGVkQ2hhbmdlLmtpbmV0aWMnLCBfY2xlYXJIYXNTaGFkb3dDYWNoZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhc0NoaWxkcmVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Q2hpbGRyZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IGNhbnZhcyBjb250ZXh0IHRpZWQgdG8gdGhlIGxheWVyXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLkNvbnRleHR9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldExheWVyKCkuZ2V0Q29udGV4dCgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IGNhbnZhcyByZW5kZXJlciB0aWVkIHRvIHRoZSBsYXllci4gIE5vdGUgdGhhdCB0aGlzIHJldHVybnMgYSBjYW52YXMgcmVuZGVyZXIsIG5vdCBhIGNhbnZhcyBlbGVtZW50XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtLaW5ldGljLkNhbnZhc31cbiAgICAgICAgICovXG4gICAgICAgIGdldENhbnZhczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRMYXllcigpLmdldENhbnZhcygpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogcmV0dXJucyB3aGV0aGVyIG9yIG5vdCBhIHNoYWRvdyB3aWxsIGJlIHJlbmRlcmVkXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgaGFzU2hhZG93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRDYWNoZShIQVNfU0hBRE9XLCB0aGlzLl9oYXNTaGFkb3cpO1xuICAgICAgICB9LFxuICAgICAgICBfaGFzU2hhZG93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNoYWRvd0VuYWJsZWQoKSAmJiAodGhpcy5nZXRTaGFkb3dPcGFjaXR5KCkgIT09IDAgJiYgISEodGhpcy5nZXRTaGFkb3dDb2xvcigpIHx8IHRoaXMuZ2V0U2hhZG93Qmx1cigpIHx8IHRoaXMuZ2V0U2hhZG93T2Zmc2V0WCgpIHx8IHRoaXMuZ2V0U2hhZG93T2Zmc2V0WSgpKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiByZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBzaGFwZSB3aWxsIGJlIGZpbGxlZFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIGhhc0ZpbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICEhKHRoaXMuZ2V0RmlsbCgpIHx8IHRoaXMuZ2V0RmlsbFBhdHRlcm5JbWFnZSgpIHx8IHRoaXMuZ2V0RmlsbExpbmVhckdyYWRpZW50Q29sb3JTdG9wcygpIHx8IHRoaXMuZ2V0RmlsbFJhZGlhbEdyYWRpZW50Q29sb3JTdG9wcygpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHNoYXBlIHdpbGwgYmUgc3Ryb2tlZFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIGhhc1N0cm9rZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gISEodGhpcy5zdHJva2UoKSB8fCB0aGlzLnN0cm9rZVJlZCgpIHx8IHRoaXMuc3Ryb2tlR3JlZW4oKSB8fCB0aGlzLnN0cm9rZUJsdWUoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZXRlcm1pbmVzIGlmIHBvaW50IGlzIGluIHRoZSBzaGFwZSwgcmVnYXJkbGVzcyBpZiBvdGhlciBzaGFwZXMgYXJlIG9uIHRvcCBvZiBpdC4gIE5vdGU6IGJlY2F1c2VcbiAgICAgICAgICogIHRoaXMgbWV0aG9kIGNsZWFycyBhIHRlbXBvcmFyeSBjYW52YXMgYW5kIHRoZW4gcmVkcmF3cyB0aGUgc2hhcGUsIGl0IHBlcmZvcm1zIHZlcnkgcG9vcmx5IGlmIGV4ZWN1dGVkIG1hbnkgdGltZXNcbiAgICAgICAgICogIGNvbnNlY3V0aXZlbHkuICBQbGVhc2UgdXNlIHRoZSB7QGxpbmsgS2luZXRpYy5TdGFnZSNnZXRJbnRlcnNlY3Rpb259IG1ldGhvZCBpZiBhdCBhbGwgcG9zc2libGVcbiAgICAgICAgICogIGJlY2F1c2UgaXQgcGVyZm9ybXMgbXVjaCBiZXR0ZXJcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50IFxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gcG9pbnQueFxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gcG9pbnQueVxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIGludGVyc2VjdHM6IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICAgICAgICB2YXIgc3RhZ2UgPSB0aGlzLmdldFN0YWdlKCksXG4gICAgICAgICAgICAgICAgYnVmZmVySGl0Q2FudmFzID0gc3RhZ2UuYnVmZmVySGl0Q2FudmFzLFxuICAgICAgICAgICAgICAgIHA7XG5cbiAgICAgICAgICAgIGJ1ZmZlckhpdENhbnZhcy5nZXRDb250ZXh0KCkuY2xlYXIoKTtcbiAgICAgICAgICAgIHRoaXMuZHJhd1NjZW5lKGJ1ZmZlckhpdENhbnZhcyk7XG4gICAgICAgICAgICBwID0gYnVmZmVySGl0Q2FudmFzLmNvbnRleHQuZ2V0SW1hZ2VEYXRhKE1hdGgucm91bmQocG9pbnQueCksIE1hdGgucm91bmQocG9pbnQueSksIDEsIDEpLmRhdGE7XG4gICAgICAgICAgICByZXR1cm4gcFszXSA+IDA7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGV4dGVuZHMgTm9kZS5wcm90b3R5cGUuZGVzdHJveSBcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIGRlbGV0ZSBLaW5ldGljLnNoYXBlc1t0aGlzLmNvbG9yS2V5XTtcbiAgICAgICAgfSxcbiAgICAgICAgX3VzZUJ1ZmZlckNhbnZhczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuaGFzU2hhZG93KCkgfHwgdGhpcy5nZXRBYnNvbHV0ZU9wYWNpdHkoKSAhPT0gMSkgJiYgdGhpcy5oYXNGaWxsKCkgJiYgdGhpcy5oYXNTdHJva2UoKSAmJiB0aGlzLmdldFN0YWdlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGRyYXdTY2VuZTogZnVuY3Rpb24oY2FuLCB0b3ApIHtcbiAgICAgICAgICAgIHZhciBsYXllciA9IHRoaXMuZ2V0TGF5ZXIoKSxcbiAgICAgICAgICAgICAgICBjYW52YXMgPSBjYW4gfHwgbGF5ZXIuZ2V0Q2FudmFzKCksXG4gICAgICAgICAgICAgICAgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCksXG4gICAgICAgICAgICAgICAgY2FjaGVkQ2FudmFzID0gdGhpcy5fY2FjaGUuY2FudmFzLFxuICAgICAgICAgICAgICAgIGRyYXdGdW5jID0gdGhpcy5zY2VuZUZ1bmMoKSxcbiAgICAgICAgICAgICAgICBoYXNTaGFkb3cgPSB0aGlzLmhhc1NoYWRvdygpLFxuICAgICAgICAgICAgICAgIHN0YWdlLCBidWZmZXJDYW52YXMsIGJ1ZmZlckNvbnRleHQ7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuaXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkQ2FudmFzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdDYWNoZWRTY2VuZUNhbnZhcyhjb250ZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZHJhd0Z1bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGJ1ZmZlciBjYW52YXMgaXMgbmVlZGVkXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91c2VCdWZmZXJDYW52YXMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhZ2UgPSB0aGlzLmdldFN0YWdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJDYW52YXMgPSBzdGFnZS5idWZmZXJDYW52YXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJDb250ZXh0ID0gYnVmZmVyQ2FudmFzLmdldENvbnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlckNvbnRleHQuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlckNvbnRleHQuc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyQ29udGV4dC5fYXBwbHlMaW5lSm9pbih0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxheWVyIG1pZ2h0IGJlIHVuZGVmaW5lZCBpZiB3ZSBhcmUgdXNpbmcgY2FjaGUgYmVmb3JlIGFkZGluZyB0byBsYXllclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuX2FwcGx5VHJhbnNmb3JtKHRoaXMsIGJ1ZmZlckNvbnRleHQsIHRvcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtID0gdGhpcy5nZXRBYnNvbHV0ZVRyYW5zZm9ybSh0b3ApLmdldE1hdHJpeCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQudHJhbnNmb3JtKG1bMF0sIG1bMV0sIG1bMl0sIG1bM10sIG1bNF0sIG1bNV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBkcmF3RnVuYy5jYWxsKHRoaXMsIGJ1ZmZlckNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyQ29udGV4dC5yZXN0b3JlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNTaGFkb3cgJiYgIWNhbnZhcy5oaXRDYW52YXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0Ll9hcHBseVNoYWRvdyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShidWZmZXJDYW52YXMuX2NhbnZhcywgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuX2FwcGx5T3BhY2l0eSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGJ1ZmZlckNhbnZhcy5fY2FudmFzLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBidWZmZXIgY2FudmFzIGlzIG5vdCBuZWVkZWRcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0Ll9hcHBseUxpbmVKb2luKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGF5ZXIgbWlnaHQgYmUgdW5kZWZpbmVkIGlmIHdlIGFyZSB1c2luZyBjYWNoZSBiZWZvcmUgYWRkaW5nIHRvIGxheWVyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5fYXBwbHlUcmFuc2Zvcm0odGhpcywgY29udGV4dCwgdG9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSB0aGlzLmdldEFic29sdXRlVHJhbnNmb3JtKHRvcCkuZ2V0TWF0cml4KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC50cmFuc2Zvcm0ob1swXSwgb1sxXSwgb1syXSwgb1szXSwgb1s0XSwgb1s1XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNTaGFkb3cgJiYgIWNhbnZhcy5oaXRDYW52YXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0Ll9hcHBseVNoYWRvdyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmF3RnVuYy5jYWxsKHRoaXMsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0Ll9hcHBseU9wYWNpdHkodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmF3RnVuYy5jYWxsKHRoaXMsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGRyYXdIaXQ6IGZ1bmN0aW9uKGNhbiwgdG9wKSB7XG4gICAgICAgICAgICB2YXIgbGF5ZXIgPSB0aGlzLmdldExheWVyKCksXG4gICAgICAgICAgICAgICAgY2FudmFzID0gY2FuIHx8IGxheWVyLmhpdENhbnZhcyxcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoKSxcbiAgICAgICAgICAgICAgICBkcmF3RnVuYyA9IHRoaXMuaGl0RnVuYygpIHx8IHRoaXMuc2NlbmVGdW5jKCksXG4gICAgICAgICAgICAgICAgY2FjaGVkQ2FudmFzID0gdGhpcy5fY2FjaGUuY2FudmFzLFxuICAgICAgICAgICAgICAgIGNhY2hlZEhpdENhbnZhcyA9IGNhY2hlZENhbnZhcyAmJiBjYWNoZWRDYW52YXMuaGl0O1xuXG4gICAgICAgICAgICBpZih0aGlzLnNob3VsZERyYXdIaXQoY2FudmFzKSkge1xuICAgICAgICAgICAgICAgIGlmIChsYXllcikge1xuICAgICAgICAgICAgICAgICAgICBsYXllci5jbGVhckhpdENhY2hlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjYWNoZWRIaXRDYW52YXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZHJhd0NhY2hlZEhpdENhbnZhcyhjb250ZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZHJhd0Z1bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuX2FwcGx5TGluZUpvaW4odGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuX2FwcGx5VHJhbnNmb3JtKHRoaXMsIGNvbnRleHQsIHRvcCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IHRoaXMuZ2V0QWJzb2x1dGVUcmFuc2Zvcm0odG9wKS5nZXRNYXRyaXgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQudHJhbnNmb3JtKG1bMF0sIG1bMV0sIG1bMl0sIG1bM10sIG1bNF0sIG1bNV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGRyYXdGdW5jLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAqIGRyYXcgaGl0IGdyYXBoIHVzaW5nIHRoZSBjYWNoZWQgc2NlbmUgY2FudmFzXG4gICAgICAgICogQG1ldGhvZFxuICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gYWxwaGFUaHJlc2hvbGQgYWxwaGEgY2hhbm5lbCB0aHJlc2hvbGQgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90XG4gICAgICAgICogIGEgcGl4ZWwgc2hvdWxkIGJlIGRyYXduIG9udG8gdGhlIGhpdCBncmFwaC4gIE11c3QgYmUgYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDI1NS4gIFxuICAgICAgICAqICBUaGUgZGVmYXVsdCBpcyAwXG4gICAgICAgICogQHJldHVybnMge0tpbmV0aWMuU2hhcGV9XG4gICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgKiBzaGFwZS5jYWNoZSgpO1xuICAgICAgICAqIHNoYXBlLmRyYXdIaXRGcm9tQ2FjaGUoKTtcbiAgICAgICAgKi9cbiAgICAgICAgZHJhd0hpdEZyb21DYWNoZTogZnVuY3Rpb24oYWxwaGFUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgIHZhciB0aHJlc2hvbGQgPSBhbHBoYVRocmVzaG9sZCB8fCAwLFxuICAgICAgICAgICAgICAgIGNhY2hlZENhbnZhcyA9IHRoaXMuX2NhY2hlLmNhbnZhcyxcbiAgICAgICAgICAgICAgICBzY2VuZUNhbnZhcyA9IHRoaXMuX2dldENhY2hlZFNjZW5lQ2FudmFzKCksXG4gICAgICAgICAgICAgICAgc2NlbmVDb250ZXh0ID0gc2NlbmVDYW52YXMuZ2V0Q29udGV4dCgpLFxuICAgICAgICAgICAgICAgIGhpdENhbnZhcyA9IGNhY2hlZENhbnZhcy5oaXQsXG4gICAgICAgICAgICAgICAgaGl0Q29udGV4dCA9IGhpdENhbnZhcy5nZXRDb250ZXh0KCksXG4gICAgICAgICAgICAgICAgd2lkdGggPSBzY2VuZUNhbnZhcy5nZXRXaWR0aCgpLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IHNjZW5lQ2FudmFzLmdldEhlaWdodCgpLFxuICAgICAgICAgICAgICAgIHNjZW5lSW1hZ2VEYXRhLCBzY2VuZURhdGEsIGhpdEltYWdlRGF0YSwgaGl0RGF0YSwgbGVuLCByZ2JDb2xvcktleSwgaSwgYWxwaGE7XG5cbiAgICAgICAgICAgIGhpdENvbnRleHQuY2xlYXIoKTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzY2VuZUltYWdlRGF0YSA9IHNjZW5lQ29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgc2NlbmVEYXRhID0gc2NlbmVJbWFnZURhdGEuZGF0YTtcbiAgICAgICAgICAgICAgICBoaXRJbWFnZURhdGEgPSBoaXRDb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBoaXREYXRhID0gaGl0SW1hZ2VEYXRhLmRhdGE7XG4gICAgICAgICAgICAgICAgbGVuID0gc2NlbmVEYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICByZ2JDb2xvcktleSA9IEtpbmV0aWMuVXRpbC5faGV4VG9SZ2IodGhpcy5jb2xvcktleSk7XG5cbiAgICAgICAgICAgICAgICAvLyByZXBsYWNlIG5vbiB0cmFuc3BhcmVudCBwaXhlbHMgd2l0aCBjb2xvciBrZXlcbiAgICAgICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgICAgICAgICAgICAgICAgICBhbHBoYSA9IHNjZW5lRGF0YVtpICsgM107XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbHBoYSA+IHRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGl0RGF0YVtpXSA9IHJnYkNvbG9yS2V5LnI7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaXREYXRhW2kgKyAxXSA9IHJnYkNvbG9yS2V5Lmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaXREYXRhW2kgKyAyXSA9IHJnYkNvbG9yS2V5LmI7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaXREYXRhW2kgKyAzXSA9IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGhpdENvbnRleHQucHV0SW1hZ2VEYXRhKGhpdEltYWdlRGF0YSwgMCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaChlKSB7XG4gICAgICAgICAgICAgICAgS2luZXRpYy5VdGlsLndhcm4oJ1VuYWJsZSB0byBkcmF3IGhpdCBncmFwaCBmcm9tIGNhY2hlZCBzY2VuZSBjYW52YXMuICcgKyBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5TaGFwZSwgS2luZXRpYy5Ob2RlKTtcblxuICAgIC8vIGFkZCBnZXR0ZXJzIGFuZCBzZXR0ZXJzXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnc3Ryb2tlJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHN0cm9rZSBjb2xvclxuICAgICAqIEBuYW1lIHN0cm9rZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29sb3JcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHN0cm9rZSBjb2xvclxuICAgICAqIHZhciBzdHJva2UgPSBzaGFwZS5zdHJva2UoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzdHJva2UgY29sb3Igd2l0aCBjb2xvciBzdHJpbmdcbiAgICAgKiBzaGFwZS5zdHJva2UoJ2dyZWVuJyk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc3Ryb2tlIGNvbG9yIHdpdGggaGV4XG4gICAgICogc2hhcGUuc3Ryb2tlKCcjMDBmZjAwJyk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc3Ryb2tlIGNvbG9yIHdpdGggcmdiXG4gICAgICogc2hhcGUuc3Ryb2tlKCdyZ2IoMCwyNTUsMCknKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzdHJva2UgY29sb3Igd2l0aCByZ2JhIGFuZCBtYWtlIGl0IDUwJSBvcGFxdWVcbiAgICAgKiBzaGFwZS5zdHJva2UoJ3JnYmEoMCwyNTUsMCwwLjUnKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ3N0cm9rZVJlZCcsIDAsIEtpbmV0aWMuVmFsaWRhdG9ycy5SR0JDb21wb25lbnQpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBzdHJva2UgcmVkIGNvbXBvbmVudFxuICAgICAqIEBuYW1lIHN0cm9rZVJlZFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IHJlZFxuICAgICAqIEByZXR1cm5zIHtJbnRlZ2VyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHN0cm9rZSByZWQgY29tcG9uZW50XG4gICAgICogdmFyIHN0cm9rZVJlZCA9IHNoYXBlLnN0cm9rZVJlZCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHN0cm9rZSByZWQgY29tcG9uZW50XG4gICAgICogc2hhcGUuc3Ryb2tlUmVkKDApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnc3Ryb2tlR3JlZW4nLCAwLCBLaW5ldGljLlZhbGlkYXRvcnMuUkdCQ29tcG9uZW50KTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgc3Ryb2tlIGdyZWVuIGNvbXBvbmVudFxuICAgICAqIEBuYW1lIHN0cm9rZUdyZWVuXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gZ3JlZW5cbiAgICAgKiBAcmV0dXJucyB7SW50ZWdlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBzdHJva2UgZ3JlZW4gY29tcG9uZW50XG4gICAgICogdmFyIHN0cm9rZUdyZWVuID0gc2hhcGUuc3Ryb2tlR3JlZW4oKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzdHJva2UgZ3JlZW4gY29tcG9uZW50XG4gICAgICogc2hhcGUuc3Ryb2tlR3JlZW4oMjU1KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ3N0cm9rZUJsdWUnLCAwLCBLaW5ldGljLlZhbGlkYXRvcnMuUkdCQ29tcG9uZW50KTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgc3Ryb2tlIGJsdWUgY29tcG9uZW50XG4gICAgICogQG5hbWUgc3Ryb2tlQmx1ZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGJsdWVcbiAgICAgKiBAcmV0dXJucyB7SW50ZWdlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBzdHJva2UgYmx1ZSBjb21wb25lbnRcbiAgICAgKiB2YXIgc3Ryb2tlQmx1ZSA9IHNoYXBlLnN0cm9rZUJsdWUoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzdHJva2UgYmx1ZSBjb21wb25lbnRcbiAgICAgKiBzaGFwZS5zdHJva2VCbHVlKDApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnc3Ryb2tlQWxwaGEnLCAxLCBLaW5ldGljLlZhbGlkYXRvcnMuYWxwaGFDb21wb25lbnQpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBzdHJva2UgYWxwaGEgY29tcG9uZW50LiAgQWxwaGEgaXMgYSByZWFsIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEuICBUaGUgZGVmYXVsdFxuICAgICAqICBpcyAxLlxuICAgICAqIEBuYW1lIHN0cm9rZUFscGhhXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhbHBoYVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc3Ryb2tlIGFscGhhIGNvbXBvbmVudFxuICAgICAqIHZhciBzdHJva2VBbHBoYSA9IHNoYXBlLnN0cm9rZUFscGhhKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc3Ryb2tlIGFscGhhIGNvbXBvbmVudFxuICAgICAqIHNoYXBlLnN0cm9rZUFscGhhKDAuNSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdzdHJva2VXaWR0aCcsIDIpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBzdHJva2Ugd2lkdGhcbiAgICAgKiBAbmFtZSBzdHJva2VXaWR0aFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3Ryb2tlV2lkdGhcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHN0cm9rZSB3aWR0aFxuICAgICAqIHZhciBzdHJva2VXaWR0aCA9IHNoYXBlLnN0cm9rZVdpZHRoKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc3Ryb2tlIHdpZHRoXG4gICAgICogc2hhcGUuc3Ryb2tlV2lkdGgoKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2xpbmVKb2luJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGxpbmUgam9pbi4gIENhbiBiZSBtaXRlciwgcm91bmQsIG9yIGJldmVsLiAgVGhlXG4gICAgICogIGRlZmF1bHQgaXMgbWl0ZXJcbiAgICAgKiBAbmFtZSBsaW5lSm9pblxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbGluZUpvaW5cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGxpbmUgam9pblxuICAgICAqIHZhciBsaW5lSm9pbiA9IHNoYXBlLmxpbmVKb2luKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgbGluZSBqb2luXG4gICAgICogc2hhcGUubGluZUpvaW4oJ3JvdW5kJyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdsaW5lQ2FwJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGxpbmUgY2FwLiAgQ2FuIGJlIGJ1dHQsIHJvdW5kLCBvciBzcXVhcmVcbiAgICAgKiBAbmFtZSBsaW5lQ2FwXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBsaW5lQ2FwXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBsaW5lIGNhcFxuICAgICAqIHZhciBsaW5lQ2FwID0gc2hhcGUubGluZUNhcCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGxpbmUgY2FwXG4gICAgICogc2hhcGUubGluZUNhcCgncm91bmQnKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ3NjZW5lRnVuYycpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBzY2VuZSBkcmF3IGZ1bmN0aW9uXG4gICAgICogQG5hbWUgc2NlbmVGdW5jXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGRyYXdGdW5jIGRyYXdpbmcgZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc2NlbmUgZHJhdyBmdW5jdGlvblxuICAgICAqIHZhciBzY2VuZUZ1bmMgPSBzaGFwZS5zY2VuZUZ1bmMoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzY2VuZSBkcmF3IGZ1bmN0aW9uXG4gICAgICogc2hhcGUuc2NlbmVGdW5jKGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgKiAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICogICBjb250ZXh0LnJlY3QoMCwgMCwgdGhpcy53aWR0aCgpLCB0aGlzLmhlaWdodCgpKTtcbiAgICAgKiAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICogICBjb250ZXh0LmZpbGxTdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgKiB9KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2hpdEZ1bmMnKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgaGl0IGRyYXcgZnVuY3Rpb25cbiAgICAgKiBAbmFtZSBoaXRGdW5jXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGRyYXdGdW5jIGRyYXdpbmcgZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgaGl0IGRyYXcgZnVuY3Rpb25cbiAgICAgKiB2YXIgaGl0RnVuYyA9IHNoYXBlLmhpdEZ1bmMoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBoaXQgZHJhdyBmdW5jdGlvblxuICAgICAqIHNoYXBlLmhpdEZ1bmMoZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAqICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgKiAgIGNvbnRleHQucmVjdCgwLCAwLCB0aGlzLndpZHRoKCksIHRoaXMuaGVpZ2h0KCkpO1xuICAgICAqICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgKiAgIGNvbnRleHQuZmlsbFN0cm9rZVNoYXBlKHRoaXMpO1xuICAgICAqIH0pO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZGFzaCcpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBkYXNoIGFycmF5IGZvciBzdHJva2UuXG4gICAgICogQG5hbWUgZGFzaFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXNoXG4gICAgICogQHJldHVybnMge0FycmF5fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogIC8vIGFwcGx5IGRhc2hlZCBzdHJva2UgdGhhdCBpcyAxMHB4IGxvbmcgYW5kIDUgcGl4ZWxzIGFwYXJ0XG4gICAgICogIGxpbmUuZGFzaChbMTAsIDVdKTtcbiAgICAgKiAgXG4gICAgICogIC8vIGFwcGx5IGRhc2hlZCBzdHJva2UgdGhhdCBpcyBtYWRlIHVwIG9mIGFsdGVybmF0aW5nIGRhc2hlZCBcbiAgICAgKiAgLy8gbGluZXMgdGhhdCBhcmUgMTBweCBsb25nIGFuZCAyMHB4IGFwYXJ0LCBhbmQgZG90cyB0aGF0IGhhdmUgXG4gICAgICogIC8vIGEgcmFkaXVzIG9mIDVweCBhbmQgYXJlIDIwcHggYXBhcnRcbiAgICAgKiAgbGluZS5kYXNoKFsxMCwgMjAsIDAuMDAxLCAyMF0pO1xuICAgICAqL1xuXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdzaGFkb3dDb2xvcicpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBzaGFkb3cgY29sb3JcbiAgICAgKiBAbmFtZSBzaGFkb3dDb2xvclxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29sb3JcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHNoYWRvdyBjb2xvclxuICAgICAqIHZhciBzaGFkb3cgPSBzaGFwZS5zaGFkb3dDb2xvcigpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHNoYWRvdyBjb2xvciB3aXRoIGNvbG9yIHN0cmluZ1xuICAgICAqIHNoYXBlLnNoYWRvd0NvbG9yKCdncmVlbicpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHNoYWRvdyBjb2xvciB3aXRoIGhleFxuICAgICAqIHNoYXBlLnNoYWRvd0NvbG9yKCcjMDBmZjAwJyk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc2hhZG93IGNvbG9yIHdpdGggcmdiXG4gICAgICogc2hhcGUuc2hhZG93Q29sb3IoJ3JnYigwLDI1NSwwKScpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHNoYWRvdyBjb2xvciB3aXRoIHJnYmEgYW5kIG1ha2UgaXQgNTAlIG9wYXF1ZVxuICAgICAqIHNoYXBlLnNoYWRvd0NvbG9yKCdyZ2JhKDAsMjU1LDAsMC41Jyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdzaGFkb3dSZWQnLCAwLCBLaW5ldGljLlZhbGlkYXRvcnMuUkdCQ29tcG9uZW50KTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgc2hhZG93IHJlZCBjb21wb25lbnRcbiAgICAgKiBAbmFtZSBzaGFkb3dSZWRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSByZWRcbiAgICAgKiBAcmV0dXJucyB7SW50ZWdlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBzaGFkb3cgcmVkIGNvbXBvbmVudFxuICAgICAqIHZhciBzaGFkb3dSZWQgPSBzaGFwZS5zaGFkb3dSZWQoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzaGFkb3cgcmVkIGNvbXBvbmVudFxuICAgICAqIHNoYXBlLnNoYWRvd1JlZCgwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ3NoYWRvd0dyZWVuJywgMCwgS2luZXRpYy5WYWxpZGF0b3JzLlJHQkNvbXBvbmVudCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHNoYWRvdyBncmVlbiBjb21wb25lbnRcbiAgICAgKiBAbmFtZSBzaGFkb3dHcmVlblxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGdyZWVuXG4gICAgICogQHJldHVybnMge0ludGVnZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc2hhZG93IGdyZWVuIGNvbXBvbmVudFxuICAgICAqIHZhciBzaGFkb3dHcmVlbiA9IHNoYXBlLnNoYWRvd0dyZWVuKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc2hhZG93IGdyZWVuIGNvbXBvbmVudFxuICAgICAqIHNoYXBlLnNoYWRvd0dyZWVuKDI1NSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdzaGFkb3dCbHVlJywgMCwgS2luZXRpYy5WYWxpZGF0b3JzLlJHQkNvbXBvbmVudCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHNoYWRvdyBibHVlIGNvbXBvbmVudFxuICAgICAqIEBuYW1lIHNoYWRvd0JsdWVcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBibHVlXG4gICAgICogQHJldHVybnMge0ludGVnZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc2hhZG93IGJsdWUgY29tcG9uZW50XG4gICAgICogdmFyIHNoYWRvd0JsdWUgPSBzaGFwZS5zaGFkb3dCbHVlKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc2hhZG93IGJsdWUgY29tcG9uZW50XG4gICAgICogc2hhcGUuc2hhZG93Qmx1ZSgwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ3NoYWRvd0FscGhhJywgMSwgS2luZXRpYy5WYWxpZGF0b3JzLmFscGhhQ29tcG9uZW50KTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgc2hhZG93IGFscGhhIGNvbXBvbmVudC4gIEFscGhhIGlzIGEgcmVhbCBudW1iZXIgYmV0d2VlbiAwIGFuZCAxLiAgVGhlIGRlZmF1bHRcbiAgICAgKiAgaXMgMS5cbiAgICAgKiBAbmFtZSBzaGFkb3dBbHBoYVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYWxwaGFcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHNoYWRvdyBhbHBoYSBjb21wb25lbnRcbiAgICAgKiB2YXIgc2hhZG93QWxwaGEgPSBzaGFwZS5zaGFkb3dBbHBoYSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHNoYWRvdyBhbHBoYSBjb21wb25lbnRcbiAgICAgKiBzaGFwZS5zaGFkb3dBbHBoYSgwLjUpO1xuICAgICAqL1xuICAgICBcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdzaGFkb3dCbHVyJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHNoYWRvdyBibHVyXG4gICAgICogQG5hbWUgc2hhZG93Qmx1clxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYmx1clxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc2hhZG93IGJsdXJcbiAgICAgKiB2YXIgc2hhZG93Qmx1ciA9IHNoYXBlLnNoYWRvd0JsdXIoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzaGFkb3cgYmx1clxuICAgICAqIHNoYXBlLnNoYWRvd0JsdXIoMTApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnc2hhZG93T3BhY2l0eScpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBzaGFkb3cgb3BhY2l0eS4gIG11c3QgYmUgYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDFcbiAgICAgKiBAbmFtZSBzaGFkb3dPcGFjaXR5XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcGFjaXR5XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBzaGFkb3cgb3BhY2l0eVxuICAgICAqIHZhciBzaGFkb3dPcGFjaXR5ID0gc2hhcGUuc2hhZG93T3BhY2l0eSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHNoYWRvdyBvcGFjaXR5XG4gICAgICogc2hhcGUuc2hhZG93T3BhY2l0eSgwLjUpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZENvbXBvbmVudHNHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ3NoYWRvd09mZnNldCcsIFsneCcsICd5J10pO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBzaGFkb3cgb2Zmc2V0XG4gICAgICogQG5hbWUgc2hhZG93T2Zmc2V0XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvZmZzZXRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0LnhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0LnlcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHNoYWRvdyBvZmZzZXRcbiAgICAgKiB2YXIgc2hhZG93T2Zmc2V0ID0gc2hhcGUuc2hhZG93T2Zmc2V0KCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgc2hhZG93IG9mZnNldFxuICAgICAqIHNoYXBlLnNoYWRvd09mZnNldCh7XG4gICAgICogICB4OiAyMFxuICAgICAqICAgeTogMTBcbiAgICAgKiB9KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ3NoYWRvd09mZnNldFgnLCAwKTtcblxuICAgICAvKipcbiAgICAgKiBnZXQvc2V0IHNoYWRvdyBvZmZzZXQgeFxuICAgICAqIEBuYW1lIHNoYWRvd09mZnNldFhcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHNoYWRvdyBvZmZzZXQgeFxuICAgICAqIHZhciBzaGFkb3dPZmZzZXRYID0gc2hhcGUuc2hhZG93T2Zmc2V0WCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHNoYWRvdyBvZmZzZXQgeFxuICAgICAqIHNoYXBlLnNoYWRvd09mZnNldFgoNSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdzaGFkb3dPZmZzZXRZJywgMCk7XG5cbiAgICAgLyoqXG4gICAgICogZ2V0L3NldCBzaGFkb3cgb2Zmc2V0IHlcbiAgICAgKiBAbmFtZSBzaGFkb3dPZmZzZXRZXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBzaGFkb3cgb2Zmc2V0IHlcbiAgICAgKiB2YXIgc2hhZG93T2Zmc2V0WSA9IHNoYXBlLnNoYWRvd09mZnNldFkoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBzaGFkb3cgb2Zmc2V0IHlcbiAgICAgKiBzaGFwZS5zaGFkb3dPZmZzZXRZKDUpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbFBhdHRlcm5JbWFnZScpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIHBhdHRlcm4gaW1hZ2VcbiAgICAgKiBAbmFtZSBmaWxsUGF0dGVybkltYWdlXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7SW1hZ2V9IGltYWdlIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtJbWFnZX1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHBhdHRlcm4gaW1hZ2VcbiAgICAgKiB2YXIgZmlsbFBhdHRlcm5JbWFnZSA9IHNoYXBlLmZpbGxQYXR0ZXJuSW1hZ2UoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIHBhdHRlcm4gaW1hZ2VcbiAgICAgKiB2YXIgaW1hZ2VPYmogPSBuZXcgSW1hZ2UoKTtcbiAgICAgKiBpbWFnZU9iai5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgKiAgIHNoYXBlLmZpbGxQYXR0ZXJuSW1hZ2UoaW1hZ2VPYmopO1xuICAgICAqIH07XG4gICAgICogaW1hZ2VPYmouc3JjID0gJ3BhdGgvdG8vaW1hZ2UvanBnJztcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGwnKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBjb2xvclxuICAgICAqIEBuYW1lIGZpbGxcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbG9yXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIGNvbG9yXG4gICAgICogdmFyIGZpbGwgPSBzaGFwZS5maWxsKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCBjb2xvciB3aXRoIGNvbG9yIHN0cmluZ1xuICAgICAqIHNoYXBlLmZpbGwoJ2dyZWVuJyk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCBjb2xvciB3aXRoIGhleFxuICAgICAqIHNoYXBlLmZpbGwoJyMwMGZmMDAnKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIGNvbG9yIHdpdGggcmdiXG4gICAgICogc2hhcGUuZmlsbCgncmdiKDAsMjU1LDApJyk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCBjb2xvciB3aXRoIHJnYmEgYW5kIG1ha2UgaXQgNTAlIG9wYXF1ZVxuICAgICAqIHNoYXBlLmZpbGwoJ3JnYmEoMCwyNTUsMCwwLjUnKTtcbiAgICAgKlxuICAgICAqIC8vIHNoYXBlIHdpdGhvdXQgZmlsbFxuICAgICAqIHNoYXBlLmZpbGwobnVsbCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUmVkJywgMCwgS2luZXRpYy5WYWxpZGF0b3JzLlJHQkNvbXBvbmVudCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcmVkIGNvbXBvbmVudFxuICAgICAqIEBuYW1lIGZpbGxSZWRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSByZWRcbiAgICAgKiBAcmV0dXJucyB7SW50ZWdlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHJlZCBjb21wb25lbnRcbiAgICAgKiB2YXIgZmlsbFJlZCA9IHNoYXBlLmZpbGxSZWQoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIHJlZCBjb21wb25lbnRcbiAgICAgKiBzaGFwZS5maWxsUmVkKDApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbEdyZWVuJywgMCwgS2luZXRpYy5WYWxpZGF0b3JzLlJHQkNvbXBvbmVudCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgZ3JlZW4gY29tcG9uZW50XG4gICAgICogQG5hbWUgZmlsbEdyZWVuXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gZ3JlZW5cbiAgICAgKiBAcmV0dXJucyB7SW50ZWdlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIGdyZWVuIGNvbXBvbmVudFxuICAgICAqIHZhciBmaWxsR3JlZW4gPSBzaGFwZS5maWxsR3JlZW4oKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIGdyZWVuIGNvbXBvbmVudFxuICAgICAqIHNoYXBlLmZpbGxHcmVlbigyNTUpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbEJsdWUnLCAwLCBLaW5ldGljLlZhbGlkYXRvcnMuUkdCQ29tcG9uZW50KTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBibHVlIGNvbXBvbmVudFxuICAgICAqIEBuYW1lIGZpbGxCbHVlXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gYmx1ZVxuICAgICAqIEByZXR1cm5zIHtJbnRlZ2VyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgYmx1ZSBjb21wb25lbnRcbiAgICAgKiB2YXIgZmlsbEJsdWUgPSBzaGFwZS5maWxsQmx1ZSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgYmx1ZSBjb21wb25lbnRcbiAgICAgKiBzaGFwZS5maWxsQmx1ZSgwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxBbHBoYScsIDEsIEtpbmV0aWMuVmFsaWRhdG9ycy5hbHBoYUNvbXBvbmVudCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgYWxwaGEgY29tcG9uZW50LiAgQWxwaGEgaXMgYSByZWFsIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEuICBUaGUgZGVmYXVsdFxuICAgICAqICBpcyAxLlxuICAgICAqIEBuYW1lIGZpbGxBbHBoYVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYWxwaGFcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgYWxwaGEgY29tcG9uZW50XG4gICAgICogdmFyIGZpbGxBbHBoYSA9IHNoYXBlLmZpbGxBbHBoYSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgYWxwaGEgY29tcG9uZW50XG4gICAgICogc2hhcGUuZmlsbEFscGhhKDAuNSk7XG4gICAgICovXG5cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxQYXR0ZXJuWCcsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIHBhdHRlcm4geFxuICAgICAqIEBuYW1lIGZpbGxQYXR0ZXJuWFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCBwYXR0ZXJuIHhcbiAgICAgKiB2YXIgZmlsbFBhdHRlcm5YID0gc2hhcGUuZmlsbFBhdHRlcm5YKCk7XG4gICAgICogXG4gICAgICogLy8gc2V0IGZpbGwgcGF0dGVybiB4XG4gICAgICogc2hhcGUuZmlsbFBhdHRlcm5YKDIwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxQYXR0ZXJuWScsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIHBhdHRlcm4geVxuICAgICAqIEBuYW1lIGZpbGxQYXR0ZXJuWVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCBwYXR0ZXJuIHlcbiAgICAgKiB2YXIgZmlsbFBhdHRlcm5ZID0gc2hhcGUuZmlsbFBhdHRlcm5ZKCk7XG4gICAgICogXG4gICAgICogLy8gc2V0IGZpbGwgcGF0dGVybiB5XG4gICAgICogc2hhcGUuZmlsbFBhdHRlcm5ZKDIwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxMaW5lYXJHcmFkaWVudENvbG9yU3RvcHMnKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBsaW5lYXIgZ3JhZGllbnQgY29sb3Igc3RvcHNcbiAgICAgKiBAbmFtZSBmaWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvbG9yU3RvcHNcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGNvbG9yU3RvcHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIGxpbmVhciBncmFkaWVudCBjb2xvciBzdG9wc1xuICAgICAqIHZhciBjb2xvclN0b3BzID0gc2hhcGUuZmlsbExpbmVhckdyYWRpZW50Q29sb3JTdG9wcygpO1xuICAgICAqXG4gICAgICogLy8gY3JlYXRlIGEgbGluZWFyIGdyYWRpZW50IHRoYXQgc3RhcnRzIHdpdGggcmVkLCBjaGFuZ2VzIHRvIGJsdWUgXG4gICAgICogLy8gaGFsZndheSB0aHJvdWdoLCBhbmQgdGhlbiBjaGFuZ2VzIHRvIGdyZWVuXG4gICAgICogc2hhcGUuZmlsbExpbmVhckdyYWRpZW50Q29sb3JTdG9wcygwLCAncmVkJywgMC41LCAnYmx1ZScsIDEsICdncmVlbicpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXMnLCAwKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCByYWRpYWwgZ3JhZGllbnQgc3RhcnQgcmFkaXVzXG4gICAgICogQG5hbWUgZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZGl1c1xuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgcmFkaWFsIGdyYWRpZW50IHN0YXJ0IHJhZGl1c1xuICAgICAqIHZhciBzdGFydFJhZGl1cyA9IHNoYXBlLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UmFkaXVzKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgcmFkaWFsIGdyYWRpZW50IHN0YXJ0IHJhZGl1c1xuICAgICAqIHNoYXBlLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UmFkaXVzKDApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbFJhZGlhbEdyYWRpZW50RW5kUmFkaXVzJywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcmFkaWFsIGdyYWRpZW50IGVuZCByYWRpdXNcbiAgICAgKiBAbmFtZSBmaWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZGl1c1xuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgcmFkaWFsIGdyYWRpZW50IGVuZCByYWRpdXNcbiAgICAgKiB2YXIgZW5kUmFkaXVzID0gc2hhcGUuZmlsbFJhZGlhbEdyYWRpZW50RW5kUmFkaXVzKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgcmFkaWFsIGdyYWRpZW50IGVuZCByYWRpdXNcbiAgICAgKiBzaGFwZS5maWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXMoMTAwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxSYWRpYWxHcmFkaWVudENvbG9yU3RvcHMnKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCByYWRpYWwgZ3JhZGllbnQgY29sb3Igc3RvcHNcbiAgICAgKiBAbmFtZSBmaWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb2xvclN0b3BzXG4gICAgICogQHJldHVybnMge0FycmF5fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgcmFkaWFsIGdyYWRpZW50IGNvbG9yIHN0b3BzXG4gICAgICogdmFyIGNvbG9yU3RvcHMgPSBzaGFwZS5maWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzKCk7XG4gICAgICpcbiAgICAgKiAvLyBjcmVhdGUgYSByYWRpYWwgZ3JhZGllbnQgdGhhdCBzdGFydHMgd2l0aCByZWQsIGNoYW5nZXMgdG8gYmx1ZSBcbiAgICAgKiAvLyBoYWxmd2F5IHRocm91Z2gsIGFuZCB0aGVuIGNoYW5nZXMgdG8gZ3JlZW5cbiAgICAgKiBzaGFwZS5maWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzKDAsICdyZWQnLCAwLjUsICdibHVlJywgMSwgJ2dyZWVuJyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUGF0dGVyblJlcGVhdCcsICdyZXBlYXQnKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBwYXR0ZXJuIHJlcGVhdC4gIENhbiBiZSAncmVwZWF0JywgJ3JlcGVhdC14JywgJ3JlcGVhdC15Jywgb3IgJ25vLXJlcGVhdCcuICBUaGUgZGVmYXVsdCBpcyAncmVwZWF0J1xuICAgICAqIEBuYW1lIGZpbGxQYXR0ZXJuUmVwZWF0XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXBlYXRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgcGF0dGVybiByZXBlYXRcbiAgICAgKiB2YXIgcmVwZWF0ID0gc2hhcGUuZmlsbFBhdHRlcm5SZXBlYXQoKTtcbiAgICAgKlxuICAgICAqIC8vIHJlcGVhdCBwYXR0ZXJuIGluIHggZGlyZWN0aW9uIG9ubHlcbiAgICAgKiBzaGFwZS5maWxsUGF0dGVyblJlcGVhdCgncmVwZWF0LXgnKTtcbiAgICAgKlxuICAgICAqIC8vIGRvIG5vdCByZXBlYXQgdGhlIHBhdHRlcm5cbiAgICAgKiBzaGFwZS5maWxsUGF0dGVyblJlcGVhdCgnbm8gcmVwZWF0Jyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsRW5hYmxlZCcsIHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIGVuYWJsZWQgZmxhZ1xuICAgICAqIEBuYW1lIGZpbGxFbmFibGVkXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5hYmxlZFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgZW5hYmxlZCBmbGFnXG4gICAgICogdmFyIGZpbGxFbmFibGVkID0gc2hhcGUuZmlsbEVuYWJsZWQoKTtcbiAgICAgKlxuICAgICAqIC8vIGRpc2FibGUgZmlsbFxuICAgICAqIHNoYXBlLmZpbGxFbmFibGVkKGZhbHNlKTtcbiAgICAgKlxuICAgICAqIC8vIGVuYWJsZSBmaWxsXG4gICAgICogc2hhcGUuZmlsbEVuYWJsZWQodHJ1ZSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdzdHJva2VFbmFibGVkJywgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHN0cm9rZSBlbmFibGVkIGZsYWdcbiAgICAgKiBAbmFtZSBzdHJva2VFbmFibGVkXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5hYmxlZFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHN0cm9rZSBlbmFibGVkIGZsYWdcbiAgICAgKiB2YXIgc3Ryb2tlRW5hYmxlZCA9IHNoYXBlLnN0cm9rZUVuYWJsZWQoKTtcbiAgICAgKlxuICAgICAqIC8vIGRpc2FibGUgc3Ryb2tlXG4gICAgICogc2hhcGUuc3Ryb2tlRW5hYmxlZChmYWxzZSk7XG4gICAgICpcbiAgICAgKiAvLyBlbmFibGUgc3Ryb2tlXG4gICAgICogc2hhcGUuc3Ryb2tlRW5hYmxlZCh0cnVlKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ3NoYWRvd0VuYWJsZWQnLCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgc2hhZG93IGVuYWJsZWQgZmxhZ1xuICAgICAqIEBuYW1lIHNoYWRvd0VuYWJsZWRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBlbmFibGVkXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc2hhZG93IGVuYWJsZWQgZmxhZ1xuICAgICAqIHZhciBzaGFkb3dFbmFibGVkID0gc2hhcGUuc2hhZG93RW5hYmxlZCgpO1xuICAgICAqXG4gICAgICogLy8gZGlzYWJsZSBzaGFkb3dcbiAgICAgKiBzaGFwZS5zaGFkb3dFbmFibGVkKGZhbHNlKTtcbiAgICAgKlxuICAgICAqIC8vIGVuYWJsZSBzaGFkb3dcbiAgICAgKiBzaGFwZS5zaGFkb3dFbmFibGVkKHRydWUpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZGFzaEVuYWJsZWQnLCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZGFzaCBlbmFibGVkIGZsYWdcbiAgICAgKiBAbmFtZSBkYXNoRW5hYmxlZFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuYWJsZWRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBkYXNoIGVuYWJsZWQgZmxhZ1xuICAgICAqIHZhciBkYXNoRW5hYmxlZCA9IHNoYXBlLmRhc2hFbmFibGVkKCk7XG4gICAgICpcbiAgICAgKiAvLyBkaXNhYmxlIGRhc2hcbiAgICAgKiBzaGFwZS5kYXNoRW5hYmxlZChmYWxzZSk7XG4gICAgICpcbiAgICAgKiAvLyBlbmFibGUgZGFzaFxuICAgICAqIHNoYXBlLmRhc2hFbmFibGVkKHRydWUpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnc3Ryb2tlU2NhbGVFbmFibGVkJywgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHN0cm9rZVNjYWxlIGVuYWJsZWQgZmxhZ1xuICAgICAqIEBuYW1lIHN0cm9rZVNjYWxlRW5hYmxlZFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuYWJsZWRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBzdHJva2Ugc2NhbGUgZW5hYmxlZCBmbGFnXG4gICAgICogdmFyIHN0cm9rZVNjYWxlRW5hYmxlZCA9IHNoYXBlLnN0cm9rZVNjYWxlRW5hYmxlZCgpO1xuICAgICAqXG4gICAgICogLy8gZGlzYWJsZSBzdHJva2Ugc2NhbGVcbiAgICAgKiBzaGFwZS5zdHJva2VTY2FsZUVuYWJsZWQoZmFsc2UpO1xuICAgICAqXG4gICAgICogLy8gZW5hYmxlIHN0cm9rZSBzY2FsZVxuICAgICAqIHNoYXBlLnN0cm9rZVNjYWxlRW5hYmxlZCh0cnVlKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxQcmlvcml0eScsICdjb2xvcicpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIHByaW9yaXR5LiAgY2FuIGJlIGNvbG9yLCBwYXR0ZXJuLCBsaW5lYXItZ3JhZGllbnQsIG9yIHJhZGlhbC1ncmFkaWVudC4gIFRoZSBkZWZhdWx0IGlzIGNvbG9yLlxuICAgICAqICAgVGhpcyBpcyBoYW5keSBpZiB5b3Ugd2FudCB0byB0b2dnbGUgYmV0d2VlbiBkaWZmZXJlbnQgZmlsbCB0eXBlcy5cbiAgICAgKiBAbmFtZSBmaWxsUHJpb3JpdHlcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByaW9yaXR5XG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHByaW9yaXR5XG4gICAgICogdmFyIGZpbGxQcmlvcml0eSA9IHNoYXBlLmZpbGxQcmlvcml0eSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgcHJpb3JpdHlcbiAgICAgKiBzaGFwZS5maWxsUHJpb3JpdHkoJ2xpbmVhci1ncmFkaWVudCcpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZENvbXBvbmVudHNHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxQYXR0ZXJuT2Zmc2V0JywgWyd4JywgJ3knXSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcGF0dGVybiBvZmZzZXRcbiAgICAgKiBAbmFtZSBmaWxsUGF0dGVybk9mZnNldFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2Zmc2V0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldC54XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldC55XG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHBhdHRlcm4gb2Zmc2V0XG4gICAgICogdmFyIHBhdHRlcm5PZmZzZXQgPSBzaGFwZS5maWxsUGF0dGVybk9mZnNldCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgcGF0dGVybiBvZmZzZXRcbiAgICAgKiBzaGFwZS5maWxsUGF0dGVybk9mZnNldCh7XG4gICAgICogICB4OiAyMFxuICAgICAqICAgeTogMTBcbiAgICAgKiB9KTtcbiAgICAgKi9cblxuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbFBhdHRlcm5PZmZzZXRYJywgMCk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIHBhdHRlcm4gb2Zmc2V0IHhcbiAgICAgKiBAbmFtZSBmaWxsUGF0dGVybk9mZnNldFhcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgcGF0dGVybiBvZmZzZXQgeFxuICAgICAqIHZhciBwYXR0ZXJuT2Zmc2V0WCA9IHNoYXBlLmZpbGxQYXR0ZXJuT2Zmc2V0WCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgcGF0dGVybiBvZmZzZXQgeFxuICAgICAqIHNoYXBlLmZpbGxQYXR0ZXJuT2Zmc2V0WCgyMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUGF0dGVybk9mZnNldFknLCAwKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcGF0dGVybiBvZmZzZXQgeVxuICAgICAqIEBuYW1lIGZpbGxQYXR0ZXJuT2Zmc2V0WVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCBwYXR0ZXJuIG9mZnNldCB5XG4gICAgICogdmFyIHBhdHRlcm5PZmZzZXRZID0gc2hhcGUuZmlsbFBhdHRlcm5PZmZzZXRZKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCBwYXR0ZXJuIG9mZnNldCB5XG4gICAgICogc2hhcGUuZmlsbFBhdHRlcm5PZmZzZXRZKDEwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRDb21wb25lbnRzR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUGF0dGVyblNjYWxlJywgWyd4JywgJ3knXSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcGF0dGVybiBzY2FsZVxuICAgICAqIEBuYW1lIGZpbGxQYXR0ZXJuU2NhbGVcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNjYWxlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlLnhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUueVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCBwYXR0ZXJuIHNjYWxlXG4gICAgICogdmFyIHBhdHRlcm5TY2FsZSA9IHNoYXBlLmZpbGxQYXR0ZXJuU2NhbGUoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIHBhdHRlcm4gc2NhbGVcbiAgICAgKiBzaGFwZS5maWxsUGF0dGVyblNjYWxlKHtcbiAgICAgKiAgIHg6IDJcbiAgICAgKiAgIHk6IDJcbiAgICAgKiB9KTtcbiAgICAgKi9cblxuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbFBhdHRlcm5TY2FsZVgnLCAxKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcGF0dGVybiBzY2FsZSB4XG4gICAgICogQG5hbWUgZmlsbFBhdHRlcm5TY2FsZVhcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgcGF0dGVybiBzY2FsZSB4XG4gICAgICogdmFyIHBhdHRlcm5TY2FsZVggPSBzaGFwZS5maWxsUGF0dGVyblNjYWxlWCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgcGF0dGVybiBzY2FsZSB4XG4gICAgICogc2hhcGUuZmlsbFBhdHRlcm5TY2FsZVgoMik7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUGF0dGVyblNjYWxlWScsIDEpO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBwYXR0ZXJuIHNjYWxlIHlcbiAgICAgKiBAbmFtZSBmaWxsUGF0dGVyblNjYWxlWVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCBwYXR0ZXJuIHNjYWxlIHlcbiAgICAgKiB2YXIgcGF0dGVyblNjYWxlWSA9IHNoYXBlLmZpbGxQYXR0ZXJuU2NhbGVZKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCBwYXR0ZXJuIHNjYWxlIHlcbiAgICAgKiBzaGFwZS5maWxsUGF0dGVyblNjYWxlWSgyKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRDb21wb25lbnRzR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50JywgWyd4JywgJ3knXSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IHN0YXJ0IHBvaW50XG4gICAgICogQG5hbWUgZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhcnRQb2ludFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydFBvaW50LnhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnRQb2ludC55XG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIGxpbmVhciBncmFkaWVudCBzdGFydCBwb2ludFxuICAgICAqIHZhciBzdGFydFBvaW50ID0gc2hhcGUuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IHN0YXJ0IHBvaW50XG4gICAgICogc2hhcGUuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludCh7XG4gICAgICogICB4OiAyMFxuICAgICAqICAgeTogMTBcbiAgICAgKiB9KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRYJywgMCk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIGxpbmVhciBncmFkaWVudCBzdGFydCBwb2ludCB4XG4gICAgICogQG5hbWUgZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFhcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IHN0YXJ0IHBvaW50IHhcbiAgICAgKiB2YXIgc3RhcnRQb2ludFggPSBzaGFwZS5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IHN0YXJ0IHBvaW50IHhcbiAgICAgKiBzaGFwZS5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WCgyMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WScsIDApO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCBsaW5lYXIgZ3JhZGllbnQgc3RhcnQgcG9pbnQgeVxuICAgICAqIEBuYW1lIGZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRZXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIGxpbmVhciBncmFkaWVudCBzdGFydCBwb2ludCB5XG4gICAgICogdmFyIHN0YXJ0UG9pbnRZID0gc2hhcGUuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFkoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIGxpbmVhciBncmFkaWVudCBzdGFydCBwb2ludCB5XG4gICAgICogc2hhcGUuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFkoMjApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZENvbXBvbmVudHNHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TaGFwZSwgJ2ZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50JywgWyd4JywgJ3knXSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IGVuZCBwb2ludFxuICAgICAqIEBuYW1lIGZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbmRQb2ludFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbmRQb2ludC54XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGVuZFBvaW50LnlcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IGVuZCBwb2ludFxuICAgICAqIHZhciBlbmRQb2ludCA9IHNoYXBlLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50KCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCBsaW5lYXIgZ3JhZGllbnQgZW5kIHBvaW50XG4gICAgICogc2hhcGUuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnQoe1xuICAgICAqICAgeDogMjBcbiAgICAgKiAgIHk6IDEwXG4gICAgICogfSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFgnLCAwKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IGVuZCBwb2ludCB4XG4gICAgICogQG5hbWUgZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRYXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIGxpbmVhciBncmFkaWVudCBlbmQgcG9pbnQgeFxuICAgICAqIHZhciBlbmRQb2ludFggPSBzaGFwZS5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFgoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIGxpbmVhciBncmFkaWVudCBlbmQgcG9pbnQgeFxuICAgICAqIHNoYXBlLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WCgyMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFknLCAwKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgbGluZWFyIGdyYWRpZW50IGVuZCBwb2ludCB5XG4gICAgICogQG5hbWUgZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRZXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIGxpbmVhciBncmFkaWVudCBlbmQgcG9pbnQgeVxuICAgICAqIHZhciBlbmRQb2ludFkgPSBzaGFwZS5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFkoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIGxpbmVhciBncmFkaWVudCBlbmQgcG9pbnQgeVxuICAgICAqIHNoYXBlLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WSgyMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkQ29tcG9uZW50c0dldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludCcsIFsneCcsICd5J10pO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIHJhZGlhbCBncmFkaWVudCBzdGFydCBwb2ludFxuICAgICAqIEBuYW1lIGZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YXJ0UG9pbnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnRQb2ludC54XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0UG9pbnQueVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCByYWRpYWwgZ3JhZGllbnQgc3RhcnQgcG9pbnRcbiAgICAgKiB2YXIgc3RhcnRQb2ludCA9IHNoYXBlLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnQoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIHJhZGlhbCBncmFkaWVudCBzdGFydCBwb2ludFxuICAgICAqIHNoYXBlLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnQoe1xuICAgICAqICAgeDogMjBcbiAgICAgKiAgIHk6IDEwXG4gICAgICogfSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WCcsIDApO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgZmlsbCByYWRpYWwgZ3JhZGllbnQgc3RhcnQgcG9pbnQgeFxuICAgICAqIEBuYW1lIGZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRYXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNoYXBlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHJhZGlhbCBncmFkaWVudCBzdGFydCBwb2ludCB4XG4gICAgICogdmFyIHN0YXJ0UG9pbnRYID0gc2hhcGUuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFgoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIHJhZGlhbCBncmFkaWVudCBzdGFydCBwb2ludCB4XG4gICAgICogc2hhcGUuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFgoMjApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFknLCAwKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZpbGwgcmFkaWFsIGdyYWRpZW50IHN0YXJ0IHBvaW50IHlcbiAgICAgKiBAbmFtZSBmaWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCByYWRpYWwgZ3JhZGllbnQgc3RhcnQgcG9pbnQgeVxuICAgICAqIHZhciBzdGFydFBvaW50WSA9IHNoYXBlLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRZKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCByYWRpYWwgZ3JhZGllbnQgc3RhcnQgcG9pbnQgeVxuICAgICAqIHNoYXBlLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRZKDIwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRDb21wb25lbnRzR2V0dGVyU2V0dGVyKEtpbmV0aWMuU2hhcGUsICdmaWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludCcsIFsneCcsICd5J10pO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIHJhZGlhbCBncmFkaWVudCBlbmQgcG9pbnRcbiAgICAgKiBAbmFtZSBmaWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZW5kUG9pbnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZW5kUG9pbnQueFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbmRQb2ludC55XG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmaWxsIHJhZGlhbCBncmFkaWVudCBlbmQgcG9pbnRcbiAgICAgKiB2YXIgZW5kUG9pbnQgPSBzaGFwZS5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGZpbGwgcmFkaWFsIGdyYWRpZW50IGVuZCBwb2ludFxuICAgICAqIHNoYXBlLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50KHtcbiAgICAgKiAgIHg6IDIwXG4gICAgICogICB5OiAxMFxuICAgICAqIH0pO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRYJywgMCk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIHJhZGlhbCBncmFkaWVudCBlbmQgcG9pbnQgeFxuICAgICAqIEBuYW1lIGZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCByYWRpYWwgZ3JhZGllbnQgZW5kIHBvaW50IHhcbiAgICAgKiB2YXIgZW5kUG9pbnRYID0gc2hhcGUuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRYKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCByYWRpYWwgZ3JhZGllbnQgZW5kIHBvaW50IHhcbiAgICAgKiBzaGFwZS5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFgoMjApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRZJywgMCk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIHJhZGlhbCBncmFkaWVudCBlbmQgcG9pbnQgeVxuICAgICAqIEBuYW1lIGZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TaGFwZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCByYWRpYWwgZ3JhZGllbnQgZW5kIHBvaW50IHlcbiAgICAgKiB2YXIgZW5kUG9pbnRZID0gc2hhcGUuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRZKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZmlsbCByYWRpYWwgZ3JhZGllbnQgZW5kIHBvaW50IHlcbiAgICAgKiBzaGFwZS5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFkoMjApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNoYXBlLCAnZmlsbFBhdHRlcm5Sb3RhdGlvbicsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmaWxsIHBhdHRlcm4gcm90YXRpb24gaW4gZGVncmVlc1xuICAgICAqIEBuYW1lIGZpbGxQYXR0ZXJuUm90YXRpb25cbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU2hhcGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJvdGF0aW9uXG4gICAgICogQHJldHVybnMge0tpbmV0aWMuU2hhcGV9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgZmlsbCBwYXR0ZXJuIHJvdGF0aW9uXG4gICAgICogdmFyIHBhdHRlcm5Sb3RhdGlvbiA9IHNoYXBlLmZpbGxQYXR0ZXJuUm90YXRpb24oKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmaWxsIHBhdHRlcm4gcm90YXRpb25cbiAgICAgKiBzaGFwZS5maWxsUGF0dGVyblJvdGF0aW9uKDIwKTtcbiAgICAgKi9cblxuXG4gICAgS2luZXRpYy5GYWN0b3J5LmJhY2tDb21wYXQoS2luZXRpYy5TaGFwZSwge1xuICAgICAgICBkYXNoQXJyYXk6ICdkYXNoJyxcbiAgICAgICAgZ2V0RGFzaEFycmF5OiAnZ2V0RGFzaCcsXG4gICAgICAgIHNldERhc2hBcnJheTogJ2dldERhc2gnLFxuXG4gICAgICAgIGRyYXdGdW5jOiAnc2NlbmVGdW5jJyxcbiAgICAgICAgZ2V0RHJhd0Z1bmM6ICdnZXRTY2VuZUZ1bmMnLFxuICAgICAgICBzZXREcmF3RnVuYzogJ3NldFNjZW5lRnVuYycsXG5cbiAgICAgICAgZHJhd0hpdEZ1bmM6ICdoaXRGdW5jJyxcbiAgICAgICAgZ2V0RHJhd0hpdEZ1bmM6ICdnZXRIaXRGdW5jJyxcbiAgICAgICAgc2V0RHJhd0hpdEZ1bmM6ICdzZXRIaXRGdW5jJ1xuICAgIH0pO1xuXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5TaGFwZSk7XG59KSgpO1xuOy8qanNoaW50IHVudXNlZDpmYWxzZSAqL1xuKGZ1bmN0aW9uKCkge1xuICAgIC8vIENPTlNUQU5UU1xuICAgIHZhciBTVEFHRSA9ICdTdGFnZScsXG4gICAgICAgIFNUUklORyA9ICdzdHJpbmcnLFxuICAgICAgICBQWCA9ICdweCcsXG5cbiAgICAgICAgTU9VU0VPVVQgPSAnbW91c2VvdXQnLFxuICAgICAgICBNT1VTRUxFQVZFID0gJ21vdXNlbGVhdmUnLFxuICAgICAgICBNT1VTRU9WRVIgPSAnbW91c2VvdmVyJyxcbiAgICAgICAgTU9VU0VFTlRFUiA9ICdtb3VzZWVudGVyJyxcbiAgICAgICAgTU9VU0VNT1ZFID0gJ21vdXNlbW92ZScsXG4gICAgICAgIE1PVVNFRE9XTiA9ICdtb3VzZWRvd24nLFxuICAgICAgICBNT1VTRVVQID0gJ21vdXNldXAnLFxuICAgICAgICBDTElDSyA9ICdjbGljaycsXG4gICAgICAgIERCTF9DTElDSyA9ICdkYmxjbGljaycsXG4gICAgICAgIFRPVUNIU1RBUlQgPSAndG91Y2hzdGFydCcsXG4gICAgICAgIFRPVUNIRU5EID0gJ3RvdWNoZW5kJyxcbiAgICAgICAgVEFQID0gJ3RhcCcsXG4gICAgICAgIERCTF9UQVAgPSAnZGJsdGFwJyxcbiAgICAgICAgVE9VQ0hNT1ZFID0gJ3RvdWNobW92ZScsXG4gICAgICAgIERPTU1PVVNFU0NST0xMID0gJ0RPTU1vdXNlU2Nyb2xsJyxcbiAgICAgICAgTU9VU0VXSEVFTCA9ICdtb3VzZXdoZWVsJyxcbiAgICAgICAgV0hFRUwgPSAnd2hlZWwnLFxuXG4gICAgICAgIENPTlRFTlRfTU9VU0VPVVQgPSAnY29udGVudE1vdXNlb3V0JyxcbiAgICAgICAgQ09OVEVOVF9NT1VTRU9WRVIgPSAnY29udGVudE1vdXNlb3ZlcicsXG4gICAgICAgIENPTlRFTlRfTU9VU0VNT1ZFID0gJ2NvbnRlbnRNb3VzZW1vdmUnLFxuICAgICAgICBDT05URU5UX01PVVNFRE9XTiA9ICdjb250ZW50TW91c2Vkb3duJyxcbiAgICAgICAgQ09OVEVOVF9NT1VTRVVQID0gJ2NvbnRlbnRNb3VzZXVwJyxcbiAgICAgICAgQ09OVEVOVF9DTElDSyA9ICdjb250ZW50Q2xpY2snLFxuICAgICAgICBDT05URU5UX0RCTF9DTElDSyA9ICdjb250ZW50RGJsY2xpY2snLFxuICAgICAgICBDT05URU5UX1RPVUNIU1RBUlQgPSAnY29udGVudFRvdWNoc3RhcnQnLFxuICAgICAgICBDT05URU5UX1RPVUNIRU5EID0gJ2NvbnRlbnRUb3VjaGVuZCcsXG4gICAgICAgIENPTlRFTlRfREJMX1RBUCA9ICdjb250ZW50RGJsdGFwJyxcbiAgICAgICAgQ09OVEVOVF9UT1VDSE1PVkUgPSAnY29udGVudFRvdWNobW92ZScsXG5cbiAgICAgICAgRElWID0gJ2RpdicsXG4gICAgICAgIFJFTEFUSVZFID0gJ3JlbGF0aXZlJyxcbiAgICAgICAgSU5MSU5FX0JMT0NLID0gJ2lubGluZS1ibG9jaycsXG4gICAgICAgIEtJTkVUSUNKU19DT05URU5UID0gJ2tpbmV0aWNqcy1jb250ZW50JyxcbiAgICAgICAgU1BBQ0UgPSAnICcsXG4gICAgICAgIFVOREVSU0NPUkUgPSAnXycsXG4gICAgICAgIENPTlRBSU5FUiA9ICdjb250YWluZXInLFxuICAgICAgICBFTVBUWV9TVFJJTkcgPSAnJyxcbiAgICAgICAgRVZFTlRTID0gW01PVVNFRE9XTiwgTU9VU0VNT1ZFLCBNT1VTRVVQLCBNT1VTRU9VVCwgVE9VQ0hTVEFSVCwgVE9VQ0hNT1ZFLCBUT1VDSEVORCwgTU9VU0VPVkVSLCBET01NT1VTRVNDUk9MTCwgTU9VU0VXSEVFTCwgV0hFRUxdLFxuXG4gICAgICAgIC8vIGNhY2hlZCB2YXJpYWJsZXNcbiAgICAgICAgZXZlbnRzTGVuZ3RoID0gRVZFTlRTLmxlbmd0aDtcblxuICAgIGZ1bmN0aW9uIGFkZEV2ZW50KGN0eCwgZXZlbnROYW1lKSB7XG4gICAgICAgIGN0eC5jb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgIGN0eFtVTkRFUlNDT1JFICsgZXZlbnROYW1lXShldnQpO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgS2luZXRpYy5VdGlsLmFkZE1ldGhvZHMoS2luZXRpYy5TdGFnZSwge1xuICAgICAgICBfX19pbml0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZVR5cGUgPSBTVEFHRTtcbiAgICAgICAgICAgIC8vIGNhbGwgc3VwZXIgY29uc3RydWN0b3JcbiAgICAgICAgICAgIEtpbmV0aWMuQ29udGFpbmVyLmNhbGwodGhpcywgY29uZmlnKTtcbiAgICAgICAgICAgIHRoaXMuX2lkID0gS2luZXRpYy5pZENvdW50ZXIrKztcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkRE9NKCk7XG4gICAgICAgICAgICB0aGlzLl9iaW5kQ29udGVudEV2ZW50cygpO1xuICAgICAgICAgICAgdGhpcy5fZW5hYmxlTmVzdGVkVHJhbnNmb3JtcyA9IGZhbHNlO1xuICAgICAgICAgICAgS2luZXRpYy5zdGFnZXMucHVzaCh0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3ZhbGlkYXRlQWRkOiBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLmdldFR5cGUoKSAhPT0gJ0xheWVyJykge1xuICAgICAgICAgICAgICAgIEtpbmV0aWMuVXRpbC5lcnJvcignWW91IG1heSBvbmx5IGFkZCBsYXllcnMgdG8gdGhlIHN0YWdlLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogc2V0IGNvbnRhaW5lciBkb20gZWxlbWVudCB3aGljaCBjb250YWlucyB0aGUgc3RhZ2Ugd3JhcHBlciBkaXYgZWxlbWVudFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YWdlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge0RvbUVsZW1lbnR9IGNvbnRhaW5lciBjYW4gcGFzcyBpbiBhIGRvbSBlbGVtZW50IG9yIGlkIHN0cmluZ1xuICAgICAgICAgKi9cbiAgICAgICAgc2V0Q29udGFpbmVyOiBmdW5jdGlvbihjb250YWluZXIpIHtcbiAgICAgICAgICAgIGlmKCB0eXBlb2YgY29udGFpbmVyID09PSBTVFJJTkcpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBjb250YWluZXI7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gS2luZXRpYy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb250YWluZXIpO1xuICAgICAgICAgICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93ICdDYW4gbm90IGZpbmQgY29udGFpbmVyIGluIGRvY3VtZW50IHdpdGggaWQgJyArIGlkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3NldEF0dHIoQ09OVEFJTkVSLCBjb250YWluZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIHNob3VsZERyYXdIaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGRyYXc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5kcmF3LmNhbGwodGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRyYXcgbGF5ZXIgc2NlbmUgZ3JhcGhzXG4gICAgICAgICAqIEBuYW1lIGRyYXdcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TdGFnZS5wcm90b3R5cGVcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRyYXcgbGF5ZXIgaGl0IGdyYXBoc1xuICAgICAgICAgKiBAbmFtZSBkcmF3SGl0XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3RhZ2UucHJvdG90eXBlXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXQgaGVpZ2h0XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3RhZ2UucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHRcbiAgICAgICAgICovXG4gICAgICAgIHNldEhlaWdodDogZnVuY3Rpb24oaGVpZ2h0KSB7XG4gICAgICAgICAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLnNldEhlaWdodC5jYWxsKHRoaXMsIGhlaWdodCk7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemVET00oKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogc2V0IHdpZHRoXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3RhZ2UucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aFxuICAgICAgICAgKi9cbiAgICAgICAgc2V0V2lkdGg6IGZ1bmN0aW9uKHdpZHRoKSB7XG4gICAgICAgICAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLnNldFdpZHRoLmNhbGwodGhpcywgd2lkdGgpO1xuICAgICAgICAgICAgdGhpcy5fcmVzaXplRE9NKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNsZWFyIGFsbCBsYXllcnNcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TdGFnZS5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBsYXllcnMgPSB0aGlzLmNoaWxkcmVuLFxuICAgICAgICAgICAgICAgIGxlbiA9IGxheWVycy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgbjtcblxuICAgICAgICAgICAgZm9yKG4gPSAwOyBuIDwgbGVuOyBuKyspIHtcbiAgICAgICAgICAgICAgICBsYXllcnNbbl0uY2xlYXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBjbG9uZTogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICBpZiAoIW9iaikge1xuICAgICAgICAgICAgICAgIG9iaiA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqLmNvbnRhaW5lciA9IEtpbmV0aWMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChESVYpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gS2luZXRpYy5Db250YWluZXIucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcywgb2JqKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRlc3Ryb3kgc3RhZ2VcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TdGFnZS5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLmNvbnRlbnQ7XG4gICAgICAgICAgICBLaW5ldGljLkNvbnRhaW5lci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuXG4gICAgICAgICAgICBpZihjb250ZW50ICYmIEtpbmV0aWMuVXRpbC5faXNJbkRvY3VtZW50KGNvbnRlbnQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRDb250YWluZXIoKS5yZW1vdmVDaGlsZChjb250ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbmRleCA9IEtpbmV0aWMuc3RhZ2VzLmluZGV4T2YodGhpcyk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgIEtpbmV0aWMuc3RhZ2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgcG9pbnRlciBwb3NpdGlvbiB3aGljaCBjYW4gYmUgYSB0b3VjaCBwb3NpdGlvbiBvciBtb3VzZSBwb3NpdGlvblxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YWdlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0UG9pbnRlclBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvaW50ZXJQb3M7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFN0YWdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IHN0YWdlIGNvbnRlbnQgZGl2IGVsZW1lbnQgd2hpY2ggaGFzIHRoZVxuICAgICAgICAgKiAgdGhlIGNsYXNzIG5hbWUgXCJraW5ldGljanMtY29udGVudFwiXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3RhZ2UucHJvdG90eXBlXG4gICAgICAgICAqL1xuICAgICAgICBnZXRDb250ZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgY29tcG9zaXRlIGRhdGEgVVJMIGFuZCByZXF1aXJlcyBhIGNhbGxiYWNrIGJlY2F1c2UgdGhlIGNvbXBvc2l0ZSBpcyBnZW5lcmF0ZWQgYXN5bmNocm9ub3VzbHkuXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3RhZ2UucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uZmlnLmNhbGxiYWNrIGZ1bmN0aW9uIGV4ZWN1dGVkIHdoZW4gdGhlIGNvbXBvc2l0ZSBoYXMgY29tcGxldGVkXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm1pbWVUeXBlXSBjYW4gYmUgXCJpbWFnZS9wbmdcIiBvciBcImltYWdlL2pwZWdcIi5cbiAgICAgICAgICogIFwiaW1hZ2UvcG5nXCIgaXMgdGhlIGRlZmF1bHRcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF0geCBwb3NpdGlvbiBvZiBjYW52YXMgc2VjdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XSB5IHBvc2l0aW9uIG9mIGNhbnZhcyBzZWN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXSB3aWR0aCBvZiBjYW52YXMgc2VjdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdIGhlaWdodCBvZiBjYW52YXMgc2VjdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5xdWFsaXR5XSBqcGVnIHF1YWxpdHkuICBJZiB1c2luZyBhbiBcImltYWdlL2pwZWdcIiBtaW1lVHlwZSxcbiAgICAgICAgICogIHlvdSBjYW4gc3BlY2lmeSB0aGUgcXVhbGl0eSBmcm9tIDAgdG8gMSwgd2hlcmUgMCBpcyB2ZXJ5IHBvb3IgcXVhbGl0eSBhbmQgMVxuICAgICAgICAgKiAgaXMgdmVyeSBoaWdoIHF1YWxpdHlcbiAgICAgICAgICovXG4gICAgICAgIHRvRGF0YVVSTDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcgPSBjb25maWcgfHwge307XG5cbiAgICAgICAgICAgIHZhciBtaW1lVHlwZSA9IGNvbmZpZy5taW1lVHlwZSB8fCBudWxsLFxuICAgICAgICAgICAgICAgIHF1YWxpdHkgPSBjb25maWcucXVhbGl0eSB8fCBudWxsLFxuICAgICAgICAgICAgICAgIHggPSBjb25maWcueCB8fCAwLFxuICAgICAgICAgICAgICAgIHkgPSBjb25maWcueSB8fCAwLFxuICAgICAgICAgICAgICAgIGNhbnZhcyA9IG5ldyBLaW5ldGljLlNjZW5lQ2FudmFzKHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGNvbmZpZy53aWR0aCB8fCB0aGlzLmdldFdpZHRoKCksXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogY29uZmlnLmhlaWdodCB8fCB0aGlzLmdldEhlaWdodCgpLFxuICAgICAgICAgICAgICAgICAgICBwaXhlbFJhdGlvOiAxXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgX2NvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgpLl9jb250ZXh0LFxuICAgICAgICAgICAgICAgIGxheWVycyA9IHRoaXMuY2hpbGRyZW47XG5cbiAgICAgICAgICAgIGlmKHggfHwgeSkge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0LnRyYW5zbGF0ZSgtMSAqIHgsIC0xICogeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRyYXdMYXllcihuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxheWVyID0gbGF5ZXJzW25dLFxuICAgICAgICAgICAgICAgICAgICBsYXllclVybCA9IGxheWVyLnRvRGF0YVVSTCgpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZU9iaiA9IG5ldyBLaW5ldGljLndpbmRvdy5JbWFnZSgpO1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VPYmoub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF9jb250ZXh0LmRyYXdJbWFnZShpbWFnZU9iaiwgMCwgMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYobiA8IGxheWVycy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmF3TGF5ZXIobiArIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmNhbGxiYWNrKGNhbnZhcy50b0RhdGFVUkwobWltZVR5cGUsIHF1YWxpdHkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaW1hZ2VPYmouc3JjID0gbGF5ZXJVcmw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkcmF3TGF5ZXIoMCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb252ZXJ0cyBzdGFnZSBpbnRvIGFuIGltYWdlLlxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YWdlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbmZpZy5jYWxsYmFjayBmdW5jdGlvbiBleGVjdXRlZCB3aGVuIHRoZSBjb21wb3NpdGUgaGFzIGNvbXBsZXRlZFxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5taW1lVHlwZV0gY2FuIGJlIFwiaW1hZ2UvcG5nXCIgb3IgXCJpbWFnZS9qcGVnXCIuXG4gICAgICAgICAqICBcImltYWdlL3BuZ1wiIGlzIHRoZSBkZWZhdWx0XG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdIHggcG9zaXRpb24gb2YgY2FudmFzIHNlY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV0geSBwb3NpdGlvbiBvZiBjYW52YXMgc2VjdGlvblxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF0gd2lkdGggb2YgY2FudmFzIHNlY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XSBoZWlnaHQgb2YgY2FudmFzIHNlY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucXVhbGl0eV0ganBlZyBxdWFsaXR5LiAgSWYgdXNpbmcgYW4gXCJpbWFnZS9qcGVnXCIgbWltZVR5cGUsXG4gICAgICAgICAqICB5b3UgY2FuIHNwZWNpZnkgdGhlIHF1YWxpdHkgZnJvbSAwIHRvIDEsIHdoZXJlIDAgaXMgdmVyeSBwb29yIHF1YWxpdHkgYW5kIDFcbiAgICAgICAgICogIGlzIHZlcnkgaGlnaCBxdWFsaXR5XG4gICAgICAgICAqL1xuICAgICAgICB0b0ltYWdlOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIHZhciBjYiA9IGNvbmZpZy5jYWxsYmFjaztcblxuICAgICAgICAgICAgY29uZmlnLmNhbGxiYWNrID0gZnVuY3Rpb24oZGF0YVVybCkge1xuICAgICAgICAgICAgICAgIEtpbmV0aWMuVXRpbC5fZ2V0SW1hZ2UoZGF0YVVybCwgZnVuY3Rpb24oaW1nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKGltZyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy50b0RhdGFVUkwoY29uZmlnKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCB2aXNpYmxlIGludGVyc2VjdGlvbiBzaGFwZS4gVGhpcyBpcyB0aGUgcHJlZmVycmVkXG4gICAgICAgICAqICBtZXRob2QgZm9yIGRldGVybWluaW5nIGlmIGEgcG9pbnQgaW50ZXJzZWN0cyBhIHNoYXBlIG9yIG5vdFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YWdlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9zXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3MueFxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gcG9zLnlcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuU2hhcGV9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRJbnRlcnNlY3Rpb246IGZ1bmN0aW9uKHBvcykge1xuICAgICAgICAgICAgdmFyIGxheWVycyA9IHRoaXMuZ2V0Q2hpbGRyZW4oKSxcbiAgICAgICAgICAgICAgICBsZW4gPSBsYXllcnMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGVuZCA9IGxlbiAtIDEsXG4gICAgICAgICAgICAgICAgbiwgc2hhcGU7XG5cbiAgICAgICAgICAgIGZvcihuID0gZW5kOyBuID49IDA7IG4tLSkge1xuICAgICAgICAgICAgICAgIHNoYXBlID0gbGF5ZXJzW25dLmdldEludGVyc2VjdGlvbihwb3MpO1xuICAgICAgICAgICAgICAgIGlmIChzaGFwZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2hhcGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgX3Jlc2l6ZURPTTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZih0aGlzLmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmdldFdpZHRoKCksXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuZ2V0SGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIGxheWVycyA9IHRoaXMuZ2V0Q2hpbGRyZW4oKSxcbiAgICAgICAgICAgICAgICAgICAgbGVuID0gbGF5ZXJzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgbiwgbGF5ZXI7XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgY29udGVudCBkaW1lbnNpb25zXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyBQWDtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgUFg7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlckNhbnZhcy5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVySGl0Q2FudmFzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgbGF5ZXIgZGltZW5zaW9uc1xuICAgICAgICAgICAgICAgIGZvcihuID0gMDsgbiA8IGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyID0gbGF5ZXJzW25dO1xuICAgICAgICAgICAgICAgICAgICBsYXllci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBsYXllci5kcmF3KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogYWRkIGxheWVyIG9yIGxheWVycyB0byBzdGFnZVxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YWdlLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0gey4uLktpbmV0aWMuTGF5ZXJ9IGxheWVyXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIHN0YWdlLmFkZChsYXllcjEsIGxheWVyMiwgbGF5ZXIzKTtcbiAgICAgICAgICovXG4gICAgICAgIGFkZDogZnVuY3Rpb24obGF5ZXIpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkKGFyZ3VtZW50c1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEtpbmV0aWMuQ29udGFpbmVyLnByb3RvdHlwZS5hZGQuY2FsbCh0aGlzLCBsYXllcik7XG4gICAgICAgICAgICBsYXllci5fc2V0Q2FudmFzU2l6ZSh0aGlzLndpZHRoKCksIHRoaXMuaGVpZ2h0KCkpO1xuXG4gICAgICAgICAgICAvLyBkcmF3IGxheWVyIGFuZCBhcHBlbmQgY2FudmFzIHRvIGNvbnRhaW5lclxuICAgICAgICAgICAgbGF5ZXIuZHJhdygpO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50LmFwcGVuZENoaWxkKGxheWVyLmNhbnZhcy5fY2FudmFzKTtcblxuICAgICAgICAgICAgLy8gY2hhaW5hYmxlXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UGFyZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBnZXRMYXllcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJldHVybnMgYSB7QGxpbmsgS2luZXRpYy5Db2xsZWN0aW9ufSBvZiBsYXllcnNcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TdGFnZS5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIGdldExheWVyczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDaGlsZHJlbigpO1xuICAgICAgICB9LFxuICAgICAgICBfYmluZENvbnRlbnRFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBldmVudHNMZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgICAgIGFkZEV2ZW50KHRoaXMsIEVWRU5UU1tuXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9tb3VzZW92ZXI6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgaWYgKCFLaW5ldGljLlVBLm1vYmlsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldFBvaW50ZXJQb3NpdGlvbihldnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmUoQ09OVEVOVF9NT1VTRU9WRVIsIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfbW91c2VvdXQ6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgaWYgKCFLaW5ldGljLlVBLm1vYmlsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldFBvaW50ZXJQb3NpdGlvbihldnQpO1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRTaGFwZSA9IHRoaXMudGFyZ2V0U2hhcGU7XG5cbiAgICAgICAgICAgICAgICBpZih0YXJnZXRTaGFwZSAmJiAhS2luZXRpYy5pc0RyYWdnaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2hhcGUuX2ZpcmVBbmRCdWJibGUoTU9VU0VPVVQsIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTaGFwZS5fZmlyZUFuZEJ1YmJsZShNT1VTRUxFQVZFLCB7ZXZ0OiBldnR9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRTaGFwZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlclBvcyA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmUoQ09OVEVOVF9NT1VTRU9VVCwge2V2dDogZXZ0fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9tb3VzZW1vdmU6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBcbiAgICAgICAgICAgIC8vIHdvcmthcm91bmQgZm9yIG1vYmlsZSBJRSB0byBmb3JjZSB0b3VjaCBldmVudCB3aGVuIHVuaGFuZGxlZCBwb2ludGVyIGV2ZW50IGVsZXZhdGVzIGludG8gYSBtb3VzZSBldmVudFxuICAgICAgICAgICAgaWYgKEtpbmV0aWMuVUEuaWVNb2JpbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdG91Y2htb3ZlKGV2dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHdvcmthcm91bmQgZmFrZSBtb3VzZW1vdmUgZXZlbnQgaW4gY2hyb21lIGJyb3dzZXIgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTE2MTQ2NFxuICAgICAgICAgICAgaWYgKCh0eXBlb2YgZXZ0LndlYmtpdE1vdmVtZW50WCAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGV2dC53ZWJraXRNb3ZlbWVudFkgIT09ICd1bmRlZmluZWQnKSAmJiBldnQud2Via2l0TW92ZW1lbnRZID09PSAwICYmIGV2dC53ZWJraXRNb3ZlbWVudFggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoS2luZXRpYy5VQS5tb2JpbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zZXRQb2ludGVyUG9zaXRpb24oZXZ0KTtcbiAgICAgICAgICAgIHZhciBkZCA9IEtpbmV0aWMuREQsIHNoYXBlO1xuXG4gICAgICAgICAgICBpZiAoIUtpbmV0aWMuaXNEcmFnZ2luZygpKSB7XG4gICAgICAgICAgICAgICAgc2hhcGUgPSB0aGlzLmdldEludGVyc2VjdGlvbih0aGlzLmdldFBvaW50ZXJQb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICBpZihzaGFwZSAmJiBzaGFwZS5pc0xpc3RlbmluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKCFLaW5ldGljLmlzRHJhZ2dpbmcoKSAmJiAoIXRoaXMudGFyZ2V0U2hhcGUgfHwgdGhpcy50YXJnZXRTaGFwZS5faWQgIT09IHNoYXBlLl9pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMudGFyZ2V0U2hhcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFNoYXBlLl9maXJlQW5kQnViYmxlKE1PVVNFT1VULCB7ZXZ0OiBldnR9LCBzaGFwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRTaGFwZS5fZmlyZUFuZEJ1YmJsZShNT1VTRUxFQVZFLCB7ZXZ0OiBldnR9LCBzaGFwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFwZS5fZmlyZUFuZEJ1YmJsZShNT1VTRU9WRVIsIHtldnQ6IGV2dH0sIHRoaXMudGFyZ2V0U2hhcGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGUuX2ZpcmVBbmRCdWJibGUoTU9VU0VFTlRFUiwge2V2dDogZXZ0fSwgdGhpcy50YXJnZXRTaGFwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFNoYXBlID0gc2hhcGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFwZS5fZmlyZUFuZEJ1YmJsZShNT1VTRU1PVkUsIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogaWYgbm8gc2hhcGUgd2FzIGRldGVjdGVkLCBjbGVhciB0YXJnZXQgc2hhcGUgYW5kIHRyeVxuICAgICAgICAgICAgICAgICAqIHRvIHJ1biBtb3VzZW91dCBmcm9tIHByZXZpb3VzIHRhcmdldCBzaGFwZVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnRhcmdldFNoYXBlICYmICFLaW5ldGljLmlzRHJhZ2dpbmcoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRTaGFwZS5fZmlyZUFuZEJ1YmJsZShNT1VTRU9VVCwge2V2dDogZXZ0fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFNoYXBlLl9maXJlQW5kQnViYmxlKE1PVVNFTEVBVkUsIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRTaGFwZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGNvbnRlbnQgZXZlbnRcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlKENPTlRFTlRfTU9VU0VNT1ZFLCB7ZXZ0OiBldnR9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGRkKSB7XG4gICAgICAgICAgICAgICAgZGQuX2RyYWcoZXZ0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYWx3YXlzIGNhbGwgcHJldmVudERlZmF1bHQgZm9yIGRlc2t0b3AgZXZlbnRzIGJlY2F1c2Ugc29tZSBicm93c2Vyc1xuICAgICAgICAgICAgLy8gdHJ5IHRvIGRyYWcgYW5kIGRyb3AgdGhlIGNhbnZhcyBlbGVtZW50XG4gICAgICAgICAgICBpZiAoZXZ0LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9tb3VzZWRvd246IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBcbiAgICAgICAgICAgIC8vIHdvcmthcm91bmQgZm9yIG1vYmlsZSBJRSB0byBmb3JjZSB0b3VjaCBldmVudCB3aGVuIHVuaGFuZGxlZCBwb2ludGVyIGV2ZW50IGVsZXZhdGVzIGludG8gYSBtb3VzZSBldmVudCAgICAgICBcbiAgICAgICAgICAgIGlmIChLaW5ldGljLlVBLmllTW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RvdWNoc3RhcnQoZXZ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFLaW5ldGljLlVBLm1vYmlsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldFBvaW50ZXJQb3NpdGlvbihldnQpO1xuICAgICAgICAgICAgICAgIHZhciBzaGFwZSA9IHRoaXMuZ2V0SW50ZXJzZWN0aW9uKHRoaXMuZ2V0UG9pbnRlclBvc2l0aW9uKCkpO1xuXG4gICAgICAgICAgICAgICAgS2luZXRpYy5saXN0ZW5DbGlja1RhcCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2hhcGUgJiYgc2hhcGUuaXNMaXN0ZW5pbmcoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaWNrU3RhcnRTaGFwZSA9IHNoYXBlO1xuICAgICAgICAgICAgICAgICAgICBzaGFwZS5fZmlyZUFuZEJ1YmJsZShNT1VTRURPV04sIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGNvbnRlbnQgZXZlbnRcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlKENPTlRFTlRfTU9VU0VET1dOLCB7ZXZ0OiBldnR9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYWx3YXlzIGNhbGwgcHJldmVudERlZmF1bHQgZm9yIGRlc2t0b3AgZXZlbnRzIGJlY2F1c2Ugc29tZSBicm93c2Vyc1xuICAgICAgICAgICAgLy8gdHJ5IHRvIGRyYWcgYW5kIGRyb3AgdGhlIGNhbnZhcyBlbGVtZW50XG4gICAgICAgICAgICBpZiAoZXZ0LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9tb3VzZXVwOiBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgXG4gICAgICAgICAgICAvLyB3b3JrYXJvdW5kIGZvciBtb2JpbGUgSUUgdG8gZm9yY2UgdG91Y2ggZXZlbnQgd2hlbiB1bmhhbmRsZWQgcG9pbnRlciBldmVudCBlbGV2YXRlcyBpbnRvIGEgbW91c2UgZXZlbnQgICAgICAgXG4gICAgICAgICAgICBpZiAoS2luZXRpYy5VQS5pZU1vYmlsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90b3VjaGVuZChldnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFLaW5ldGljLlVBLm1vYmlsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldFBvaW50ZXJQb3NpdGlvbihldnQpO1xuICAgICAgICAgICAgICAgIHZhciBzaGFwZSA9IHRoaXMuZ2V0SW50ZXJzZWN0aW9uKHRoaXMuZ2V0UG9pbnRlclBvc2l0aW9uKCkpLFxuICAgICAgICAgICAgICAgICAgICBjbGlja1N0YXJ0U2hhcGUgPSB0aGlzLmNsaWNrU3RhcnRTaGFwZSxcbiAgICAgICAgICAgICAgICAgICAgZmlyZURibENsaWNrID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRkID0gS2luZXRpYy5ERDtcblxuICAgICAgICAgICAgICAgIGlmKEtpbmV0aWMuaW5EYmxDbGlja1dpbmRvdykge1xuICAgICAgICAgICAgICAgICAgICBmaXJlRGJsQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBLaW5ldGljLmluRGJsQ2xpY2tXaW5kb3cgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZG9uJ3Qgc2V0IGluRGJsQ2xpY2tXaW5kb3cgYWZ0ZXIgZHJhZ2dpbmdcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghZGQgfHwgIWRkLmp1c3REcmFnZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIEtpbmV0aWMuaW5EYmxDbGlja1dpbmRvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkZCkge1xuICAgICAgICAgICAgICAgICAgICBkZC5qdXN0RHJhZ2dlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIEtpbmV0aWMuaW5EYmxDbGlja1dpbmRvdyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0sIEtpbmV0aWMuZGJsQ2xpY2tXaW5kb3cpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlICYmIHNoYXBlLmlzTGlzdGVuaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hhcGUuX2ZpcmVBbmRCdWJibGUoTU9VU0VVUCwge2V2dDogZXZ0fSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZGV0ZWN0IGlmIGNsaWNrIG9yIGRvdWJsZSBjbGljayBvY2N1cnJlZFxuICAgICAgICAgICAgICAgICAgICBpZihLaW5ldGljLmxpc3RlbkNsaWNrVGFwICYmIGNsaWNrU3RhcnRTaGFwZSAmJiBjbGlja1N0YXJ0U2hhcGUuX2lkID09PSBzaGFwZS5faWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlLl9maXJlQW5kQnViYmxlKENMSUNLLCB7ZXZ0OiBldnR9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZmlyZURibENsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGUuX2ZpcmVBbmRCdWJibGUoREJMX0NMSUNLLCB7ZXZ0OiBldnR9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBjb250ZW50IGV2ZW50c1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmUoQ09OVEVOVF9NT1VTRVVQLCB7ZXZ0OiBldnR9KTtcbiAgICAgICAgICAgICAgICBpZiAoS2luZXRpYy5saXN0ZW5DbGlja1RhcCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maXJlKENPTlRFTlRfQ0xJQ0ssIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgICAgICAgICBpZihmaXJlRGJsQ2xpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmUoQ09OVEVOVF9EQkxfQ0xJQ0ssIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgS2luZXRpYy5saXN0ZW5DbGlja1RhcCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBhbHdheXMgY2FsbCBwcmV2ZW50RGVmYXVsdCBmb3IgZGVza3RvcCBldmVudHMgYmVjYXVzZSBzb21lIGJyb3dzZXJzXG4gICAgICAgICAgICAvLyB0cnkgdG8gZHJhZyBhbmQgZHJvcCB0aGUgY2FudmFzIGVsZW1lbnRcbiAgICAgICAgICAgIGlmIChldnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX3RvdWNoc3RhcnQ6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0UG9pbnRlclBvc2l0aW9uKGV2dCk7XG4gICAgICAgICAgICB2YXIgc2hhcGUgPSB0aGlzLmdldEludGVyc2VjdGlvbih0aGlzLmdldFBvaW50ZXJQb3NpdGlvbigpKTtcblxuICAgICAgICAgICAgS2luZXRpYy5saXN0ZW5DbGlja1RhcCA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChzaGFwZSAmJiBzaGFwZS5pc0xpc3RlbmluZygpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXBTdGFydFNoYXBlID0gc2hhcGU7XG4gICAgICAgICAgICAgICAgc2hhcGUuX2ZpcmVBbmRCdWJibGUoVE9VQ0hTVEFSVCwge2V2dDogZXZ0fSk7XG5cbiAgICAgICAgICAgICAgICAvLyBvbmx5IGNhbGwgcHJldmVudERlZmF1bHQgaWYgdGhlIHNoYXBlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzXG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlLmlzTGlzdGVuaW5nKCkgJiYgZXZ0LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvbnRlbnQgZXZlbnRcbiAgICAgICAgICAgIHRoaXMuX2ZpcmUoQ09OVEVOVF9UT1VDSFNUQVJULCB7ZXZ0OiBldnR9KTtcbiAgICAgICAgfSxcbiAgICAgICAgX3RvdWNoZW5kOiBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldFBvaW50ZXJQb3NpdGlvbihldnQpO1xuICAgICAgICAgICAgdmFyIHNoYXBlID0gdGhpcy5nZXRJbnRlcnNlY3Rpb24odGhpcy5nZXRQb2ludGVyUG9zaXRpb24oKSksXG4gICAgICAgICAgICAgICAgZmlyZURibENsaWNrID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmKEtpbmV0aWMuaW5EYmxDbGlja1dpbmRvdykge1xuICAgICAgICAgICAgICAgIGZpcmVEYmxDbGljayA9IHRydWU7XG4gICAgICAgICAgICAgICAgS2luZXRpYy5pbkRibENsaWNrV2luZG93ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBLaW5ldGljLmluRGJsQ2xpY2tXaW5kb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIEtpbmV0aWMuaW5EYmxDbGlja1dpbmRvdyA9IGZhbHNlO1xuICAgICAgICAgICAgfSwgS2luZXRpYy5kYmxDbGlja1dpbmRvdyk7XG5cbiAgICAgICAgICAgIGlmIChzaGFwZSAmJiBzaGFwZS5pc0xpc3RlbmluZygpKSB7XG4gICAgICAgICAgICAgICAgc2hhcGUuX2ZpcmVBbmRCdWJibGUoVE9VQ0hFTkQsIHtldnQ6IGV2dH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gZGV0ZWN0IGlmIHRhcCBvciBkb3VibGUgdGFwIG9jY3VycmVkXG4gICAgICAgICAgICAgICAgaWYoS2luZXRpYy5saXN0ZW5DbGlja1RhcCAmJiBzaGFwZS5faWQgPT09IHRoaXMudGFwU3RhcnRTaGFwZS5faWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hhcGUuX2ZpcmVBbmRCdWJibGUoVEFQLCB7ZXZ0OiBldnR9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZihmaXJlRGJsQ2xpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlLl9maXJlQW5kQnViYmxlKERCTF9UQVAsIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG9ubHkgY2FsbCBwcmV2ZW50RGVmYXVsdCBpZiB0aGUgc2hhcGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGUuaXNMaXN0ZW5pbmcoKSAmJiBldnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29udGVudCBldmVudHNcbiAgICAgICAgICAgIGlmIChLaW5ldGljLmxpc3RlbkNsaWNrVGFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZShDT05URU5UX1RPVUNIRU5ELCB7ZXZ0OiBldnR9KTtcbiAgICAgICAgICAgICAgICBpZihmaXJlRGJsQ2xpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlyZShDT05URU5UX0RCTF9UQVAsIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgS2luZXRpYy5saXN0ZW5DbGlja1RhcCA9IGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBfdG91Y2htb3ZlOiBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldFBvaW50ZXJQb3NpdGlvbihldnQpO1xuICAgICAgICAgICAgdmFyIGRkID0gS2luZXRpYy5ERCxcbiAgICAgICAgICAgICAgICBzaGFwZTtcbiAgICAgICAgICAgIGlmICghS2luZXRpYy5pc0RyYWdnaW5nKCkpIHtcbiAgICAgICAgICAgICAgICBzaGFwZSA9IHRoaXMuZ2V0SW50ZXJzZWN0aW9uKHRoaXMuZ2V0UG9pbnRlclBvc2l0aW9uKCkpO1xuICAgICAgICAgICAgICAgIGlmIChzaGFwZSAmJiBzaGFwZS5pc0xpc3RlbmluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNoYXBlLl9maXJlQW5kQnViYmxlKFRPVUNITU9WRSwge2V2dDogZXZ0fSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgY2FsbCBwcmV2ZW50RGVmYXVsdCBpZiB0aGUgc2hhcGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNoYXBlLmlzTGlzdGVuaW5nKCkgJiYgZXZ0LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlKENPTlRFTlRfVE9VQ0hNT1ZFLCB7ZXZ0OiBldnR9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGRkKSB7XG4gICAgICAgICAgICAgICAgZGQuX2RyYWcoZXZ0KTtcbiAgICAgICAgICAgICAgICBpZiAoS2luZXRpYy5pc0RyYWdnaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfRE9NTW91c2VTY3JvbGw6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgdGhpcy5fbW91c2V3aGVlbChldnQpO1xuICAgICAgICB9LFxuICAgICAgICBfbW91c2V3aGVlbDogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRQb2ludGVyUG9zaXRpb24oZXZ0KTtcbiAgICAgICAgICAgIHZhciBzaGFwZSA9IHRoaXMuZ2V0SW50ZXJzZWN0aW9uKHRoaXMuZ2V0UG9pbnRlclBvc2l0aW9uKCkpO1xuXG4gICAgICAgICAgICBpZiAoc2hhcGUgJiYgc2hhcGUuaXNMaXN0ZW5pbmcoKSkge1xuICAgICAgICAgICAgICAgIHNoYXBlLl9maXJlQW5kQnViYmxlKE1PVVNFV0hFRUwsIHtldnQ6IGV2dH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfd2hlZWw6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgdGhpcy5fbW91c2V3aGVlbChldnQpO1xuICAgICAgICB9LFxuICAgICAgICBfc2V0UG9pbnRlclBvc2l0aW9uOiBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgIHZhciBjb250ZW50UG9zaXRpb24gPSB0aGlzLl9nZXRDb250ZW50UG9zaXRpb24oKSxcbiAgICAgICAgICAgICAgICBvZmZzZXRYID0gZXZ0Lm9mZnNldFgsXG4gICAgICAgICAgICAgICAgY2xpZW50WCA9IGV2dC5jbGllbnRYLFxuICAgICAgICAgICAgICAgIHggPSBudWxsLFxuICAgICAgICAgICAgICAgIHkgPSBudWxsLFxuICAgICAgICAgICAgICAgIHRvdWNoO1xuICAgICAgICAgICAgZXZ0ID0gZXZ0ID8gZXZ0IDogd2luZG93LmV2ZW50O1xuXG4gICAgICAgICAgICAvLyB0b3VjaCBldmVudHNcbiAgICAgICAgICAgIGlmKGV2dC50b3VjaGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBjdXJyZW50bHksIG9ubHkgaGFuZGxlIG9uZSBmaW5nZXJcbiAgICAgICAgICAgICAgICBpZiAoZXZ0LnRvdWNoZXMubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHRvdWNoID0gZXZ0LnRvdWNoZXNbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IHRoZSBpbmZvcm1hdGlvbiBmb3IgZmluZ2VyICMxXG4gICAgICAgICAgICAgICAgICAgIHggPSB0b3VjaC5jbGllbnRYIC0gY29udGVudFBvc2l0aW9uLmxlZnQ7XG4gICAgICAgICAgICAgICAgICAgIHkgPSB0b3VjaC5jbGllbnRZIC0gY29udGVudFBvc2l0aW9uLnRvcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBtb3VzZSBldmVudHNcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGlmIG9mZnNldFggaXMgZGVmaW5lZCwgYXNzdW1lIHRoYXQgb2Zmc2V0WSBpcyBkZWZpbmVkIGFzIHdlbGxcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0WCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSBvZmZzZXRYO1xuICAgICAgICAgICAgICAgICAgICB5ID0gZXZ0Lm9mZnNldFk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHdlIHVuZm9ydHVuYXRlbHkgaGF2ZSB0byB1c2UgVUEgZGV0ZWN0aW9uIGhlcmUgYmVjYXVzZSBhY2Nlc3NpbmdcbiAgICAgICAgICAgICAgICAvLyB0aGUgbGF5ZXJYIG9yIGxheWVyWSBwcm9wZXJ0aWVzIGluIG5ld2VyIHZlcnNpb25zIG9mIENocm9tZVxuICAgICAgICAgICAgICAgIC8vIHRocm93cyBhIEpTIHdhcm5pbmcuICBsYXllclggYW5kIGxheWVyWSBhcmUgcmVxdWlyZWQgZm9yIEZGXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgY29udGFpbmVyIGlzIHRyYW5zZm9ybWVkIHZpYSBDU1MuXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoS2luZXRpYy5VQS5icm93c2VyID09PSAnbW96aWxsYScpIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IGV2dC5sYXllclg7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBldnQubGF5ZXJZO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBpZiBjbGllbnRYIGlzIGRlZmluZWQsIGFzc3VtZSB0aGF0IGNsaWVudFkgaXMgZGVmaW5lZCBhcyB3ZWxsXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2xpZW50WCAhPT0gdW5kZWZpbmVkICYmIGNvbnRlbnRQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB4ID0gY2xpZW50WCAtIGNvbnRlbnRQb3NpdGlvbi5sZWZ0O1xuICAgICAgICAgICAgICAgICAgICB5ID0gZXZ0LmNsaWVudFkgLSBjb250ZW50UG9zaXRpb24udG9wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHggIT09IG51bGwgJiYgeSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlclBvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgICAgICAgeTogeVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRDb250ZW50UG9zaXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHJlY3QgPSB0aGlzLmNvbnRlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ID8gdGhpcy5jb250ZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogeyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9wOiByZWN0LnRvcCxcbiAgICAgICAgICAgICAgICBsZWZ0OiByZWN0LmxlZnRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIF9idWlsZERPTTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5nZXRDb250YWluZXIoKTtcbiAgICAgICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKEtpbmV0aWMuVXRpbC5pc0Jyb3dzZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnU3RhZ2UgaGFzIG5vIGNvbnRhaW5lci4gQSBjb250YWluZXIgaXMgcmVxdWlyZWQuJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBhdXRvbWF0aWNhbGx5IGNyZWF0ZSBlbGVtZW50IGZvciBqc2RvbSBpbiBub2RlanMgZW52XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IEtpbmV0aWMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChESVYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNsZWFyIGNvbnRlbnQgaW5zaWRlIGNvbnRhaW5lclxuICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IEVNUFRZX1NUUklORztcblxuICAgICAgICAgICAgLy8gY29udGVudFxuICAgICAgICAgICAgdGhpcy5jb250ZW50ID0gS2luZXRpYy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KERJVik7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQuc3R5bGUucG9zaXRpb24gPSBSRUxBVElWRTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5zdHlsZS5kaXNwbGF5ID0gSU5MSU5FX0JMT0NLO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50LmNsYXNzTmFtZSA9IEtJTkVUSUNKU19DT05URU5UO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50LnNldEF0dHJpYnV0ZSgncm9sZScsICdwcmVzZW50YXRpb24nKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnQpO1xuXG4gICAgICAgICAgICAvLyB0aGUgYnVmZmVyIGNhbnZhcyBwaXhlbCByYXRpbyBtdXN0IGJlIDEgYmVjYXVzZSBpdCBpcyB1c2VkIGFzIGFuIFxuICAgICAgICAgICAgLy8gaW50ZXJtZWRpYXRlIGNhbnZhcyBiZWZvcmUgY29weWluZyB0aGUgcmVzdWx0IG9udG8gYSBzY2VuZSBjYW52YXMuXG4gICAgICAgICAgICAvLyBub3Qgc2V0dGluZyBpdCB0byAxIHdpbGwgcmVzdWx0IGluIGFuIG92ZXIgY29tcGVuc2F0aW9uXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlckNhbnZhcyA9IG5ldyBLaW5ldGljLlNjZW5lQ2FudmFzKHtcbiAgICAgICAgICAgICAgICBwaXhlbFJhdGlvOiAxXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVySGl0Q2FudmFzID0gbmV3IEtpbmV0aWMuSGl0Q2FudmFzKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZURPTSgpO1xuICAgICAgICB9LFxuICAgICAgICBfb25Db250ZW50OiBmdW5jdGlvbih0eXBlc1N0ciwgaGFuZGxlcikge1xuICAgICAgICAgICAgdmFyIHR5cGVzID0gdHlwZXNTdHIuc3BsaXQoU1BBQ0UpLFxuICAgICAgICAgICAgICAgIGxlbiA9IHR5cGVzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBuLCBiYXNlRXZlbnQ7XG5cbiAgICAgICAgICAgIGZvcihuID0gMDsgbiA8IGxlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgYmFzZUV2ZW50ID0gdHlwZXNbbl07XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoYmFzZUV2ZW50LCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGN1cnJlbnRseSBjYWNoZSBmdW5jdGlvbiBpcyBub3cgd29ya2luZyBmb3Igc3RhZ2UsIGJlY2F1c2Ugc3RhZ2UgaGFzIG5vIGl0cyBvd24gY2FudmFzIGVsZW1lbnRcbiAgICAgICAgLy8gVE9ETzogbWF5IGJlIGl0IGlzIGJldHRlciB0byBjYWNoZSBhbGwgY2hpbGRyZW4gbGF5ZXJzP1xuICAgICAgICBjYWNoZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBLaW5ldGljLlV0aWwud2FybignQ2FjaGUgZnVuY3Rpb24gaXMgbm90IGFsbG93ZWQgZm9yIHN0YWdlLiBZb3UgbWF5IHVzZSBjYWNoZSBvbmx5IGZvciBsYXllcnMsIGdyb3VwcyBhbmQgc2hhcGVzLicpO1xuICAgICAgICB9LFxuICAgICAgICBjbGVhckNhY2hlIDogZnVuY3Rpb24oKSB7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuU3RhZ2UsIEtpbmV0aWMuQ29udGFpbmVyKTtcblxuICAgIC8vIGFkZCBnZXR0ZXJzIGFuZCBzZXR0ZXJzXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlcihLaW5ldGljLlN0YWdlLCAnY29udGFpbmVyJyk7XG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZE92ZXJsb2FkZWRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TdGFnZSwgJ2NvbnRhaW5lcicpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0IGNvbnRhaW5lciBET00gZWxlbWVudFxuICAgICAqIEBuYW1lIGNvbnRhaW5lclxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TdGFnZS5wcm90b3R5cGVcbiAgICAgKiBAcmV0dXJucyB7RG9tRWxlbWVudH0gY29udGFpbmVyXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgY29udGFpbmVyXG4gICAgICogdmFyIGNvbnRhaW5lciA9IHN0YWdlLmNvbnRhaW5lcigpO1xuICAgICAqIFxuICAgICAqIC8vIHNldCBjb250YWluZXJcbiAgICAgKiB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICogYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgICAqIHN0YWdlLmNvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAqL1xuXG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICBLaW5ldGljLlV0aWwuYWRkTWV0aG9kcyhLaW5ldGljLkJhc2VMYXllciwge1xuICAgICAgICBfX19pbml0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZVR5cGUgPSAnTGF5ZXInO1xuICAgICAgICAgICAgS2luZXRpYy5Db250YWluZXIuY2FsbCh0aGlzLCBjb25maWcpO1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVQTkdTdHJlYW0gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbnZhcy5fY2FudmFzLmNyZWF0ZVBOR1N0cmVhbSgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IGxheWVyIGNhbnZhc1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkJhc2VMYXllci5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIGdldENhbnZhczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYW52YXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgbGF5ZXIgaGl0IGNhbnZhc1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkJhc2VMYXllci5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIGdldEhpdENhbnZhczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oaXRDYW52YXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgbGF5ZXIgY2FudmFzIGNvbnRleHRcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5CYXNlTGF5ZXIucHJvdG90eXBlXG4gICAgICAgICAqL1xuICAgICAgICBnZXRDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENhbnZhcygpLmdldENvbnRleHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNsZWFyIHNjZW5lIGFuZCBoaXQgY2FudmFzIGNvbnRleHRzIHRpZWQgdG8gdGhlIGxheWVyXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQmFzZUxheWVyLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gW2JvdW5kc11cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtib3VuZHMueF1cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtib3VuZHMueV1cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtib3VuZHMud2lkdGhdXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYm91bmRzLmhlaWdodF1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogbGF5ZXIuY2xlYXIoKTtcbiAgICAgICAgICogbGF5ZXIuY2xlYXIoe1xuICAgICAgICAgKiAgIHggOiAwLFxuICAgICAgICAgKiAgIHkgOiAwLFxuICAgICAgICAgKiAgIHdpZHRoIDogMTAwLFxuICAgICAgICAgKiAgIGhlaWdodCA6IDEwMFxuICAgICAgICAgKiB9KTtcbiAgICAgICAgICovXG4gICAgICAgIGNsZWFyOiBmdW5jdGlvbihib3VuZHMpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0Q29udGV4dCgpLmNsZWFyKGJvdW5kcyk7XG4gICAgICAgICAgICB0aGlzLmdldEhpdENhbnZhcygpLmdldENvbnRleHQoKS5jbGVhcihib3VuZHMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGNsZWFySGl0Q2FjaGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5faGl0SW1hZ2VEYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICAvLyBleHRlbmQgTm9kZS5wcm90b3R5cGUuc2V0WkluZGV4XG4gICAgICAgIHNldFpJbmRleDogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuc2V0WkluZGV4LmNhbGwodGhpcywgaW5kZXgpO1xuICAgICAgICAgICAgdmFyIHN0YWdlID0gdGhpcy5nZXRTdGFnZSgpO1xuICAgICAgICAgICAgaWYoc3RhZ2UpIHtcbiAgICAgICAgICAgICAgICBzdGFnZS5jb250ZW50LnJlbW92ZUNoaWxkKHRoaXMuZ2V0Q2FudmFzKCkuX2NhbnZhcyk7XG5cbiAgICAgICAgICAgICAgICBpZihpbmRleCA8IHN0YWdlLmdldENoaWxkcmVuKCkubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFnZS5jb250ZW50Lmluc2VydEJlZm9yZSh0aGlzLmdldENhbnZhcygpLl9jYW52YXMsIHN0YWdlLmdldENoaWxkcmVuKClbaW5kZXggKyAxXS5nZXRDYW52YXMoKS5fY2FudmFzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWdlLmNvbnRlbnQuYXBwZW5kQ2hpbGQodGhpcy5nZXRDYW52YXMoKS5fY2FudmFzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZXh0ZW5kIE5vZGUucHJvdG90eXBlLm1vdmVUb1RvcFxuICAgICAgICBtb3ZlVG9Ub3A6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5tb3ZlVG9Ub3AuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBzdGFnZSA9IHRoaXMuZ2V0U3RhZ2UoKTtcbiAgICAgICAgICAgIGlmKHN0YWdlKSB7XG4gICAgICAgICAgICAgICAgc3RhZ2UuY29udGVudC5yZW1vdmVDaGlsZCh0aGlzLmdldENhbnZhcygpLl9jYW52YXMpO1xuICAgICAgICAgICAgICAgIHN0YWdlLmNvbnRlbnQuYXBwZW5kQ2hpbGQodGhpcy5nZXRDYW52YXMoKS5fY2FudmFzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gZXh0ZW5kIE5vZGUucHJvdG90eXBlLm1vdmVVcFxuICAgICAgICBtb3ZlVXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYoS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5tb3ZlVXAuY2FsbCh0aGlzKSkge1xuICAgICAgICAgICAgICAgIHZhciBzdGFnZSA9IHRoaXMuZ2V0U3RhZ2UoKTtcbiAgICAgICAgICAgICAgICBpZihzdGFnZSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFnZS5jb250ZW50LnJlbW92ZUNoaWxkKHRoaXMuZ2V0Q2FudmFzKCkuX2NhbnZhcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5pbmRleCA8IHN0YWdlLmdldENoaWxkcmVuKCkubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhZ2UuY29udGVudC5pbnNlcnRCZWZvcmUodGhpcy5nZXRDYW52YXMoKS5fY2FudmFzLCBzdGFnZS5nZXRDaGlsZHJlbigpW3RoaXMuaW5kZXggKyAxXS5nZXRDYW52YXMoKS5fY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWdlLmNvbnRlbnQuYXBwZW5kQ2hpbGQodGhpcy5nZXRDYW52YXMoKS5fY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gZXh0ZW5kIE5vZGUucHJvdG90eXBlLm1vdmVEb3duXG4gICAgICAgIG1vdmVEb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKEtpbmV0aWMuTm9kZS5wcm90b3R5cGUubW92ZURvd24uY2FsbCh0aGlzKSkge1xuICAgICAgICAgICAgICAgIHZhciBzdGFnZSA9IHRoaXMuZ2V0U3RhZ2UoKTtcbiAgICAgICAgICAgICAgICBpZihzdGFnZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBzdGFnZS5nZXRDaGlsZHJlbigpO1xuICAgICAgICAgICAgICAgICAgICBzdGFnZS5jb250ZW50LnJlbW92ZUNoaWxkKHRoaXMuZ2V0Q2FudmFzKCkuX2NhbnZhcyk7XG4gICAgICAgICAgICAgICAgICAgIHN0YWdlLmNvbnRlbnQuaW5zZXJ0QmVmb3JlKHRoaXMuZ2V0Q2FudmFzKCkuX2NhbnZhcywgY2hpbGRyZW5bdGhpcy5pbmRleCArIDFdLmdldENhbnZhcygpLl9jYW52YXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gZXh0ZW5kIE5vZGUucHJvdG90eXBlLm1vdmVUb0JvdHRvbVxuICAgICAgICBtb3ZlVG9Cb3R0b206IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYoS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5tb3ZlVG9Cb3R0b20uY2FsbCh0aGlzKSkge1xuICAgICAgICAgICAgICAgIHZhciBzdGFnZSA9IHRoaXMuZ2V0U3RhZ2UoKTtcbiAgICAgICAgICAgICAgICBpZihzdGFnZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBzdGFnZS5nZXRDaGlsZHJlbigpO1xuICAgICAgICAgICAgICAgICAgICBzdGFnZS5jb250ZW50LnJlbW92ZUNoaWxkKHRoaXMuZ2V0Q2FudmFzKCkuX2NhbnZhcyk7XG4gICAgICAgICAgICAgICAgICAgIHN0YWdlLmNvbnRlbnQuaW5zZXJ0QmVmb3JlKHRoaXMuZ2V0Q2FudmFzKCkuX2NhbnZhcywgY2hpbGRyZW5bMV0uZ2V0Q2FudmFzKCkuX2NhbnZhcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZXRMYXllcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBfY2FudmFzID0gdGhpcy5nZXRDYW52YXMoKS5fY2FudmFzO1xuXG4gICAgICAgICAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLnJlbW92ZS5jYWxsKHRoaXMpO1xuXG4gICAgICAgICAgICBpZihfY2FudmFzICYmIF9jYW52YXMucGFyZW50Tm9kZSAmJiBLaW5ldGljLlV0aWwuX2lzSW5Eb2N1bWVudChfY2FudmFzKSkge1xuICAgICAgICAgICAgICAgIF9jYW52YXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChfY2FudmFzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBnZXRTdGFnZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFNpemUgOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0L3NldCB3aWR0aCBvZiBsYXllci5nZXR0ZXIgcmV0dXJuIHdpZHRoIG9mIHN0YWdlLiBzZXR0ZXIgZG9pbmcgbm90aGluZy5cbiAgICAgICAgICogaWYgeW91IHdhbnQgY2hhbmdlIHdpZHRoIHVzZSBgc3RhZ2Uud2lkdGgodmFsdWUpO2BcbiAgICAgICAgICogQG5hbWUgd2lkdGhcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5CYXNlTGF5ZXIucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIHZhciB3aWR0aCA9IGxheWVyLndpZHRoKCk7XG4gICAgICAgICAqL1xuICAgICAgICBnZXRXaWR0aCA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmdldFdpZHRoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNldFdpZHRoIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBLaW5ldGljLlV0aWwud2FybignQ2FuIG5vdCBjaGFuZ2Ugd2lkdGggb2YgbGF5ZXIuIFVzZSBcInN0YWdlLndpZHRoKHZhbHVlKVwiIGZ1bmN0aW9uIGluc3RlYWQuJyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQvc2V0IGhlaWdodCBvZiBsYXllci5nZXR0ZXIgcmV0dXJuIGhlaWdodCBvZiBzdGFnZS4gc2V0dGVyIGRvaW5nIG5vdGhpbmcuXG4gICAgICAgICAqIGlmIHlvdSB3YW50IGNoYW5nZSBoZWlnaHQgdXNlIGBzdGFnZS5oZWlnaHQodmFsdWUpO2BcbiAgICAgICAgICogQG5hbWUgaGVpZ2h0XG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQmFzZUxheWVyLnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiB2YXIgaGVpZ2h0ID0gbGF5ZXIuaGVpZ2h0KCk7XG4gICAgICAgICAqL1xuICAgICAgICBnZXRIZWlnaHQgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5nZXRIZWlnaHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2V0SGVpZ2h0IDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBLaW5ldGljLlV0aWwud2FybignQ2FuIG5vdCBjaGFuZ2UgaGVpZ2h0IG9mIGxheWVyLiBVc2UgXCJzdGFnZS5oZWlnaHQodmFsdWUpXCIgZnVuY3Rpb24gaW5zdGVhZC4nKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5CYXNlTGF5ZXIsIEtpbmV0aWMuQ29udGFpbmVyKTtcblxuICAgIC8vIGFkZCBnZXR0ZXJzIGFuZCBzZXR0ZXJzXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkJhc2VMYXllciwgJ2NsZWFyQmVmb3JlRHJhdycsIHRydWUpO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgY2xlYXJCZWZvcmVEcmF3IGZsYWcgd2hpY2ggZGV0ZXJtaW5lcyBpZiB0aGUgbGF5ZXIgaXMgY2xlYXJlZCBvciBub3RcbiAgICAgKiAgYmVmb3JlIGRyYXdpbmdcbiAgICAgKiBAbmFtZSBjbGVhckJlZm9yZURyYXdcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQmFzZUxheWVyLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gY2xlYXJCZWZvcmVEcmF3XG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgY2xlYXJCZWZvcmVEcmF3IGZsYWdcbiAgICAgKiB2YXIgY2xlYXJCZWZvcmVEcmF3ID0gbGF5ZXIuY2xlYXJCZWZvcmVEcmF3KCk7XG4gICAgICpcbiAgICAgKiAvLyBkaXNhYmxlIGNsZWFyIGJlZm9yZSBkcmF3XG4gICAgICogbGF5ZXIuY2xlYXJCZWZvcmVEcmF3KGZhbHNlKTtcbiAgICAgKlxuICAgICAqIC8vIGVuYWJsZSBjbGVhciBiZWZvcmUgZHJhd1xuICAgICAqIGxheWVyLmNsZWFyQmVmb3JlRHJhdyh0cnVlKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuQmFzZUxheWVyKTtcbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xuICAgIC8vIGNvbnN0YW50c1xuICAgIHZhciBIQVNIID0gJyMnLFxuICAgICAgICBCRUZPUkVfRFJBVyA9J2JlZm9yZURyYXcnLFxuICAgICAgICBEUkFXID0gJ2RyYXcnLFxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIDIgLSAzIC0gNFxuICAgICAgICAgKiB8ICAgICAgIHxcbiAgICAgICAgICogMSAtIDAgICA1XG4gICAgICAgICAqICAgICAgICAgfFxuICAgICAgICAgKiA4IC0gNyAtIDYgICAgIFxuICAgICAgICAgKi9cbiAgICAgICAgSU5URVJTRUNUSU9OX09GRlNFVFMgPSBbXG4gICAgICAgICAgICB7eDogIDAsIHk6ICAwfSwgLy8gMFxuICAgICAgICAgICAge3g6IC0xLCB5OiAgMH0sIC8vIDFcbiAgICAgICAgICAgIHt4OiAtMSwgeTogLTF9LCAvLyAyXG4gICAgICAgICAgICB7eDogIDAsIHk6IC0xfSwgLy8gM1xuICAgICAgICAgICAge3g6ICAxLCB5OiAtMX0sIC8vIDRcbiAgICAgICAgICAgIHt4OiAgMSwgeTogIDB9LCAvLyA1XG4gICAgICAgICAgICB7eDogIDEsIHk6ICAxfSwgLy8gNlxuICAgICAgICAgICAge3g6ICAwLCB5OiAgMX0sIC8vIDdcbiAgICAgICAgICAgIHt4OiAtMSwgeTogIDF9ICAvLyA4XG4gICAgICAgIF0sXG4gICAgICAgIElOVEVSU0VDVElPTl9PRkZTRVRTX0xFTiA9IElOVEVSU0VDVElPTl9PRkZTRVRTLmxlbmd0aDtcblxuXG4gICAgS2luZXRpYy5VdGlsLmFkZE1ldGhvZHMoS2luZXRpYy5MYXllciwge1xuICAgICAgICBfX19faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGVUeXBlID0gJ0xheWVyJztcbiAgICAgICAgICAgIHRoaXMuY2FudmFzID0gbmV3IEtpbmV0aWMuU2NlbmVDYW52YXMoKTtcbiAgICAgICAgICAgIHRoaXMuaGl0Q2FudmFzID0gbmV3IEtpbmV0aWMuSGl0Q2FudmFzKCk7XG4gICAgICAgICAgICAvLyBjYWxsIHN1cGVyIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICBLaW5ldGljLkJhc2VMYXllci5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zZXRDYW52YXNTaXplOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy5oaXRDYW52YXMuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfSxcbiAgICAgICAgX3ZhbGlkYXRlQWRkOiBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBjaGlsZC5nZXRUeXBlKCk7XG4gICAgICAgICAgICBpZiAodHlwZSAhPT0gJ0dyb3VwJyAmJiB0eXBlICE9PSAnU2hhcGUnKSB7XG4gICAgICAgICAgICAgICAgS2luZXRpYy5VdGlsLmVycm9yKCdZb3UgbWF5IG9ubHkgYWRkIGdyb3VwcyBhbmQgc2hhcGVzIHRvIGEgbGF5ZXIuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgdmlzaWJsZSBpbnRlcnNlY3Rpb24gc2hhcGUuIFRoaXMgaXMgdGhlIHByZWZlcnJlZFxuICAgICAgICAgKiBtZXRob2QgZm9yIGRldGVybWluaW5nIGlmIGEgcG9pbnQgaW50ZXJzZWN0cyBhIHNoYXBlIG9yIG5vdFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkxheWVyLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9zXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3MueFxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gcG9zLnlcbiAgICAgICAgICogQHJldHVybnMge0tpbmV0aWMuU2hhcGV9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRJbnRlcnNlY3Rpb246IGZ1bmN0aW9uKHBvcykge1xuICAgICAgICAgICAgdmFyIG9iaiwgaSwgaW50ZXJzZWN0aW9uT2Zmc2V0LCBzaGFwZTtcblxuICAgICAgICAgICAgaWYodGhpcy5oaXRHcmFwaEVuYWJsZWQoKSAmJiB0aGlzLmlzVmlzaWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgLy8gaW4gc29tZSBjYXNlcyBhbnRpYWxpYXNlZCBhcmVhIG1heSBiZSBiaWdnZXIgdGhhbiAxcHhcbiAgICAgICAgICAgICAgICAvLyBpdCBpcyBwb3NzaWJsZSBpZiB3ZSB3aWxsIGNhY2hlIG5vZGUsIHRoZW4gc2NhbGUgaXQgYSBsb3RcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBjaGVjayB7IDA7IDAgfSBwb2ludCBiZWZvcmUgbG9vcCwgYW5kIHJlbW92ZSBpdCBmcm9tIElOVEVSU0VDVElPTl9PRkZTRVRTLlxuICAgICAgICAgICAgICAgIHZhciBzcGlyYWxTZWFyY2hEaXN0YW5jZSA9IDE7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRpbnVlU2VhcmNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpPTA7IGk8SU5URVJTRUNUSU9OX09GRlNFVFNfTEVOOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbk9mZnNldCA9IElOVEVSU0VDVElPTl9PRkZTRVRTW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqID0gdGhpcy5fZ2V0SW50ZXJzZWN0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBwb3MueCArIGludGVyc2VjdGlvbk9mZnNldC54ICogc3BpcmFsU2VhcmNoRGlzdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogcG9zLnkgKyBpbnRlcnNlY3Rpb25PZmZzZXQueSAqIHNwaXJhbFNlYXJjaERpc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlID0gb2JqLnNoYXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoYXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNoYXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2Ugc2hvdWxkIGNvbnRpbnVlIHNlYXJjaCBpZiB3ZSBmb3VuZCBhbnRpYWxpYXNlZCBwaXhlbFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhhdCBtZWFucyBvdXIgbm9kZSBzb21ld2hlcmUgdmVyeSBjbG9zZVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAob2JqLmFudGlhbGlhc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVTZWFyY2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIG5vIHNoYXBlLCBhbmQgbm8gYW50aWFsaWFzZWQgcGl4ZWwsIHdlIHNob3VsZCBlbmQgc2VhcmNoaW5nIFxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGludWVTZWFyY2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwaXJhbFNlYXJjaERpc3RhbmNlICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZ2V0SW1hZ2VEYXRhOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmhpdENhbnZhcy53aWR0aCB8fCAxLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuaGl0Q2FudmFzLmhlaWdodCB8fCAxLFxuICAgICAgICAgICAgICAgIGluZGV4ID0gKE1hdGgucm91bmQoeSkgKiB3aWR0aCApICsgTWF0aC5yb3VuZCh4KTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLl9oaXRJbWFnZURhdGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oaXRJbWFnZURhdGEgPSB0aGlzLmhpdENhbnZhcy5jb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB0aGlzLl9oaXRJbWFnZURhdGEuZGF0YVs0ICogaW5kZXggKyAwXSAsIC8vIFJlZFxuICAgICAgICAgICAgICAgIHRoaXMuX2hpdEltYWdlRGF0YS5kYXRhWzQgKiBpbmRleCArIDFdLCAvLyBHcmVlblxuICAgICAgICAgICAgICAgIHRoaXMuX2hpdEltYWdlRGF0YS5kYXRhWzQgKiBpbmRleCArIDJdLCAvLyBCbHVlXG4gICAgICAgICAgICAgICAgdGhpcy5faGl0SW1hZ2VEYXRhLmRhdGFbNCAqIGluZGV4ICsgM10gLy8gQWxwaGFcbiAgICAgICAgICAgIF07XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRJbnRlcnNlY3Rpb246IGZ1bmN0aW9uKHBvcykge1xuICAgICAgICAgICAgdmFyIHAgPSB0aGlzLmhpdENhbnZhcy5jb250ZXh0LmdldEltYWdlRGF0YShwb3MueCwgcG9zLnksIDEsIDEpLmRhdGEsXG4gICAgICAgICAgICAgICAgcDMgPSBwWzNdLFxuICAgICAgICAgICAgICAgIGNvbG9yS2V5LCBzaGFwZTtcblxuICAgICAgICAgICAgLy8gZnVsbHkgb3BhcXVlIHBpeGVsXG4gICAgICAgICAgICBpZihwMyA9PT0gMjU1KSB7XG4gICAgICAgICAgICAgICAgY29sb3JLZXkgPSBLaW5ldGljLlV0aWwuX3JnYlRvSGV4KHBbMF0sIHBbMV0sIHBbMl0pO1xuICAgICAgICAgICAgICAgIHNoYXBlID0gS2luZXRpYy5zaGFwZXNbSEFTSCArIGNvbG9yS2V5XTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzaGFwZTogc2hhcGVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYW50aWFsaWFzZWQgcGl4ZWxcbiAgICAgICAgICAgIGVsc2UgaWYocDMgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYW50aWFsaWFzZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZW1wdHkgcGl4ZWxcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZHJhd1NjZW5lOiBmdW5jdGlvbihjYW4sIHRvcCkge1xuICAgICAgICAgICAgdmFyIGxheWVyID0gdGhpcy5nZXRMYXllcigpLFxuICAgICAgICAgICAgICAgIGNhbnZhcyA9IGNhbiB8fCAobGF5ZXIgJiYgbGF5ZXIuZ2V0Q2FudmFzKCkpO1xuXG4gICAgICAgICAgICB0aGlzLl9maXJlKEJFRk9SRV9EUkFXLCB7XG4gICAgICAgICAgICAgICAgbm9kZTogdGhpc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuZ2V0Q2xlYXJCZWZvcmVEcmF3KCkpIHtcbiAgICAgICAgICAgICAgICBjYW52YXMuZ2V0Q29udGV4dCgpLmNsZWFyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEtpbmV0aWMuQ29udGFpbmVyLnByb3RvdHlwZS5kcmF3U2NlbmUuY2FsbCh0aGlzLCBjYW52YXMsIHRvcCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2ZpcmUoRFJBVywge1xuICAgICAgICAgICAgICAgIG5vZGU6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gdGhlIGFwcGx5IHRyYW5zZm9ybSBtZXRob2QgaXMgaGFuZGxlZCBieSB0aGUgTGF5ZXIgYW5kIEZhc3RMYXllciBjbGFzc1xuICAgICAgICAvLyBiZWNhdXNlIGl0IGlzIHVwIHRvIHRoZSBsYXllciB0byBkZWNpZGUgaWYgYW4gYWJzb2x1dGUgb3IgcmVsYXRpdmUgdHJhbnNmb3JtXG4gICAgICAgIC8vIHNob3VsZCBiZSB1c2VkXG4gICAgICAgIF9hcHBseVRyYW5zZm9ybTogZnVuY3Rpb24oc2hhcGUsIGNvbnRleHQsIHRvcCkge1xuICAgICAgICAgICAgdmFyIG0gPSBzaGFwZS5nZXRBYnNvbHV0ZVRyYW5zZm9ybSh0b3ApLmdldE1hdHJpeCgpO1xuICAgICAgICAgICAgY29udGV4dC50cmFuc2Zvcm0obVswXSwgbVsxXSwgbVsyXSwgbVszXSwgbVs0XSwgbVs1XSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRyYXdIaXQ6IGZ1bmN0aW9uKGNhbiwgdG9wKSB7XG4gICAgICAgICAgICB2YXIgbGF5ZXIgPSB0aGlzLmdldExheWVyKCksXG4gICAgICAgICAgICAgICAgY2FudmFzID0gY2FuIHx8IChsYXllciAmJiBsYXllci5oaXRDYW52YXMpO1xuXG4gICAgICAgICAgICBpZihsYXllciAmJiBsYXllci5nZXRDbGVhckJlZm9yZURyYXcoKSkge1xuICAgICAgICAgICAgICAgIGxheWVyLmdldEhpdENhbnZhcygpLmdldENvbnRleHQoKS5jbGVhcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBLaW5ldGljLkNvbnRhaW5lci5wcm90b3R5cGUuZHJhd0hpdC5jYWxsKHRoaXMsIGNhbnZhcywgdG9wKTtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VEYXRhID0gbnVsbDsgLy8gQ2xlYXIgaW1hZ2VEYXRhIGNhY2hlXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNsZWFyIHNjZW5lIGFuZCBoaXQgY2FudmFzIGNvbnRleHRzIHRpZWQgdG8gdGhlIGxheWVyXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTGF5ZXIucHJvdG90eXBlXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbYm91bmRzXVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2JvdW5kcy54XVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2JvdW5kcy55XVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2JvdW5kcy53aWR0aF1cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtib3VuZHMuaGVpZ2h0XVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBsYXllci5jbGVhcigpO1xuICAgICAgICAgKiBsYXllci5jbGVhcih7XG4gICAgICAgICAqICAgeCA6IDAsXG4gICAgICAgICAqICAgeSA6IDAsXG4gICAgICAgICAqICAgd2lkdGggOiAxMDAsXG4gICAgICAgICAqICAgaGVpZ2h0IDogMTAwXG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKi9cbiAgICAgICAgY2xlYXI6IGZ1bmN0aW9uKGJvdW5kcykge1xuICAgICAgICAgICAgdGhpcy5nZXRDb250ZXh0KCkuY2xlYXIoYm91bmRzKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0SGl0Q2FudmFzKCkuZ2V0Q29udGV4dCgpLmNsZWFyKGJvdW5kcyk7XG4gICAgICAgICAgICB0aGlzLmltYWdlRGF0YSA9IG51bGw7IC8vIENsZWFyIGdldEltYWdlRGF0YSBjYWNoZVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGV4dGVuZCBOb2RlLnByb3RvdHlwZS5zZXRWaXNpYmxlXG4gICAgICAgIHNldFZpc2libGU6IGZ1bmN0aW9uKHZpc2libGUpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuc2V0VmlzaWJsZS5jYWxsKHRoaXMsIHZpc2libGUpO1xuICAgICAgICAgICAgaWYodmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q2FudmFzKCkuX2NhbnZhcy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgICAgICB0aGlzLmhpdENhbnZhcy5fY2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRDYW52YXMoKS5fY2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgdGhpcy5oaXRDYW52YXMuX2NhbnZhcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBlbmFibGUgaGl0IGdyYXBoXG4gICAgICAgICAqIEBuYW1lIGVuYWJsZUhpdEdyYXBoXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTGF5ZXIucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtMYXllcn1cbiAgICAgICAgICovXG4gICAgICAgIGVuYWJsZUhpdEdyYXBoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SGl0R3JhcGhFbmFibGVkKHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkaXNhYmxlIGhpdCBncmFwaFxuICAgICAgICAgKiBAbmFtZSBkaXNhYmxlSGl0R3JhcGhcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5MYXllci5wcm90b3R5cGVcbiAgICAgICAgICogQHJldHVybnMge0xheWVyfVxuICAgICAgICAgKi9cbiAgICAgICAgZGlzYWJsZUhpdEdyYXBoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SGl0R3JhcGhFbmFibGVkKGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBzZXRTaXplIDogZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgS2luZXRpYy5CYXNlTGF5ZXIucHJvdG90eXBlLnNldFNpemUuY2FsbCh0aGlzLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuaGl0Q2FudmFzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuTGF5ZXIsIEtpbmV0aWMuQmFzZUxheWVyKTtcblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5MYXllciwgJ2hpdEdyYXBoRW5hYmxlZCcsIHRydWUpO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgaGl0R3JhcGhFbmFibGVkIGZsYWcuICBEaXNhYmxpbmcgdGhlIGhpdCBncmFwaCB3aWxsIGdyZWF0bHkgaW5jcmVhc2VcbiAgICAgKiAgZHJhdyBwZXJmb3JtYW5jZSBiZWNhdXNlIHRoZSBoaXQgZ3JhcGggd2lsbCBub3QgYmUgcmVkcmF3biBlYWNoIHRpbWUgdGhlIGxheWVyIGlzXG4gICAgICogIGRyYXduLiAgVGhpcywgaG93ZXZlciwgYWxzbyBkaXNhYmxlcyBtb3VzZS90b3VjaCBldmVudCBkZXRlY3Rpb25cbiAgICAgKiBAbmFtZSBoaXRHcmFwaEVuYWJsZWRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTGF5ZXIucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBlbmFibGVkXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgaGl0R3JhcGhFbmFibGVkIGZsYWdcbiAgICAgKiB2YXIgaGl0R3JhcGhFbmFibGVkID0gbGF5ZXIuaGl0R3JhcGhFbmFibGVkKCk7XG4gICAgICpcbiAgICAgKiAvLyBkaXNhYmxlIGhpdCBncmFwaFxuICAgICAqIGxheWVyLmhpdEdyYXBoRW5hYmxlZChmYWxzZSk7XG4gICAgICpcbiAgICAgKiAvLyBlbmFibGUgaGl0IGdyYXBoXG4gICAgICogbGF5ZXIuaGl0R3JhcGhFbmFibGVkKHRydWUpO1xuICAgICAqL1xuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuTGF5ZXIpO1xufSkoKTtcbjsoZnVuY3Rpb24oKSB7XG5cbiAgICBLaW5ldGljLlV0aWwuYWRkTWV0aG9kcyhLaW5ldGljLkZhc3RMYXllciwge1xuICAgICAgICBfX19faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGVUeXBlID0gJ0xheWVyJztcbiAgICAgICAgICAgIHRoaXMuY2FudmFzID0gbmV3IEtpbmV0aWMuU2NlbmVDYW52YXMoKTtcbiAgICAgICAgICAgIC8vIGNhbGwgc3VwZXIgY29uc3RydWN0b3JcbiAgICAgICAgICAgIEtpbmV0aWMuQmFzZUxheWVyLmNhbGwodGhpcywgY29uZmlnKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3ZhbGlkYXRlQWRkOiBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBjaGlsZC5nZXRUeXBlKCk7XG4gICAgICAgICAgICBpZiAodHlwZSAhPT0gJ1NoYXBlJykge1xuICAgICAgICAgICAgICAgIEtpbmV0aWMuVXRpbC5lcnJvcignWW91IG1heSBvbmx5IGFkZCBzaGFwZXMgdG8gYSBmYXN0IGxheWVyLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfc2V0Q2FudmFzU2l6ZTogZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5jYW52YXMuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfSxcbiAgICAgICAgaGl0R3JhcGhFbmFibGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0SW50ZXJzZWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBkcmF3U2NlbmU6IGZ1bmN0aW9uKGNhbikge1xuICAgICAgICAgICAgdmFyIGxheWVyID0gdGhpcy5nZXRMYXllcigpLFxuICAgICAgICAgICAgICAgIGNhbnZhcyA9IGNhbiB8fCAobGF5ZXIgJiYgbGF5ZXIuZ2V0Q2FudmFzKCkpO1xuXG4gICAgICAgICAgICBpZih0aGlzLmdldENsZWFyQmVmb3JlRHJhdygpKSB7XG4gICAgICAgICAgICAgICAgY2FudmFzLmdldENvbnRleHQoKS5jbGVhcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBLaW5ldGljLkNvbnRhaW5lci5wcm90b3R5cGUuZHJhd1NjZW5lLmNhbGwodGhpcywgY2FudmFzKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHRoZSBhcHBseSB0cmFuc2Zvcm0gbWV0aG9kIGlzIGhhbmRsZWQgYnkgdGhlIExheWVyIGFuZCBGYXN0TGF5ZXIgY2xhc3NcbiAgICAgICAgLy8gYmVjYXVzZSBpdCBpcyB1cCB0byB0aGUgbGF5ZXIgdG8gZGVjaWRlIGlmIGFuIGFic29sdXRlIG9yIHJlbGF0aXZlIHRyYW5zZm9ybVxuICAgICAgICAvLyBzaG91bGQgYmUgdXNlZFxuICAgICAgICBfYXBwbHlUcmFuc2Zvcm06IGZ1bmN0aW9uKHNoYXBlLCBjb250ZXh0LCB0b3ApIHtcbiAgICAgICAgICAgIGlmICghdG9wIHx8IHRvcC5faWQgIT09IHRoaXMuX2lkKSB7XG4gICAgICAgICAgICAgICAgdmFyIG0gPSBzaGFwZS5nZXRUcmFuc2Zvcm0oKS5nZXRNYXRyaXgoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnRyYW5zZm9ybShtWzBdLCBtWzFdLCBtWzJdLCBtWzNdLCBtWzRdLCBtWzVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZHJhdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdTY2VuZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjbGVhciBzY2VuZSBhbmQgaGl0IGNhbnZhcyBjb250ZXh0cyB0aWVkIHRvIHRoZSBsYXllclxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkZhc3RMYXllci5wcm90b3R5cGVcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtib3VuZHNdXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYm91bmRzLnhdXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYm91bmRzLnldXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYm91bmRzLndpZHRoXVxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW2JvdW5kcy5oZWlnaHRdXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIGxheWVyLmNsZWFyKCk7XG4gICAgICAgICAqIGxheWVyLmNsZWFyKHtcbiAgICAgICAgICogICB4IDogMCxcbiAgICAgICAgICogICB5IDogMCxcbiAgICAgICAgICogICB3aWR0aCA6IDEwMCxcbiAgICAgICAgICogICBoZWlnaHQgOiAxMDBcbiAgICAgICAgICogfSk7XG4gICAgICAgICAqL1xuICAgICAgICBjbGVhcjogZnVuY3Rpb24oYm91bmRzKSB7XG4gICAgICAgICAgICB0aGlzLmdldENvbnRleHQoKS5jbGVhcihib3VuZHMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGV4dGVuZCBOb2RlLnByb3RvdHlwZS5zZXRWaXNpYmxlXG4gICAgICAgIHNldFZpc2libGU6IGZ1bmN0aW9uKHZpc2libGUpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuc2V0VmlzaWJsZS5jYWxsKHRoaXMsIHZpc2libGUpO1xuICAgICAgICAgICAgaWYodmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q2FudmFzKCkuX2NhbnZhcy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q2FudmFzKCkuX2NhbnZhcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuRmFzdExheWVyLCBLaW5ldGljLkJhc2VMYXllcik7XG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLkZhc3RMYXllcik7XG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICBLaW5ldGljLlV0aWwuYWRkTWV0aG9kcyhLaW5ldGljLkdyb3VwLCB7XG4gICAgICAgIF9fX2luaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5ub2RlVHlwZSA9ICdHcm91cCc7XG4gICAgICAgICAgICAvLyBjYWxsIHN1cGVyIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICBLaW5ldGljLkNvbnRhaW5lci5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIH0sXG4gICAgICAgIF92YWxpZGF0ZUFkZDogZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICAgIHZhciB0eXBlID0gY2hpbGQuZ2V0VHlwZSgpO1xuICAgICAgICAgICAgaWYgKHR5cGUgIT09ICdHcm91cCcgJiYgdHlwZSAhPT0gJ1NoYXBlJykge1xuICAgICAgICAgICAgICAgIEtpbmV0aWMuVXRpbC5lcnJvcignWW91IG1heSBvbmx5IGFkZCBncm91cHMgYW5kIHNoYXBlcyB0byBncm91cHMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuR3JvdXAsIEtpbmV0aWMuQ29udGFpbmVyKTtcblxuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuR3JvdXApO1xufSkoKTtcbjsoZnVuY3Rpb24oKSB7XG4gICAgLyoqXG4gICAgICogUmVjdCBjb25zdHJ1Y3RvclxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICogQGF1Z21lbnRzIEtpbmV0aWMuU2hhcGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuY29ybmVyUmFkaXVzXVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxdIGZpbGwgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsUmVkXSBzZXQgZmlsbCByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEdyZWVuXSBzZXQgZmlsbCBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQmx1ZV0gc2V0IGZpbGwgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQWxwaGFdIHNldCBmaWxsIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbWFnZX0gW2NvbmZpZy5maWxsUGF0dGVybkltYWdlXSBmaWxsIHBhdHRlcm4gaW1hZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WV0gXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlXSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuUm90YXRpb25dXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUGF0dGVyblJlcGVhdF0gY2FuIGJlIFwicmVwZWF0XCIsIFwicmVwZWF0LXhcIiwgXCJyZXBlYXQteVwiLCBvciBcIm5vLXJlcGVhdFwiLiAgVGhlIGRlZmF1bHQgaXMgXCJuby1yZXBlYXRcIlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRZXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmZpbGxFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGZpbGwuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUHJpb3JpdHldIGNhbiBiZSBjb2xvciwgbGluZWFyLWdyYWRpZW50LCByYWRpYWwtZ3JhaWRlbnQsIG9yIHBhdHRlcm4uICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBjb2xvci4gIFRoZSBmaWxsUHJpb3JpdHkgcHJvcGVydHkgbWFrZXMgaXQgcmVhbGx5IGVhc3kgdG8gdG9nZ2xlIGJldHdlZW4gZGlmZmVyZW50IGZpbGwgdHlwZXMuICBGb3IgZXhhbXBsZSwgaWYgeW91IHdhbnQgdG8gdG9nZ2xlIGJldHdlZW4gYSBmaWxsIGNvbG9yIHN0eWxlIGFuZCBhIGZpbGwgcGF0dGVybiBzdHlsZSwgc2ltcGx5IHNldCB0aGUgZmlsbCBwcm9wZXJ0eSBhbmQgdGhlIGZpbGxQYXR0ZXJuIHByb3BlcnRpZXMsIGFuZCB0aGVuIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ2NvbG9yJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIGEgY29sb3IgZmlsbCwgb3IgdXNlIHNldEZpbGxQcmlvcml0eSgncGF0dGVybicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCB0aGUgcGF0dGVybiBmaWxsIGNvbmZpZ3VyYXRpb25cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnN0cm9rZV0gc3Ryb2tlIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlUmVkXSBzZXQgc3Ryb2tlIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VHcmVlbl0gc2V0IHN0cm9rZSBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VCbHVlXSBzZXQgc3Ryb2tlIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQWxwaGFdIHNldCBzdHJva2UgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zdHJva2VXaWR0aF0gc3Ryb2tlIHdpZHRoXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlU2NhbGVFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgc3Ryb2tlIHNjYWxlLiAgVGhlIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc3Ryb2tlLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUpvaW5dIGNhbiBiZSBtaXRlciwgcm91bmQsIG9yIGJldmVsLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBtaXRlclxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUNhcF0gY2FuIGJlIGJ1dHQsIHJvdW5kLCBvciBzcWFyZS4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgYnV0dFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc2hhZG93Q29sb3JdXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93UmVkXSBzZXQgc2hhZG93IGNvbG9yIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dHcmVlbl0gc2V0IHNoYWRvdyBjb2xvciBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dCbHVlXSBzZXQgc2hhZG93IGNvbG9yIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93QWxwaGFdIHNldCBzaGFkb3cgY29sb3IgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dCbHVyXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2hhZG93T2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPcGFjaXR5XSBzaGFkb3cgb3BhY2l0eS4gIENhbiBiZSBhbnkgcmVhbCBudW1iZXJcclxuICAgICAqICBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zaGFkb3dFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHNoYWRvdy4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZGFzaF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kYXNoRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBkYXNoQXJyYXkuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmxpc3RlbmluZ10gd2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub3BhY2l0eV0gZGV0ZXJtaW5lcyBub2RlIG9wYWNpdHkuICBDYW4gYmUgYW55IG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNjYWxlXSBzZXQgc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWF0gc2V0IHNjYWxlIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWV0gc2V0IHNjYWxlIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnJvdGF0aW9uXSByb3RhdGlvbiBpbiBkZWdyZWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5vZmZzZXRdIG9mZnNldCBmcm9tIGNlbnRlciBwb2ludCBhbmQgcm90YXRpb24gcG9pbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFhdIHNldCBvZmZzZXQgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WV0gc2V0IG9mZnNldCB5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZHJhZ2dhYmxlXSBtYWtlcyB0aGUgbm9kZSBkcmFnZ2FibGUuICBXaGVuIHN0YWdlcyBhcmUgZHJhZ2dhYmxlLCB5b3UgY2FuIGRyYWcgYW5kIGRyb3BcclxuICAgICAqICB0aGUgZW50aXJlIHN0YWdlIGJ5IGRyYWdnaW5nIGFueSBwb3J0aW9uIG9mIHRoZSBzdGFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZHJhZ0Rpc3RhbmNlXVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbmZpZy5kcmFnQm91bmRGdW5jXVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHJlY3QgPSBuZXcgS2luZXRpYy5SZWN0KHtcbiAgICAgKiAgIHdpZHRoOiAxMDAsXG4gICAgICogICBoZWlnaHQ6IDUwLFxuICAgICAqICAgZmlsbDogJ3JlZCcsXG4gICAgICogICBzdHJva2U6ICdibGFjaycsXG4gICAgICogICBzdHJva2VXaWR0aDogNVxuICAgICAqIH0pO1xuICAgICAqL1xuICAgIEtpbmV0aWMuUmVjdCA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB0aGlzLl9fX2luaXQoY29uZmlnKTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5SZWN0LnByb3RvdHlwZSA9IHtcbiAgICAgICAgX19faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICBLaW5ldGljLlNoYXBlLmNhbGwodGhpcywgY29uZmlnKTtcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1JlY3QnO1xuICAgICAgICAgICAgdGhpcy5zY2VuZUZ1bmModGhpcy5fc2NlbmVGdW5jKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NjZW5lRnVuYzogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGNvcm5lclJhZGl1cyA9IHRoaXMuZ2V0Q29ybmVyUmFkaXVzKCksXG4gICAgICAgICAgICAgICAgd2lkdGggPSB0aGlzLmdldFdpZHRoKCksXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5nZXRIZWlnaHQoKTtcblxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuXG4gICAgICAgICAgICBpZighY29ybmVyUmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgLy8gc2ltcGxlIHJlY3QgLSBkb24ndCBib3RoZXIgZG9pbmcgYWxsIHRoYXQgY29tcGxpY2F0ZWQgbWF0aHMgc3R1ZmYuXG4gICAgICAgICAgICAgICAgY29udGV4dC5yZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gYXJjVG8gd291bGQgYmUgbmljZXIsIGJ1dCBicm93c2VyIHN1cHBvcnQgaXMgcGF0Y2h5IChPcGVyYSlcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhjb3JuZXJSYWRpdXMsIDApO1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHdpZHRoIC0gY29ybmVyUmFkaXVzLCAwKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmFyYyh3aWR0aCAtIGNvcm5lclJhZGl1cywgY29ybmVyUmFkaXVzLCBjb3JuZXJSYWRpdXMsIE1hdGguUEkgKiAzIC8gMiwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHdpZHRoLCBoZWlnaHQgLSBjb3JuZXJSYWRpdXMpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKHdpZHRoIC0gY29ybmVyUmFkaXVzLCBoZWlnaHQgLSBjb3JuZXJSYWRpdXMsIGNvcm5lclJhZGl1cywgMCwgTWF0aC5QSSAvIDIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhjb3JuZXJSYWRpdXMsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5hcmMoY29ybmVyUmFkaXVzLCBoZWlnaHQgLSBjb3JuZXJSYWRpdXMsIGNvcm5lclJhZGl1cywgTWF0aC5QSSAvIDIsIE1hdGguUEksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbygwLCBjb3JuZXJSYWRpdXMpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKGNvcm5lclJhZGl1cywgY29ybmVyUmFkaXVzLCBjb3JuZXJSYWRpdXMsIE1hdGguUEksIE1hdGguUEkgKiAzIC8gMiwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0cm9rZVNoYXBlKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5SZWN0LCBLaW5ldGljLlNoYXBlKTtcblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5SZWN0LCAnY29ybmVyUmFkaXVzJywgMCk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBjb3JuZXIgcmFkaXVzXG4gICAgICogQG5hbWUgY29ybmVyUmFkaXVzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlJlY3QucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvcm5lclJhZGl1c1xuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgY29ybmVyIHJhZGl1c1xuICAgICAqIHZhciBjb3JuZXJSYWRpdXMgPSByZWN0LmNvcm5lclJhZGl1cygpO1xuICAgICAqIFxuICAgICAqIC8vIHNldCBjb3JuZXIgcmFkaXVzXG4gICAgICogcmVjdC5jb3JuZXJSYWRpdXMoMTApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5SZWN0KTtcbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xuICAgIC8vIHRoZSAwLjAwMDEgb2Zmc2V0IGZpeGVzIGEgYnVnIGluIENocm9tZSAyN1xuICAgIHZhciBQSXgyID0gKE1hdGguUEkgKiAyKSAtIDAuMDAwMSxcbiAgICAgICAgQ0lSQ0xFID0gJ0NpcmNsZSc7XG5cbiAgICAvKipcbiAgICAgKiBDaXJjbGUgY29uc3RydWN0b3JcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAqIEBhdWdtZW50cyBLaW5ldGljLlNoYXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb25maWcucmFkaXVzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbF0gZmlsbCBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxSZWRdIHNldCBmaWxsIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsR3JlZW5dIHNldCBmaWxsIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxCbHVlXSBzZXQgZmlsbCBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxBbHBoYV0gc2V0IGZpbGwgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ltYWdlfSBbY29uZmlnLmZpbGxQYXR0ZXJuSW1hZ2VdIGZpbGwgcGF0dGVybiBpbWFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5YXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5ZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRZXSBcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5Sb3RhdGlvbl1cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQYXR0ZXJuUmVwZWF0XSBjYW4gYmUgXCJyZXBlYXRcIiwgXCJyZXBlYXQteFwiLCBcInJlcGVhdC15XCIsIG9yIFwibm8tcmVwZWF0XCIuICBUaGUgZGVmYXVsdCBpcyBcIm5vLXJlcGVhdFwiXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFldIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZmlsbEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZmlsbC4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQcmlvcml0eV0gY2FuIGJlIGNvbG9yLCBsaW5lYXItZ3JhZGllbnQsIHJhZGlhbC1ncmFpZGVudCwgb3IgcGF0dGVybi4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGNvbG9yLiAgVGhlIGZpbGxQcmlvcml0eSBwcm9wZXJ0eSBtYWtlcyBpdCByZWFsbHkgZWFzeSB0byB0b2dnbGUgYmV0d2VlbiBkaWZmZXJlbnQgZmlsbCB0eXBlcy4gIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byB0b2dnbGUgYmV0d2VlbiBhIGZpbGwgY29sb3Igc3R5bGUgYW5kIGEgZmlsbCBwYXR0ZXJuIHN0eWxlLCBzaW1wbHkgc2V0IHRoZSBmaWxsIHByb3BlcnR5IGFuZCB0aGUgZmlsbFBhdHRlcm4gcHJvcGVydGllcywgYW5kIHRoZW4gdXNlIHNldEZpbGxQcmlvcml0eSgnY29sb3InKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggYSBjb2xvciBmaWxsLCBvciB1c2Ugc2V0RmlsbFByaW9yaXR5KCdwYXR0ZXJuJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIHRoZSBwYXR0ZXJuIGZpbGwgY29uZmlndXJhdGlvblxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc3Ryb2tlXSBzdHJva2UgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VSZWRdIHNldCBzdHJva2UgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUdyZWVuXSBzZXQgc3Ryb2tlIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUJsdWVdIHNldCBzdHJva2UgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VBbHBoYV0gc2V0IHN0cm9rZSBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnN0cm9rZVdpZHRoXSBzdHJva2Ugd2lkdGhcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VTY2FsZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyBzdHJva2Ugc2NhbGUuICBUaGUgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzdHJva2UuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lSm9pbl0gY2FuIGJlIG1pdGVyLCByb3VuZCwgb3IgYmV2ZWwuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIG1pdGVyXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lQ2FwXSBjYW4gYmUgYnV0dCwgcm91bmQsIG9yIHNxYXJlLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBidXR0XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zaGFkb3dDb2xvcl1cclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dSZWRdIHNldCBzaGFkb3cgY29sb3IgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0dyZWVuXSBzZXQgc2hhZG93IGNvbG9yIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0JsdWVdIHNldCBzaGFkb3cgY29sb3IgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dBbHBoYV0gc2V0IHNoYWRvdyBjb2xvciBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd0JsdXJdXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zaGFkb3dPZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09wYWNpdHldIHNoYWRvdyBvcGFjaXR5LiAgQ2FuIGJlIGFueSByZWFsIG51bWJlclxyXG4gICAgICogIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnNoYWRvd0VuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc2hhZG93LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5kYXNoXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRhc2hFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGRhc2hBcnJheS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcubGlzdGVuaW5nXSB3aGV0aGVyIG9yIG5vdCB0aGUgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuaWRdIHVuaXF1ZSBpZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2NhbGVdIHNldCBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVYXSBzZXQgc2NhbGUgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVZXSBzZXQgc2NhbGUgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucm90YXRpb25dIHJvdGF0aW9uIGluIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLm9mZnNldF0gb2Zmc2V0IGZyb20gY2VudGVyIHBvaW50IGFuZCByb3RhdGlvbiBwb2ludFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WF0gc2V0IG9mZnNldCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRZXSBzZXQgb2Zmc2V0IHlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmFnZ2FibGVdIG1ha2VzIHRoZSBub2RlIGRyYWdnYWJsZS4gIFdoZW4gc3RhZ2VzIGFyZSBkcmFnZ2FibGUsIHlvdSBjYW4gZHJhZyBhbmQgZHJvcFxyXG4gICAgICogIHRoZSBlbnRpcmUgc3RhZ2UgYnkgZHJhZ2dpbmcgYW55IHBvcnRpb24gb2YgdGhlIHN0YWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5kcmFnRGlzdGFuY2VdXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29uZmlnLmRyYWdCb3VuZEZ1bmNdXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBjcmVhdGUgY2lyY2xlXG4gICAgICogdmFyIGNpcmNsZSA9IG5ldyBLaW5ldGljLkNpcmNsZSh7XG4gICAgICogICByYWRpdXM6IDQwLFxuICAgICAqICAgZmlsbDogJ3JlZCcsXG4gICAgICogICBzdHJva2U6ICdibGFjaydcbiAgICAgKiAgIHN0cm9rZVdpZHRoOiA1XG4gICAgICogfSk7XG4gICAgICovXG4gICAgS2luZXRpYy5DaXJjbGUgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdGhpcy5fX19pbml0KGNvbmZpZyk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuQ2lyY2xlLnByb3RvdHlwZSA9IHtcbiAgICAgICAgX19faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICAvLyBjYWxsIHN1cGVyIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICBLaW5ldGljLlNoYXBlLmNhbGwodGhpcywgY29uZmlnKTtcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gQ0lSQ0xFO1xuICAgICAgICAgICAgdGhpcy5zY2VuZUZ1bmModGhpcy5fc2NlbmVGdW5jKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NjZW5lRnVuYzogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHRoaXMuZ2V0UmFkaXVzKCksIDAsIFBJeDIsIGZhbHNlKTtcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW1wbGVtZW50cyBTaGFwZS5wcm90b3R5cGUuZ2V0V2lkdGgoKVxuICAgICAgICBnZXRXaWR0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRSYWRpdXMoKSAqIDI7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGltcGxlbWVudHMgU2hhcGUucHJvdG90eXBlLmdldEhlaWdodCgpXG4gICAgICAgIGdldEhlaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRSYWRpdXMoKSAqIDI7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGltcGxlbWVudHMgU2hhcGUucHJvdG90eXBlLnNldFdpZHRoKClcbiAgICAgICAgc2V0V2lkdGg6IGZ1bmN0aW9uKHdpZHRoKSB7XG4gICAgICAgICAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLnNldFdpZHRoLmNhbGwodGhpcywgd2lkdGgpO1xuICAgICAgICAgICAgaWYgKHRoaXMucmFkaXVzKCkgIT09IHdpZHRoIC8gMikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFkaXVzKHdpZHRoIC8gMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGltcGxlbWVudHMgU2hhcGUucHJvdG90eXBlLnNldEhlaWdodCgpXG4gICAgICAgIHNldEhlaWdodDogZnVuY3Rpb24oaGVpZ2h0KSB7XG4gICAgICAgICAgICBLaW5ldGljLk5vZGUucHJvdG90eXBlLnNldEhlaWdodC5jYWxsKHRoaXMsIGhlaWdodCk7XG4gICAgICAgICAgICBpZiAodGhpcy5yYWRpdXMoKSAhPT0gaGVpZ2h0IC8gMikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFkaXVzKGhlaWdodCAvIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZXRSYWRpdXMgOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldEF0dHIoJ3JhZGl1cycsIHZhbCk7XG4gICAgICAgICAgICB0aGlzLnNldFdpZHRoKHZhbCAqIDIpO1xuICAgICAgICAgICAgdGhpcy5zZXRIZWlnaHQodmFsICogMik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5DaXJjbGUsIEtpbmV0aWMuU2hhcGUpO1xuXG4gICAgLy8gYWRkIGdldHRlcnMgc2V0dGVyc1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXIoS2luZXRpYy5DaXJjbGUsICdyYWRpdXMnLCAwKTtcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkT3ZlcmxvYWRlZEdldHRlclNldHRlcihLaW5ldGljLkNpcmNsZSwgJ3JhZGl1cycpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCByYWRpdXNcbiAgICAgKiBAbmFtZSByYWRpdXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQ2lyY2xlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByYWRpdXNcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHJhZGl1c1xuICAgICAqIHZhciByYWRpdXMgPSBjaXJjbGUucmFkaXVzKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgcmFkaXVzXG4gICAgICogY2lyY2xlLnJhZGl1cygxMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLkNpcmNsZSk7XG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICAvLyB0aGUgMC4wMDAxIG9mZnNldCBmaXhlcyBhIGJ1ZyBpbiBDaHJvbWUgMjdcbiAgICB2YXIgUEl4MiA9IChNYXRoLlBJICogMikgLSAwLjAwMDEsXG4gICAgICAgIEVMTElQU0UgPSAnRWxsaXBzZSc7XG5cbiAgICAvKipcbiAgICAgKiBFbGxpcHNlIGNvbnN0cnVjdG9yXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGF1Z21lbnRzIEtpbmV0aWMuU2hhcGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZy5yYWRpdXMgZGVmaW5lcyB4IGFuZCB5IHJhZGl1c1xuICAgICAqIEBAU2hhcGVQYXJhbXNcbiAgICAgKiBAQE5vZGVQYXJhbXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBlbGxpcHNlID0gbmV3IEtpbmV0aWMuRWxsaXBzZSh7XG4gICAgICogICByYWRpdXMgOiB7XG4gICAgICogICAgIHggOiA1MCxcbiAgICAgKiAgICAgeSA6IDUwXG4gICAgICogICB9LFxuICAgICAqICAgZmlsbDogJ3JlZCdcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBLaW5ldGljLkVsbGlwc2UgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdGhpcy5fX19pbml0KGNvbmZpZyk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuRWxsaXBzZS5wcm90b3R5cGUgPSB7XG4gICAgICAgIF9fX2luaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgLy8gY2FsbCBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgS2luZXRpYy5TaGFwZS5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IEVMTElQU0U7XG4gICAgICAgICAgICB0aGlzLnNjZW5lRnVuYyh0aGlzLl9zY2VuZUZ1bmMpO1xuICAgICAgICB9LFxuICAgICAgICBfc2NlbmVGdW5jOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgcnggPSB0aGlzLmdldFJhZGl1c1goKSxcbiAgICAgICAgICAgICAgICByeSA9IHRoaXMuZ2V0UmFkaXVzWSgpO1xuXG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgICAgICBpZihyeCAhPT0gcnkpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNjYWxlKDEsIHJ5IC8gcngpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcngsIDAsIFBJeDIsIGZhbHNlKTtcbiAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0cm9rZVNoYXBlKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBpbXBsZW1lbnRzIFNoYXBlLnByb3RvdHlwZS5nZXRXaWR0aCgpXG4gICAgICAgIGdldFdpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFJhZGl1c1goKSAqIDI7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGltcGxlbWVudHMgU2hhcGUucHJvdG90eXBlLmdldEhlaWdodCgpXG4gICAgICAgIGdldEhlaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRSYWRpdXNZKCkgKiAyO1xuICAgICAgICB9LFxuICAgICAgICAvLyBpbXBsZW1lbnRzIFNoYXBlLnByb3RvdHlwZS5zZXRXaWR0aCgpXG4gICAgICAgIHNldFdpZHRoOiBmdW5jdGlvbih3aWR0aCkge1xuICAgICAgICAgICAgS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5zZXRXaWR0aC5jYWxsKHRoaXMsIHdpZHRoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0UmFkaXVzKHtcbiAgICAgICAgICAgICAgICB4OiB3aWR0aCAvIDJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyBpbXBsZW1lbnRzIFNoYXBlLnByb3RvdHlwZS5zZXRIZWlnaHQoKVxuICAgICAgICBzZXRIZWlnaHQ6IGZ1bmN0aW9uKGhlaWdodCkge1xuICAgICAgICAgICAgS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5zZXRIZWlnaHQuY2FsbCh0aGlzLCBoZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy5zZXRSYWRpdXMoe1xuICAgICAgICAgICAgICAgIHk6IGhlaWdodCAvIDJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuRWxsaXBzZSwgS2luZXRpYy5TaGFwZSk7XG5cbiAgICAvLyBhZGQgZ2V0dGVycyBzZXR0ZXJzXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZENvbXBvbmVudHNHZXR0ZXJTZXR0ZXIoS2luZXRpYy5FbGxpcHNlLCAncmFkaXVzJywgWyd4JywgJ3knXSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHJhZGl1c1xuICAgICAqIEBuYW1lIHJhZGl1c1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5FbGxpcHNlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByYWRpdXNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkaXVzLnhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkaXVzLnlcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHJhZGl1c1xuICAgICAqIHZhciByYWRpdXMgPSBlbGxpcHNlLnJhZGl1cygpO1xuICAgICAqIFxuICAgICAqIC8vIHNldCByYWRpdXNcbiAgICAgKiBlbGxpcHNlLnJhZGl1cyh7XG4gICAgICogICB4OiAyMDAsXG4gICAgICogICB5OiAxMDBcbiAgICAgKiB9KTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5FbGxpcHNlLCAncmFkaXVzWCcsIDApO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgcmFkaXVzIHhcbiAgICAgKiBAbmFtZSByYWRpdXNYXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkVsbGlwc2UucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHJhZGl1cyB4XG4gICAgICogdmFyIHJhZGl1c1ggPSBlbGxpcHNlLnJhZGl1c1goKTtcbiAgICAgKiBcbiAgICAgKiAvLyBzZXQgcmFkaXVzIHhcbiAgICAgKiBlbGxpcHNlLnJhZGl1c1goMjAwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5FbGxpcHNlLCAncmFkaXVzWScsIDApO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgcmFkaXVzIHlcbiAgICAgKiBAbmFtZSByYWRpdXNZXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkVsbGlwc2UucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHJhZGl1cyB5XG4gICAgICogdmFyIHJhZGl1c1kgPSBlbGxpcHNlLnJhZGl1c1koKTtcbiAgICAgKiBcbiAgICAgKiAvLyBzZXQgcmFkaXVzIHlcbiAgICAgKiBlbGxpcHNlLnJhZGl1c1koMjAwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuRWxsaXBzZSk7XG5cbn0pKCk7OyhmdW5jdGlvbigpIHtcbiAgICAvLyB0aGUgMC4wMDAxIG9mZnNldCBmaXhlcyBhIGJ1ZyBpbiBDaHJvbWUgMjdcbiAgICB2YXIgUEl4MiA9IChNYXRoLlBJICogMikgLSAwLjAwMDE7XG4gICAgXG4gICAgLyoqXG4gICAgICogUmluZyBjb25zdHJ1Y3RvclxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBhdWdtZW50cyBLaW5ldGljLlNoYXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb25maWcuaW5uZXJSYWRpdXNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29uZmlnLm91dGVyUmFkaXVzXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmNsb2Nrd2lzZV1cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsXSBmaWxsIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbFJlZF0gc2V0IGZpbGwgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxHcmVlbl0gc2V0IGZpbGwgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEJsdWVdIHNldCBmaWxsIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEFscGhhXSBzZXQgZmlsbCBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW1hZ2V9IFtjb25maWcuZmlsbFBhdHRlcm5JbWFnZV0gZmlsbCBwYXR0ZXJuIGltYWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFldIFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZV0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblJvdGF0aW9uXVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFBhdHRlcm5SZXBlYXRdIGNhbiBiZSBcInJlcGVhdFwiLCBcInJlcGVhdC14XCIsIFwicmVwZWF0LXlcIiwgb3IgXCJuby1yZXBlYXRcIi4gIFRoZSBkZWZhdWx0IGlzIFwibm8tcmVwZWF0XCJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WV0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5maWxsRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBmaWxsLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFByaW9yaXR5XSBjYW4gYmUgY29sb3IsIGxpbmVhci1ncmFkaWVudCwgcmFkaWFsLWdyYWlkZW50LCBvciBwYXR0ZXJuLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgY29sb3IuICBUaGUgZmlsbFByaW9yaXR5IHByb3BlcnR5IG1ha2VzIGl0IHJlYWxseSBlYXN5IHRvIHRvZ2dsZSBiZXR3ZWVuIGRpZmZlcmVudCBmaWxsIHR5cGVzLiAgRm9yIGV4YW1wbGUsIGlmIHlvdSB3YW50IHRvIHRvZ2dsZSBiZXR3ZWVuIGEgZmlsbCBjb2xvciBzdHlsZSBhbmQgYSBmaWxsIHBhdHRlcm4gc3R5bGUsIHNpbXBseSBzZXQgdGhlIGZpbGwgcHJvcGVydHkgYW5kIHRoZSBmaWxsUGF0dGVybiBwcm9wZXJ0aWVzLCBhbmQgdGhlbiB1c2Ugc2V0RmlsbFByaW9yaXR5KCdjb2xvcicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCBhIGNvbG9yIGZpbGwsIG9yIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ3BhdHRlcm4nKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggdGhlIHBhdHRlcm4gZmlsbCBjb25maWd1cmF0aW9uXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zdHJva2VdIHN0cm9rZSBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZVJlZF0gc2V0IHN0cm9rZSByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlR3JlZW5dIHNldCBzdHJva2UgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQmx1ZV0gc2V0IHN0cm9rZSBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUFscGhhXSBzZXQgc3Ryb2tlIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc3Ryb2tlV2lkdGhdIHN0cm9rZSB3aWR0aFxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZVNjYWxlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHN0cm9rZSBzY2FsZS4gIFRoZSBkZWZhdWx0IGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHN0cm9rZS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVKb2luXSBjYW4gYmUgbWl0ZXIsIHJvdW5kLCBvciBiZXZlbC4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgbWl0ZXJcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVDYXBdIGNhbiBiZSBidXR0LCByb3VuZCwgb3Igc3FhcmUuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIGJ1dHRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnNoYWRvd0NvbG9yXVxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd1JlZF0gc2V0IHNoYWRvdyBjb2xvciByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93R3JlZW5dIHNldCBzaGFkb3cgY29sb3IgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93Qmx1ZV0gc2V0IHNoYWRvdyBjb2xvciBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0FscGhhXSBzZXQgc2hhZG93IGNvbG9yIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93Qmx1cl1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNoYWRvd09mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T3BhY2l0eV0gc2hhZG93IG9wYWNpdHkuICBDYW4gYmUgYW55IHJlYWwgbnVtYmVyXHJcbiAgICAgKiAgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc2hhZG93RW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzaGFkb3cuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmRhc2hdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZGFzaEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZGFzaEFycmF5LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcudmlzaWJsZV1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5saXN0ZW5pbmddIHdoZXRoZXIgb3Igbm90IHRoZSBub2RlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5pZF0gdW5pcXVlIGlkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5uYW1lXSBub24tdW5pcXVlIG5hbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9wYWNpdHldIGRldGVybWluZXMgbm9kZSBvcGFjaXR5LiAgQ2FuIGJlIGFueSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zY2FsZV0gc2V0IHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVhdIHNldCBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVldIHNldCBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5yb3RhdGlvbl0gcm90YXRpb24gaW4gZGVncmVlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcub2Zmc2V0XSBvZmZzZXQgZnJvbSBjZW50ZXIgcG9pbnQgYW5kIHJvdGF0aW9uIHBvaW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRYXSBzZXQgb2Zmc2V0IHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFldIHNldCBvZmZzZXQgeVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRyYWdnYWJsZV0gbWFrZXMgdGhlIG5vZGUgZHJhZ2dhYmxlLiAgV2hlbiBzdGFnZXMgYXJlIGRyYWdnYWJsZSwgeW91IGNhbiBkcmFnIGFuZCBkcm9wXHJcbiAgICAgKiAgdGhlIGVudGlyZSBzdGFnZSBieSBkcmFnZ2luZyBhbnkgcG9ydGlvbiBvZiB0aGUgc3RhZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmRyYWdEaXN0YW5jZV1cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb25maWcuZHJhZ0JvdW5kRnVuY11cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciByaW5nID0gbmV3IEtpbmV0aWMuUmluZyh7XG4gICAgICogICBpbm5lclJhZGl1czogNDAsXG4gICAgICogICBvdXRlclJhZGl1czogODAsXG4gICAgICogICBmaWxsOiAncmVkJyxcbiAgICAgKiAgIHN0cm9rZTogJ2JsYWNrJyxcbiAgICAgKiAgIHN0cm9rZVdpZHRoOiA1XG4gICAgICogfSk7XG4gICAgICovXG4gICAgS2luZXRpYy5SaW5nID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHRoaXMuX19faW5pdChjb25maWcpO1xuICAgIH07XG5cbiAgICBLaW5ldGljLlJpbmcucHJvdG90eXBlID0ge1xuICAgICAgICBfX19pbml0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIC8vIGNhbGwgc3VwZXIgY29uc3RydWN0b3JcbiAgICAgICAgICAgIEtpbmV0aWMuU2hhcGUuY2FsbCh0aGlzLCBjb25maWcpO1xuICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSAnUmluZyc7XG4gICAgICAgICAgICB0aGlzLnNjZW5lRnVuYyh0aGlzLl9zY2VuZUZ1bmMpO1xuICAgICAgICB9LFxuICAgICAgICBfc2NlbmVGdW5jOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgdGhpcy5nZXRJbm5lclJhZGl1cygpLCAwLCBQSXgyLCBmYWxzZSk7XG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyh0aGlzLmdldE91dGVyUmFkaXVzKCksIDApO1xuICAgICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgdGhpcy5nZXRPdXRlclJhZGl1cygpLCBQSXgyLCAwLCB0cnVlKTtcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW1wbGVtZW50cyBTaGFwZS5wcm90b3R5cGUuZ2V0V2lkdGgoKVxuICAgICAgICBnZXRXaWR0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRPdXRlclJhZGl1cygpICogMjtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW1wbGVtZW50cyBTaGFwZS5wcm90b3R5cGUuZ2V0SGVpZ2h0KClcbiAgICAgICAgZ2V0SGVpZ2h0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE91dGVyUmFkaXVzKCkgKiAyO1xuICAgICAgICB9LFxuICAgICAgICAvLyBpbXBsZW1lbnRzIFNoYXBlLnByb3RvdHlwZS5zZXRXaWR0aCgpXG4gICAgICAgIHNldFdpZHRoOiBmdW5jdGlvbih3aWR0aCkge1xuICAgICAgICAgICAgS2luZXRpYy5Ob2RlLnByb3RvdHlwZS5zZXRXaWR0aC5jYWxsKHRoaXMsIHdpZHRoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm91dGVyUmFkaXVzKCkgIT09IHdpZHRoIC8gMikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0T3V0ZXJSYWRpdXMod2lkdGggLyAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW1wbGVtZW50cyBTaGFwZS5wcm90b3R5cGUuc2V0SGVpZ2h0KClcbiAgICAgICAgc2V0SGVpZ2h0OiBmdW5jdGlvbihoZWlnaHQpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuTm9kZS5wcm90b3R5cGUuc2V0SGVpZ2h0LmNhbGwodGhpcywgaGVpZ2h0KTtcbiAgICAgICAgICAgIGlmICh0aGlzLm91dGVyUmFkaXVzKCkgIT09IGhlaWdodCAvIDIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldE91dGVyUmFkaXVzKGhlaWdodCAvIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZXRPdXRlclJhZGl1cyA6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0QXR0cignb3V0ZXJSYWRpdXMnLCB2YWwpO1xuICAgICAgICAgICAgdGhpcy5zZXRXaWR0aCh2YWwgKiAyKTtcbiAgICAgICAgICAgIHRoaXMuc2V0SGVpZ2h0KHZhbCAqIDIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuUmluZywgS2luZXRpYy5TaGFwZSk7XG5cbiAgICAvLyBhZGQgZ2V0dGVycyBzZXR0ZXJzXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlJpbmcsICdpbm5lclJhZGl1cycsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBpbm5lclJhZGl1c1xuICAgICAqIEBuYW1lIGlubmVyUmFkaXVzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlJpbmcucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGlubmVyUmFkaXVzXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBpbm5lciByYWRpdXNcbiAgICAgKiB2YXIgaW5uZXJSYWRpdXMgPSByaW5nLmlubmVyUmFkaXVzKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgaW5uZXIgcmFkaXVzXG4gICAgICogcmluZy5pbm5lclJhZGl1cygyMCk7XG4gICAgICovXG4gICAgIFxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXIoS2luZXRpYy5SaW5nLCAnb3V0ZXJSYWRpdXMnLCAwKTtcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkT3ZlcmxvYWRlZEdldHRlclNldHRlcihLaW5ldGljLlJpbmcsICdvdXRlclJhZGl1cycpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBvdXRlclJhZGl1c1xuICAgICAqIEBuYW1lIG91dGVyUmFkaXVzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlJpbmcucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG91dGVyUmFkaXVzXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBvdXRlciByYWRpdXNcbiAgICAgKiB2YXIgb3V0ZXJSYWRpdXMgPSByaW5nLm91dGVyUmFkaXVzKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgb3V0ZXIgcmFkaXVzXG4gICAgICogcmluZy5vdXRlclJhZGl1cygyMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLlJpbmcpO1xufSkoKTtcbjsoZnVuY3Rpb24oKSB7XG4gICAgLyoqXG4gICAgICogV2VkZ2UgY29uc3RydWN0b3JcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAYXVnbWVudHMgS2luZXRpYy5TaGFwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29uZmlnLmFuZ2xlIGluIGRlZ3JlZXNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29uZmlnLnJhZGl1c1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5jbG9ja3dpc2VdXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbF0gZmlsbCBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxSZWRdIHNldCBmaWxsIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsR3JlZW5dIHNldCBmaWxsIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxCbHVlXSBzZXQgZmlsbCBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxBbHBoYV0gc2V0IGZpbGwgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ltYWdlfSBbY29uZmlnLmZpbGxQYXR0ZXJuSW1hZ2VdIGZpbGwgcGF0dGVybiBpbWFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5YXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5ZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRZXSBcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5Sb3RhdGlvbl1cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQYXR0ZXJuUmVwZWF0XSBjYW4gYmUgXCJyZXBlYXRcIiwgXCJyZXBlYXQteFwiLCBcInJlcGVhdC15XCIsIG9yIFwibm8tcmVwZWF0XCIuICBUaGUgZGVmYXVsdCBpcyBcIm5vLXJlcGVhdFwiXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFldIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZmlsbEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZmlsbC4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQcmlvcml0eV0gY2FuIGJlIGNvbG9yLCBsaW5lYXItZ3JhZGllbnQsIHJhZGlhbC1ncmFpZGVudCwgb3IgcGF0dGVybi4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGNvbG9yLiAgVGhlIGZpbGxQcmlvcml0eSBwcm9wZXJ0eSBtYWtlcyBpdCByZWFsbHkgZWFzeSB0byB0b2dnbGUgYmV0d2VlbiBkaWZmZXJlbnQgZmlsbCB0eXBlcy4gIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byB0b2dnbGUgYmV0d2VlbiBhIGZpbGwgY29sb3Igc3R5bGUgYW5kIGEgZmlsbCBwYXR0ZXJuIHN0eWxlLCBzaW1wbHkgc2V0IHRoZSBmaWxsIHByb3BlcnR5IGFuZCB0aGUgZmlsbFBhdHRlcm4gcHJvcGVydGllcywgYW5kIHRoZW4gdXNlIHNldEZpbGxQcmlvcml0eSgnY29sb3InKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggYSBjb2xvciBmaWxsLCBvciB1c2Ugc2V0RmlsbFByaW9yaXR5KCdwYXR0ZXJuJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIHRoZSBwYXR0ZXJuIGZpbGwgY29uZmlndXJhdGlvblxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc3Ryb2tlXSBzdHJva2UgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VSZWRdIHNldCBzdHJva2UgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUdyZWVuXSBzZXQgc3Ryb2tlIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUJsdWVdIHNldCBzdHJva2UgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VBbHBoYV0gc2V0IHN0cm9rZSBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnN0cm9rZVdpZHRoXSBzdHJva2Ugd2lkdGhcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VTY2FsZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyBzdHJva2Ugc2NhbGUuICBUaGUgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzdHJva2UuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lSm9pbl0gY2FuIGJlIG1pdGVyLCByb3VuZCwgb3IgYmV2ZWwuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIG1pdGVyXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lQ2FwXSBjYW4gYmUgYnV0dCwgcm91bmQsIG9yIHNxYXJlLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBidXR0XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zaGFkb3dDb2xvcl1cclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dSZWRdIHNldCBzaGFkb3cgY29sb3IgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0dyZWVuXSBzZXQgc2hhZG93IGNvbG9yIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0JsdWVdIHNldCBzaGFkb3cgY29sb3IgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dBbHBoYV0gc2V0IHNoYWRvdyBjb2xvciBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd0JsdXJdXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zaGFkb3dPZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09wYWNpdHldIHNoYWRvdyBvcGFjaXR5LiAgQ2FuIGJlIGFueSByZWFsIG51bWJlclxyXG4gICAgICogIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnNoYWRvd0VuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc2hhZG93LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5kYXNoXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRhc2hFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGRhc2hBcnJheS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcubGlzdGVuaW5nXSB3aGV0aGVyIG9yIG5vdCB0aGUgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuaWRdIHVuaXF1ZSBpZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2NhbGVdIHNldCBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVYXSBzZXQgc2NhbGUgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVZXSBzZXQgc2NhbGUgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucm90YXRpb25dIHJvdGF0aW9uIGluIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLm9mZnNldF0gb2Zmc2V0IGZyb20gY2VudGVyIHBvaW50IGFuZCByb3RhdGlvbiBwb2ludFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WF0gc2V0IG9mZnNldCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRZXSBzZXQgb2Zmc2V0IHlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmFnZ2FibGVdIG1ha2VzIHRoZSBub2RlIGRyYWdnYWJsZS4gIFdoZW4gc3RhZ2VzIGFyZSBkcmFnZ2FibGUsIHlvdSBjYW4gZHJhZyBhbmQgZHJvcFxyXG4gICAgICogIHRoZSBlbnRpcmUgc3RhZ2UgYnkgZHJhZ2dpbmcgYW55IHBvcnRpb24gb2YgdGhlIHN0YWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5kcmFnRGlzdGFuY2VdXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29uZmlnLmRyYWdCb3VuZEZ1bmNdXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBkcmF3IGEgd2VkZ2UgdGhhdCdzIHBvaW50aW5nIGRvd253YXJkc1xuICAgICAqIHZhciB3ZWRnZSA9IG5ldyBLaW5ldGljLldlZGdlKHtcbiAgICAgKiAgIHJhZGl1czogNDAsXG4gICAgICogICBmaWxsOiAncmVkJyxcbiAgICAgKiAgIHN0cm9rZTogJ2JsYWNrJ1xuICAgICAqICAgc3Ryb2tlV2lkdGg6IDUsXG4gICAgICogICBhbmdsZURlZzogNjAsXG4gICAgICogICByb3RhdGlvbkRlZzogLTEyMFxuICAgICAqIH0pO1xuICAgICAqL1xuICAgIEtpbmV0aWMuV2VkZ2UgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdGhpcy5fX19pbml0KGNvbmZpZyk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuV2VkZ2UucHJvdG90eXBlID0ge1xuICAgICAgICBfX19pbml0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIC8vIGNhbGwgc3VwZXIgY29uc3RydWN0b3JcbiAgICAgICAgICAgIEtpbmV0aWMuU2hhcGUuY2FsbCh0aGlzLCBjb25maWcpO1xuICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSAnV2VkZ2UnO1xuICAgICAgICAgICAgdGhpcy5zY2VuZUZ1bmModGhpcy5fc2NlbmVGdW5jKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NjZW5lRnVuYzogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHRoaXMuZ2V0UmFkaXVzKCksIDAsIEtpbmV0aWMuZ2V0QW5nbGUodGhpcy5nZXRBbmdsZSgpKSwgdGhpcy5nZXRDbG9ja3dpc2UoKSk7XG4gICAgICAgICAgICBjb250ZXh0LmxpbmVUbygwLCAwKTtcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLldlZGdlLCBLaW5ldGljLlNoYXBlKTtcblxuICAgIC8vIGFkZCBnZXR0ZXJzIHNldHRlcnNcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuV2VkZ2UsICdyYWRpdXMnLCAwKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgcmFkaXVzXG4gICAgICogQG5hbWUgcmFkaXVzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLldlZGdlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByYWRpdXNcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHJhZGl1c1xuICAgICAqIHZhciByYWRpdXMgPSB3ZWRnZS5yYWRpdXMoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCByYWRpdXNcbiAgICAgKiB3ZWRnZS5yYWRpdXMoMTApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLldlZGdlLCAnYW5nbGUnLCAwKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgYW5nbGUgaW4gZGVncmVlc1xuICAgICAqIEBuYW1lIGFuZ2xlXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLldlZGdlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhbmdsZVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgYW5nbGVcbiAgICAgKiB2YXIgYW5nbGUgPSB3ZWRnZS5hbmdsZSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGFuZ2xlXG4gICAgICogd2VkZ2UuYW5nbGUoMjApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLldlZGdlLCAnY2xvY2t3aXNlJywgZmFsc2UpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBjbG9ja3dpc2UgZmxhZ1xuICAgICAqIEBuYW1lIGNsb2Nrd2lzZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5XZWRnZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY2xvY2t3aXNlXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBjbG9ja3dpc2UgZmxhZ1xuICAgICAqIHZhciBjbG9ja3dpc2UgPSB3ZWRnZS5jbG9ja3dpc2UoKTtcbiAgICAgKlxuICAgICAqIC8vIGRyYXcgd2VkZ2UgY291bnRlci1jbG9ja3dpc2VcbiAgICAgKiB3ZWRnZS5jbG9ja3dpc2UoZmFsc2UpO1xuICAgICAqXG4gICAgICogLy8gZHJhdyB3ZWRnZSBjbG9ja3dpc2VcbiAgICAgKiB3ZWRnZS5jbG9ja3dpc2UodHJ1ZSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYmFja0NvbXBhdChLaW5ldGljLldlZGdlLCB7XG4gICAgICAgIGFuZ2xlRGVnOiAnYW5nbGUnLFxuICAgICAgICBnZXRBbmdsZURlZzogJ2dldEFuZ2xlJyxcbiAgICAgICAgc2V0QW5nbGVEZWc6ICdzZXRBbmdsZSdcbiAgICB9KTtcblxuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuV2VkZ2UpO1xufSkoKTtcbjsoZnVuY3Rpb24oKSB7XG4gICAgLyoqXG4gICAgICogQXJjIGNvbnN0cnVjdG9yXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGF1Z21lbnRzIEtpbmV0aWMuU2hhcGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbmZpZy5hbmdsZSBpbiBkZWdyZWVzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbmZpZy5pbm5lclJhZGl1c1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb25maWcub3V0ZXJSYWRpdXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuY2xvY2t3aXNlXVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxdIGZpbGwgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsUmVkXSBzZXQgZmlsbCByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEdyZWVuXSBzZXQgZmlsbCBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQmx1ZV0gc2V0IGZpbGwgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQWxwaGFdIHNldCBmaWxsIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbWFnZX0gW2NvbmZpZy5maWxsUGF0dGVybkltYWdlXSBmaWxsIHBhdHRlcm4gaW1hZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WV0gXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlXSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuUm90YXRpb25dXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUGF0dGVyblJlcGVhdF0gY2FuIGJlIFwicmVwZWF0XCIsIFwicmVwZWF0LXhcIiwgXCJyZXBlYXQteVwiLCBvciBcIm5vLXJlcGVhdFwiLiAgVGhlIGRlZmF1bHQgaXMgXCJuby1yZXBlYXRcIlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRZXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmZpbGxFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGZpbGwuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUHJpb3JpdHldIGNhbiBiZSBjb2xvciwgbGluZWFyLWdyYWRpZW50LCByYWRpYWwtZ3JhaWRlbnQsIG9yIHBhdHRlcm4uICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBjb2xvci4gIFRoZSBmaWxsUHJpb3JpdHkgcHJvcGVydHkgbWFrZXMgaXQgcmVhbGx5IGVhc3kgdG8gdG9nZ2xlIGJldHdlZW4gZGlmZmVyZW50IGZpbGwgdHlwZXMuICBGb3IgZXhhbXBsZSwgaWYgeW91IHdhbnQgdG8gdG9nZ2xlIGJldHdlZW4gYSBmaWxsIGNvbG9yIHN0eWxlIGFuZCBhIGZpbGwgcGF0dGVybiBzdHlsZSwgc2ltcGx5IHNldCB0aGUgZmlsbCBwcm9wZXJ0eSBhbmQgdGhlIGZpbGxQYXR0ZXJuIHByb3BlcnRpZXMsIGFuZCB0aGVuIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ2NvbG9yJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIGEgY29sb3IgZmlsbCwgb3IgdXNlIHNldEZpbGxQcmlvcml0eSgncGF0dGVybicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCB0aGUgcGF0dGVybiBmaWxsIGNvbmZpZ3VyYXRpb25cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnN0cm9rZV0gc3Ryb2tlIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlUmVkXSBzZXQgc3Ryb2tlIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VHcmVlbl0gc2V0IHN0cm9rZSBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VCbHVlXSBzZXQgc3Ryb2tlIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQWxwaGFdIHNldCBzdHJva2UgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zdHJva2VXaWR0aF0gc3Ryb2tlIHdpZHRoXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlU2NhbGVFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgc3Ryb2tlIHNjYWxlLiAgVGhlIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc3Ryb2tlLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUpvaW5dIGNhbiBiZSBtaXRlciwgcm91bmQsIG9yIGJldmVsLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBtaXRlclxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUNhcF0gY2FuIGJlIGJ1dHQsIHJvdW5kLCBvciBzcWFyZS4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgYnV0dFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc2hhZG93Q29sb3JdXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93UmVkXSBzZXQgc2hhZG93IGNvbG9yIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dHcmVlbl0gc2V0IHNoYWRvdyBjb2xvciBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dCbHVlXSBzZXQgc2hhZG93IGNvbG9yIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93QWxwaGFdIHNldCBzaGFkb3cgY29sb3IgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dCbHVyXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2hhZG93T2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPcGFjaXR5XSBzaGFkb3cgb3BhY2l0eS4gIENhbiBiZSBhbnkgcmVhbCBudW1iZXJcclxuICAgICAqICBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zaGFkb3dFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHNoYWRvdy4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZGFzaF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kYXNoRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBkYXNoQXJyYXkuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmxpc3RlbmluZ10gd2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub3BhY2l0eV0gZGV0ZXJtaW5lcyBub2RlIG9wYWNpdHkuICBDYW4gYmUgYW55IG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNjYWxlXSBzZXQgc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWF0gc2V0IHNjYWxlIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWV0gc2V0IHNjYWxlIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnJvdGF0aW9uXSByb3RhdGlvbiBpbiBkZWdyZWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5vZmZzZXRdIG9mZnNldCBmcm9tIGNlbnRlciBwb2ludCBhbmQgcm90YXRpb24gcG9pbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFhdIHNldCBvZmZzZXQgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WV0gc2V0IG9mZnNldCB5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZHJhZ2dhYmxlXSBtYWtlcyB0aGUgbm9kZSBkcmFnZ2FibGUuICBXaGVuIHN0YWdlcyBhcmUgZHJhZ2dhYmxlLCB5b3UgY2FuIGRyYWcgYW5kIGRyb3BcclxuICAgICAqICB0aGUgZW50aXJlIHN0YWdlIGJ5IGRyYWdnaW5nIGFueSBwb3J0aW9uIG9mIHRoZSBzdGFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZHJhZ0Rpc3RhbmNlXVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbmZpZy5kcmFnQm91bmRGdW5jXVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZHJhdyBhIEFyYyB0aGF0J3MgcG9pbnRpbmcgZG93bndhcmRzXG4gICAgICogdmFyIGFyYyA9IG5ldyBLaW5ldGljLkFyYyh7XG4gICAgICogICBpbm5lclJhZGl1czogNDAsXG4gICAgICogICBvdXRlclJhZGl1czogODAsXG4gICAgICogICBmaWxsOiAncmVkJyxcbiAgICAgKiAgIHN0cm9rZTogJ2JsYWNrJ1xuICAgICAqICAgc3Ryb2tlV2lkdGg6IDUsXG4gICAgICogICBhbmdsZTogNjAsXG4gICAgICogICByb3RhdGlvbkRlZzogLTEyMFxuICAgICAqIH0pO1xuICAgICAqL1xuICAgIEtpbmV0aWMuQXJjID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHRoaXMuX19faW5pdChjb25maWcpO1xuICAgIH07XG5cbiAgICBLaW5ldGljLkFyYy5wcm90b3R5cGUgPSB7XG4gICAgICAgIF9fX2luaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgLy8gY2FsbCBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgS2luZXRpYy5TaGFwZS5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9ICdBcmMnO1xuICAgICAgICAgICAgdGhpcy5zY2VuZUZ1bmModGhpcy5fc2NlbmVGdW5jKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NjZW5lRnVuYzogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGFuZ2xlID0gS2luZXRpYy5nZXRBbmdsZSh0aGlzLmFuZ2xlKCkpLFxuICAgICAgICAgICAgICAgIGNsb2Nrd2lzZSA9IHRoaXMuY2xvY2t3aXNlKCk7XG5cbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCB0aGlzLmdldE91dGVyUmFkaXVzKCksIDAsIGFuZ2xlLCBjbG9ja3dpc2UpO1xuICAgICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgdGhpcy5nZXRJbm5lclJhZGl1cygpLCBhbmdsZSwgMCwgIWNsb2Nrd2lzZSk7XG4gICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5maWxsU3Ryb2tlU2hhcGUodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5BcmMsIEtpbmV0aWMuU2hhcGUpO1xuXG4gICAgLy8gYWRkIGdldHRlcnMgc2V0dGVyc1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5BcmMsICdpbm5lclJhZGl1cycsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBpbm5lclJhZGl1c1xuICAgICAqIEBuYW1lIGlubmVyUmFkaXVzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkFyYy5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5uZXJSYWRpdXNcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGlubmVyIHJhZGl1c1xuICAgICAqIHZhciBpbm5lclJhZGl1cyA9IGFyYy5pbm5lclJhZGl1cygpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGlubmVyIHJhZGl1c1xuICAgICAqIGFyYy5pbm5lclJhZGl1cygyMCk7XG4gICAgICovXG4gICAgIFxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5BcmMsICdvdXRlclJhZGl1cycsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBvdXRlclJhZGl1c1xuICAgICAqIEBuYW1lIG91dGVyUmFkaXVzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkFyYy5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3V0ZXJSYWRpdXNcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IG91dGVyIHJhZGl1c1xuICAgICAqIHZhciBvdXRlclJhZGl1cyA9IGFyYy5vdXRlclJhZGl1cygpO1xuICAgICAqXG4gICAgICogLy8gc2V0IG91dGVyIHJhZGl1c1xuICAgICAqIGFyYy5vdXRlclJhZGl1cygyMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuQXJjLCAnYW5nbGUnLCAwKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgYW5nbGUgaW4gZGVncmVlc1xuICAgICAqIEBuYW1lIGFuZ2xlXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkFyYy5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYW5nbGVcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGFuZ2xlXG4gICAgICogdmFyIGFuZ2xlID0gYXJjLmFuZ2xlKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgYW5nbGVcbiAgICAgKiBhcmMuYW5nbGUoMjApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkFyYywgJ2Nsb2Nrd2lzZScsIGZhbHNlKTtcblxuICAgIC8qKlxuICAgICAqIGdldC9zZXQgY2xvY2t3aXNlIGZsYWdcbiAgICAgKiBAbmFtZSBjbG9ja3dpc2VcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQXJjLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gY2xvY2t3aXNlXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgY2xvY2t3aXNlIGZsYWdcbiAgICAgKiB2YXIgY2xvY2t3aXNlID0gYXJjLmNsb2Nrd2lzZSgpO1xuICAgICAqXG4gICAgICogLy8gZHJhdyBhcmMgY291bnRlci1jbG9ja3dpc2VcbiAgICAgKiBhcmMuY2xvY2t3aXNlKGZhbHNlKTtcbiAgICAgKlxuICAgICAqIC8vIGRyYXcgYXJjIGNsb2Nrd2lzZVxuICAgICAqIGFyYy5jbG9ja3dpc2UodHJ1ZSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLkFyYyk7XG59KSgpO1xuOyhmdW5jdGlvbigpIHtcblxuICAgIC8vIENPTlNUQU5UU1xuICAgIHZhciBJTUFHRSA9ICdJbWFnZSc7XG5cbiAgICAvKipcbiAgICAgKiBJbWFnZSBjb25zdHJ1Y3RvclxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICogQGF1Z21lbnRzIEtpbmV0aWMuU2hhcGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICogQHBhcmFtIHtJbWFnZX0gY29uZmlnLmltYWdlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuY3JvcF1cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsXSBmaWxsIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbFJlZF0gc2V0IGZpbGwgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxHcmVlbl0gc2V0IGZpbGwgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEJsdWVdIHNldCBmaWxsIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEFscGhhXSBzZXQgZmlsbCBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW1hZ2V9IFtjb25maWcuZmlsbFBhdHRlcm5JbWFnZV0gZmlsbCBwYXR0ZXJuIGltYWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFldIFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZV0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblJvdGF0aW9uXVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFBhdHRlcm5SZXBlYXRdIGNhbiBiZSBcInJlcGVhdFwiLCBcInJlcGVhdC14XCIsIFwicmVwZWF0LXlcIiwgb3IgXCJuby1yZXBlYXRcIi4gIFRoZSBkZWZhdWx0IGlzIFwibm8tcmVwZWF0XCJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WV0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5maWxsRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBmaWxsLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFByaW9yaXR5XSBjYW4gYmUgY29sb3IsIGxpbmVhci1ncmFkaWVudCwgcmFkaWFsLWdyYWlkZW50LCBvciBwYXR0ZXJuLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgY29sb3IuICBUaGUgZmlsbFByaW9yaXR5IHByb3BlcnR5IG1ha2VzIGl0IHJlYWxseSBlYXN5IHRvIHRvZ2dsZSBiZXR3ZWVuIGRpZmZlcmVudCBmaWxsIHR5cGVzLiAgRm9yIGV4YW1wbGUsIGlmIHlvdSB3YW50IHRvIHRvZ2dsZSBiZXR3ZWVuIGEgZmlsbCBjb2xvciBzdHlsZSBhbmQgYSBmaWxsIHBhdHRlcm4gc3R5bGUsIHNpbXBseSBzZXQgdGhlIGZpbGwgcHJvcGVydHkgYW5kIHRoZSBmaWxsUGF0dGVybiBwcm9wZXJ0aWVzLCBhbmQgdGhlbiB1c2Ugc2V0RmlsbFByaW9yaXR5KCdjb2xvcicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCBhIGNvbG9yIGZpbGwsIG9yIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ3BhdHRlcm4nKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggdGhlIHBhdHRlcm4gZmlsbCBjb25maWd1cmF0aW9uXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zdHJva2VdIHN0cm9rZSBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZVJlZF0gc2V0IHN0cm9rZSByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlR3JlZW5dIHNldCBzdHJva2UgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQmx1ZV0gc2V0IHN0cm9rZSBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUFscGhhXSBzZXQgc3Ryb2tlIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc3Ryb2tlV2lkdGhdIHN0cm9rZSB3aWR0aFxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZVNjYWxlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHN0cm9rZSBzY2FsZS4gIFRoZSBkZWZhdWx0IGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHN0cm9rZS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVKb2luXSBjYW4gYmUgbWl0ZXIsIHJvdW5kLCBvciBiZXZlbC4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgbWl0ZXJcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVDYXBdIGNhbiBiZSBidXR0LCByb3VuZCwgb3Igc3FhcmUuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIGJ1dHRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnNoYWRvd0NvbG9yXVxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd1JlZF0gc2V0IHNoYWRvdyBjb2xvciByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93R3JlZW5dIHNldCBzaGFkb3cgY29sb3IgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93Qmx1ZV0gc2V0IHNoYWRvdyBjb2xvciBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0FscGhhXSBzZXQgc2hhZG93IGNvbG9yIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93Qmx1cl1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNoYWRvd09mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T3BhY2l0eV0gc2hhZG93IG9wYWNpdHkuICBDYW4gYmUgYW55IHJlYWwgbnVtYmVyXHJcbiAgICAgKiAgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc2hhZG93RW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzaGFkb3cuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmRhc2hdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZGFzaEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZGFzaEFycmF5LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcudmlzaWJsZV1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5saXN0ZW5pbmddIHdoZXRoZXIgb3Igbm90IHRoZSBub2RlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5pZF0gdW5pcXVlIGlkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5uYW1lXSBub24tdW5pcXVlIG5hbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9wYWNpdHldIGRldGVybWluZXMgbm9kZSBvcGFjaXR5LiAgQ2FuIGJlIGFueSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zY2FsZV0gc2V0IHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVhdIHNldCBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVldIHNldCBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5yb3RhdGlvbl0gcm90YXRpb24gaW4gZGVncmVlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcub2Zmc2V0XSBvZmZzZXQgZnJvbSBjZW50ZXIgcG9pbnQgYW5kIHJvdGF0aW9uIHBvaW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRYXSBzZXQgb2Zmc2V0IHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFldIHNldCBvZmZzZXQgeVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRyYWdnYWJsZV0gbWFrZXMgdGhlIG5vZGUgZHJhZ2dhYmxlLiAgV2hlbiBzdGFnZXMgYXJlIGRyYWdnYWJsZSwgeW91IGNhbiBkcmFnIGFuZCBkcm9wXHJcbiAgICAgKiAgdGhlIGVudGlyZSBzdGFnZSBieSBkcmFnZ2luZyBhbnkgcG9ydGlvbiBvZiB0aGUgc3RhZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmRyYWdEaXN0YW5jZV1cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb25maWcuZHJhZ0JvdW5kRnVuY11cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBpbWFnZU9iaiA9IG5ldyBJbWFnZSgpO1xuICAgICAqIGltYWdlT2JqLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAqICAgdmFyIGltYWdlID0gbmV3IEtpbmV0aWMuSW1hZ2Uoe1xuICAgICAqICAgICB4OiAyMDAsXG4gICAgICogICAgIHk6IDUwLFxuICAgICAqICAgICBpbWFnZTogaW1hZ2VPYmosXG4gICAgICogICAgIHdpZHRoOiAxMDAsXG4gICAgICogICAgIGhlaWdodDogMTAwXG4gICAgICogICB9KTtcbiAgICAgKiB9O1xuICAgICAqIGltYWdlT2JqLnNyYyA9ICcvcGF0aC90by9pbWFnZS5qcGcnXG4gICAgICovXG4gICAgS2luZXRpYy5JbWFnZSA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB0aGlzLl9fX2luaXQoY29uZmlnKTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5JbWFnZS5wcm90b3R5cGUgPSB7XG4gICAgICAgIF9fX2luaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgLy8gY2FsbCBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgS2luZXRpYy5TaGFwZS5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IElNQUdFO1xuICAgICAgICAgICAgdGhpcy5zY2VuZUZ1bmModGhpcy5fc2NlbmVGdW5jKTtcbiAgICAgICAgICAgIHRoaXMuaGl0RnVuYyh0aGlzLl9oaXRGdW5jKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3VzZUJ1ZmZlckNhbnZhczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuaGFzU2hhZG93KCkgfHwgdGhpcy5nZXRBYnNvbHV0ZU9wYWNpdHkoKSAhPT0gMSkgJiYgdGhpcy5oYXNTdHJva2UoKSAmJiB0aGlzLmdldFN0YWdlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zY2VuZUZ1bmM6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IHRoaXMuZ2V0V2lkdGgoKSxcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLmdldEhlaWdodCgpLFxuICAgICAgICAgICAgICAgIGltYWdlID0gdGhpcy5nZXRJbWFnZSgpLFxuICAgICAgICAgICAgICAgIGNyb3BXaWR0aCwgY3JvcEhlaWdodCwgcGFyYW1zO1xuXG4gICAgICAgICAgICBpZiAoaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICBjcm9wV2lkdGggPSB0aGlzLmdldENyb3BXaWR0aCgpO1xuICAgICAgICAgICAgICAgIGNyb3BIZWlnaHQgPSB0aGlzLmdldENyb3BIZWlnaHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoY3JvcFdpZHRoICYmIGNyb3BIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gW2ltYWdlLCB0aGlzLmdldENyb3BYKCksIHRoaXMuZ2V0Q3JvcFkoKSwgY3JvcFdpZHRoLCBjcm9wSGVpZ2h0LCAwLCAwLCB3aWR0aCwgaGVpZ2h0XTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSBbaW1hZ2UsIDAsIDAsIHdpZHRoLCBoZWlnaHRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzRmlsbCgpIHx8IHRoaXMuaGFzU3Ryb2tlKCkgfHwgdGhpcy5oYXNTaGFkb3coKSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5yZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3Ryb2tlU2hhcGUodGhpcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbWFnZSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlLmFwcGx5KGNvbnRleHQsIHBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9oaXRGdW5jOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmdldFdpZHRoKCksXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5nZXRIZWlnaHQoKTtcblxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQucmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0V2lkdGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGltYWdlID0gdGhpcy5nZXRJbWFnZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cnMud2lkdGggfHwgKGltYWdlID8gaW1hZ2Uud2lkdGggOiAwKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0SGVpZ2h0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpbWFnZSA9IHRoaXMuZ2V0SW1hZ2UoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF0dHJzLmhlaWdodCB8fCAoaW1hZ2UgPyBpbWFnZS5oZWlnaHQgOiAwKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLkltYWdlLCBLaW5ldGljLlNoYXBlKTtcblxuICAgIC8vIGFkZCBnZXR0ZXJzIHNldHRlcnNcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuSW1hZ2UsICdpbWFnZScpO1xuXG4gICAgLyoqXG4gICAgICogc2V0IGltYWdlXG4gICAgICogQG5hbWUgc2V0SW1hZ2VcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuSW1hZ2UucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtJbWFnZX0gaW1hZ2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIGdldCBpbWFnZVxuICAgICAqIEBuYW1lIGdldEltYWdlXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkltYWdlLnByb3RvdHlwZVxuICAgICAqIEByZXR1cm5zIHtJbWFnZX1cbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRDb21wb25lbnRzR2V0dGVyU2V0dGVyKEtpbmV0aWMuSW1hZ2UsICdjcm9wJywgWyd4JywgJ3knLCAnd2lkdGgnLCAnaGVpZ2h0J10pO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgY3JvcFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbmFtZSBjcm9wXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuSW1hZ2UucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNyb3AgXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNyb3AueFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjcm9wLnlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY3JvcC53aWR0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjcm9wLmhlaWdodFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgY3JvcFxuICAgICAqIHZhciBjcm9wID0gaW1hZ2UuY3JvcCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGNyb3BcbiAgICAgKiBpbWFnZS5jcm9wKHtcbiAgICAgKiAgIHg6IDIwLFxuICAgICAqICAgeTogMjAsXG4gICAgICogICB3aWR0aDogMjAsXG4gICAgICogICBoZWlnaHQ6IDIwXG4gICAgICogfSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuSW1hZ2UsICdjcm9wWCcsIDApO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgY3JvcCB4XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBuYW1lIGNyb3BYXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuSW1hZ2UucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGNyb3AgeFxuICAgICAqIHZhciBjcm9wWCA9IGltYWdlLmNyb3BYKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgY3JvcCB4XG4gICAgICogaW1hZ2UuY3JvcFgoMjApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkltYWdlLCAnY3JvcFknLCAwKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGNyb3AgeVxuICAgICAqIEBuYW1lIGNyb3BZXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkltYWdlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBjcm9wIHlcbiAgICAgKiB2YXIgY3JvcFkgPSBpbWFnZS5jcm9wWSgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IGNyb3AgeVxuICAgICAqIGltYWdlLmNyb3BZKDIwKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5JbWFnZSwgJ2Nyb3BXaWR0aCcsIDApO1xuICAgIC8qKlxuICAgICAqIGdldC9zZXQgY3JvcCB3aWR0aFxuICAgICAqIEBuYW1lIGNyb3BXaWR0aFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5JbWFnZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gd2lkdGhcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGNyb3Agd2lkdGhcbiAgICAgKiB2YXIgY3JvcFdpZHRoID0gaW1hZ2UuY3JvcFdpZHRoKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgY3JvcCB3aWR0aFxuICAgICAqIGltYWdlLmNyb3BXaWR0aCgyMCk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuSW1hZ2UsICdjcm9wSGVpZ2h0JywgMCk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBjcm9wIGhlaWdodFxuICAgICAqIEBuYW1lIGNyb3BIZWlnaHRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuSW1hZ2UucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgY3JvcCBoZWlnaHRcbiAgICAgKiB2YXIgY3JvcEhlaWdodCA9IGltYWdlLmNyb3BIZWlnaHQoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBjcm9wIGhlaWdodFxuICAgICAqIGltYWdlLmNyb3BIZWlnaHQoMjApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5JbWFnZSk7XG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICAvLyBjb25zdGFudHNcbiAgICB2YXIgQVVUTyA9ICdhdXRvJyxcbiAgICAgICAgLy9DQU5WQVMgPSAnY2FudmFzJyxcbiAgICAgICAgQ0VOVEVSID0gJ2NlbnRlcicsXG4gICAgICAgIENIQU5HRV9LSU5FVElDID0gJ0NoYW5nZS5raW5ldGljJyxcbiAgICAgICAgQ09OVEVYVF8yRCA9ICcyZCcsXG4gICAgICAgIERBU0ggPSAnLScsXG4gICAgICAgIEVNUFRZX1NUUklORyA9ICcnLFxuICAgICAgICBMRUZUID0gJ2xlZnQnLFxuICAgICAgICBURVhUID0gJ3RleHQnLFxuICAgICAgICBURVhUX1VQUEVSID0gJ1RleHQnLFxuICAgICAgICBNSURETEUgPSAnbWlkZGxlJyxcbiAgICAgICAgTk9STUFMID0gJ25vcm1hbCcsXG4gICAgICAgIFBYX1NQQUNFID0gJ3B4ICcsXG4gICAgICAgIFNQQUNFID0gJyAnLFxuICAgICAgICBSSUdIVCA9ICdyaWdodCcsXG4gICAgICAgIFdPUkQgPSAnd29yZCcsXG4gICAgICAgIENIQVIgPSAnY2hhcicsXG4gICAgICAgIE5PTkUgPSAnbm9uZScsXG4gICAgICAgIEFUVFJfQ0hBTkdFX0xJU1QgPSBbJ2ZvbnRGYW1pbHknLCAnZm9udFNpemUnLCAnZm9udFN0eWxlJywgJ2ZvbnRWYXJpYW50JywgJ3BhZGRpbmcnLCAnYWxpZ24nLCAnbGluZUhlaWdodCcsICd0ZXh0JywgJ3dpZHRoJywgJ2hlaWdodCcsICd3cmFwJ10sXG5cbiAgICAgICAgLy8gY2FjaGVkIHZhcmlhYmxlc1xuICAgICAgICBhdHRyQ2hhbmdlTGlzdExlbiA9IEFUVFJfQ0hBTkdFX0xJU1QubGVuZ3RoLFxuICAgICAgICBkdW1teUNvbnRleHQgPSBLaW5ldGljLlV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpLmdldENvbnRleHQoQ09OVEVYVF8yRCk7XG5cbiAgICAvKipcbiAgICAgKiBUZXh0IGNvbnN0cnVjdG9yXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgKiBAYXVnbWVudHMgS2luZXRpYy5TaGFwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5mb250RmFtaWx5XSBkZWZhdWx0IGlzIEFyaWFsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZm9udFNpemVdIGluIHBpeGVscy4gIERlZmF1bHQgaXMgMTJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5mb250U3R5bGVdIGNhbiBiZSBub3JtYWwsIGJvbGQsIG9yIGl0YWxpYy4gIERlZmF1bHQgaXMgbm9ybWFsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZm9udFZhcmlhbnRdIGNhbiBiZSBub3JtYWwgb3Igc21hbGwtY2Fwcy4gIERlZmF1bHQgaXMgbm9ybWFsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbmZpZy50ZXh0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuYWxpZ25dIGNhbiBiZSBsZWZ0LCBjZW50ZXIsIG9yIHJpZ2h0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucGFkZGluZ11cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF0gZGVmYXVsdCBpcyBhdXRvXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XSBkZWZhdWx0IGlzIGF1dG9cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5saW5lSGVpZ2h0XSBkZWZhdWx0IGlzIDFcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy53cmFwXSBjYW4gYmUgd29yZCwgY2hhciwgb3Igbm9uZS4gRGVmYXVsdCBpcyB3b3JkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbF0gZmlsbCBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxSZWRdIHNldCBmaWxsIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsR3JlZW5dIHNldCBmaWxsIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxCbHVlXSBzZXQgZmlsbCBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxBbHBoYV0gc2V0IGZpbGwgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ltYWdlfSBbY29uZmlnLmZpbGxQYXR0ZXJuSW1hZ2VdIGZpbGwgcGF0dGVybiBpbWFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5YXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5ZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRZXSBcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5Sb3RhdGlvbl1cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQYXR0ZXJuUmVwZWF0XSBjYW4gYmUgXCJyZXBlYXRcIiwgXCJyZXBlYXQteFwiLCBcInJlcGVhdC15XCIsIG9yIFwibm8tcmVwZWF0XCIuICBUaGUgZGVmYXVsdCBpcyBcIm5vLXJlcGVhdFwiXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFldIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZmlsbEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZmlsbC4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQcmlvcml0eV0gY2FuIGJlIGNvbG9yLCBsaW5lYXItZ3JhZGllbnQsIHJhZGlhbC1ncmFpZGVudCwgb3IgcGF0dGVybi4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGNvbG9yLiAgVGhlIGZpbGxQcmlvcml0eSBwcm9wZXJ0eSBtYWtlcyBpdCByZWFsbHkgZWFzeSB0byB0b2dnbGUgYmV0d2VlbiBkaWZmZXJlbnQgZmlsbCB0eXBlcy4gIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byB0b2dnbGUgYmV0d2VlbiBhIGZpbGwgY29sb3Igc3R5bGUgYW5kIGEgZmlsbCBwYXR0ZXJuIHN0eWxlLCBzaW1wbHkgc2V0IHRoZSBmaWxsIHByb3BlcnR5IGFuZCB0aGUgZmlsbFBhdHRlcm4gcHJvcGVydGllcywgYW5kIHRoZW4gdXNlIHNldEZpbGxQcmlvcml0eSgnY29sb3InKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggYSBjb2xvciBmaWxsLCBvciB1c2Ugc2V0RmlsbFByaW9yaXR5KCdwYXR0ZXJuJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIHRoZSBwYXR0ZXJuIGZpbGwgY29uZmlndXJhdGlvblxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc3Ryb2tlXSBzdHJva2UgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VSZWRdIHNldCBzdHJva2UgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUdyZWVuXSBzZXQgc3Ryb2tlIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUJsdWVdIHNldCBzdHJva2UgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VBbHBoYV0gc2V0IHN0cm9rZSBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnN0cm9rZVdpZHRoXSBzdHJva2Ugd2lkdGhcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VTY2FsZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyBzdHJva2Ugc2NhbGUuICBUaGUgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzdHJva2UuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lSm9pbl0gY2FuIGJlIG1pdGVyLCByb3VuZCwgb3IgYmV2ZWwuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIG1pdGVyXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lQ2FwXSBjYW4gYmUgYnV0dCwgcm91bmQsIG9yIHNxYXJlLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBidXR0XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zaGFkb3dDb2xvcl1cclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dSZWRdIHNldCBzaGFkb3cgY29sb3IgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0dyZWVuXSBzZXQgc2hhZG93IGNvbG9yIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0JsdWVdIHNldCBzaGFkb3cgY29sb3IgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dBbHBoYV0gc2V0IHNoYWRvdyBjb2xvciBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd0JsdXJdXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zaGFkb3dPZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09wYWNpdHldIHNoYWRvdyBvcGFjaXR5LiAgQ2FuIGJlIGFueSByZWFsIG51bWJlclxyXG4gICAgICogIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnNoYWRvd0VuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc2hhZG93LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5kYXNoXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRhc2hFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGRhc2hBcnJheS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcubGlzdGVuaW5nXSB3aGV0aGVyIG9yIG5vdCB0aGUgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuaWRdIHVuaXF1ZSBpZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2NhbGVdIHNldCBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVYXSBzZXQgc2NhbGUgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVZXSBzZXQgc2NhbGUgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucm90YXRpb25dIHJvdGF0aW9uIGluIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLm9mZnNldF0gb2Zmc2V0IGZyb20gY2VudGVyIHBvaW50IGFuZCByb3RhdGlvbiBwb2ludFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WF0gc2V0IG9mZnNldCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRZXSBzZXQgb2Zmc2V0IHlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmFnZ2FibGVdIG1ha2VzIHRoZSBub2RlIGRyYWdnYWJsZS4gIFdoZW4gc3RhZ2VzIGFyZSBkcmFnZ2FibGUsIHlvdSBjYW4gZHJhZyBhbmQgZHJvcFxyXG4gICAgICogIHRoZSBlbnRpcmUgc3RhZ2UgYnkgZHJhZ2dpbmcgYW55IHBvcnRpb24gb2YgdGhlIHN0YWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5kcmFnRGlzdGFuY2VdXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29uZmlnLmRyYWdCb3VuZEZ1bmNdXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgdGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuICAgICAqICAgeDogMTAsXG4gICAgICogICB5OiAxNSxcbiAgICAgKiAgIHRleHQ6ICdTaW1wbGUgVGV4dCcsXG4gICAgICogICBmb250U2l6ZTogMzAsXG4gICAgICogICBmb250RmFtaWx5OiAnQ2FsaWJyaScsXG4gICAgICogICBmaWxsOiAnZ3JlZW4nXG4gICAgICogfSk7XG4gICAgICovXG4gICAgS2luZXRpYy5UZXh0ID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHRoaXMuX19faW5pdChjb25maWcpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gX2ZpbGxGdW5jKGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5maWxsVGV4dCh0aGlzLnBhcnRpYWxUZXh0LCAwLCAwKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX3N0cm9rZUZ1bmMoY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LnN0cm9rZVRleHQodGhpcy5wYXJ0aWFsVGV4dCwgMCwgMCk7XG4gICAgfVxuXG4gICAgS2luZXRpYy5UZXh0LnByb3RvdHlwZSA9IHtcbiAgICAgICAgX19faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgICAgICAgICBjb25maWcuZmlsbCA9IGNvbmZpZy5maWxsIHx8ICdibGFjayc7XG5cbiAgICAgICAgICAgIGlmIChjb25maWcud2lkdGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy53aWR0aCA9IEFVVE87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlnLmhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLmhlaWdodCA9IEFVVE87XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNhbGwgc3VwZXIgY29uc3RydWN0b3JcbiAgICAgICAgICAgIEtpbmV0aWMuU2hhcGUuY2FsbCh0aGlzLCBjb25maWcpO1xuXG4gICAgICAgICAgICB0aGlzLl9maWxsRnVuYyA9IF9maWxsRnVuYztcbiAgICAgICAgICAgIHRoaXMuX3N0cm9rZUZ1bmMgPSBfc3Ryb2tlRnVuYztcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gVEVYVF9VUFBFUjtcblxuICAgICAgICAgICAgLy8gdXBkYXRlIHRleHQgZGF0YSBmb3IgY2VydGFpbiBhdHRyIGNoYW5nZXNcbiAgICAgICAgICAgIGZvcih2YXIgbiA9IDA7IG4gPCBhdHRyQ2hhbmdlTGlzdExlbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbihBVFRSX0NIQU5HRV9MSVNUW25dICsgQ0hBTkdFX0tJTkVUSUMsIHRoaXMuX3NldFRleHREYXRhKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fc2V0VGV4dERhdGEoKTtcbiAgICAgICAgICAgIHRoaXMuc2NlbmVGdW5jKHRoaXMuX3NjZW5lRnVuYyk7XG4gICAgICAgICAgICB0aGlzLmhpdEZ1bmModGhpcy5faGl0RnVuYyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zY2VuZUZ1bmM6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBwID0gdGhpcy5nZXRQYWRkaW5nKCksXG4gICAgICAgICAgICAgICAgdGV4dEhlaWdodCA9IHRoaXMuZ2V0VGV4dEhlaWdodCgpLFxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHRQeCA9IHRoaXMuZ2V0TGluZUhlaWdodCgpICogdGV4dEhlaWdodCxcbiAgICAgICAgICAgICAgICB0ZXh0QXJyID0gdGhpcy50ZXh0QXJyLFxuICAgICAgICAgICAgICAgIHRleHRBcnJMZW4gPSB0ZXh0QXJyLmxlbmd0aCxcbiAgICAgICAgICAgICAgICB0b3RhbFdpZHRoID0gdGhpcy5nZXRXaWR0aCgpLFxuICAgICAgICAgICAgICAgIG47XG5cbiAgICAgICAgICAgIGNvbnRleHQuc2V0QXR0cignZm9udCcsIHRoaXMuX2dldENvbnRleHRGb250KCkpO1xuICAgICAgICAgICAgY29udGV4dC5zZXRBdHRyKCd0ZXh0QmFzZWxpbmUnLCBNSURETEUpO1xuICAgICAgICAgICAgY29udGV4dC5zZXRBdHRyKCd0ZXh0QWxpZ24nLCBMRUZUKTtcbiAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xuICAgICAgICAgICAgY29udGV4dC50cmFuc2xhdGUocCwgMCk7XG4gICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZSgwLCBwICsgdGV4dEhlaWdodCAvIDIpO1xuXG4gICAgICAgICAgICAvLyBkcmF3IHRleHQgbGluZXNcbiAgICAgICAgICAgIGZvcihuID0gMDsgbiA8IHRleHRBcnJMZW47IG4rKykge1xuICAgICAgICAgICAgICAgIHZhciBvYmogPSB0ZXh0QXJyW25dLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gb2JqLnRleHQsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gb2JqLndpZHRoO1xuXG4gICAgICAgICAgICAgICAgLy8gaG9yaXpvbnRhbCBhbGlnbm1lbnRcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmdldEFsaWduKCkgPT09IFJJR0hUKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKHRvdGFsV2lkdGggLSB3aWR0aCAtIHAgKiAyLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZih0aGlzLmdldEFsaWduKCkgPT09IENFTlRFUikge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZSgodG90YWxXaWR0aCAtIHdpZHRoIC0gcCAqIDIpIC8gMiwgMCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJ0aWFsVGV4dCA9IHRleHQ7XG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3Ryb2tlU2hhcGUodGhpcyk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC50cmFuc2xhdGUoMCwgbGluZUhlaWdodFB4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgICB9LFxuICAgICAgICBfaGl0RnVuYzogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5nZXRXaWR0aCgpLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuZ2V0SGVpZ2h0KCk7XG5cbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LnJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5maWxsU3Ryb2tlU2hhcGUodGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRleHQ6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgICAgICAgIHZhciBzdHIgPSBLaW5ldGljLlV0aWwuX2lzU3RyaW5nKHRleHQpID8gdGV4dCA6IHRleHQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHRoaXMuX3NldEF0dHIoVEVYVCwgc3RyKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IHdpZHRoIG9mIHRleHQgYXJlYSwgd2hpY2ggaW5jbHVkZXMgcGFkZGluZ1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHQucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRXaWR0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRycy53aWR0aCA9PT0gQVVUTyA/IHRoaXMuZ2V0VGV4dFdpZHRoKCkgKyB0aGlzLmdldFBhZGRpbmcoKSAqIDIgOiB0aGlzLmF0dHJzLndpZHRoO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IHRoZSBoZWlnaHQgb2YgdGhlIHRleHQgYXJlYSwgd2hpY2ggdGFrZXMgaW50byBhY2NvdW50IG11bHRpLWxpbmUgdGV4dCwgbGluZSBoZWlnaHRzLCBhbmQgcGFkZGluZ1xuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHQucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cnMuaGVpZ2h0ID09PSBBVVRPID8gKHRoaXMuZ2V0VGV4dEhlaWdodCgpICogdGhpcy50ZXh0QXJyLmxlbmd0aCAqIHRoaXMuZ2V0TGluZUhlaWdodCgpKSArIHRoaXMuZ2V0UGFkZGluZygpICogMiA6IHRoaXMuYXR0cnMuaGVpZ2h0O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2V0IHRleHQgd2lkdGhcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0LnByb3RvdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0VGV4dFdpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHRXaWR0aDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCB0ZXh0IGhlaWdodFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHQucHJvdG90eXBlXG4gICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRUZXh0SGVpZ2h0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHRIZWlnaHQ7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRUZXh0U2l6ZTogZnVuY3Rpb24odGV4dCkge1xuICAgICAgICAgICAgdmFyIF9jb250ZXh0ID0gZHVtbXlDb250ZXh0LFxuICAgICAgICAgICAgICAgIGZvbnRTaXplID0gdGhpcy5nZXRGb250U2l6ZSgpLFxuICAgICAgICAgICAgICAgIG1ldHJpY3M7XG5cbiAgICAgICAgICAgIF9jb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgIF9jb250ZXh0LmZvbnQgPSB0aGlzLl9nZXRDb250ZXh0Rm9udCgpO1xuXG4gICAgICAgICAgICBtZXRyaWNzID0gX2NvbnRleHQubWVhc3VyZVRleHQodGV4dCk7XG4gICAgICAgICAgICBfY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBtZXRyaWNzLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogcGFyc2VJbnQoZm9udFNpemUsIDEwKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldENvbnRleHRGb250OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEZvbnRTdHlsZSgpICsgU1BBQ0UgKyB0aGlzLmdldEZvbnRWYXJpYW50KCkgKyBTUEFDRSArIHRoaXMuZ2V0Rm9udFNpemUoKSArIFBYX1NQQUNFICsgdGhpcy5nZXRGb250RmFtaWx5KCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9hZGRUZXh0TGluZTogZnVuY3Rpb24gKGxpbmUsIHdpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0QXJyLnB1c2goe3RleHQ6IGxpbmUsIHdpZHRoOiB3aWR0aH0pO1xuICAgICAgICB9LFxuICAgICAgICBfZ2V0VGV4dFdpZHRoOiBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIGR1bW15Q29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aDtcbiAgICAgICAgfSxcbiAgICAgICAgX3NldFRleHREYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbGluZXMgPSB0aGlzLmdldFRleHQoKS5zcGxpdCgnXFxuJyksXG4gICAgICAgICAgICAgICAgZm9udFNpemUgPSArdGhpcy5nZXRGb250U2l6ZSgpLFxuICAgICAgICAgICAgICAgIHRleHRXaWR0aCA9IDAsXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodFB4ID0gdGhpcy5nZXRMaW5lSGVpZ2h0KCkgKiBmb250U2l6ZSxcbiAgICAgICAgICAgICAgICB3aWR0aCA9IHRoaXMuYXR0cnMud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5hdHRycy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgZml4ZWRXaWR0aCA9IHdpZHRoICE9PSBBVVRPLFxuICAgICAgICAgICAgICAgIGZpeGVkSGVpZ2h0ID0gaGVpZ2h0ICE9PSBBVVRPLFxuICAgICAgICAgICAgICAgIHBhZGRpbmcgPSB0aGlzLmdldFBhZGRpbmcoKSxcbiAgICAgICAgICAgICAgICBtYXhXaWR0aCA9IHdpZHRoIC0gcGFkZGluZyAqIDIsXG4gICAgICAgICAgICAgICAgbWF4SGVpZ2h0UHggPSBoZWlnaHQgLSBwYWRkaW5nICogMixcbiAgICAgICAgICAgICAgICBjdXJyZW50SGVpZ2h0UHggPSAwLFxuICAgICAgICAgICAgICAgIHdyYXAgPSB0aGlzLmdldFdyYXAoKSxcbiAgICAgICAgICAgICAgICBzaG91bGRXcmFwID0gd3JhcCAhPT0gTk9ORSxcbiAgICAgICAgICAgICAgICB3cmFwQXRXb3JkID0gd3JhcCAhPT0gIENIQVIgJiYgc2hvdWxkV3JhcDtcblxuICAgICAgICAgICAgdGhpcy50ZXh0QXJyID0gW107XG4gICAgICAgICAgICBkdW1teUNvbnRleHQuc2F2ZSgpO1xuICAgICAgICAgICAgZHVtbXlDb250ZXh0LmZvbnQgPSB0aGlzLl9nZXRDb250ZXh0Rm9udCgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1heCA9IGxpbmVzLmxlbmd0aDsgaSA8IG1heDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmUgPSBsaW5lc1tpXSxcbiAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoID0gdGhpcy5fZ2V0VGV4dFdpZHRoKGxpbmUpO1xuICAgICAgICAgICAgICAgIGlmIChmaXhlZFdpZHRoICYmIGxpbmVXaWR0aCA+IG1heFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAqIGlmIHdpZHRoIGlzIGZpeGVkIGFuZCBsaW5lIGRvZXMgbm90IGZpdCBlbnRpcmVseVxuICAgICAgICAgICAgICAgICAgICAgKiBicmVhayB0aGUgbGluZSBpbnRvIG11bHRpcGxlIGZpdHRpbmcgbGluZXNcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChsaW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiB1c2UgYmluYXJ5IHNlYXJjaCB0byBmaW5kIHRoZSBsb25nZXN0IHN1YnN0cmluZyB0aGF0XG4gICAgICAgICAgICAgICAgICAgICAgICAgKiB0aGF0IHdvdWxkIGZpdCBpbiB0aGUgc3BlY2lmaWVkIHdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb3cgPSAwLCBoaWdoID0gbGluZS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSAnJywgbWF0Y2hXaWR0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0ciA9IGxpbmUuc2xpY2UoMCwgbWlkICsgMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0cldpZHRoID0gdGhpcy5fZ2V0VGV4dFdpZHRoKHN1YnN0cik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnN0cldpZHRoIDw9IG1heFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gc3Vic3RyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFdpZHRoID0gc3Vic3RyV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogJ2xvdycgaXMgbm93IHRoZSBpbmRleCBvZiB0aGUgc3Vic3RyaW5nIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICogJ21hdGNoJyBpcyB0aGUgc3Vic3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiAnbWF0Y2hXaWR0aCcgaXMgdGhlIHN1YnN0cmluZyB3aWR0aCBpbiBweFxuICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhIGZpdHRpbmcgc3Vic3RyaW5nIHdhcyBmb3VuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3cmFwQXRXb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyeSB0byBmaW5kIGEgc3BhY2Ugb3IgZGFzaCB3aGVyZSB3cmFwcGluZyBjb3VsZCBiZSBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3cmFwSW5kZXggPSBNYXRoLm1heChtYXRjaC5sYXN0SW5kZXhPZihTUEFDRSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gubGFzdEluZGV4T2YoREFTSCkpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdyYXBJbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlLWN1dCB0aGUgc3Vic3RyaW5nIGZvdW5kIGF0IHRoZSBzcGFjZS9kYXNoIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3cgPSB3cmFwSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IG1hdGNoLnNsaWNlKDAsIGxvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFdpZHRoID0gdGhpcy5fZ2V0VGV4dFdpZHRoKG1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRUZXh0TGluZShtYXRjaCwgbWF0Y2hXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFdpZHRoID0gTWF0aC5tYXgodGV4dFdpZHRoLCBtYXRjaFdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SGVpZ2h0UHggKz0gbGluZUhlaWdodFB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2hvdWxkV3JhcCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZml4ZWRIZWlnaHQgJiYgY3VycmVudEhlaWdodFB4ICsgbGluZUhlaWdodFB4ID4gbWF4SGVpZ2h0UHgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHN0b3Agd3JhcHBpbmcgaWYgd3JhcHBpbmcgaXMgZGlzYWJsZWQgb3IgaWYgYWRkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIG9uZSBtb3JlIGxpbmUgd291bGQgb3ZlcmZsb3cgdGhlIGZpeGVkIGhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSBsaW5lLnNsaWNlKGxvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgcmVtYWluaW5nIHRleHQgd291bGQgZml0IG9uIG9uZSBsaW5lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aCA9IHRoaXMuX2dldFRleHRXaWR0aChsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVXaWR0aCA8PSBtYXhXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgaXQgZG9lcywgYWRkIHRoZSBsaW5lIGFuZCBicmVhayBvdXQgb2YgdGhlIGxvb3BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZFRleHRMaW5lKGxpbmUsIGxpbmVXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SGVpZ2h0UHggKz0gbGluZUhlaWdodFB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFdpZHRoID0gTWF0aC5tYXgodGV4dFdpZHRoLCBsaW5lV2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vdCBldmVuIG9uZSBjaGFyYWN0ZXIgY291bGQgZml0IGluIHRoZSBlbGVtZW50LCBhYm9ydFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZWxlbWVudCB3aWR0aCBpcyBhdXRvbWF0aWNhbGx5IGFkanVzdGVkIHRvIG1heCBsaW5lIHdpZHRoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZFRleHRMaW5lKGxpbmUsIGxpbmVXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRIZWlnaHRQeCArPSBsaW5lSGVpZ2h0UHg7XG4gICAgICAgICAgICAgICAgICAgIHRleHRXaWR0aCA9IE1hdGgubWF4KHRleHRXaWR0aCwgbGluZVdpZHRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaWYgZWxlbWVudCBoZWlnaHQgaXMgZml4ZWQsIGFib3J0IGlmIGFkZGluZyBvbmUgbW9yZSBsaW5lIHdvdWxkIG92ZXJmbG93XG4gICAgICAgICAgICAgICAgaWYgKGZpeGVkSGVpZ2h0ICYmIGN1cnJlbnRIZWlnaHRQeCArIGxpbmVIZWlnaHRQeCA+IG1heEhlaWdodFB4KSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGR1bW15Q29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgICAgICB0aGlzLnRleHRIZWlnaHQgPSBmb250U2l6ZTtcbiAgICAgICAgICAgIHRoaXMudGV4dFdpZHRoID0gdGV4dFdpZHRoO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuVGV4dCwgS2luZXRpYy5TaGFwZSk7XG5cbiAgICAvLyBhZGQgZ2V0dGVycyBzZXR0ZXJzXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlRleHQsICdmb250RmFtaWx5JywgJ0FyaWFsJyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGZvbnQgZmFtaWx5XG4gICAgICogQG5hbWUgZm9udEZhbWlseVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0LnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmb250RmFtaWx5XG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmb250IGZhbWlseVxuICAgICAqIHZhciBmb250RmFtaWx5ID0gdGV4dC5mb250RmFtaWx5KCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZm9udCBmYW1pbHlcbiAgICAgKiB0ZXh0LmZvbnRGYW1pbHkoJ0FyaWFsJyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuVGV4dCwgJ2ZvbnRTaXplJywgMTIpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBmb250IHNpemUgaW4gcGl4ZWxzXG4gICAgICogQG5hbWUgZm9udFNpemVcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dC5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZm9udFNpemVcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZvbnQgc2l6ZVxuICAgICAqIHZhciBmb250U2l6ZSA9IHRleHQuZm9udFNpemUoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmb250IHNpemUgdG8gMjJweFxuICAgICAqIHRleHQuZm9udFNpemUoMjIpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlRleHQsICdmb250U3R5bGUnLCBOT1JNQUwpO1xuXG4gICAgLyoqXG4gICAgICogc2V0IGZvbnQgc3R5bGUuICBDYW4gYmUgJ25vcm1hbCcsICdpdGFsaWMnLCBvciAnYm9sZCcuICAnbm9ybWFsJyBpcyB0aGUgZGVmYXVsdC5cbiAgICAgKiBAbmFtZSBmb250U3R5bGVcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dC5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZm9udFN0eWxlXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBmb250IHN0eWxlXG4gICAgICogdmFyIGZvbnRTdHlsZSA9IHRleHQuZm9udFN0eWxlKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgZm9udCBzdHlsZVxuICAgICAqIHRleHQuZm9udFN0eWxlKCdib2xkJyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuVGV4dCwgJ2ZvbnRWYXJpYW50JywgTk9STUFMKTtcblxuICAgIC8qKlxuICAgICAqIHNldCBmb250IHZhcmlhbnQuICBDYW4gYmUgJ25vcm1hbCcgb3IgJ3NtYWxsLWNhcHMnLiAgJ25vcm1hbCcgaXMgdGhlIGRlZmF1bHQuXG4gICAgICogQG5hbWUgZm9udFZhcmlhbnRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dC5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZm9udFZhcmlhbnRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IGZvbnQgdmFyaWFudFxuICAgICAqIHZhciBmb250VmFyaWFudCA9IHRleHQuZm9udFZhcmlhbnQoKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCBmb250IHZhcmlhbnRcbiAgICAgKiB0ZXh0LmZvbnRWYXJpYW50KCdzbWFsbC1jYXBzJyk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuVGV4dCwgJ3BhZGRpbmcnLCAwKTtcblxuICAgIC8qKlxuICAgICAqIHNldCBwYWRkaW5nXG4gICAgICogQG5hbWUgcGFkZGluZ1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0LnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwYWRkaW5nXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBwYWRkaW5nXG4gICAgICogdmFyIHBhZGRpbmcgPSB0ZXh0LnBhZGRpbmcoKTtcbiAgICAgKiBcbiAgICAgKiAvLyBzZXQgcGFkZGluZyB0byAxMCBwaXhlbHNcbiAgICAgKiB0ZXh0LnBhZGRpbmcoMTApO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlRleHQsICdhbGlnbicsIExFRlQpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBob3Jpem9udGFsIGFsaWduIG9mIHRleHQuICBDYW4gYmUgJ2xlZnQnLCAnY2VudGVyJywgb3IgJ3JpZ2h0J1xuICAgICAqIEBuYW1lIGFsaWduXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHQucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGFsaWduXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCB0ZXh0IGFsaWduXG4gICAgICogdmFyIGFsaWduID0gdGV4dC5hbGlnbigpO1xuICAgICAqXG4gICAgICogLy8gY2VudGVyIHRleHRcbiAgICAgKiB0ZXh0LmFsaWduKCdjZW50ZXInKTtcbiAgICAgKlxuICAgICAqIC8vIGFsaWduIHRleHQgdG8gcmlnaHRcbiAgICAgKiB0ZXh0LmFsaWduKCdyaWdodCcpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlRleHQsICdsaW5lSGVpZ2h0JywgMSk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IGxpbmUgaGVpZ2h0LiAgVGhlIGRlZmF1bHQgaXMgMS5cbiAgICAgKiBAbmFtZSBsaW5lSGVpZ2h0XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHQucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVIZWlnaHRcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlIFxuICAgICAqIC8vIGdldCBsaW5lIGhlaWdodFxuICAgICAqIHZhciBsaW5lSGVpZ2h0ID0gdGV4dC5saW5lSGVpZ2h0KCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgdGhlIGxpbmUgaGVpZ2h0XG4gICAgICogdGV4dC5saW5lSGVpZ2h0KDIpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlRleHQsICd3cmFwJywgV09SRCk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHdyYXAuICBDYW4gYmUgd29yZCwgY2hhciwgb3Igbm9uZS4gRGVmYXVsdCBpcyB3b3JkLlxuICAgICAqIEBuYW1lIHdyYXBcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dC5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gd3JhcFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgd3JhcFxuICAgICAqIHZhciB3cmFwID0gdGV4dC53cmFwKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgd3JhcFxuICAgICAqIHRleHQud3JhcCgnd29yZCcpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlcihLaW5ldGljLlRleHQsICd0ZXh0JywgRU1QVFlfU1RSSU5HKTtcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkT3ZlcmxvYWRlZEdldHRlclNldHRlcihLaW5ldGljLlRleHQsICd0ZXh0Jyk7XG5cbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHRleHRcbiAgICAgKiBAbmFtZSBnZXRUZXh0XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHQucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRleHRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHRleHRcbiAgICAgKiB2YXIgdGV4dCA9IHRleHQudGV4dCgpO1xuICAgICAqIFxuICAgICAqIC8vIHNldCB0ZXh0XG4gICAgICogdGV4dC50ZXh0KCdIZWxsbyB3b3JsZCEnKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuVGV4dCk7XG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBMaW5lIGNvbnN0cnVjdG9yLiZuYnNwOyBMaW5lcyBhcmUgZGVmaW5lZCBieSBhbiBhcnJheSBvZiBwb2ludHMgYW5kXG4gICAgICogIGEgdGVuc2lvblxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICogQGF1Z21lbnRzIEtpbmV0aWMuU2hhcGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICogQHBhcmFtIHtBcnJheX0gY29uZmlnLnBvaW50c1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnRlbnNpb25dIEhpZ2hlciB2YWx1ZXMgd2lsbCByZXN1bHQgaW4gYSBtb3JlIGN1cnZ5IGxpbmUuICBBIHZhbHVlIG9mIDAgd2lsbCByZXN1bHQgaW4gbm8gaW50ZXJwb2xhdGlvbi5cbiAgICAgKiAgIFRoZSBkZWZhdWx0IGlzIDBcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuY2xvc2VkXSBkZWZpbmVzIHdoZXRoZXIgb3Igbm90IHRoZSBsaW5lIHNoYXBlIGlzIGNsb3NlZCwgY3JlYXRpbmcgYSBwb2x5Z29uIG9yIGJsb2IgXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbF0gZmlsbCBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxSZWRdIHNldCBmaWxsIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsR3JlZW5dIHNldCBmaWxsIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxCbHVlXSBzZXQgZmlsbCBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxBbHBoYV0gc2V0IGZpbGwgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ltYWdlfSBbY29uZmlnLmZpbGxQYXR0ZXJuSW1hZ2VdIGZpbGwgcGF0dGVybiBpbWFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5YXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5ZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRZXSBcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5Sb3RhdGlvbl1cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQYXR0ZXJuUmVwZWF0XSBjYW4gYmUgXCJyZXBlYXRcIiwgXCJyZXBlYXQteFwiLCBcInJlcGVhdC15XCIsIG9yIFwibm8tcmVwZWF0XCIuICBUaGUgZGVmYXVsdCBpcyBcIm5vLXJlcGVhdFwiXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFldIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRSYWRpdXNdXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZmlsbEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZmlsbC4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxQcmlvcml0eV0gY2FuIGJlIGNvbG9yLCBsaW5lYXItZ3JhZGllbnQsIHJhZGlhbC1ncmFpZGVudCwgb3IgcGF0dGVybi4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGNvbG9yLiAgVGhlIGZpbGxQcmlvcml0eSBwcm9wZXJ0eSBtYWtlcyBpdCByZWFsbHkgZWFzeSB0byB0b2dnbGUgYmV0d2VlbiBkaWZmZXJlbnQgZmlsbCB0eXBlcy4gIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byB0b2dnbGUgYmV0d2VlbiBhIGZpbGwgY29sb3Igc3R5bGUgYW5kIGEgZmlsbCBwYXR0ZXJuIHN0eWxlLCBzaW1wbHkgc2V0IHRoZSBmaWxsIHByb3BlcnR5IGFuZCB0aGUgZmlsbFBhdHRlcm4gcHJvcGVydGllcywgYW5kIHRoZW4gdXNlIHNldEZpbGxQcmlvcml0eSgnY29sb3InKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggYSBjb2xvciBmaWxsLCBvciB1c2Ugc2V0RmlsbFByaW9yaXR5KCdwYXR0ZXJuJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIHRoZSBwYXR0ZXJuIGZpbGwgY29uZmlndXJhdGlvblxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc3Ryb2tlXSBzdHJva2UgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VSZWRdIHNldCBzdHJva2UgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUdyZWVuXSBzZXQgc3Ryb2tlIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUJsdWVdIHNldCBzdHJva2UgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VBbHBoYV0gc2V0IHN0cm9rZSBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnN0cm9rZVdpZHRoXSBzdHJva2Ugd2lkdGhcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VTY2FsZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyBzdHJva2Ugc2NhbGUuICBUaGUgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzdHJva2UuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lSm9pbl0gY2FuIGJlIG1pdGVyLCByb3VuZCwgb3IgYmV2ZWwuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIG1pdGVyXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5saW5lQ2FwXSBjYW4gYmUgYnV0dCwgcm91bmQsIG9yIHNxYXJlLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBidXR0XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zaGFkb3dDb2xvcl1cclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dSZWRdIHNldCBzaGFkb3cgY29sb3IgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0dyZWVuXSBzZXQgc2hhZG93IGNvbG9yIGdyZWVuIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0JsdWVdIHNldCBzaGFkb3cgY29sb3IgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dBbHBoYV0gc2V0IHNoYWRvdyBjb2xvciBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd0JsdXJdXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zaGFkb3dPZmZzZXRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09wYWNpdHldIHNoYWRvdyBvcGFjaXR5LiAgQ2FuIGJlIGFueSByZWFsIG51bWJlclxyXG4gICAgICogIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnNoYWRvd0VuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc2hhZG93LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5kYXNoXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRhc2hFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGRhc2hBcnJheS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcubGlzdGVuaW5nXSB3aGV0aGVyIG9yIG5vdCB0aGUgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuaWRdIHVuaXF1ZSBpZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2NhbGVdIHNldCBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVYXSBzZXQgc2NhbGUgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVZXSBzZXQgc2NhbGUgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucm90YXRpb25dIHJvdGF0aW9uIGluIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLm9mZnNldF0gb2Zmc2V0IGZyb20gY2VudGVyIHBvaW50IGFuZCByb3RhdGlvbiBwb2ludFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WF0gc2V0IG9mZnNldCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRZXSBzZXQgb2Zmc2V0IHlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmFnZ2FibGVdIG1ha2VzIHRoZSBub2RlIGRyYWdnYWJsZS4gIFdoZW4gc3RhZ2VzIGFyZSBkcmFnZ2FibGUsIHlvdSBjYW4gZHJhZyBhbmQgZHJvcFxyXG4gICAgICogIHRoZSBlbnRpcmUgc3RhZ2UgYnkgZHJhZ2dpbmcgYW55IHBvcnRpb24gb2YgdGhlIHN0YWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5kcmFnRGlzdGFuY2VdXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29uZmlnLmRyYWdCb3VuZEZ1bmNdXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgbGluZSA9IG5ldyBLaW5ldGljLkxpbmUoe1xuICAgICAqICAgeDogMTAwLFxuICAgICAqICAgeTogNTAsXG4gICAgICogICBwb2ludHM6IFs3MywgNzAsIDM0MCwgMjMsIDQ1MCwgNjAsIDUwMCwgMjBdLFxuICAgICAqICAgc3Ryb2tlOiAncmVkJyxcbiAgICAgKiAgIHRlbnNpb246IDFcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBLaW5ldGljLkxpbmUgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdGhpcy5fX19pbml0KGNvbmZpZyk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuTGluZS5wcm90b3R5cGUgPSB7XG4gICAgICAgIF9fX2luaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgLy8gY2FsbCBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgS2luZXRpYy5TaGFwZS5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9ICdMaW5lJztcblxuICAgICAgICAgICAgdGhpcy5vbigncG9pbnRzQ2hhbmdlLmtpbmV0aWMgdGVuc2lvbkNoYW5nZS5raW5ldGljIGNsb3NlZENoYW5nZS5raW5ldGljJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJDYWNoZSgndGVuc2lvblBvaW50cycpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuc2NlbmVGdW5jKHRoaXMuX3NjZW5lRnVuYyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zY2VuZUZ1bmM6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBwb2ludHMgPSB0aGlzLmdldFBvaW50cygpLFxuICAgICAgICAgICAgICAgIGxlbmd0aCA9IHBvaW50cy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgdGVuc2lvbiA9IHRoaXMuZ2V0VGVuc2lvbigpLFxuICAgICAgICAgICAgICAgIGNsb3NlZCA9IHRoaXMuZ2V0Q2xvc2VkKCksXG4gICAgICAgICAgICAgICAgdHAsIGxlbiwgbjtcblxuICAgICAgICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0sIHBvaW50c1sxXSk7XG5cbiAgICAgICAgICAgIC8vIHRlbnNpb25cbiAgICAgICAgICAgIGlmKHRlbnNpb24gIT09IDAgJiYgbGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgICAgIHRwID0gdGhpcy5nZXRUZW5zaW9uUG9pbnRzKCk7XG4gICAgICAgICAgICAgICAgbGVuID0gdHAubGVuZ3RoO1xuICAgICAgICAgICAgICAgIG4gPSBjbG9zZWQgPyAwIDogNDtcblxuICAgICAgICAgICAgICAgIGlmICghY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyh0cFswXSwgdHBbMV0sIHRwWzJdLCB0cFszXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd2hpbGUobiA8IGxlbiAtIDIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHRwW24rK10sIHRwW24rK10sIHRwW24rK10sIHRwW24rK10sIHRwW24rK10sIHRwW24rK10pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyh0cFtsZW4tMl0sIHRwW2xlbi0xXSwgcG9pbnRzW2xlbmd0aC0yXSwgcG9pbnRzW2xlbmd0aC0xXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbm8gdGVuc2lvblxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yKG4gPSAyOyBuIDwgbGVuZ3RoOyBuKz0yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1tuXSwgcG9pbnRzW24rMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY2xvc2VkIGUuZy4gcG9seWdvbnMgYW5kIGJsb2JzXG4gICAgICAgICAgICBpZiAoY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG9wZW4gZS5nLiBsaW5lcyBhbmQgc3BsaW5lc1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VGVuc2lvblBvaW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q2FjaGUoJ3RlbnNpb25Qb2ludHMnLCB0aGlzLl9nZXRUZW5zaW9uUG9pbnRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldFRlbnNpb25Qb2ludHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2V0Q2xvc2VkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0VGVuc2lvblBvaW50c0Nsb3NlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEtpbmV0aWMuVXRpbC5fZXhwYW5kUG9pbnRzKHRoaXMuZ2V0UG9pbnRzKCksIHRoaXMuZ2V0VGVuc2lvbigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2dldFRlbnNpb25Qb2ludHNDbG9zZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHAgPSB0aGlzLmdldFBvaW50cygpLFxuICAgICAgICAgICAgICAgIGxlbiA9IHAubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHRlbnNpb24gPSB0aGlzLmdldFRlbnNpb24oKSxcbiAgICAgICAgICAgICAgICB1dGlsID0gS2luZXRpYy5VdGlsLFxuICAgICAgICAgICAgICAgIGZpcnN0Q29udHJvbFBvaW50cyA9IHV0aWwuX2dldENvbnRyb2xQb2ludHMoXG4gICAgICAgICAgICAgICAgICAgIHBbbGVuLTJdLFxuICAgICAgICAgICAgICAgICAgICBwW2xlbi0xXSxcbiAgICAgICAgICAgICAgICAgICAgcFswXSxcbiAgICAgICAgICAgICAgICAgICAgcFsxXSxcbiAgICAgICAgICAgICAgICAgICAgcFsyXSxcbiAgICAgICAgICAgICAgICAgICAgcFszXSxcbiAgICAgICAgICAgICAgICAgICAgdGVuc2lvblxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgbGFzdENvbnRyb2xQb2ludHMgPSB1dGlsLl9nZXRDb250cm9sUG9pbnRzKFxuICAgICAgICAgICAgICAgICAgICBwW2xlbi00XSxcbiAgICAgICAgICAgICAgICAgICAgcFtsZW4tM10sXG4gICAgICAgICAgICAgICAgICAgIHBbbGVuLTJdLFxuICAgICAgICAgICAgICAgICAgICBwW2xlbi0xXSxcbiAgICAgICAgICAgICAgICAgICAgcFswXSxcbiAgICAgICAgICAgICAgICAgICAgcFsxXSxcbiAgICAgICAgICAgICAgICAgICAgdGVuc2lvblxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgbWlkZGxlID0gS2luZXRpYy5VdGlsLl9leHBhbmRQb2ludHMocCwgdGVuc2lvbiksXG4gICAgICAgICAgICAgICAgdHAgPSBbXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0Q29udHJvbFBvaW50c1syXSxcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RDb250cm9sUG9pbnRzWzNdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIC5jb25jYXQobWlkZGxlKVxuICAgICAgICAgICAgICAgIC5jb25jYXQoW1xuICAgICAgICAgICAgICAgICAgICBsYXN0Q29udHJvbFBvaW50c1swXSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdENvbnRyb2xQb2ludHNbMV0sXG4gICAgICAgICAgICAgICAgICAgIHBbbGVuLTJdLFxuICAgICAgICAgICAgICAgICAgICBwW2xlbi0xXSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdENvbnRyb2xQb2ludHNbMl0sXG4gICAgICAgICAgICAgICAgICAgIGxhc3RDb250cm9sUG9pbnRzWzNdLFxuICAgICAgICAgICAgICAgICAgICBmaXJzdENvbnRyb2xQb2ludHNbMF0sXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0Q29udHJvbFBvaW50c1sxXSxcbiAgICAgICAgICAgICAgICAgICAgcFswXSxcbiAgICAgICAgICAgICAgICAgICAgcFsxXVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB0cDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLkxpbmUsIEtpbmV0aWMuU2hhcGUpO1xuXG4gICAgLy8gYWRkIGdldHRlcnMgc2V0dGVyc1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5MaW5lLCAnY2xvc2VkJywgZmFsc2UpO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBjbG9zZWQgZmxhZy4gIFRoZSBkZWZhdWx0IGlzIGZhbHNlXG4gICAgICogQG5hbWUgY2xvc2VkXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkxpbmUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBjbG9zZWRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBjbG9zZWQgZmxhZ1xuICAgICAqIHZhciBjbG9zZWQgPSBsaW5lLmNsb3NlZCgpO1xuICAgICAqXG4gICAgICogLy8gY2xvc2UgdGhlIHNoYXBlXG4gICAgICogbGluZS5jbG9zZWQodHJ1ZSk7XG4gICAgICpcbiAgICAgKiAvLyBvcGVuIHRoZSBzaGFwZVxuICAgICAqIGxpbmUuY2xvc2VkKGZhbHNlKTtcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5MaW5lLCAndGVuc2lvbicsIDApO1xuXG4gICAgLyoqXG4gICAgICogZ2V0L3NldCB0ZW5zaW9uXG4gICAgICogQG5hbWUgdGVuc2lvblxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5MaW5lLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBIaWdoZXIgdmFsdWVzIHdpbGwgcmVzdWx0IGluIGEgbW9yZSBjdXJ2eSBsaW5lLiAgQSB2YWx1ZSBvZiAwIHdpbGwgcmVzdWx0IGluIG5vIGludGVycG9sYXRpb24uXG4gICAgICogICBUaGUgZGVmYXVsdCBpcyAwXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCB0ZW5zaW9uXG4gICAgICogdmFyIHRlbnNpb24gPSBsaW5lLnRlbnNpb24oKTtcbiAgICAgKlxuICAgICAqIC8vIHNldCB0ZW5zaW9uXG4gICAgICogbGluZS50ZW5zaW9uKDMpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkxpbmUsICdwb2ludHMnLCBbXSk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBwb2ludHMgYXJyYXlcbiAgICAgKiBAbmFtZSBwb2ludHNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTGluZS5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwb2ludHNcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgcG9pbnRzXG4gICAgICogdmFyIHBvaW50cyA9IGxpbmUucG9pbnRzKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgcG9pbnRzXG4gICAgICogbGluZS5wb2ludHMoWzEwLCAyMCwgMzAsIDQwLCA1MCwgNjBdKTtcbiAgICAgKlxuICAgICAqIC8vIHB1c2ggYSBuZXcgcG9pbnRcbiAgICAgKiBsaW5lLnBvaW50cyhsaW5lLnBvaW50cygpLmNvbmNhdChbNzAsIDgwXSkpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5MaW5lKTtcbn0pKCk7OyhmdW5jdGlvbigpIHtcclxuICAgIC8qKlxyXG4gICAgICogU3ByaXRlIGNvbnN0cnVjdG9yXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXHJcbiAgICAgKiBAYXVnbWVudHMgS2luZXRpYy5TaGFwZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbmZpZy5hbmltYXRpb24gYW5pbWF0aW9uIGtleVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZy5hbmltYXRpb25zIGFuaW1hdGlvbiBtYXBcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5mcmFtZUluZGV4XSBhbmltYXRpb24gZnJhbWUgaW5kZXhcclxuICAgICAqIEBwYXJhbSB7SW1hZ2V9IGNvbmZpZy5pbWFnZSBpbWFnZSBvYmplY3RcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxdIGZpbGwgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsUmVkXSBzZXQgZmlsbCByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEdyZWVuXSBzZXQgZmlsbCBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQmx1ZV0gc2V0IGZpbGwgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQWxwaGFdIHNldCBmaWxsIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbWFnZX0gW2NvbmZpZy5maWxsUGF0dGVybkltYWdlXSBmaWxsIHBhdHRlcm4gaW1hZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WV0gXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlXSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuUm90YXRpb25dXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUGF0dGVyblJlcGVhdF0gY2FuIGJlIFwicmVwZWF0XCIsIFwicmVwZWF0LXhcIiwgXCJyZXBlYXQteVwiLCBvciBcIm5vLXJlcGVhdFwiLiAgVGhlIGRlZmF1bHQgaXMgXCJuby1yZXBlYXRcIlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRZXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmZpbGxFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGZpbGwuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUHJpb3JpdHldIGNhbiBiZSBjb2xvciwgbGluZWFyLWdyYWRpZW50LCByYWRpYWwtZ3JhaWRlbnQsIG9yIHBhdHRlcm4uICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBjb2xvci4gIFRoZSBmaWxsUHJpb3JpdHkgcHJvcGVydHkgbWFrZXMgaXQgcmVhbGx5IGVhc3kgdG8gdG9nZ2xlIGJldHdlZW4gZGlmZmVyZW50IGZpbGwgdHlwZXMuICBGb3IgZXhhbXBsZSwgaWYgeW91IHdhbnQgdG8gdG9nZ2xlIGJldHdlZW4gYSBmaWxsIGNvbG9yIHN0eWxlIGFuZCBhIGZpbGwgcGF0dGVybiBzdHlsZSwgc2ltcGx5IHNldCB0aGUgZmlsbCBwcm9wZXJ0eSBhbmQgdGhlIGZpbGxQYXR0ZXJuIHByb3BlcnRpZXMsIGFuZCB0aGVuIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ2NvbG9yJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIGEgY29sb3IgZmlsbCwgb3IgdXNlIHNldEZpbGxQcmlvcml0eSgncGF0dGVybicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCB0aGUgcGF0dGVybiBmaWxsIGNvbmZpZ3VyYXRpb25cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnN0cm9rZV0gc3Ryb2tlIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlUmVkXSBzZXQgc3Ryb2tlIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VHcmVlbl0gc2V0IHN0cm9rZSBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VCbHVlXSBzZXQgc3Ryb2tlIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQWxwaGFdIHNldCBzdHJva2UgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zdHJva2VXaWR0aF0gc3Ryb2tlIHdpZHRoXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlU2NhbGVFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgc3Ryb2tlIHNjYWxlLiAgVGhlIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc3Ryb2tlLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUpvaW5dIGNhbiBiZSBtaXRlciwgcm91bmQsIG9yIGJldmVsLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBtaXRlclxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUNhcF0gY2FuIGJlIGJ1dHQsIHJvdW5kLCBvciBzcWFyZS4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgYnV0dFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc2hhZG93Q29sb3JdXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93UmVkXSBzZXQgc2hhZG93IGNvbG9yIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dHcmVlbl0gc2V0IHNoYWRvdyBjb2xvciBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dCbHVlXSBzZXQgc2hhZG93IGNvbG9yIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93QWxwaGFdIHNldCBzaGFkb3cgY29sb3IgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dCbHVyXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2hhZG93T2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPcGFjaXR5XSBzaGFkb3cgb3BhY2l0eS4gIENhbiBiZSBhbnkgcmVhbCBudW1iZXJcclxuICAgICAqICBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zaGFkb3dFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHNoYWRvdy4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZGFzaF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kYXNoRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBkYXNoQXJyYXkuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy54XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLndpZHRoXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuaGVpZ2h0XVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnZpc2libGVdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcubGlzdGVuaW5nXSB3aGV0aGVyIG9yIG5vdCB0aGUgbm9kZSBpcyBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuaWRdIHVuaXF1ZSBpZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubmFtZV0gbm9uLXVuaXF1ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vcGFjaXR5XSBkZXRlcm1pbmVzIG5vZGUgb3BhY2l0eS4gIENhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2NhbGVdIHNldCBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVYXSBzZXQgc2NhbGUgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2NhbGVZXSBzZXQgc2NhbGUgeVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcucm90YXRpb25dIHJvdGF0aW9uIGluIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLm9mZnNldF0gb2Zmc2V0IGZyb20gY2VudGVyIHBvaW50IGFuZCByb3RhdGlvbiBwb2ludFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WF0gc2V0IG9mZnNldCB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRZXSBzZXQgb2Zmc2V0IHlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kcmFnZ2FibGVdIG1ha2VzIHRoZSBub2RlIGRyYWdnYWJsZS4gIFdoZW4gc3RhZ2VzIGFyZSBkcmFnZ2FibGUsIHlvdSBjYW4gZHJhZyBhbmQgZHJvcFxyXG4gICAgICogIHRoZSBlbnRpcmUgc3RhZ2UgYnkgZHJhZ2dpbmcgYW55IHBvcnRpb24gb2YgdGhlIHN0YWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5kcmFnRGlzdGFuY2VdXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29uZmlnLmRyYWdCb3VuZEZ1bmNdXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIGltYWdlT2JqID0gbmV3IEltYWdlKCk7XHJcbiAgICAgKiBpbWFnZU9iai5vbmxvYWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAqICAgdmFyIHNwcml0ZSA9IG5ldyBLaW5ldGljLlNwcml0ZSh7XHJcbiAgICAgKiAgICAgeDogMjAwLFxyXG4gICAgICogICAgIHk6IDEwMCxcclxuICAgICAqICAgICBpbWFnZTogaW1hZ2VPYmosXHJcbiAgICAgKiAgICAgYW5pbWF0aW9uOiAnc3RhbmRpbmcnLFxyXG4gICAgICogICAgIGFuaW1hdGlvbnM6IHtcclxuICAgICAqICAgICAgIHN0YW5kaW5nOiBbXHJcbiAgICAgKiAgICAgICAgIC8vIHgsIHksIHdpZHRoLCBoZWlnaHQgKDYgZnJhbWVzKVxyXG4gICAgICogICAgICAgICAwLCAwLCA0OSwgMTA5LFxyXG4gICAgICogICAgICAgICA1MiwgMCwgNDksIDEwOSxcclxuICAgICAqICAgICAgICAgMTA1LCAwLCA0OSwgMTA5LFxyXG4gICAgICogICAgICAgICAxNTgsIDAsIDQ5LCAxMDksXHJcbiAgICAgKiAgICAgICAgIDIxMCwgMCwgNDksIDEwOSxcclxuICAgICAqICAgICAgICAgMjYyLCAwLCA0OSwgMTA5XHJcbiAgICAgKiAgICAgICBdLFxyXG4gICAgICogICAgICAga2lja2luZzogW1xyXG4gICAgICogICAgICAgICAvLyB4LCB5LCB3aWR0aCwgaGVpZ2h0ICg2IGZyYW1lcylcclxuICAgICAqICAgICAgICAgMCwgMTA5LCA0NSwgOTgsXHJcbiAgICAgKiAgICAgICAgIDQ1LCAxMDksIDQ1LCA5OCxcclxuICAgICAqICAgICAgICAgOTUsIDEwOSwgNjMsIDk4LFxyXG4gICAgICogICAgICAgICAxNTYsIDEwOSwgNzAsIDk4LFxyXG4gICAgICogICAgICAgICAyMjksIDEwOSwgNjAsIDk4LFxyXG4gICAgICogICAgICAgICAyODcsIDEwOSwgNDEsIDk4XHJcbiAgICAgKiAgICAgICBdICAgICAgICAgIFxyXG4gICAgICogICAgIH0sXHJcbiAgICAgKiAgICAgZnJhbWVSYXRlOiA3LFxyXG4gICAgICogICAgIGZyYW1lSW5kZXg6IDBcclxuICAgICAqICAgfSk7XHJcbiAgICAgKiB9O1xyXG4gICAgICogaW1hZ2VPYmouc3JjID0gJy9wYXRoL3RvL2ltYWdlLmpwZydcclxuICAgICAqL1xyXG4gICAgS2luZXRpYy5TcHJpdGUgPSBmdW5jdGlvbihjb25maWcpIHtcclxuICAgICAgICB0aGlzLl9fX2luaXQoY29uZmlnKTtcclxuICAgIH07XHJcblxyXG4gICAgS2luZXRpYy5TcHJpdGUucHJvdG90eXBlID0ge1xyXG4gICAgICAgIF9fX2luaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xyXG4gICAgICAgICAgICAvLyBjYWxsIHN1cGVyIGNvbnN0cnVjdG9yXHJcbiAgICAgICAgICAgIEtpbmV0aWMuU2hhcGUuY2FsbCh0aGlzLCBjb25maWcpO1xyXG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9ICdTcHJpdGUnO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy5hbmltID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgd2UgZG9uJ3QgbmVlZCB0byByZWRyYXcgbGF5ZXIgd2Ugc2hvdWxkIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgdmFyIHVwZGF0ZWQgPSB0aGF0Ll91cGRhdGVkO1xyXG4gICAgICAgICAgICAgICAgdGhhdC5fdXBkYXRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZWQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLm9uKCdhbmltYXRpb25DaGFuZ2Uua2luZXRpYycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgaW5kZXggd2hlbiBhbmltYXRpb24gY2hhbmdlc1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mcmFtZUluZGV4KDApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5vbignZnJhbWVJbmRleENoYW5nZS5raW5ldGljJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIHNtb290aCBjaGFuZ2UgZm9yIGZyYW1lUmF0ZVxyXG4gICAgICAgICAgICB0aGlzLm9uKCdmcmFtZVJhdGVDaGFuZ2Uua2luZXRpYycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFuaW0uaXNSdW5uaW5nKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0SW50ZXJ2YWwoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNjZW5lRnVuYyh0aGlzLl9zY2VuZUZ1bmMpO1xyXG4gICAgICAgICAgICB0aGlzLmhpdEZ1bmModGhpcy5faGl0RnVuYyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfc2NlbmVGdW5jOiBmdW5jdGlvbihjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIHZhciBhbmltID0gdGhpcy5nZXRBbmltYXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5mcmFtZUluZGV4KCksXHJcbiAgICAgICAgICAgICAgICBpeDQgPSBpbmRleCAqIDQsXHJcbiAgICAgICAgICAgICAgICBzZXQgPSB0aGlzLmdldEFuaW1hdGlvbnMoKVthbmltXSxcclxuICAgICAgICAgICAgICAgIG9mZnNldHMgPSB0aGlzLmZyYW1lT2Zmc2V0cygpLFxyXG4gICAgICAgICAgICAgICAgeCA9ICAgICAgc2V0W2l4NCArIDBdLFxyXG4gICAgICAgICAgICAgICAgeSA9ICAgICAgc2V0W2l4NCArIDFdLFxyXG4gICAgICAgICAgICAgICAgd2lkdGggPSAgc2V0W2l4NCArIDJdLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gc2V0W2l4NCArIDNdLFxyXG4gICAgICAgICAgICAgICAgaW1hZ2UgPSB0aGlzLmdldEltYWdlKCk7XHJcblxyXG4gICAgICAgICAgICBpZihpbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0c1thbmltXSxcclxuICAgICAgICAgICAgICAgICAgICBpeDIgPSBpbmRleCAqIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIHgsIHksIHdpZHRoLCBoZWlnaHQsIG9mZnNldFtpeDIgKyAwXSwgb2Zmc2V0W2l4MiArIDFdLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIHgsIHksIHdpZHRoLCBoZWlnaHQsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfaGl0RnVuYzogZnVuY3Rpb24oY29udGV4dCkge1xyXG4gICAgICAgICAgICB2YXIgYW5pbSA9IHRoaXMuZ2V0QW5pbWF0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMuZnJhbWVJbmRleCgpLFxyXG4gICAgICAgICAgICAgICAgaXg0ID0gaW5kZXggKiA0LFxyXG4gICAgICAgICAgICAgICAgc2V0ID0gdGhpcy5nZXRBbmltYXRpb25zKClbYW5pbV0sXHJcbiAgICAgICAgICAgICAgICBvZmZzZXRzID0gdGhpcy5mcmFtZU9mZnNldHMoKSxcclxuICAgICAgICAgICAgICAgIHdpZHRoID0gIHNldFtpeDQgKyAyXSxcclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IHNldFtpeDQgKyAzXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGlmIChvZmZzZXRzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0c1thbmltXTtcclxuICAgICAgICAgICAgICAgIHZhciBpeDIgPSBpbmRleCAqIDI7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlY3Qob2Zmc2V0W2l4MiArIDBdLCBvZmZzZXRbaXgyICsgMV0sIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5yZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFNoYXBlKHRoaXMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX3VzZUJ1ZmZlckNhbnZhczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5oYXNTaGFkb3coKSB8fCB0aGlzLmdldEFic29sdXRlT3BhY2l0eSgpICE9PSAxKSAmJiB0aGlzLmhhc1N0cm9rZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX3NldEludGVydmFsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0Ll91cGRhdGVJbmRleCgpO1xyXG4gICAgICAgICAgICB9LCAxMDAwIC8gdGhpcy5nZXRGcmFtZVJhdGUoKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBzdGFydCBzcHJpdGUgYW5pbWF0aW9uXHJcbiAgICAgICAgICogQG1ldGhvZFxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNwcml0ZS5wcm90b3R5cGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBsYXllciA9IHRoaXMuZ2V0TGF5ZXIoKTtcclxuXHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAqIGFuaW1hdGlvbiBvYmplY3QgaGFzIG5vIGV4ZWN1dGFibGUgZnVuY3Rpb24gYmVjYXVzZVxyXG4gICAgICAgICAgICAgKiAgdGhlIHVwZGF0ZXMgYXJlIGRvbmUgd2l0aCBhIGZpeGVkIEZQUyB3aXRoIHRoZSBzZXRJbnRlcnZhbFxyXG4gICAgICAgICAgICAgKiAgYmVsb3cuICBUaGUgYW5pbSBvYmplY3Qgb25seSBuZWVkcyB0aGUgbGF5ZXIgcmVmZXJlbmNlIGZvclxyXG4gICAgICAgICAgICAgKiAgcmVkcmF3XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB0aGlzLmFuaW0uc2V0TGF5ZXJzKGxheWVyKTtcclxuICAgICAgICAgICAgdGhpcy5fc2V0SW50ZXJ2YWwoKTtcclxuICAgICAgICAgICAgdGhpcy5hbmltLnN0YXJ0KCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBzdG9wIHNwcml0ZSBhbmltYXRpb25cclxuICAgICAgICAgKiBAbWV0aG9kXHJcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3ByaXRlLnByb3RvdHlwZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLmFuaW0uc3RvcCgpO1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogZGV0ZXJtaW5lIGlmIGFuaW1hdGlvbiBvZiBzcHJpdGUgaXMgcnVubmluZyBvciBub3QuICByZXR1cm5zIHRydWUgb3IgZmFsc2VcclxuICAgICAgICAgKiBAbWV0aG9kXHJcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQW5pbWF0aW9uLnByb3RvdHlwZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlzUnVubmluZzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFuaW0uaXNSdW5uaW5nKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfdXBkYXRlSW5kZXg6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmZyYW1lSW5kZXgoKSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbiA9IHRoaXMuZ2V0QW5pbWF0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25zID0gdGhpcy5nZXRBbmltYXRpb25zKCksXHJcbiAgICAgICAgICAgICAgICBhbmltID0gYW5pbWF0aW9uc1thbmltYXRpb25dLFxyXG4gICAgICAgICAgICAgICAgbGVuID0gYW5pbS5sZW5ndGggLyA0O1xyXG5cclxuICAgICAgICAgICAgaWYoaW5kZXggPCBsZW4gLSAxKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lSW5kZXgoaW5kZXggKyAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVJbmRleCgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuU3ByaXRlLCBLaW5ldGljLlNoYXBlKTtcclxuXHJcbiAgICAvLyBhZGQgZ2V0dGVycyBzZXR0ZXJzXHJcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU3ByaXRlLCAnYW5pbWF0aW9uJyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBnZXQvc2V0IGFuaW1hdGlvbiBrZXlcclxuICAgICAqIEBuYW1lIGFuaW1hdGlvblxyXG4gICAgICogQG1ldGhvZFxyXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3ByaXRlLnByb3RvdHlwZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGFuaW0gYW5pbWF0aW9uIGtleVxyXG4gICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiAvLyBnZXQgYW5pbWF0aW9uIGtleVxyXG4gICAgICogdmFyIGFuaW1hdGlvbiA9IHNwcml0ZS5hbmltYXRpb24oKTtcclxuICAgICAqXHJcbiAgICAgKiAvLyBzZXQgYW5pbWF0aW9uIGtleVxyXG4gICAgICogc3ByaXRlLmFuaW1hdGlvbigna2lja2luZycpO1xyXG4gICAgICovXHJcblxyXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNwcml0ZSwgJ2FuaW1hdGlvbnMnKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGdldC9zZXQgYW5pbWF0aW9ucyBtYXBcclxuICAgICAqIEBuYW1lIGFuaW1hdGlvbnNcclxuICAgICAqIEBtZXRob2RcclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNwcml0ZS5wcm90b3R5cGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhbmltYXRpb25zXHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIC8vIGdldCBhbmltYXRpb25zIG1hcFxyXG4gICAgICogdmFyIGFuaW1hdGlvbnMgPSBzcHJpdGUuYW5pbWF0aW9ucygpO1xyXG4gICAgICogXHJcbiAgICAgKiAvLyBzZXQgYW5pbWF0aW9ucyBtYXBcclxuICAgICAqIHNwcml0ZS5hbmltYXRpb25zKHtcclxuICAgICAqICAgc3RhbmRpbmc6IFtcclxuICAgICAqICAgICAvLyB4LCB5LCB3aWR0aCwgaGVpZ2h0ICg2IGZyYW1lcylcclxuICAgICAqICAgICAwLCAwLCA0OSwgMTA5LFxyXG4gICAgICogICAgIDUyLCAwLCA0OSwgMTA5LFxyXG4gICAgICogICAgIDEwNSwgMCwgNDksIDEwOSxcclxuICAgICAqICAgICAxNTgsIDAsIDQ5LCAxMDksXHJcbiAgICAgKiAgICAgMjEwLCAwLCA0OSwgMTA5LFxyXG4gICAgICogICAgIDI2MiwgMCwgNDksIDEwOVxyXG4gICAgICogICBdLFxyXG4gICAgICogICBraWNraW5nOiBbXHJcbiAgICAgKiAgICAgLy8geCwgeSwgd2lkdGgsIGhlaWdodCAoNiBmcmFtZXMpXHJcbiAgICAgKiAgICAgMCwgMTA5LCA0NSwgOTgsXHJcbiAgICAgKiAgICAgNDUsIDEwOSwgNDUsIDk4LFxyXG4gICAgICogICAgIDk1LCAxMDksIDYzLCA5OCxcclxuICAgICAqICAgICAxNTYsIDEwOSwgNzAsIDk4LFxyXG4gICAgICogICAgIDIyOSwgMTA5LCA2MCwgOTgsXHJcbiAgICAgKiAgICAgMjg3LCAxMDksIDQxLCA5OFxyXG4gICAgICogICBdICAgICAgICAgIFxyXG4gICAgICogfSk7XHJcbiAgICAgKi9cclxuXHJcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU3ByaXRlLCAnZnJhbWVPZmZzZXRzJyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIGdldC9zZXQgb2Zmc2V0cyBtYXBcclxuICAgICogQG5hbWUgb2Zmc2V0c1xyXG4gICAgKiBAbWV0aG9kXHJcbiAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlNwcml0ZS5wcm90b3R5cGVcclxuICAgICogQHBhcmFtIHtPYmplY3R9IG9mZnNldHNcclxuICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICogQGV4YW1wbGVcclxuICAgICogLy8gZ2V0IG9mZnNldHMgbWFwXHJcbiAgICAqIHZhciBvZmZzZXRzID0gc3ByaXRlLm9mZnNldHMoKTtcclxuICAgICpcclxuICAgICogLy8gc2V0IG9mZnNldHMgbWFwXHJcbiAgICAqIHNwcml0ZS5vZmZzZXRzKHtcclxuICAgICogICBzdGFuZGluZzogW1xyXG4gICAgKiAgICAgLy8geCwgeSAoNiBmcmFtZXMpXHJcbiAgICAqICAgICAwLCAwLFxyXG4gICAgKiAgICAgMCwgMCxcclxuICAgICogICAgIDUsIDAsXHJcbiAgICAqICAgICAwLCAwLFxyXG4gICAgKiAgICAgMCwgMyxcclxuICAgICogICAgIDIsIDBcclxuICAgICogICBdLFxyXG4gICAgKiAgIGtpY2tpbmc6IFtcclxuICAgICogICAgIC8vIHgsIHkgKDYgZnJhbWVzKVxyXG4gICAgKiAgICAgMCwgNSxcclxuICAgICogICAgIDUsIDAsXHJcbiAgICAqICAgICAxMCwgMCxcclxuICAgICogICAgIDAsIDAsXHJcbiAgICAqICAgICAyLCAxLFxyXG4gICAgKiAgICAgMCwgMFxyXG4gICAgKiAgIF1cclxuICAgICogfSk7XHJcbiAgICAqL1xyXG4gXHJcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuU3ByaXRlLCAnaW1hZ2UnKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGdldC9zZXQgaW1hZ2VcclxuICAgICAqIEBuYW1lIGltYWdlXHJcbiAgICAgKiBAbWV0aG9kXHJcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TcHJpdGUucHJvdG90eXBlXHJcbiAgICAgKiBAcGFyYW0ge0ltYWdlfSBpbWFnZVxyXG4gICAgICogQHJldHVybnMge0ltYWdlfVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIC8vIGdldCBpbWFnZVxyXG4gICAgICogdmFyIGltYWdlID0gc3ByaXRlLmltYWdlKCk7XHJcbiAgICAgKlxyXG4gICAgICogLy8gc2V0IGltYWdlXHJcbiAgICAgKiBzcHJpdGUuaW1hZ2UoaW1hZ2VPYmopO1xyXG4gICAgICovXHJcblxyXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlNwcml0ZSwgJ2ZyYW1lSW5kZXgnLCAwKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHNldC9zZXQgYW5pbWF0aW9uIGZyYW1lIGluZGV4XHJcbiAgICAgKiBAbmFtZSBmcmFtZUluZGV4XHJcbiAgICAgKiBAbWV0aG9kXHJcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TcHJpdGUucHJvdG90eXBlXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGZyYW1lSW5kZXhcclxuICAgICAqIEByZXR1cm5zIHtJbnRlZ2VyfVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIC8vIGdldCBhbmltYXRpb24gZnJhbWUgaW5kZXhcclxuICAgICAqIHZhciBmcmFtZUluZGV4ID0gc3ByaXRlLmZyYW1lSW5kZXgoKTtcclxuICAgICAqXHJcbiAgICAgKiAvLyBzZXQgYW5pbWF0aW9uIGZyYW1lIGluZGV4XHJcbiAgICAgKiBzcHJpdGUuZnJhbWVJbmRleCgzKTtcclxuICAgICAqL1xyXG5cclxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5TcHJpdGUsICdmcmFtZVJhdGUnLCAxNyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBnZXQvc2V0IGZyYW1lIHJhdGUgaW4gZnJhbWVzIHBlciBzZWNvbmQuICBJbmNyZWFzZSB0aGlzIG51bWJlciB0byBtYWtlIHRoZSBzcHJpdGVcclxuICAgICAqICBhbmltYXRpb24gcnVuIGZhc3RlciwgYW5kIGRlY3JlYXNlIHRoZSBudW1iZXIgdG8gbWFrZSB0aGUgc3ByaXRlIGFuaW1hdGlvbiBydW4gc2xvd2VyXHJcbiAgICAgKiAgVGhlIGRlZmF1bHQgaXMgMTcgZnJhbWVzIHBlciBzZWNvbmRcclxuICAgICAqIEBuYW1lIGZyYW1lUmF0ZVxyXG4gICAgICogQG1ldGhvZFxyXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuU3ByaXRlLnByb3RvdHlwZVxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBmcmFtZVJhdGVcclxuICAgICAqIEByZXR1cm5zIHtJbnRlZ2VyfVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIC8vIGdldCBmcmFtZSByYXRlXHJcbiAgICAgKiB2YXIgZnJhbWVSYXRlID0gc3ByaXRlLmZyYW1lUmF0ZSgpO1xyXG4gICAgICpcclxuICAgICAqIC8vIHNldCBmcmFtZSByYXRlIHRvIDIgZnJhbWVzIHBlciBzZWNvbmRcclxuICAgICAqIHNwcml0ZS5mcmFtZVJhdGUoMik7XHJcbiAgICAgKi9cclxuXHJcbiAgICBLaW5ldGljLkZhY3RvcnkuYmFja0NvbXBhdChLaW5ldGljLlNwcml0ZSwge1xyXG4gICAgICAgIGluZGV4OiAnZnJhbWVJbmRleCcsXHJcbiAgICAgICAgZ2V0SW5kZXg6ICdnZXRGcmFtZUluZGV4JyxcclxuICAgICAgICBzZXRJbmRleDogJ3NldEZyYW1lSW5kZXgnXHJcbiAgICB9KTtcclxuXHJcbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLlNwcml0ZSk7XHJcbn0pKCk7XHJcbjsoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIFBhdGggY29uc3RydWN0b3IuXG4gICAgICogQGF1dGhvciBKYXNvbiBGb2xsYXNcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAqIEBhdWdtZW50cyBLaW5ldGljLlNoYXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb25maWcuZGF0YSBTVkcgZGF0YSBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsXSBmaWxsIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbFJlZF0gc2V0IGZpbGwgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxHcmVlbl0gc2V0IGZpbGwgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEJsdWVdIHNldCBmaWxsIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEFscGhhXSBzZXQgZmlsbCBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW1hZ2V9IFtjb25maWcuZmlsbFBhdHRlcm5JbWFnZV0gZmlsbCBwYXR0ZXJuIGltYWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFldIFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZV0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblJvdGF0aW9uXVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFBhdHRlcm5SZXBlYXRdIGNhbiBiZSBcInJlcGVhdFwiLCBcInJlcGVhdC14XCIsIFwicmVwZWF0LXlcIiwgb3IgXCJuby1yZXBlYXRcIi4gIFRoZSBkZWZhdWx0IGlzIFwibm8tcmVwZWF0XCJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WV0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5maWxsRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBmaWxsLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFByaW9yaXR5XSBjYW4gYmUgY29sb3IsIGxpbmVhci1ncmFkaWVudCwgcmFkaWFsLWdyYWlkZW50LCBvciBwYXR0ZXJuLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgY29sb3IuICBUaGUgZmlsbFByaW9yaXR5IHByb3BlcnR5IG1ha2VzIGl0IHJlYWxseSBlYXN5IHRvIHRvZ2dsZSBiZXR3ZWVuIGRpZmZlcmVudCBmaWxsIHR5cGVzLiAgRm9yIGV4YW1wbGUsIGlmIHlvdSB3YW50IHRvIHRvZ2dsZSBiZXR3ZWVuIGEgZmlsbCBjb2xvciBzdHlsZSBhbmQgYSBmaWxsIHBhdHRlcm4gc3R5bGUsIHNpbXBseSBzZXQgdGhlIGZpbGwgcHJvcGVydHkgYW5kIHRoZSBmaWxsUGF0dGVybiBwcm9wZXJ0aWVzLCBhbmQgdGhlbiB1c2Ugc2V0RmlsbFByaW9yaXR5KCdjb2xvcicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCBhIGNvbG9yIGZpbGwsIG9yIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ3BhdHRlcm4nKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggdGhlIHBhdHRlcm4gZmlsbCBjb25maWd1cmF0aW9uXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zdHJva2VdIHN0cm9rZSBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZVJlZF0gc2V0IHN0cm9rZSByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlR3JlZW5dIHNldCBzdHJva2UgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQmx1ZV0gc2V0IHN0cm9rZSBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUFscGhhXSBzZXQgc3Ryb2tlIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc3Ryb2tlV2lkdGhdIHN0cm9rZSB3aWR0aFxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZVNjYWxlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHN0cm9rZSBzY2FsZS4gIFRoZSBkZWZhdWx0IGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHN0cm9rZS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVKb2luXSBjYW4gYmUgbWl0ZXIsIHJvdW5kLCBvciBiZXZlbC4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgbWl0ZXJcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVDYXBdIGNhbiBiZSBidXR0LCByb3VuZCwgb3Igc3FhcmUuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIGJ1dHRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnNoYWRvd0NvbG9yXVxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd1JlZF0gc2V0IHNoYWRvdyBjb2xvciByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93R3JlZW5dIHNldCBzaGFkb3cgY29sb3IgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93Qmx1ZV0gc2V0IHNoYWRvdyBjb2xvciBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0FscGhhXSBzZXQgc2hhZG93IGNvbG9yIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93Qmx1cl1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNoYWRvd09mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T3BhY2l0eV0gc2hhZG93IG9wYWNpdHkuICBDYW4gYmUgYW55IHJlYWwgbnVtYmVyXHJcbiAgICAgKiAgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc2hhZG93RW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzaGFkb3cuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmRhc2hdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZGFzaEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZGFzaEFycmF5LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcudmlzaWJsZV1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5saXN0ZW5pbmddIHdoZXRoZXIgb3Igbm90IHRoZSBub2RlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5pZF0gdW5pcXVlIGlkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5uYW1lXSBub24tdW5pcXVlIG5hbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9wYWNpdHldIGRldGVybWluZXMgbm9kZSBvcGFjaXR5LiAgQ2FuIGJlIGFueSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zY2FsZV0gc2V0IHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVhdIHNldCBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVldIHNldCBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5yb3RhdGlvbl0gcm90YXRpb24gaW4gZGVncmVlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcub2Zmc2V0XSBvZmZzZXQgZnJvbSBjZW50ZXIgcG9pbnQgYW5kIHJvdGF0aW9uIHBvaW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRYXSBzZXQgb2Zmc2V0IHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFldIHNldCBvZmZzZXQgeVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRyYWdnYWJsZV0gbWFrZXMgdGhlIG5vZGUgZHJhZ2dhYmxlLiAgV2hlbiBzdGFnZXMgYXJlIGRyYWdnYWJsZSwgeW91IGNhbiBkcmFnIGFuZCBkcm9wXHJcbiAgICAgKiAgdGhlIGVudGlyZSBzdGFnZSBieSBkcmFnZ2luZyBhbnkgcG9ydGlvbiBvZiB0aGUgc3RhZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmRyYWdEaXN0YW5jZV1cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb25maWcuZHJhZ0JvdW5kRnVuY11cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBwYXRoID0gbmV3IEtpbmV0aWMuUGF0aCh7XG4gICAgICogICB4OiAyNDAsXG4gICAgICogICB5OiA0MCxcbiAgICAgKiAgIGRhdGE6ICdNMTIuNTgyLDkuNTUxQzMuMjUxLDE2LjIzNywwLjkyMSwyOS4wMjEsNy4wOCwzOC41NjRsLTIuMzYsMS42ODlsNC44OTMsMi4yNjJsNC44OTMsMi4yNjJsLTAuNTY4LTUuMzZsLTAuNTY3LTUuMzU5bC0yLjM2NSwxLjY5NGMtNC42NTctNy4zNzUtMi44My0xNy4xODUsNC4zNTItMjIuMzNjNy40NTEtNS4zMzgsMTcuODE3LTMuNjI1LDIzLjE1NiwzLjgyNGM1LjMzNyw3LjQ0OSwzLjYyNSwxNy44MTMtMy44MjEsMjMuMTUybDIuODU3LDMuOTg4YzkuNjE3LTYuODkzLDExLjgyNy0yMC4yNzcsNC45MzUtMjkuODk2QzM1LjU5MSw0Ljg3LDIyLjIwNCwyLjY1OCwxMi41ODIsOS41NTF6JyxcbiAgICAgKiAgIGZpbGw6ICdncmVlbicsXG4gICAgICogICBzY2FsZTogMlxuICAgICAqIH0pO1xuICAgICAqL1xuICAgIEtpbmV0aWMuUGF0aCA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgdGhpcy5fX19pbml0KGNvbmZpZyk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuUGF0aC5wcm90b3R5cGUgPSB7XG4gICAgICAgIF9fX2luaXQ6IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YUFycmF5ID0gW107XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8vIGNhbGwgc3VwZXIgY29uc3RydWN0b3JcbiAgICAgICAgICAgIEtpbmV0aWMuU2hhcGUuY2FsbCh0aGlzLCBjb25maWcpO1xuICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSAnUGF0aCc7XG5cbiAgICAgICAgICAgIHRoaXMuZGF0YUFycmF5ID0gS2luZXRpYy5QYXRoLnBhcnNlUGF0aERhdGEodGhpcy5nZXREYXRhKCkpO1xuICAgICAgICAgICAgdGhpcy5vbignZGF0YUNoYW5nZS5raW5ldGljJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoYXQuZGF0YUFycmF5ID0gS2luZXRpYy5QYXRoLnBhcnNlUGF0aERhdGEodGhpcy5nZXREYXRhKCkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuc2NlbmVGdW5jKHRoaXMuX3NjZW5lRnVuYyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zY2VuZUZ1bmM6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBjYSA9IHRoaXMuZGF0YUFycmF5LFxuICAgICAgICAgICAgICAgIGNsb3NlZFBhdGggPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gY29udGV4dCBwb3NpdGlvblxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgY2EubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IGNhW25dLmNvbW1hbmQ7XG4gICAgICAgICAgICAgICAgdmFyIHAgPSBjYVtuXS5wb2ludHM7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0wnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8ocFswXSwgcFsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwWzBdLCBwWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdDJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyhwWzBdLCBwWzFdLCBwWzJdLCBwWzNdLCBwWzRdLCBwWzVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyhwWzBdLCBwWzFdLCBwWzJdLCBwWzNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdBJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjeCA9IHBbMF0sIGN5ID0gcFsxXSwgcnggPSBwWzJdLCByeSA9IHBbM10sIHRoZXRhID0gcFs0XSwgZFRoZXRhID0gcFs1XSwgcHNpID0gcFs2XSwgZnMgPSBwWzddO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IChyeCA+IHJ5KSA/IHJ4IDogcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2NhbGVYID0gKHJ4ID4gcnkpID8gMSA6IHJ4IC8gcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2NhbGVZID0gKHJ4ID4gcnkpID8gcnkgLyByeCA6IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKGN4LCBjeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJvdGF0ZShwc2kpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zY2FsZShzY2FsZVgsIHNjYWxlWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByLCB0aGV0YSwgdGhldGEgKyBkVGhldGEsIDEgLSBmcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNjYWxlKDEgLyBzY2FsZVgsIDEgLyBzY2FsZVkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5yb3RhdGUoLXBzaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZSgtY3gsIC1jeSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd6JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZWRQYXRoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNsb3NlZFBhdGgpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU2hhcGUodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5QYXRoLCBLaW5ldGljLlNoYXBlKTtcblxuICAgIEtpbmV0aWMuUGF0aC5nZXRMaW5lTGVuZ3RoID0gZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCgoeDIgLSB4MSkgKiAoeDIgLSB4MSkgKyAoeTIgLSB5MSkgKiAoeTIgLSB5MSkpO1xuICAgIH07XG4gICAgS2luZXRpYy5QYXRoLmdldFBvaW50T25MaW5lID0gZnVuY3Rpb24oZGlzdCwgUDF4LCBQMXksIFAyeCwgUDJ5LCBmcm9tWCwgZnJvbVkpIHtcbiAgICAgICAgaWYoZnJvbVggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZnJvbVggPSBQMXg7XG4gICAgICAgIH1cbiAgICAgICAgaWYoZnJvbVkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZnJvbVkgPSBQMXk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbSA9IChQMnkgLSBQMXkpIC8gKChQMnggLSBQMXgpICsgMC4wMDAwMDAwMSk7XG4gICAgICAgIHZhciBydW4gPSBNYXRoLnNxcnQoZGlzdCAqIGRpc3QgLyAoMSArIG0gKiBtKSk7XG4gICAgICAgIGlmKFAyeCA8IFAxeCkge1xuICAgICAgICAgICAgcnVuICo9IC0xO1xuICAgICAgICB9XG4gICAgICAgIHZhciByaXNlID0gbSAqIHJ1bjtcbiAgICAgICAgdmFyIHB0O1xuXG4gICAgICAgIGlmIChQMnggPT09IFAxeCkgeyAvLyB2ZXJ0aWNhbCBsaW5lXG4gICAgICAgICAgICBwdCA9IHtcbiAgICAgICAgICAgICAgICB4OiBmcm9tWCxcbiAgICAgICAgICAgICAgICB5OiBmcm9tWSArIHJpc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZigoZnJvbVkgLSBQMXkpIC8gKChmcm9tWCAtIFAxeCkgKyAwLjAwMDAwMDAxKSA9PT0gbSkge1xuICAgICAgICAgICAgcHQgPSB7XG4gICAgICAgICAgICAgICAgeDogZnJvbVggKyBydW4sXG4gICAgICAgICAgICAgICAgeTogZnJvbVkgKyByaXNlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGl4LCBpeTtcblxuICAgICAgICAgICAgdmFyIGxlbiA9IHRoaXMuZ2V0TGluZUxlbmd0aChQMXgsIFAxeSwgUDJ4LCBQMnkpO1xuICAgICAgICAgICAgaWYobGVuIDwgMC4wMDAwMDAwMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdSA9ICgoKGZyb21YIC0gUDF4KSAqIChQMnggLSBQMXgpKSArICgoZnJvbVkgLSBQMXkpICogKFAyeSAtIFAxeSkpKTtcbiAgICAgICAgICAgIHUgPSB1IC8gKGxlbiAqIGxlbik7XG4gICAgICAgICAgICBpeCA9IFAxeCArIHUgKiAoUDJ4IC0gUDF4KTtcbiAgICAgICAgICAgIGl5ID0gUDF5ICsgdSAqIChQMnkgLSBQMXkpO1xuXG4gICAgICAgICAgICB2YXIgcFJpc2UgPSB0aGlzLmdldExpbmVMZW5ndGgoZnJvbVgsIGZyb21ZLCBpeCwgaXkpO1xuICAgICAgICAgICAgdmFyIHBSdW4gPSBNYXRoLnNxcnQoZGlzdCAqIGRpc3QgLSBwUmlzZSAqIHBSaXNlKTtcbiAgICAgICAgICAgIHJ1biA9IE1hdGguc3FydChwUnVuICogcFJ1biAvICgxICsgbSAqIG0pKTtcbiAgICAgICAgICAgIGlmKFAyeCA8IFAxeCkge1xuICAgICAgICAgICAgICAgIHJ1biAqPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJpc2UgPSBtICogcnVuO1xuICAgICAgICAgICAgcHQgPSB7XG4gICAgICAgICAgICAgICAgeDogaXggKyBydW4sXG4gICAgICAgICAgICAgICAgeTogaXkgKyByaXNlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHB0O1xuICAgIH07XG5cbiAgICBLaW5ldGljLlBhdGguZ2V0UG9pbnRPbkN1YmljQmV6aWVyID0gZnVuY3Rpb24ocGN0LCBQMXgsIFAxeSwgUDJ4LCBQMnksIFAzeCwgUDN5LCBQNHgsIFA0eSkge1xuICAgICAgICBmdW5jdGlvbiBDQjEodCkge1xuICAgICAgICAgICAgcmV0dXJuIHQgKiB0ICogdDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBDQjIodCkge1xuICAgICAgICAgICAgcmV0dXJuIDMgKiB0ICogdCAqICgxIC0gdCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gQ0IzKHQpIHtcbiAgICAgICAgICAgIHJldHVybiAzICogdCAqICgxIC0gdCkgKiAoMSAtIHQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIENCNCh0KSB7XG4gICAgICAgICAgICByZXR1cm4gKDEgLSB0KSAqICgxIC0gdCkgKiAoMSAtIHQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB4ID0gUDR4ICogQ0IxKHBjdCkgKyBQM3ggKiBDQjIocGN0KSArIFAyeCAqIENCMyhwY3QpICsgUDF4ICogQ0I0KHBjdCk7XG4gICAgICAgIHZhciB5ID0gUDR5ICogQ0IxKHBjdCkgKyBQM3kgKiBDQjIocGN0KSArIFAyeSAqIENCMyhwY3QpICsgUDF5ICogQ0I0KHBjdCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBLaW5ldGljLlBhdGguZ2V0UG9pbnRPblF1YWRyYXRpY0JlemllciA9IGZ1bmN0aW9uKHBjdCwgUDF4LCBQMXksIFAyeCwgUDJ5LCBQM3gsIFAzeSkge1xuICAgICAgICBmdW5jdGlvbiBRQjEodCkge1xuICAgICAgICAgICAgcmV0dXJuIHQgKiB0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIFFCMih0KSB7XG4gICAgICAgICAgICByZXR1cm4gMiAqIHQgKiAoMSAtIHQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIFFCMyh0KSB7XG4gICAgICAgICAgICByZXR1cm4gKDEgLSB0KSAqICgxIC0gdCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHggPSBQM3ggKiBRQjEocGN0KSArIFAyeCAqIFFCMihwY3QpICsgUDF4ICogUUIzKHBjdCk7XG4gICAgICAgIHZhciB5ID0gUDN5ICogUUIxKHBjdCkgKyBQMnkgKiBRQjIocGN0KSArIFAxeSAqIFFCMyhwY3QpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeVxuICAgICAgICB9O1xuICAgIH07XG4gICAgS2luZXRpYy5QYXRoLmdldFBvaW50T25FbGxpcHRpY2FsQXJjID0gZnVuY3Rpb24oY3gsIGN5LCByeCwgcnksIHRoZXRhLCBwc2kpIHtcbiAgICAgICAgdmFyIGNvc1BzaSA9IE1hdGguY29zKHBzaSksIHNpblBzaSA9IE1hdGguc2luKHBzaSk7XG4gICAgICAgIHZhciBwdCA9IHtcbiAgICAgICAgICAgIHg6IHJ4ICogTWF0aC5jb3ModGhldGEpLFxuICAgICAgICAgICAgeTogcnkgKiBNYXRoLnNpbih0aGV0YSlcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IGN4ICsgKHB0LnggKiBjb3NQc2kgLSBwdC55ICogc2luUHNpKSxcbiAgICAgICAgICAgIHk6IGN5ICsgKHB0LnggKiBzaW5Qc2kgKyBwdC55ICogY29zUHNpKVxuICAgICAgICB9O1xuICAgIH07XG4gICAgLypcbiAgICAgKiBnZXQgcGFyc2VkIGRhdGEgYXJyYXkgZnJvbSB0aGUgZGF0YVxuICAgICAqICBzdHJpbmcuICBWLCB2LCBILCBoLCBhbmQgbCBkYXRhIGFyZSBjb252ZXJ0ZWQgdG9cbiAgICAgKiAgTCBkYXRhIGZvciB0aGUgcHVycG9zZSBvZiBoaWdoIHBlcmZvcm1hbmNlIFBhdGhcbiAgICAgKiAgcmVuZGVyaW5nXG4gICAgICovXG4gICAgS2luZXRpYy5QYXRoLnBhcnNlUGF0aERhdGEgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIC8vIFBhdGggRGF0YSBTZWdtZW50IG11c3QgYmVnaW4gd2l0aCBhIG1vdmVUb1xuICAgICAgICAvL20gKHggeSkrICBSZWxhdGl2ZSBtb3ZlVG8gKHN1YnNlcXVlbnQgcG9pbnRzIGFyZSB0cmVhdGVkIGFzIGxpbmVUbylcbiAgICAgICAgLy9NICh4IHkpKyAgQWJzb2x1dGUgbW92ZVRvIChzdWJzZXF1ZW50IHBvaW50cyBhcmUgdHJlYXRlZCBhcyBsaW5lVG8pXG4gICAgICAgIC8vbCAoeCB5KSsgIFJlbGF0aXZlIGxpbmVUb1xuICAgICAgICAvL0wgKHggeSkrICBBYnNvbHV0ZSBMaW5lVG9cbiAgICAgICAgLy9oICh4KSsgICAgUmVsYXRpdmUgaG9yaXpvbnRhbCBsaW5lVG9cbiAgICAgICAgLy9IICh4KSsgICAgQWJzb2x1dGUgaG9yaXpvbnRhbCBsaW5lVG9cbiAgICAgICAgLy92ICh5KSsgICAgUmVsYXRpdmUgdmVydGljYWwgbGluZVRvXG4gICAgICAgIC8vViAoeSkrICAgIEFic29sdXRlIHZlcnRpY2FsIGxpbmVUb1xuICAgICAgICAvL3ogKGNsb3NlcGF0aClcbiAgICAgICAgLy9aIChjbG9zZXBhdGgpXG4gICAgICAgIC8vYyAoeDEgeTEgeDIgeTIgeCB5KSsgUmVsYXRpdmUgQmV6aWVyIGN1cnZlXG4gICAgICAgIC8vQyAoeDEgeTEgeDIgeTIgeCB5KSsgQWJzb2x1dGUgQmV6aWVyIGN1cnZlXG4gICAgICAgIC8vcSAoeDEgeTEgeCB5KSsgICAgICAgUmVsYXRpdmUgUXVhZHJhdGljIEJlemllclxuICAgICAgICAvL1EgKHgxIHkxIHggeSkrICAgICAgIEFic29sdXRlIFF1YWRyYXRpYyBCZXppZXJcbiAgICAgICAgLy90ICh4IHkpKyAgICBTaG9ydGhhbmQvU21vb3RoIFJlbGF0aXZlIFF1YWRyYXRpYyBCZXppZXJcbiAgICAgICAgLy9UICh4IHkpKyAgICBTaG9ydGhhbmQvU21vb3RoIEFic29sdXRlIFF1YWRyYXRpYyBCZXppZXJcbiAgICAgICAgLy9zICh4MiB5MiB4IHkpKyAgICAgICBTaG9ydGhhbmQvU21vb3RoIFJlbGF0aXZlIEJlemllciBjdXJ2ZVxuICAgICAgICAvL1MgKHgyIHkyIHggeSkrICAgICAgIFNob3J0aGFuZC9TbW9vdGggQWJzb2x1dGUgQmV6aWVyIGN1cnZlXG4gICAgICAgIC8vYSAocnggcnkgeC1heGlzLXJvdGF0aW9uIGxhcmdlLWFyYy1mbGFnIHN3ZWVwLWZsYWcgeCB5KSsgICAgIFJlbGF0aXZlIEVsbGlwdGljYWwgQXJjXG4gICAgICAgIC8vQSAocnggcnkgeC1heGlzLXJvdGF0aW9uIGxhcmdlLWFyYy1mbGFnIHN3ZWVwLWZsYWcgeCB5KSsgIEFic29sdXRlIEVsbGlwdGljYWwgQXJjXG5cbiAgICAgICAgLy8gcmV0dXJuIGVhcmx5IGlmIGRhdGEgaXMgbm90IGRlZmluZWRcbiAgICAgICAgaWYoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbW1hbmQgc3RyaW5nXG4gICAgICAgIHZhciBjcyA9IGRhdGE7XG5cbiAgICAgICAgLy8gY29tbWFuZCBjaGFyc1xuICAgICAgICB2YXIgY2MgPSBbJ20nLCAnTScsICdsJywgJ0wnLCAndicsICdWJywgJ2gnLCAnSCcsICd6JywgJ1onLCAnYycsICdDJywgJ3EnLCAnUScsICd0JywgJ1QnLCAncycsICdTJywgJ2EnLCAnQSddO1xuICAgICAgICAvLyBjb252ZXJ0IHdoaXRlIHNwYWNlcyB0byBjb21tYXNcbiAgICAgICAgY3MgPSBjcy5yZXBsYWNlKG5ldyBSZWdFeHAoJyAnLCAnZycpLCAnLCcpO1xuICAgICAgICAvLyBjcmVhdGUgcGlwZXMgc28gdGhhdCB3ZSBjYW4gc3BsaXQgdGhlIGRhdGFcbiAgICAgICAgZm9yKHZhciBuID0gMDsgbiA8IGNjLmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICBjcyA9IGNzLnJlcGxhY2UobmV3IFJlZ0V4cChjY1tuXSwgJ2cnKSwgJ3wnICsgY2Nbbl0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNyZWF0ZSBhcnJheVxuICAgICAgICB2YXIgYXJyID0gY3Muc3BsaXQoJ3wnKTtcbiAgICAgICAgdmFyIGNhID0gW107XG4gICAgICAgIC8vIGluaXQgY29udGV4dCBwb2ludFxuICAgICAgICB2YXIgY3B4ID0gMDtcbiAgICAgICAgdmFyIGNweSA9IDA7XG4gICAgICAgIGZvciggbiA9IDE7IG4gPCBhcnIubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgIHZhciBzdHIgPSBhcnJbbl07XG4gICAgICAgICAgICB2YXIgYyA9IHN0ci5jaGFyQXQoMCk7XG4gICAgICAgICAgICBzdHIgPSBzdHIuc2xpY2UoMSk7XG4gICAgICAgICAgICAvLyByZW1vdmUgLC0gZm9yIGNvbnNpc3RlbmN5XG4gICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKCcsLScsICdnJyksICctJyk7XG4gICAgICAgICAgICAvLyBhZGQgY29tbWFzIHNvIHRoYXQgaXQncyBlYXN5IHRvIHNwbGl0XG4gICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKCctJywgJ2cnKSwgJywtJyk7XG4gICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKCdlLC0nLCAnZycpLCAnZS0nKTtcbiAgICAgICAgICAgIHZhciBwID0gc3RyLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICBpZihwLmxlbmd0aCA+IDAgJiYgcFswXSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBwLnNoaWZ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb252ZXJ0IHN0cmluZ3MgdG8gZmxvYXRzXG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHBbaV0gPSBwYXJzZUZsb2F0KHBbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUocC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYoaXNOYU4ocFswXSkpIHsvLyBjYXNlIGZvciBhIHRyYWlsaW5nIGNvbW1hIGJlZm9yZSBuZXh0IGNvbW1hbmRcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNtZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIHBvaW50cyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydFggPSBjcHgsIHN0YXJ0WSA9IGNweTtcbiAgICAgICAgICAgICAgICAvLyBNb3ZlIHZhciBmcm9tIHdpdGhpbiB0aGUgc3dpdGNoIHRvIHVwIGhlcmUgKGpzaGludClcbiAgICAgICAgICAgICAgICB2YXIgcHJldkNtZCwgY3RsUHR4LCBjdGxQdHk7ICAgICAvLyBTcywgVHRcbiAgICAgICAgICAgICAgICB2YXIgcngsIHJ5LCBwc2ksIGZhLCBmcywgeDEsIHkxOyAvLyBBYVxuXG5cbiAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IGwsIEgsIGgsIFYsIGFuZCB2IHRvIExcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGMpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBLZWVwIHRoZSBsaW5lVG8ncyBhYm92ZSB0aGUgbW92ZVRvJ3MgaW4gdGhpcyBzd2l0Y2hcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHggKz0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B5ICs9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9ICdMJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdMJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IGxpbmVUbyBoYW5kbGVycyBuZWVkIHRvIGJlIGFib3ZlIHRoaXMgcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHggPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHkgPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHggKz0gZHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHkgKz0gZHk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnTSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZnRlciBjbG9zaW5nIHRoZSBwYXRoIG1vdmUgdGhlIGN1cnJlbnQgcG9zaXRpb24gXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0byB0aGUgdGhlIGZpcnN0IHBvaW50IG9mIHRoZSBwYXRoIChpZiBhbnkpLiBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNhLmxlbmd0aD4yICYmIGNhW2NhLmxlbmd0aC0xXS5jb21tYW5kPT09J3onKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGlkeD1jYS5sZW5ndGgtMjtpZHg+PTA7aWR4LS0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjYVtpZHhdLmNvbW1hbmQ9PT0nTScpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3B4PWNhW2lkeF0ucG9pbnRzWzBdK2R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3B5PWNhW2lkeF0ucG9pbnRzWzFdK2R5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjID0gJ2wnO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3Vic2VxdWVudCBwb2ludHMgYXJlIHRyZWF0ZWQgYXMgcmVsYXRpdmUgbGluZVRvXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHggPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHkgPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnTSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjID0gJ0wnO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3Vic2VxdWVudCBwb2ludHMgYXJlIHRyZWF0ZWQgYXMgYWJzb2x1dGUgbGluZVRvXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCArPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnTCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnSCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHggPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnTCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHkgKz0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY21kID0gJ0wnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3B4LCBjcHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1YnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY3B5ID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY21kID0gJ0wnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3B4LCBjcHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2gocC5zaGlmdCgpLCBwLnNoaWZ0KCksIHAuc2hpZnQoKSwgcC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCArIHAuc2hpZnQoKSwgY3B5ICsgcC5zaGlmdCgpLCBjcHggKyBwLnNoaWZ0KCksIGNweSArIHAuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHggKz0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B5ICs9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9ICdDJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdTJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0bFB0eCA9IGNweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0bFB0eSA9IGNweTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZDbWQgPSBjYVtjYS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHByZXZDbWQuY29tbWFuZCA9PT0gJ0MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RsUHR4ID0gY3B4ICsgKGNweCAtIHByZXZDbWQucG9pbnRzWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHkgPSBjcHkgKyAoY3B5IC0gcHJldkNtZC5wb2ludHNbM10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3RsUHR4LCBjdGxQdHksIHAuc2hpZnQoKSwgcC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9ICdDJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0bFB0eCA9IGNweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0bFB0eSA9IGNweTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZDbWQgPSBjYVtjYS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHByZXZDbWQuY29tbWFuZCA9PT0gJ0MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RsUHR4ID0gY3B4ICsgKGNweCAtIHByZXZDbWQucG9pbnRzWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHkgPSBjcHkgKyAoY3B5IC0gcHJldkNtZC5wb2ludHNbM10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3RsUHR4LCBjdGxQdHksIGNweCArIHAuc2hpZnQoKSwgY3B5ICsgcC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCArPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHkgKz0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY21kID0gJ0MnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3B4LCBjcHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2gocC5zaGlmdCgpLCBwLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B4ID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B5ID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3B4LCBjcHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3EnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3B4ICsgcC5zaGlmdCgpLCBjcHkgKyBwLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B4ICs9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSArPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnUSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHggPSBjcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHkgPSBjcHk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2Q21kID0gY2FbY2EubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihwcmV2Q21kLmNvbW1hbmQgPT09ICdRJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0bFB0eCA9IGNweCArIChjcHggLSBwcmV2Q21kLnBvaW50c1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RsUHR5ID0gY3B5ICsgKGNweSAtIHByZXZDbWQucG9pbnRzWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9ICdRJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGN0bFB0eCwgY3RsUHR5LCBjcHgsIGNweSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHggPSBjcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHkgPSBjcHk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2Q21kID0gY2FbY2EubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihwcmV2Q21kLmNvbW1hbmQgPT09ICdRJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0bFB0eCA9IGNweCArIChjcHggLSBwcmV2Q21kLnBvaW50c1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RsUHR5ID0gY3B5ICsgKGNweSAtIHByZXZDbWQucG9pbnRzWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCArPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcHkgKz0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY21kID0gJ1EnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3RsUHR4LCBjdGxQdHksIGNweCwgY3B5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdBJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ4ID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcnkgPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwc2kgPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmYSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEgPSBjcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB5MSA9IGNweTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9ICdBJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IHRoaXMuY29udmVydEVuZHBvaW50VG9DZW50ZXJQYXJhbWV0ZXJpemF0aW9uKHgxLCB5MSwgY3B4LCBjcHksIGZhLCBmcywgcngsIHJ5LCBwc2kpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2EnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcnggPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByeSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBzaSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhID0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnMgPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB4MSA9IGNweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxID0gY3B5OyBjcHggKz0gcC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3B5ICs9IHAuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9ICdBJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IHRoaXMuY29udmVydEVuZHBvaW50VG9DZW50ZXJQYXJhbWV0ZXJpemF0aW9uKHgxLCB5MSwgY3B4LCBjcHksIGZhLCBmcywgcngsIHJ5LCBwc2kpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2EucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQ6IGNtZCB8fCBjLFxuICAgICAgICAgICAgICAgICAgICBwb2ludHM6IHBvaW50cyxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHN0YXJ0WCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHN0YXJ0WVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBwYXRoTGVuZ3RoOiB0aGlzLmNhbGNMZW5ndGgoc3RhcnRYLCBzdGFydFksIGNtZCB8fCBjLCBwb2ludHMpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGMgPT09ICd6JyB8fCBjID09PSAnWicpIHtcbiAgICAgICAgICAgICAgICBjYS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZDogJ3onLFxuICAgICAgICAgICAgICAgICAgICBwb2ludHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBwYXRoTGVuZ3RoOiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2E7XG4gICAgfTtcbiAgICBLaW5ldGljLlBhdGguY2FsY0xlbmd0aCA9IGZ1bmN0aW9uKHgsIHksIGNtZCwgcG9pbnRzKSB7XG4gICAgICAgIHZhciBsZW4sIHAxLCBwMiwgdDtcbiAgICAgICAgdmFyIHBhdGggPSBLaW5ldGljLlBhdGg7XG5cbiAgICAgICAgc3dpdGNoIChjbWQpIHtcbiAgICAgICAgICAgIGNhc2UgJ0wnOlxuICAgICAgICAgICAgICAgIHJldHVybiBwYXRoLmdldExpbmVMZW5ndGgoeCwgeSwgcG9pbnRzWzBdLCBwb2ludHNbMV0pO1xuICAgICAgICAgICAgY2FzZSAnQyc6XG4gICAgICAgICAgICAgICAgLy8gQXBwcm94aW1hdGVzIGJ5IGJyZWFraW5nIGN1cnZlIGludG8gMTAwIGxpbmUgc2VnbWVudHNcbiAgICAgICAgICAgICAgICBsZW4gPSAwLjA7XG4gICAgICAgICAgICAgICAgcDEgPSBwYXRoLmdldFBvaW50T25DdWJpY0JlemllcigwLCB4LCB5LCBwb2ludHNbMF0sIHBvaW50c1sxXSwgcG9pbnRzWzJdLCBwb2ludHNbM10sIHBvaW50c1s0XSwgcG9pbnRzWzVdKTtcbiAgICAgICAgICAgICAgICBmb3IoIHQgPSAwLjAxOyB0IDw9IDE7IHQgKz0gMC4wMSkge1xuICAgICAgICAgICAgICAgICAgICBwMiA9IHBhdGguZ2V0UG9pbnRPbkN1YmljQmV6aWVyKHQsIHgsIHksIHBvaW50c1swXSwgcG9pbnRzWzFdLCBwb2ludHNbMl0sIHBvaW50c1szXSwgcG9pbnRzWzRdLCBwb2ludHNbNV0pO1xuICAgICAgICAgICAgICAgICAgICBsZW4gKz0gcGF0aC5nZXRMaW5lTGVuZ3RoKHAxLngsIHAxLnksIHAyLngsIHAyLnkpO1xuICAgICAgICAgICAgICAgICAgICBwMSA9IHAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbGVuO1xuICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgLy8gQXBwcm94aW1hdGVzIGJ5IGJyZWFraW5nIGN1cnZlIGludG8gMTAwIGxpbmUgc2VnbWVudHNcbiAgICAgICAgICAgICAgICBsZW4gPSAwLjA7XG4gICAgICAgICAgICAgICAgcDEgPSBwYXRoLmdldFBvaW50T25RdWFkcmF0aWNCZXppZXIoMCwgeCwgeSwgcG9pbnRzWzBdLCBwb2ludHNbMV0sIHBvaW50c1syXSwgcG9pbnRzWzNdKTtcbiAgICAgICAgICAgICAgICBmb3IoIHQgPSAwLjAxOyB0IDw9IDE7IHQgKz0gMC4wMSkge1xuICAgICAgICAgICAgICAgICAgICBwMiA9IHBhdGguZ2V0UG9pbnRPblF1YWRyYXRpY0Jlemllcih0LCB4LCB5LCBwb2ludHNbMF0sIHBvaW50c1sxXSwgcG9pbnRzWzJdLCBwb2ludHNbM10pO1xuICAgICAgICAgICAgICAgICAgICBsZW4gKz0gcGF0aC5nZXRMaW5lTGVuZ3RoKHAxLngsIHAxLnksIHAyLngsIHAyLnkpO1xuICAgICAgICAgICAgICAgICAgICBwMSA9IHAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbGVuO1xuICAgICAgICAgICAgY2FzZSAnQSc6XG4gICAgICAgICAgICAgICAgLy8gQXBwcm94aW1hdGVzIGJ5IGJyZWFraW5nIGN1cnZlIGludG8gbGluZSBzZWdtZW50c1xuICAgICAgICAgICAgICAgIGxlbiA9IDAuMDtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBwb2ludHNbNF07XG4gICAgICAgICAgICAgICAgLy8gNCA9IHRoZXRhXG4gICAgICAgICAgICAgICAgdmFyIGRUaGV0YSA9IHBvaW50c1s1XTtcbiAgICAgICAgICAgICAgICAvLyA1ID0gZFRoZXRhXG4gICAgICAgICAgICAgICAgdmFyIGVuZCA9IHBvaW50c1s0XSArIGRUaGV0YTtcbiAgICAgICAgICAgICAgICB2YXIgaW5jID0gTWF0aC5QSSAvIDE4MC4wO1xuICAgICAgICAgICAgICAgIC8vIDEgZGVncmVlIHJlc29sdXRpb25cbiAgICAgICAgICAgICAgICBpZihNYXRoLmFicyhzdGFydCAtIGVuZCkgPCBpbmMpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5jID0gTWF0aC5hYnMoc3RhcnQgLSBlbmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBOb3RlOiBmb3IgcHVycG9zZSBvZiBjYWxjdWxhdGluZyBhcmMgbGVuZ3RoLCBub3QgZ29pbmcgdG8gd29ycnkgYWJvdXQgcm90YXRpbmcgWC1heGlzIGJ5IGFuZ2xlIHBzaVxuICAgICAgICAgICAgICAgIHAxID0gcGF0aC5nZXRQb2ludE9uRWxsaXB0aWNhbEFyYyhwb2ludHNbMF0sIHBvaW50c1sxXSwgcG9pbnRzWzJdLCBwb2ludHNbM10sIHN0YXJ0LCAwKTtcbiAgICAgICAgICAgICAgICBpZihkVGhldGEgPCAwKSB7Ly8gY2xvY2t3aXNlXG4gICAgICAgICAgICAgICAgICAgIGZvciggdCA9IHN0YXJ0IC0gaW5jOyB0ID4gZW5kOyB0IC09IGluYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBwYXRoLmdldFBvaW50T25FbGxpcHRpY2FsQXJjKHBvaW50c1swXSwgcG9pbnRzWzFdLCBwb2ludHNbMl0sIHBvaW50c1szXSwgdCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZW4gKz0gcGF0aC5nZXRMaW5lTGVuZ3RoKHAxLngsIHAxLnksIHAyLngsIHAyLnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSBwMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHsvLyBjb3VudGVyLWNsb2Nrd2lzZVxuICAgICAgICAgICAgICAgICAgICBmb3IoIHQgPSBzdGFydCArIGluYzsgdCA8IGVuZDsgdCArPSBpbmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gcGF0aC5nZXRQb2ludE9uRWxsaXB0aWNhbEFyYyhwb2ludHNbMF0sIHBvaW50c1sxXSwgcG9pbnRzWzJdLCBwb2ludHNbM10sIHQsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVuICs9IHBhdGguZ2V0TGluZUxlbmd0aChwMS54LCBwMS55LCBwMi54LCBwMi55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAxID0gcDI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcDIgPSBwYXRoLmdldFBvaW50T25FbGxpcHRpY2FsQXJjKHBvaW50c1swXSwgcG9pbnRzWzFdLCBwb2ludHNbMl0sIHBvaW50c1szXSwgZW5kLCAwKTtcbiAgICAgICAgICAgICAgICBsZW4gKz0gcGF0aC5nZXRMaW5lTGVuZ3RoKHAxLngsIHAxLnksIHAyLngsIHAyLnkpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgS2luZXRpYy5QYXRoLmNvbnZlcnRFbmRwb2ludFRvQ2VudGVyUGFyYW1ldGVyaXphdGlvbiA9IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCBmYSwgZnMsIHJ4LCByeSwgcHNpRGVnKSB7XG4gICAgICAgIC8vIERlcml2ZWQgZnJvbTogaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL2ltcGxub3RlLmh0bWwjQXJjSW1wbGVtZW50YXRpb25Ob3Rlc1xuICAgICAgICB2YXIgcHNpID0gcHNpRGVnICogKE1hdGguUEkgLyAxODAuMCk7XG4gICAgICAgIHZhciB4cCA9IE1hdGguY29zKHBzaSkgKiAoeDEgLSB4MikgLyAyLjAgKyBNYXRoLnNpbihwc2kpICogKHkxIC0geTIpIC8gMi4wO1xuICAgICAgICB2YXIgeXAgPSAtMSAqIE1hdGguc2luKHBzaSkgKiAoeDEgLSB4MikgLyAyLjAgKyBNYXRoLmNvcyhwc2kpICogKHkxIC0geTIpIC8gMi4wO1xuXG4gICAgICAgIHZhciBsYW1iZGEgPSAoeHAgKiB4cCkgLyAocnggKiByeCkgKyAoeXAgKiB5cCkgLyAocnkgKiByeSk7XG5cbiAgICAgICAgaWYobGFtYmRhID4gMSkge1xuICAgICAgICAgICAgcnggKj0gTWF0aC5zcXJ0KGxhbWJkYSk7XG4gICAgICAgICAgICByeSAqPSBNYXRoLnNxcnQobGFtYmRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmID0gTWF0aC5zcXJ0KCgoKHJ4ICogcngpICogKHJ5ICogcnkpKSAtICgocnggKiByeCkgKiAoeXAgKiB5cCkpIC0gKChyeSAqIHJ5KSAqICh4cCAqIHhwKSkpIC8gKChyeCAqIHJ4KSAqICh5cCAqIHlwKSArIChyeSAqIHJ5KSAqICh4cCAqIHhwKSkpO1xuXG4gICAgICAgIGlmKGZhID09PSBmcykge1xuICAgICAgICAgICAgZiAqPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZihpc05hTihmKSkge1xuICAgICAgICAgICAgZiA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3hwID0gZiAqIHJ4ICogeXAgLyByeTtcbiAgICAgICAgdmFyIGN5cCA9IGYgKiAtcnkgKiB4cCAvIHJ4O1xuXG4gICAgICAgIHZhciBjeCA9ICh4MSArIHgyKSAvIDIuMCArIE1hdGguY29zKHBzaSkgKiBjeHAgLSBNYXRoLnNpbihwc2kpICogY3lwO1xuICAgICAgICB2YXIgY3kgPSAoeTEgKyB5MikgLyAyLjAgKyBNYXRoLnNpbihwc2kpICogY3hwICsgTWF0aC5jb3MocHNpKSAqIGN5cDtcblxuICAgICAgICB2YXIgdk1hZyA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQodlswXSAqIHZbMF0gKyB2WzFdICogdlsxXSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciB2UmF0aW8gPSBmdW5jdGlvbih1LCB2KSB7XG4gICAgICAgICAgICByZXR1cm4gKHVbMF0gKiB2WzBdICsgdVsxXSAqIHZbMV0pIC8gKHZNYWcodSkgKiB2TWFnKHYpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHZBbmdsZSA9IGZ1bmN0aW9uKHUsIHYpIHtcbiAgICAgICAgICAgIHJldHVybiAodVswXSAqIHZbMV0gPCB1WzFdICogdlswXSA/IC0xIDogMSkgKiBNYXRoLmFjb3ModlJhdGlvKHUsIHYpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHRoZXRhID0gdkFuZ2xlKFsxLCAwXSwgWyh4cCAtIGN4cCkgLyByeCwgKHlwIC0gY3lwKSAvIHJ5XSk7XG4gICAgICAgIHZhciB1ID0gWyh4cCAtIGN4cCkgLyByeCwgKHlwIC0gY3lwKSAvIHJ5XTtcbiAgICAgICAgdmFyIHYgPSBbKC0xICogeHAgLSBjeHApIC8gcngsICgtMSAqIHlwIC0gY3lwKSAvIHJ5XTtcbiAgICAgICAgdmFyIGRUaGV0YSA9IHZBbmdsZSh1LCB2KTtcblxuICAgICAgICBpZih2UmF0aW8odSwgdikgPD0gLTEpIHtcbiAgICAgICAgICAgIGRUaGV0YSA9IE1hdGguUEk7XG4gICAgICAgIH1cbiAgICAgICAgaWYodlJhdGlvKHUsIHYpID49IDEpIHtcbiAgICAgICAgICAgIGRUaGV0YSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYoZnMgPT09IDAgJiYgZFRoZXRhID4gMCkge1xuICAgICAgICAgICAgZFRoZXRhID0gZFRoZXRhIC0gMiAqIE1hdGguUEk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoZnMgPT09IDEgJiYgZFRoZXRhIDwgMCkge1xuICAgICAgICAgICAgZFRoZXRhID0gZFRoZXRhICsgMiAqIE1hdGguUEk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtjeCwgY3ksIHJ4LCByeSwgdGhldGEsIGRUaGV0YSwgcHNpLCBmc107XG4gICAgfTtcbiAgICAvLyBhZGQgZ2V0dGVycyBzZXR0ZXJzXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlBhdGgsICdkYXRhJyk7XG5cbiAgICAvKipcbiAgICAgKiBzZXQgU1ZHIHBhdGggZGF0YSBzdHJpbmcuICBUaGlzIG1ldGhvZFxuICAgICAqICBhbHNvIGF1dG9tYXRpY2FsbHkgcGFyc2VzIHRoZSBkYXRhIHN0cmluZ1xuICAgICAqICBpbnRvIGEgZGF0YSBhcnJheS4gIEN1cnJlbnRseSBzdXBwb3J0ZWQgU1ZHIGRhdGE6XG4gICAgICogIE0sIG0sIEwsIGwsIEgsIGgsIFYsIHYsIFEsIHEsIFQsIHQsIEMsIGMsIFMsIHMsIEEsIGEsIFosIHpcbiAgICAgKiBAbmFtZSBzZXREYXRhXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlBhdGgucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFNWRyBwYXRoIGNvbW1hbmQgc3RyaW5nXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBnZXQgU1ZHIHBhdGggZGF0YSBzdHJpbmdcbiAgICAgKiBAbmFtZSBnZXREYXRhXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlBhdGgucHJvdG90eXBlXG4gICAgICovXG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLlBhdGgpO1xufSkoKTtcbjsoZnVuY3Rpb24oKSB7XG4gICAgdmFyIEVNUFRZX1NUUklORyA9ICcnLFxuICAgICAgICAvL0NBTElCUkkgPSAnQ2FsaWJyaScsXG4gICAgICAgIE5PUk1BTCA9ICdub3JtYWwnO1xuXG4gICAgLyoqXG4gICAgICogUGF0aCBjb25zdHJ1Y3Rvci5cbiAgICAgKiBAYXV0aG9yIEphc29uIEZvbGxhc1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICogQGF1Z21lbnRzIEtpbmV0aWMuU2hhcGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZm9udEZhbWlseV0gZGVmYXVsdCBpcyBDYWxpYnJpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZm9udFNpemVdIGRlZmF1bHQgaXMgMTJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5mb250U3R5bGVdIGNhbiBiZSBub3JtYWwsIGJvbGQsIG9yIGl0YWxpYy4gIERlZmF1bHQgaXMgbm9ybWFsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZm9udFZhcmlhbnRdIGNhbiBiZSBub3JtYWwgb3Igc21hbGwtY2Fwcy4gIERlZmF1bHQgaXMgbm9ybWFsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbmZpZy50ZXh0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbmZpZy5kYXRhIFNWRyBkYXRhIHN0cmluZ1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxdIGZpbGwgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsUmVkXSBzZXQgZmlsbCByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEdyZWVuXSBzZXQgZmlsbCBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQmx1ZV0gc2V0IGZpbGwgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQWxwaGFdIHNldCBmaWxsIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbWFnZX0gW2NvbmZpZy5maWxsUGF0dGVybkltYWdlXSBmaWxsIHBhdHRlcm4gaW1hZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WV0gXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlXSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuUm90YXRpb25dXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUGF0dGVyblJlcGVhdF0gY2FuIGJlIFwicmVwZWF0XCIsIFwicmVwZWF0LXhcIiwgXCJyZXBlYXQteVwiLCBvciBcIm5vLXJlcGVhdFwiLiAgVGhlIGRlZmF1bHQgaXMgXCJuby1yZXBlYXRcIlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRZXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmZpbGxFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGZpbGwuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUHJpb3JpdHldIGNhbiBiZSBjb2xvciwgbGluZWFyLWdyYWRpZW50LCByYWRpYWwtZ3JhaWRlbnQsIG9yIHBhdHRlcm4uICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBjb2xvci4gIFRoZSBmaWxsUHJpb3JpdHkgcHJvcGVydHkgbWFrZXMgaXQgcmVhbGx5IGVhc3kgdG8gdG9nZ2xlIGJldHdlZW4gZGlmZmVyZW50IGZpbGwgdHlwZXMuICBGb3IgZXhhbXBsZSwgaWYgeW91IHdhbnQgdG8gdG9nZ2xlIGJldHdlZW4gYSBmaWxsIGNvbG9yIHN0eWxlIGFuZCBhIGZpbGwgcGF0dGVybiBzdHlsZSwgc2ltcGx5IHNldCB0aGUgZmlsbCBwcm9wZXJ0eSBhbmQgdGhlIGZpbGxQYXR0ZXJuIHByb3BlcnRpZXMsIGFuZCB0aGVuIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ2NvbG9yJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIGEgY29sb3IgZmlsbCwgb3IgdXNlIHNldEZpbGxQcmlvcml0eSgncGF0dGVybicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCB0aGUgcGF0dGVybiBmaWxsIGNvbmZpZ3VyYXRpb25cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnN0cm9rZV0gc3Ryb2tlIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlUmVkXSBzZXQgc3Ryb2tlIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VHcmVlbl0gc2V0IHN0cm9rZSBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VCbHVlXSBzZXQgc3Ryb2tlIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQWxwaGFdIHNldCBzdHJva2UgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zdHJva2VXaWR0aF0gc3Ryb2tlIHdpZHRoXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlU2NhbGVFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgc3Ryb2tlIHNjYWxlLiAgVGhlIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc3Ryb2tlLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUpvaW5dIGNhbiBiZSBtaXRlciwgcm91bmQsIG9yIGJldmVsLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBtaXRlclxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUNhcF0gY2FuIGJlIGJ1dHQsIHJvdW5kLCBvciBzcWFyZS4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgYnV0dFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc2hhZG93Q29sb3JdXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93UmVkXSBzZXQgc2hhZG93IGNvbG9yIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dHcmVlbl0gc2V0IHNoYWRvdyBjb2xvciBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dCbHVlXSBzZXQgc2hhZG93IGNvbG9yIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93QWxwaGFdIHNldCBzaGFkb3cgY29sb3IgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dCbHVyXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2hhZG93T2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPcGFjaXR5XSBzaGFkb3cgb3BhY2l0eS4gIENhbiBiZSBhbnkgcmVhbCBudW1iZXJcclxuICAgICAqICBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zaGFkb3dFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHNoYWRvdy4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZGFzaF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kYXNoRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBkYXNoQXJyYXkuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmxpc3RlbmluZ10gd2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub3BhY2l0eV0gZGV0ZXJtaW5lcyBub2RlIG9wYWNpdHkuICBDYW4gYmUgYW55IG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNjYWxlXSBzZXQgc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWF0gc2V0IHNjYWxlIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWV0gc2V0IHNjYWxlIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnJvdGF0aW9uXSByb3RhdGlvbiBpbiBkZWdyZWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5vZmZzZXRdIG9mZnNldCBmcm9tIGNlbnRlciBwb2ludCBhbmQgcm90YXRpb24gcG9pbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFhdIHNldCBvZmZzZXQgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WV0gc2V0IG9mZnNldCB5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZHJhZ2dhYmxlXSBtYWtlcyB0aGUgbm9kZSBkcmFnZ2FibGUuICBXaGVuIHN0YWdlcyBhcmUgZHJhZ2dhYmxlLCB5b3UgY2FuIGRyYWcgYW5kIGRyb3BcclxuICAgICAqICB0aGUgZW50aXJlIHN0YWdlIGJ5IGRyYWdnaW5nIGFueSBwb3J0aW9uIG9mIHRoZSBzdGFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZHJhZ0Rpc3RhbmNlXVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbmZpZy5kcmFnQm91bmRGdW5jXVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHRleHRwYXRoID0gbmV3IEtpbmV0aWMuVGV4dFBhdGgoe1xuICAgICAqICAgeDogMTAwLFxuICAgICAqICAgeTogNTAsXG4gICAgICogICBmaWxsOiAnIzMzMycsXG4gICAgICogICBmb250U2l6ZTogJzI0JyxcbiAgICAgKiAgIGZvbnRGYW1pbHk6ICdBcmlhbCcsXG4gICAgICogICB0ZXh0OiAnQWxsIHRoZSB3b3JsZFxcJ3MgYSBzdGFnZSwgYW5kIGFsbCB0aGUgbWVuIGFuZCB3b21lbiBtZXJlbHkgcGxheWVycy4nLFxuICAgICAqICAgZGF0YTogJ00xMCwxMCBDMCwwIDEwLDE1MCAxMDAsMTAwIFMzMDAsMTUwIDQwMCw1MCdcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBLaW5ldGljLlRleHRQYXRoID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHRoaXMuX19faW5pdChjb25maWcpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBfZmlsbEZ1bmMoY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KHRoaXMucGFydGlhbFRleHQsIDAsIDApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfc3Ryb2tlRnVuYyhjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlVGV4dCh0aGlzLnBhcnRpYWxUZXh0LCAwLCAwKTtcbiAgICB9XG5cbiAgICBLaW5ldGljLlRleHRQYXRoLnByb3RvdHlwZSA9IHtcbiAgICAgICAgX19faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLmR1bW15Q2FudmFzID0gS2luZXRpYy5VdGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YUFycmF5ID0gW107XG5cbiAgICAgICAgICAgIC8vIGNhbGwgc3VwZXIgY29uc3RydWN0b3JcbiAgICAgICAgICAgIEtpbmV0aWMuU2hhcGUuY2FsbCh0aGlzLCBjb25maWcpO1xuXG4gICAgICAgICAgICAvLyBvdmVycmlkZXNcbiAgICAgICAgICAgIC8vIFRPRE86IHNob3VsZG4ndCB0aGlzIGJlIG9uIHRoZSBwcm90b3R5cGU/XG4gICAgICAgICAgICB0aGlzLl9maWxsRnVuYyA9IF9maWxsRnVuYztcbiAgICAgICAgICAgIHRoaXMuX3N0cm9rZUZ1bmMgPSBfc3Ryb2tlRnVuYztcbiAgICAgICAgICAgIHRoaXMuX2ZpbGxGdW5jSGl0ID0gX2ZpbGxGdW5jO1xuICAgICAgICAgICAgdGhpcy5fc3Ryb2tlRnVuY0hpdCA9IF9zdHJva2VGdW5jO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9ICdUZXh0UGF0aCc7XG5cbiAgICAgICAgICAgIHRoaXMuZGF0YUFycmF5ID0gS2luZXRpYy5QYXRoLnBhcnNlUGF0aERhdGEodGhpcy5hdHRycy5kYXRhKTtcbiAgICAgICAgICAgIHRoaXMub24oJ2RhdGFDaGFuZ2Uua2luZXRpYycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoYXQuZGF0YUFycmF5ID0gS2luZXRpYy5QYXRoLnBhcnNlUGF0aERhdGEodGhpcy5hdHRycy5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgdGV4dCBkYXRhIGZvciBjZXJ0YWluIGF0dHIgY2hhbmdlc1xuICAgICAgICAgICAgdGhpcy5vbigndGV4dENoYW5nZS5raW5ldGljIHRleHRTdHJva2Uua2luZXRpYyB0ZXh0U3Ryb2tlV2lkdGgua2luZXRpYycsIHRoYXQuX3NldFRleHREYXRhKTtcbiAgICAgICAgICAgIHRoYXQuX3NldFRleHREYXRhKCk7XG4gICAgICAgICAgICB0aGlzLnNjZW5lRnVuYyh0aGlzLl9zY2VuZUZ1bmMpO1xuICAgICAgICB9LFxuICAgICAgICBfc2NlbmVGdW5jOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICBjb250ZXh0LnNldEF0dHIoJ2ZvbnQnLCB0aGlzLl9nZXRDb250ZXh0Rm9udCgpKTtcbiAgICAgICAgICAgIGNvbnRleHQuc2V0QXR0cigndGV4dEJhc2VsaW5lJywgJ21pZGRsZScpO1xuICAgICAgICAgICAgY29udGV4dC5zZXRBdHRyKCd0ZXh0QWxpZ24nLCAnbGVmdCcpO1xuICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XG5cbiAgICAgICAgICAgIHZhciBnbHlwaEluZm8gPSB0aGlzLmdseXBoSW5mbztcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBnbHlwaEluZm8ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcblxuICAgICAgICAgICAgICAgIHZhciBwMCA9IGdseXBoSW5mb1tpXS5wMDtcblxuICAgICAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKHAwLngsIHAwLnkpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQucm90YXRlKGdseXBoSW5mb1tpXS5yb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJ0aWFsVGV4dCA9IGdseXBoSW5mb1tpXS50ZXh0O1xuXG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3Ryb2tlU2hhcGUodGhpcyk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG5cbiAgICAgICAgICAgICAgICAvLy8vIFRvIGFzc2lzdCB3aXRoIGRlYnVnZ2luZyB2aXN1YWxseSwgdW5jb21tZW50IGZvbGxvd2luZ1xuICAgICAgICAgICAgICAgIC8vIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgLy8gaWYgKGkgJSAyKVxuICAgICAgICAgICAgICAgIC8vIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnY3lhbic7XG4gICAgICAgICAgICAgICAgLy8gZWxzZVxuICAgICAgICAgICAgICAgIC8vIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnZ3JlZW4nO1xuICAgICAgICAgICAgICAgIC8vIHZhciBwMSA9IGdseXBoSW5mb1tpXS5wMTtcbiAgICAgICAgICAgICAgICAvLyBjb250ZXh0Lm1vdmVUbyhwMC54LCBwMC55KTtcbiAgICAgICAgICAgICAgICAvLyBjb250ZXh0LmxpbmVUbyhwMS54LCBwMS55KTtcbiAgICAgICAgICAgICAgICAvLyBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgdGV4dCB3aWR0aCBpbiBwaXhlbHNcbiAgICAgICAgICogQG1ldGhvZFxuICAgICAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0UGF0aC5wcm90b3R5cGVcbiAgICAgICAgICovXG4gICAgICAgIGdldFRleHRXaWR0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0V2lkdGg7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgdGV4dCBoZWlnaHQgaW4gcGl4ZWxzXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dFBhdGgucHJvdG90eXBlXG4gICAgICAgICAqL1xuICAgICAgICBnZXRUZXh0SGVpZ2h0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHRIZWlnaHQ7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXQgdGV4dFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHRQYXRoLnByb3RvdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dFxuICAgICAgICAgKi9cbiAgICAgICAgc2V0VGV4dDogZnVuY3Rpb24odGV4dCkge1xuICAgICAgICAgICAgS2luZXRpYy5UZXh0LnByb3RvdHlwZS5zZXRUZXh0LmNhbGwodGhpcywgdGV4dCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRUZXh0U2l6ZTogZnVuY3Rpb24odGV4dCkge1xuICAgICAgICAgICAgdmFyIGR1bW15Q2FudmFzID0gdGhpcy5kdW1teUNhbnZhcztcbiAgICAgICAgICAgIHZhciBfY29udGV4dCA9IGR1bW15Q2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAgICAgICAgIF9jb250ZXh0LnNhdmUoKTtcblxuICAgICAgICAgICAgX2NvbnRleHQuZm9udCA9IHRoaXMuX2dldENvbnRleHRGb250KCk7XG4gICAgICAgICAgICB2YXIgbWV0cmljcyA9IF9jb250ZXh0Lm1lYXN1cmVUZXh0KHRleHQpO1xuXG4gICAgICAgICAgICBfY29udGV4dC5yZXN0b3JlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IG1ldHJpY3Mud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBwYXJzZUludCh0aGlzLmF0dHJzLmZvbnRTaXplLCAxMClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIF9zZXRUZXh0RGF0YTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciBzaXplID0gdGhpcy5fZ2V0VGV4dFNpemUodGhpcy5hdHRycy50ZXh0KTtcbiAgICAgICAgICAgIHRoaXMudGV4dFdpZHRoID0gc2l6ZS53aWR0aDtcbiAgICAgICAgICAgIHRoaXMudGV4dEhlaWdodCA9IHNpemUuaGVpZ2h0O1xuXG4gICAgICAgICAgICB0aGlzLmdseXBoSW5mbyA9IFtdO1xuXG4gICAgICAgICAgICB2YXIgY2hhckFyciA9IHRoaXMuYXR0cnMudGV4dC5zcGxpdCgnJyk7XG5cbiAgICAgICAgICAgIHZhciBwMCwgcDEsIHBhdGhDbWQ7XG5cbiAgICAgICAgICAgIHZhciBwSW5kZXggPSAtMTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50VCA9IDA7XG5cbiAgICAgICAgICAgIHZhciBnZXROZXh0UGF0aFNlZ21lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VCA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIHBhdGhEYXRhID0gdGhhdC5kYXRhQXJyYXk7XG5cbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSBwSW5kZXggKyAxOyBpIDwgcGF0aERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYocGF0aERhdGFbaV0ucGF0aExlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBJbmRleCA9IGk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXRoRGF0YVtpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHBhdGhEYXRhW2ldLmNvbW1hbmQgPT0gJ00nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwMCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBwYXRoRGF0YVtpXS5wb2ludHNbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogcGF0aERhdGFbaV0ucG9pbnRzWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBmaW5kU2VnbWVudFRvRml0Q2hhcmFjdGVyID0gZnVuY3Rpb24oYykge1xuXG4gICAgICAgICAgICAgICAgdmFyIGdseXBoV2lkdGggPSB0aGF0Ll9nZXRUZXh0U2l6ZShjKS53aWR0aDtcblxuICAgICAgICAgICAgICAgIHZhciBjdXJyTGVuID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgYXR0ZW1wdHMgPSAwO1xuXG4gICAgICAgICAgICAgICAgcDEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgd2hpbGUoTWF0aC5hYnMoZ2x5cGhXaWR0aCAtIGN1cnJMZW4pIC8gZ2x5cGhXaWR0aCA+IDAuMDEgJiYgYXR0ZW1wdHMgPCAyNSkge1xuICAgICAgICAgICAgICAgICAgICBhdHRlbXB0cysrO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VtdWxhdGl2ZVBhdGhMZW5ndGggPSBjdXJyTGVuO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZShwYXRoQ21kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhDbWQgPSBnZXROZXh0UGF0aFNlZ21lbnQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYocGF0aENtZCAmJiBjdW11bGF0aXZlUGF0aExlbmd0aCArIHBhdGhDbWQucGF0aExlbmd0aCA8IGdseXBoV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdW11bGF0aXZlUGF0aExlbmd0aCArPSBwYXRoQ21kLnBhdGhMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aENtZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmKHBhdGhDbWQgPT09IHt9IHx8IHAwID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgbmVlZE5ld1NlZ21lbnQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHBhdGhDbWQuY29tbWFuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnTCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoS2luZXRpYy5QYXRoLmdldExpbmVMZW5ndGgocDAueCwgcDAueSwgcGF0aENtZC5wb2ludHNbMF0sIHBhdGhDbWQucG9pbnRzWzFdKSA+IGdseXBoV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSBLaW5ldGljLlBhdGguZ2V0UG9pbnRPbkxpbmUoZ2x5cGhXaWR0aCwgcDAueCwgcDAueSwgcGF0aENtZC5wb2ludHNbMF0sIHBhdGhDbWQucG9pbnRzWzFdLCBwMC54LCBwMC55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhDbWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQSc6XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBwYXRoQ21kLnBvaW50c1s0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA0ID0gdGhldGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZFRoZXRhID0gcGF0aENtZC5wb2ludHNbNV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gNSA9IGRUaGV0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmQgPSBwYXRoQ21kLnBvaW50c1s0XSArIGRUaGV0YTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnRUID09PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFQgPSBzdGFydCArIDAuMDAwMDAwMDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEp1c3QgaW4gY2FzZSBzdGFydCBpcyAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihnbHlwaFdpZHRoID4gY3Vyckxlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VCArPSAoTWF0aC5QSSAvIDE4MC4wKSAqIGRUaGV0YSAvIE1hdGguYWJzKGRUaGV0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VCAtPSBNYXRoLlBJIC8gMzYwLjAgKiBkVGhldGEgLyBNYXRoLmFicyhkVGhldGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWRpdCBmb3IgYnVnIGZpeDogQHRoZXJ0aCBodHRwczovL2dpdGh1Yi5jb20vZXJpY2Ryb3dlbGwvS2luZXRpY0pTL2lzc3Vlcy8yNDlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPbGQgY29kZSBmYWlsZWQgdG8gcmVuZGVyIHRleHQgYWxvbmcgYXJjIG9mIHRoaXMgcGF0aDogXCJNIDUwIDUwIGEgMTUwIDUwIDAgMCAxIDI1MCA1MCBsIDUwIDBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRUaGV0YSA8IDAgJiYgY3VycmVudFQgPCBlbmQgfHwgZFRoZXRhID49IDAgJiYgY3VycmVudFQgPiBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFQgPSBlbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZWROZXdTZWdtZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSBLaW5ldGljLlBhdGguZ2V0UG9pbnRPbkVsbGlwdGljYWxBcmMocGF0aENtZC5wb2ludHNbMF0sIHBhdGhDbWQucG9pbnRzWzFdLCBwYXRoQ21kLnBvaW50c1syXSwgcGF0aENtZC5wb2ludHNbM10sIGN1cnJlbnRULCBwYXRoQ21kLnBvaW50c1s2XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdDJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjdXJyZW50VCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihnbHlwaFdpZHRoID4gcGF0aENtZC5wYXRoTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VCA9IDAuMDAwMDAwMDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VCA9IGdseXBoV2lkdGggLyBwYXRoQ21kLnBhdGhMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihnbHlwaFdpZHRoID4gY3Vyckxlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VCArPSAoZ2x5cGhXaWR0aCAtIGN1cnJMZW4pIC8gcGF0aENtZC5wYXRoTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFQgLT0gKGN1cnJMZW4gLSBnbHlwaFdpZHRoKSAvIHBhdGhDbWQucGF0aExlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjdXJyZW50VCA+IDEuMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VCA9IDEuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVlZE5ld1NlZ21lbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMSA9IEtpbmV0aWMuUGF0aC5nZXRQb2ludE9uQ3ViaWNCZXppZXIoY3VycmVudFQsIHBhdGhDbWQuc3RhcnQueCwgcGF0aENtZC5zdGFydC55LCBwYXRoQ21kLnBvaW50c1swXSwgcGF0aENtZC5wb2ludHNbMV0sIHBhdGhDbWQucG9pbnRzWzJdLCBwYXRoQ21kLnBvaW50c1szXSwgcGF0aENtZC5wb2ludHNbNF0sIHBhdGhDbWQucG9pbnRzWzVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnRUID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUID0gZ2x5cGhXaWR0aCAvIHBhdGhDbWQucGF0aExlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihnbHlwaFdpZHRoID4gY3Vyckxlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VCArPSAoZ2x5cGhXaWR0aCAtIGN1cnJMZW4pIC8gcGF0aENtZC5wYXRoTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFQgLT0gKGN1cnJMZW4gLSBnbHlwaFdpZHRoKSAvIHBhdGhDbWQucGF0aExlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjdXJyZW50VCA+IDEuMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VCA9IDEuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVlZE5ld1NlZ21lbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMSA9IEtpbmV0aWMuUGF0aC5nZXRQb2ludE9uUXVhZHJhdGljQmV6aWVyKGN1cnJlbnRULCBwYXRoQ21kLnN0YXJ0LngsIHBhdGhDbWQuc3RhcnQueSwgcGF0aENtZC5wb2ludHNbMF0sIHBhdGhDbWQucG9pbnRzWzFdLCBwYXRoQ21kLnBvaW50c1syXSwgcGF0aENtZC5wb2ludHNbM10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZihwMSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyTGVuID0gS2luZXRpYy5QYXRoLmdldExpbmVMZW5ndGgocDAueCwgcDAueSwgcDEueCwgcDEueSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZihuZWVkTmV3U2VnbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmVlZE5ld1NlZ21lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhDbWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGNoYXJBcnIubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgICAgIC8vIEZpbmQgcDEgc3VjaCB0aGF0IGxpbmUgc2VnbWVudCBiZXR3ZWVuIHAwIGFuZCBwMSBpcyBhcHByb3guIHdpZHRoIG9mIGdseXBoXG4gICAgICAgICAgICAgICAgZmluZFNlZ21lbnRUb0ZpdENoYXJhY3RlcihjaGFyQXJyW2ldKTtcblxuICAgICAgICAgICAgICAgIGlmKHAwID09PSB1bmRlZmluZWQgfHwgcDEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBLaW5ldGljLlBhdGguZ2V0TGluZUxlbmd0aChwMC54LCBwMC55LCBwMS54LCBwMS55KTtcblxuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFNpbmNlIGdseXBocyBhcmUgcmVuZGVyZWQgb25lIGF0IGEgdGltZSwgYW55IGtlcm5pbmcgcGFpciBkYXRhIGJ1aWx0IGludG8gdGhlIGZvbnQgd2lsbCBub3QgYmUgdXNlZC5cbiAgICAgICAgICAgICAgICAvLyBDYW4gZm9yZXNlZSBoYXZpbmcgYSByb3VnaCBwYWlyIHRhYmxlIGJ1aWx0IGluIHRoYXQgdGhlIGRldmVsb3BlciBjYW4gb3ZlcnJpZGUgYXMgbmVlZGVkLlxuXG4gICAgICAgICAgICAgICAgdmFyIGtlcm4gPSAwO1xuICAgICAgICAgICAgICAgIC8vIHBsYWNlaG9sZGVyIGZvciBmdXR1cmUgaW1wbGVtZW50YXRpb25cblxuICAgICAgICAgICAgICAgIHZhciBtaWRwb2ludCA9IEtpbmV0aWMuUGF0aC5nZXRQb2ludE9uTGluZShrZXJuICsgd2lkdGggLyAyLjAsIHAwLngsIHAwLnksIHAxLngsIHAxLnkpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJvdGF0aW9uID0gTWF0aC5hdGFuMigocDEueSAtIHAwLnkpLCAocDEueCAtIHAwLngpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmdseXBoSW5mby5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3NlWDogbWlkcG9pbnQueCxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3NlWTogbWlkcG9pbnQueSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogY2hhckFycltpXSxcbiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IHJvdGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBwMDogcDAsXG4gICAgICAgICAgICAgICAgICAgIHAxOiBwMVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHAwID0gcDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gbWFwIFRleHRQYXRoIG1ldGhvZHMgdG8gVGV4dFxuICAgIEtpbmV0aWMuVGV4dFBhdGgucHJvdG90eXBlLl9nZXRDb250ZXh0Rm9udCA9IEtpbmV0aWMuVGV4dC5wcm90b3R5cGUuX2dldENvbnRleHRGb250O1xuXG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLlRleHRQYXRoLCBLaW5ldGljLlNoYXBlKTtcblxuICAgIC8vIGFkZCBzZXR0ZXJzIGFuZCBnZXR0ZXJzXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlRleHRQYXRoLCAnZm9udEZhbWlseScsICdBcmlhbCcpO1xuXG4gICAgLyoqXG4gICAgICogc2V0IGZvbnQgZmFtaWx5XG4gICAgICogQG5hbWUgc2V0Rm9udEZhbWlseVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0UGF0aC5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZm9udEZhbWlseVxuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAqIGdldCBmb250IGZhbWlseVxuICAgICAqIEBuYW1lIGdldEZvbnRGYW1pbHlcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dFBhdGgucHJvdG90eXBlXG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuVGV4dFBhdGgsICdmb250U2l6ZScsIDEyKTtcblxuICAgIC8qKlxuICAgICAqIHNldCBmb250IHNpemVcbiAgICAgKiBAbmFtZSBzZXRGb250U2l6ZVxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0UGF0aC5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge2ludH0gZm9udFNpemVcbiAgICAgKi9cblxuICAgICAvKipcbiAgICAgKiBnZXQgZm9udCBzaXplXG4gICAgICogQG5hbWUgZ2V0Rm9udFNpemVcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dFBhdGgucHJvdG90eXBlXG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuVGV4dFBhdGgsICdmb250U3R5bGUnLCBOT1JNQUwpO1xuXG4gICAgLyoqXG4gICAgICogc2V0IGZvbnQgc3R5bGUuICBDYW4gYmUgJ25vcm1hbCcsICdpdGFsaWMnLCBvciAnYm9sZCcuICAnbm9ybWFsJyBpcyB0aGUgZGVmYXVsdC5cbiAgICAgKiBAbmFtZSBzZXRGb250U3R5bGVcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dFBhdGgucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZvbnRTdHlsZVxuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAqIGdldCBmb250IHN0eWxlXG4gICAgICogQG5hbWUgZ2V0Rm9udFN0eWxlXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRleHRQYXRoLnByb3RvdHlwZVxuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlRleHRQYXRoLCAnZm9udFZhcmlhbnQnLCBOT1JNQUwpO1xuXG4gICAgLyoqXG4gICAgICogc2V0IGZvbnQgdmFyaWFudC4gIENhbiBiZSAnbm9ybWFsJyBvciAnc21hbGwtY2FwcycuICAnbm9ybWFsJyBpcyB0aGUgZGVmYXVsdC5cbiAgICAgKiBAbmFtZSBzZXRGb250VmFyaWFudFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0UGF0aC5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZm9udFZhcmlhbnRcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBnZXQgZm9udCB2YXJpYW50XG4gICAgICogQG5hbWUgZ2V0Rm9udFZhcmlhbnRcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGV4dFBhdGgucHJvdG90eXBlXG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyKEtpbmV0aWMuVGV4dFBhdGgsICd0ZXh0JywgRU1QVFlfU1RSSU5HKTtcblxuICAgIC8qKlxuICAgICAqIGdldCB0ZXh0XG4gICAgICogQG5hbWUgZ2V0VGV4dFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UZXh0UGF0aC5wcm90b3R5cGVcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuVGV4dFBhdGgpO1xufSkoKTtcbjsoZnVuY3Rpb24oKSB7XG4gICAgLyoqXG4gICAgICogUmVndWxhclBvbHlnb24gY29uc3RydWN0b3IuJm5ic3A7IEV4YW1wbGVzIGluY2x1ZGUgdHJpYW5nbGVzLCBzcXVhcmVzLCBwZW50YWdvbnMsIGhleGFnb25zLCBldGMuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgKiBAYXVnbWVudHMgS2luZXRpYy5TaGFwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29uZmlnLnNpZGVzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbmZpZy5yYWRpdXNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsXSBmaWxsIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbFJlZF0gc2V0IGZpbGwgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxHcmVlbl0gc2V0IGZpbGwgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEJsdWVdIHNldCBmaWxsIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEFscGhhXSBzZXQgZmlsbCBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW1hZ2V9IFtjb25maWcuZmlsbFBhdHRlcm5JbWFnZV0gZmlsbCBwYXR0ZXJuIGltYWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFldIFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZV0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblJvdGF0aW9uXVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFBhdHRlcm5SZXBlYXRdIGNhbiBiZSBcInJlcGVhdFwiLCBcInJlcGVhdC14XCIsIFwicmVwZWF0LXlcIiwgb3IgXCJuby1yZXBlYXRcIi4gIFRoZSBkZWZhdWx0IGlzIFwibm8tcmVwZWF0XCJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WV0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5maWxsRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBmaWxsLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFByaW9yaXR5XSBjYW4gYmUgY29sb3IsIGxpbmVhci1ncmFkaWVudCwgcmFkaWFsLWdyYWlkZW50LCBvciBwYXR0ZXJuLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgY29sb3IuICBUaGUgZmlsbFByaW9yaXR5IHByb3BlcnR5IG1ha2VzIGl0IHJlYWxseSBlYXN5IHRvIHRvZ2dsZSBiZXR3ZWVuIGRpZmZlcmVudCBmaWxsIHR5cGVzLiAgRm9yIGV4YW1wbGUsIGlmIHlvdSB3YW50IHRvIHRvZ2dsZSBiZXR3ZWVuIGEgZmlsbCBjb2xvciBzdHlsZSBhbmQgYSBmaWxsIHBhdHRlcm4gc3R5bGUsIHNpbXBseSBzZXQgdGhlIGZpbGwgcHJvcGVydHkgYW5kIHRoZSBmaWxsUGF0dGVybiBwcm9wZXJ0aWVzLCBhbmQgdGhlbiB1c2Ugc2V0RmlsbFByaW9yaXR5KCdjb2xvcicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCBhIGNvbG9yIGZpbGwsIG9yIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ3BhdHRlcm4nKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggdGhlIHBhdHRlcm4gZmlsbCBjb25maWd1cmF0aW9uXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zdHJva2VdIHN0cm9rZSBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZVJlZF0gc2V0IHN0cm9rZSByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlR3JlZW5dIHNldCBzdHJva2UgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQmx1ZV0gc2V0IHN0cm9rZSBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUFscGhhXSBzZXQgc3Ryb2tlIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc3Ryb2tlV2lkdGhdIHN0cm9rZSB3aWR0aFxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZVNjYWxlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHN0cm9rZSBzY2FsZS4gIFRoZSBkZWZhdWx0IGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHN0cm9rZS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVKb2luXSBjYW4gYmUgbWl0ZXIsIHJvdW5kLCBvciBiZXZlbC4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgbWl0ZXJcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVDYXBdIGNhbiBiZSBidXR0LCByb3VuZCwgb3Igc3FhcmUuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIGJ1dHRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnNoYWRvd0NvbG9yXVxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd1JlZF0gc2V0IHNoYWRvdyBjb2xvciByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93R3JlZW5dIHNldCBzaGFkb3cgY29sb3IgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93Qmx1ZV0gc2V0IHNoYWRvdyBjb2xvciBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0FscGhhXSBzZXQgc2hhZG93IGNvbG9yIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93Qmx1cl1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNoYWRvd09mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T3BhY2l0eV0gc2hhZG93IG9wYWNpdHkuICBDYW4gYmUgYW55IHJlYWwgbnVtYmVyXHJcbiAgICAgKiAgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc2hhZG93RW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzaGFkb3cuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmRhc2hdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZGFzaEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZGFzaEFycmF5LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcudmlzaWJsZV1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5saXN0ZW5pbmddIHdoZXRoZXIgb3Igbm90IHRoZSBub2RlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5pZF0gdW5pcXVlIGlkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5uYW1lXSBub24tdW5pcXVlIG5hbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9wYWNpdHldIGRldGVybWluZXMgbm9kZSBvcGFjaXR5LiAgQ2FuIGJlIGFueSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zY2FsZV0gc2V0IHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVhdIHNldCBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVldIHNldCBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5yb3RhdGlvbl0gcm90YXRpb24gaW4gZGVncmVlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcub2Zmc2V0XSBvZmZzZXQgZnJvbSBjZW50ZXIgcG9pbnQgYW5kIHJvdGF0aW9uIHBvaW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRYXSBzZXQgb2Zmc2V0IHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFldIHNldCBvZmZzZXQgeVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRyYWdnYWJsZV0gbWFrZXMgdGhlIG5vZGUgZHJhZ2dhYmxlLiAgV2hlbiBzdGFnZXMgYXJlIGRyYWdnYWJsZSwgeW91IGNhbiBkcmFnIGFuZCBkcm9wXHJcbiAgICAgKiAgdGhlIGVudGlyZSBzdGFnZSBieSBkcmFnZ2luZyBhbnkgcG9ydGlvbiBvZiB0aGUgc3RhZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmRyYWdEaXN0YW5jZV1cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb25maWcuZHJhZ0JvdW5kRnVuY11cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBoZXhhZ29uID0gbmV3IEtpbmV0aWMuUmVndWxhclBvbHlnb24oe1xuICAgICAqICAgeDogMTAwLFxuICAgICAqICAgeTogMjAwLFxuICAgICAqICAgc2lkZXM6IDYsXG4gICAgICogICByYWRpdXM6IDcwLFxuICAgICAqICAgZmlsbDogJ3JlZCcsXG4gICAgICogICBzdHJva2U6ICdibGFjaycsXG4gICAgICogICBzdHJva2VXaWR0aDogNFxuICAgICAqIH0pO1xuICAgICAqL1xuICAgIEtpbmV0aWMuUmVndWxhclBvbHlnb24gPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdGhpcy5fX19pbml0KGNvbmZpZyk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuUmVndWxhclBvbHlnb24ucHJvdG90eXBlID0ge1xuICAgICAgICBfX19pbml0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIC8vIGNhbGwgc3VwZXIgY29uc3RydWN0b3JcbiAgICAgICAgICAgIEtpbmV0aWMuU2hhcGUuY2FsbCh0aGlzLCBjb25maWcpO1xuICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSAnUmVndWxhclBvbHlnb24nO1xuICAgICAgICAgICAgdGhpcy5zY2VuZUZ1bmModGhpcy5fc2NlbmVGdW5jKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NjZW5lRnVuYzogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIHNpZGVzID0gdGhpcy5hdHRycy5zaWRlcyxcbiAgICAgICAgICAgICAgICByYWRpdXMgPSB0aGlzLmF0dHJzLnJhZGl1cyxcbiAgICAgICAgICAgICAgICBuLCB4LCB5O1xuXG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oMCwgMCAtIHJhZGl1cyk7XG5cbiAgICAgICAgICAgIGZvcihuID0gMTsgbiA8IHNpZGVzOyBuKyspIHtcbiAgICAgICAgICAgICAgICB4ID0gcmFkaXVzICogTWF0aC5zaW4obiAqIDIgKiBNYXRoLlBJIC8gc2lkZXMpO1xuICAgICAgICAgICAgICAgIHkgPSAtMSAqIHJhZGl1cyAqIE1hdGguY29zKG4gKiAyICogTWF0aC5QSSAvIHNpZGVzKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHJva2VTaGFwZSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgS2luZXRpYy5VdGlsLmV4dGVuZChLaW5ldGljLlJlZ3VsYXJQb2x5Z29uLCBLaW5ldGljLlNoYXBlKTtcblxuICAgIC8vIGFkZCBnZXR0ZXJzIHNldHRlcnNcbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuUmVndWxhclBvbHlnb24sICdyYWRpdXMnLCAwKTtcblxuICAgIC8qKlxuICAgICAqIHNldCByYWRpdXNcbiAgICAgKiBAbmFtZSBzZXRSYWRpdXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuUmVndWxhclBvbHlnb24ucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZGl1c1xuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAqIGdldCByYWRpdXNcbiAgICAgKiBAbmFtZSBnZXRSYWRpdXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuUmVndWxhclBvbHlnb24ucHJvdG90eXBlXG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuUmVndWxhclBvbHlnb24sICdzaWRlcycsIDApO1xuXG4gICAgLyoqXG4gICAgICogc2V0IG51bWJlciBvZiBzaWRlc1xuICAgICAqIEBuYW1lIHNldFNpZGVzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlJlZ3VsYXJQb2x5Z29uLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7aW50fSBzaWRlc1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogZ2V0IG51bWJlciBvZiBzaWRlc1xuICAgICAqIEBuYW1lIGdldFNpZGVzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlJlZ3VsYXJQb2x5Z29uLnByb3RvdHlwZVxuICAgICAqL1xuXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5SZWd1bGFyUG9seWdvbik7XG59KSgpO1xuOyhmdW5jdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBTdGFyIGNvbnN0cnVjdG9yXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWNcbiAgICAgKiBAYXVnbWVudHMgS2luZXRpYy5TaGFwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGNvbmZpZy5udW1Qb2ludHNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29uZmlnLmlubmVyUmFkaXVzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbmZpZy5vdXRlclJhZGl1c1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmZpbGxdIGZpbGwgY29sb3JcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsUmVkXSBzZXQgZmlsbCByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEdyZWVuXSBzZXQgZmlsbCBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQmx1ZV0gc2V0IGZpbGwgYmx1ZSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5maWxsQWxwaGFdIHNldCBmaWxsIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbWFnZX0gW2NvbmZpZy5maWxsUGF0dGVybkltYWdlXSBmaWxsIHBhdHRlcm4gaW1hZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuWV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5PZmZzZXRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WV0gXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlXSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblNjYWxlWV1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuUm90YXRpb25dXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUGF0dGVyblJlcGVhdF0gY2FuIGJlIFwicmVwZWF0XCIsIFwicmVwZWF0LXhcIiwgXCJyZXBlYXQteVwiLCBvciBcIm5vLXJlcGVhdFwiLiAgVGhlIGRlZmF1bHQgaXMgXCJuby1yZXBlYXRcIlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50U3RhcnRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudEVuZFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRFbmRQb2ludFhdIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRZXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudFN0YXJ0UmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUmFkaXVzXVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRDb2xvclN0b3BzXSBhcnJheSBvZiBjb2xvciBzdG9wc1xyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmZpbGxFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGZpbGwuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsUHJpb3JpdHldIGNhbiBiZSBjb2xvciwgbGluZWFyLWdyYWRpZW50LCByYWRpYWwtZ3JhaWRlbnQsIG9yIHBhdHRlcm4uICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBjb2xvci4gIFRoZSBmaWxsUHJpb3JpdHkgcHJvcGVydHkgbWFrZXMgaXQgcmVhbGx5IGVhc3kgdG8gdG9nZ2xlIGJldHdlZW4gZGlmZmVyZW50IGZpbGwgdHlwZXMuICBGb3IgZXhhbXBsZSwgaWYgeW91IHdhbnQgdG8gdG9nZ2xlIGJldHdlZW4gYSBmaWxsIGNvbG9yIHN0eWxlIGFuZCBhIGZpbGwgcGF0dGVybiBzdHlsZSwgc2ltcGx5IHNldCB0aGUgZmlsbCBwcm9wZXJ0eSBhbmQgdGhlIGZpbGxQYXR0ZXJuIHByb3BlcnRpZXMsIGFuZCB0aGVuIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ2NvbG9yJykgdG8gcmVuZGVyIHRoZSBzaGFwZSB3aXRoIGEgY29sb3IgZmlsbCwgb3IgdXNlIHNldEZpbGxQcmlvcml0eSgncGF0dGVybicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCB0aGUgcGF0dGVybiBmaWxsIGNvbmZpZ3VyYXRpb25cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnN0cm9rZV0gc3Ryb2tlIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlUmVkXSBzZXQgc3Ryb2tlIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VHcmVlbl0gc2V0IHN0cm9rZSBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zdHJva2VCbHVlXSBzZXQgc3Ryb2tlIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQWxwaGFdIHNldCBzdHJva2UgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zdHJva2VXaWR0aF0gc3Ryb2tlIHdpZHRoXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc3Ryb2tlU2NhbGVFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgc3Ryb2tlIHNjYWxlLiAgVGhlIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZUVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc3Ryb2tlLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUpvaW5dIGNhbiBiZSBtaXRlciwgcm91bmQsIG9yIGJldmVsLiAgVGhlIGRlZmF1bHRcclxuICAgICAqICBpcyBtaXRlclxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcubGluZUNhcF0gY2FuIGJlIGJ1dHQsIHJvdW5kLCBvciBzcWFyZS4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgYnV0dFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuc2hhZG93Q29sb3JdXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93UmVkXSBzZXQgc2hhZG93IGNvbG9yIHJlZCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dHcmVlbl0gc2V0IHNoYWRvdyBjb2xvciBncmVlbiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gW2NvbmZpZy5zaGFkb3dCbHVlXSBzZXQgc2hhZG93IGNvbG9yIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93QWxwaGFdIHNldCBzaGFkb3cgY29sb3IgYWxwaGEgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dCbHVyXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuc2hhZG93T2Zmc2V0XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T2Zmc2V0WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPcGFjaXR5XSBzaGFkb3cgb3BhY2l0eS4gIENhbiBiZSBhbnkgcmVhbCBudW1iZXJcclxuICAgICAqICBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zaGFkb3dFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHNoYWRvdy4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZGFzaF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5kYXNoRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBkYXNoQXJyYXkuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcueF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy53aWR0aF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmhlaWdodF1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy52aXNpYmxlXVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmxpc3RlbmluZ10gd2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgbGlzdGVuaW5nIGZvciBldmVudHNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmlkXSB1bmlxdWUgaWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLm5hbWVdIG5vbi11bmlxdWUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub3BhY2l0eV0gZGV0ZXJtaW5lcyBub2RlIG9wYWNpdHkuICBDYW4gYmUgYW55IG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNjYWxlXSBzZXQgc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWF0gc2V0IHNjYWxlIHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNjYWxlWV0gc2V0IHNjYWxlIHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnJvdGF0aW9uXSByb3RhdGlvbiBpbiBkZWdyZWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5vZmZzZXRdIG9mZnNldCBmcm9tIGNlbnRlciBwb2ludCBhbmQgcm90YXRpb24gcG9pbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFhdIHNldCBvZmZzZXQgeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcub2Zmc2V0WV0gc2V0IG9mZnNldCB5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZHJhZ2dhYmxlXSBtYWtlcyB0aGUgbm9kZSBkcmFnZ2FibGUuICBXaGVuIHN0YWdlcyBhcmUgZHJhZ2dhYmxlLCB5b3UgY2FuIGRyYWcgYW5kIGRyb3BcclxuICAgICAqICB0aGUgZW50aXJlIHN0YWdlIGJ5IGRyYWdnaW5nIGFueSBwb3J0aW9uIG9mIHRoZSBzdGFnZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZHJhZ0Rpc3RhbmNlXVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbmZpZy5kcmFnQm91bmRGdW5jXVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHN0YXIgPSBuZXcgS2luZXRpYy5TdGFyKHtcbiAgICAgKiAgIHg6IDEwMCxcbiAgICAgKiAgIHk6IDIwMCxcbiAgICAgKiAgIG51bVBvaW50czogNSxcbiAgICAgKiAgIGlubmVyUmFkaXVzOiA3MCxcbiAgICAgKiAgIG91dGVyUmFkaXVzOiA3MCxcbiAgICAgKiAgIGZpbGw6ICdyZWQnLFxuICAgICAqICAgc3Ryb2tlOiAnYmxhY2snLFxuICAgICAqICAgc3Ryb2tlV2lkdGg6IDRcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBLaW5ldGljLlN0YXIgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdGhpcy5fX19pbml0KGNvbmZpZyk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuU3Rhci5wcm90b3R5cGUgPSB7XG4gICAgICAgIF9fX2luaXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgLy8gY2FsbCBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgS2luZXRpYy5TaGFwZS5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9ICdTdGFyJztcbiAgICAgICAgICAgIHRoaXMuc2NlbmVGdW5jKHRoaXMuX3NjZW5lRnVuYyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zY2VuZUZ1bmM6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBpbm5lclJhZGl1cyA9IHRoaXMuaW5uZXJSYWRpdXMoKSxcbiAgICAgICAgICAgICAgICBvdXRlclJhZGl1cyA9IHRoaXMub3V0ZXJSYWRpdXMoKSxcbiAgICAgICAgICAgICAgICBudW1Qb2ludHMgPSB0aGlzLm51bVBvaW50cygpO1xuXG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oMCwgMCAtIG91dGVyUmFkaXVzKTtcblxuICAgICAgICAgICAgZm9yKHZhciBuID0gMTsgbiA8IG51bVBvaW50cyAqIDI7IG4rKykge1xuICAgICAgICAgICAgICAgIHZhciByYWRpdXMgPSBuICUgMiA9PT0gMCA/IG91dGVyUmFkaXVzIDogaW5uZXJSYWRpdXM7XG4gICAgICAgICAgICAgICAgdmFyIHggPSByYWRpdXMgKiBNYXRoLnNpbihuICogTWF0aC5QSSAvIG51bVBvaW50cyk7XG4gICAgICAgICAgICAgICAgdmFyIHkgPSAtMSAqIHJhZGl1cyAqIE1hdGguY29zKG4gKiBNYXRoLlBJIC8gbnVtUG9pbnRzKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG5cbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0cm9rZVNoYXBlKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuU3RhciwgS2luZXRpYy5TaGFwZSk7XG5cbiAgICAvLyBhZGQgZ2V0dGVycyBzZXR0ZXJzXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlN0YXIsICdudW1Qb2ludHMnLCA1KTtcblxuICAgIC8qKlxuICAgICAqIHNldCBudW1iZXIgb2YgcG9pbnRzXG4gICAgICogQG5hbWUgc2V0TnVtUG9pbnRzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YXIucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBwb2ludHNcbiAgICAgKi9cblxuICAgICAvKipcbiAgICAgKiBnZXQgbnVtYmVyIG9mIHBvaW50c1xuICAgICAqIEBuYW1lIGdldE51bVBvaW50c1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TdGFyLnByb3RvdHlwZVxuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlN0YXIsICdpbm5lclJhZGl1cycsIDApO1xuXG4gICAgLyoqXG4gICAgICogc2V0IGlubmVyIHJhZGl1c1xuICAgICAqIEBuYW1lIHNldElubmVyUmFkaXVzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YXIucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZGl1c1xuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAqIGdldCBpbm5lciByYWRpdXNcbiAgICAgKiBAbmFtZSBnZXRJbm5lclJhZGl1c1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TdGFyLnByb3RvdHlwZVxuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlN0YXIsICdvdXRlclJhZGl1cycsIDApO1xuXG4gICAgLyoqXG4gICAgICogc2V0IG91dGVyIHJhZGl1c1xuICAgICAqIEBuYW1lIHNldE91dGVyUmFkaXVzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlN0YXIucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZGl1c1xuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAqIGdldCBvdXRlciByYWRpdXNcbiAgICAgKiBAbmFtZSBnZXRPdXRlclJhZGl1c1xuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5TdGFyLnByb3RvdHlwZVxuICAgICAqL1xuXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5TdGFyKTtcbn0pKCk7XG47KGZ1bmN0aW9uKCkge1xuICAgIC8vIGNvbnN0YW50c1xuICAgIHZhciBBVFRSX0NIQU5HRV9MSVNUID0gWydmb250RmFtaWx5JywgJ2ZvbnRTaXplJywgJ2ZvbnRTdHlsZScsICdwYWRkaW5nJywgJ2xpbmVIZWlnaHQnLCAndGV4dCddLFxuICAgICAgICBDSEFOR0VfS0lORVRJQyA9ICdDaGFuZ2Uua2luZXRpYycsXG4gICAgICAgIE5PTkUgPSAnbm9uZScsXG4gICAgICAgIFVQID0gJ3VwJyxcbiAgICAgICAgUklHSFQgPSAncmlnaHQnLFxuICAgICAgICBET1dOID0gJ2Rvd24nLFxuICAgICAgICBMRUZUID0gJ2xlZnQnLFxuICAgICAgICBMQUJFTCA9ICdMYWJlbCcsXG5cbiAgICAgLy8gY2FjaGVkIHZhcmlhYmxlc1xuICAgICBhdHRyQ2hhbmdlTGlzdExlbiA9IEFUVFJfQ0hBTkdFX0xJU1QubGVuZ3RoO1xuXG4gICAgLyoqXG4gICAgICogTGFiZWwgY29uc3RydWN0b3IuJm5ic3A7IExhYmVscyBhcmUgZ3JvdXBzIHRoYXQgY29udGFpbiBhIFRleHQgYW5kIFRhZyBzaGFwZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcudmlzaWJsZV1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5saXN0ZW5pbmddIHdoZXRoZXIgb3Igbm90IHRoZSBub2RlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5pZF0gdW5pcXVlIGlkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5uYW1lXSBub24tdW5pcXVlIG5hbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9wYWNpdHldIGRldGVybWluZXMgbm9kZSBvcGFjaXR5LiAgQ2FuIGJlIGFueSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zY2FsZV0gc2V0IHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVhdIHNldCBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVldIHNldCBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5yb3RhdGlvbl0gcm90YXRpb24gaW4gZGVncmVlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcub2Zmc2V0XSBvZmZzZXQgZnJvbSBjZW50ZXIgcG9pbnQgYW5kIHJvdGF0aW9uIHBvaW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRYXSBzZXQgb2Zmc2V0IHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFldIHNldCBvZmZzZXQgeVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRyYWdnYWJsZV0gbWFrZXMgdGhlIG5vZGUgZHJhZ2dhYmxlLiAgV2hlbiBzdGFnZXMgYXJlIGRyYWdnYWJsZSwgeW91IGNhbiBkcmFnIGFuZCBkcm9wXHJcbiAgICAgKiAgdGhlIGVudGlyZSBzdGFnZSBieSBkcmFnZ2luZyBhbnkgcG9ydGlvbiBvZiB0aGUgc3RhZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmRyYWdEaXN0YW5jZV1cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb25maWcuZHJhZ0JvdW5kRnVuY11cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGNyZWF0ZSBsYWJlbFxuICAgICAqIHZhciBsYWJlbCA9IG5ldyBLaW5ldGljLkxhYmVsKHtcbiAgICAgKiAgIHg6IDEwMCxcbiAgICAgKiAgIHk6IDEwMCwgXG4gICAgICogICBkcmFnZ2FibGU6IHRydWVcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vIGFkZCBhIHRhZyB0byB0aGUgbGFiZWxcbiAgICAgKiBsYWJlbC5hZGQobmV3IEtpbmV0aWMuVGFnKHtcbiAgICAgKiAgIGZpbGw6ICcjYmJiJyxcbiAgICAgKiAgIHN0cm9rZTogJyMzMzMnLFxuICAgICAqICAgc2hhZG93Q29sb3I6ICdibGFjaycsXG4gICAgICogICBzaGFkb3dCbHVyOiAxMCxcbiAgICAgKiAgIHNoYWRvd09mZnNldDogWzEwLCAxMF0sXG4gICAgICogICBzaGFkb3dPcGFjaXR5OiAwLjIsXG4gICAgICogICBsaW5lSm9pbjogJ3JvdW5kJyxcbiAgICAgKiAgIHBvaW50ZXJEaXJlY3Rpb246ICd1cCcsXG4gICAgICogICBwb2ludGVyV2lkdGg6IDIwLFxuICAgICAqICAgcG9pbnRlckhlaWdodDogMjAsXG4gICAgICogICBjb3JuZXJSYWRpdXM6IDVcbiAgICAgKiB9KSk7XG4gICAgICpcbiAgICAgKiAvLyBhZGQgdGV4dCB0byB0aGUgbGFiZWxcbiAgICAgKiBsYWJlbC5hZGQobmV3IEtpbmV0aWMuVGV4dCh7XG4gICAgICogICB0ZXh0OiAnSGVsbG8gV29ybGQhJyxcbiAgICAgKiAgIGZvbnRTaXplOiA1MCxcbiAgICAgKiAgIGxpbmVIZWlnaHQ6IDEuMixcbiAgICAgKiAgIHBhZGRpbmc6IDEwLFxuICAgICAqICAgZmlsbDogJ2dyZWVuJ1xuICAgICAqICB9KSk7XG4gICAgICovXG4gICAgS2luZXRpYy5MYWJlbCA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB0aGlzLl9fX19pbml0KGNvbmZpZyk7XG4gICAgfTtcblxuICAgIEtpbmV0aWMuTGFiZWwucHJvdG90eXBlID0ge1xuICAgICAgICBfX19faW5pdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgIEtpbmV0aWMuR3JvdXAuY2FsbCh0aGlzLCBjb25maWcpO1xuICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSBMQUJFTDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5vbignYWRkLmtpbmV0aWMnLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgICAgICB0aGF0Ll9hZGRMaXN0ZW5lcnMoZXZ0LmNoaWxkKTtcbiAgICAgICAgICAgICAgICB0aGF0Ll9zeW5jKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldCBUZXh0IHNoYXBlIGZvciB0aGUgbGFiZWwuICBZb3UgbmVlZCB0byBhY2Nlc3MgdGhlIFRleHQgc2hhcGUgaW4gb3JkZXIgdG8gdXBkYXRlXG4gICAgICAgICAqIHRoZSB0ZXh0IHByb3BlcnRpZXNcbiAgICAgICAgICogQG5hbWUgZ2V0VGV4dFxuICAgICAgICAgKiBAbWV0aG9kXG4gICAgICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLkxhYmVsLnByb3RvdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0VGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maW5kKCdUZXh0JylbMF07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXQgVGFnIHNoYXBlIGZvciB0aGUgbGFiZWwuICBZb3UgbmVlZCB0byBhY2Nlc3MgdGhlIFRhZyBzaGFwZSBpbiBvcmRlciB0byB1cGRhdGVcbiAgICAgICAgICogdGhlIHBvaW50ZXIgcHJvcGVydGllcyBhbmQgdGhlIGNvcm5lciByYWRpdXNcbiAgICAgICAgICogQG5hbWUgZ2V0VGFnXG4gICAgICAgICAqIEBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIEtpbmV0aWMuTGFiZWwucHJvdG90eXBlXG4gICAgICAgICAqL1xuICAgICAgICBnZXRUYWc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluZCgnVGFnJylbMF07XG4gICAgICAgIH0sXG4gICAgICAgIF9hZGRMaXN0ZW5lcnM6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBuO1xuICAgICAgICAgICAgdmFyIGZ1bmMgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9zeW5jKCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gdXBkYXRlIHRleHQgZGF0YSBmb3IgY2VydGFpbiBhdHRyIGNoYW5nZXNcbiAgICAgICAgICAgIGZvcihuID0gMDsgbiA8IGF0dHJDaGFuZ2VMaXN0TGVuOyBuKyspIHtcbiAgICAgICAgICAgICAgICB0ZXh0Lm9uKEFUVFJfQ0hBTkdFX0xJU1Rbbl0gKyBDSEFOR0VfS0lORVRJQywgZnVuYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGdldFdpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFRleHQoKS5nZXRXaWR0aCgpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGV4dCgpLmdldEhlaWdodCgpO1xuICAgICAgICB9LFxuICAgICAgICBfc3luYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IHRoaXMuZ2V0VGV4dCgpLFxuICAgICAgICAgICAgICAgIHRhZyA9IHRoaXMuZ2V0VGFnKCksXG4gICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCwgcG9pbnRlckRpcmVjdGlvbiwgcG9pbnRlcldpZHRoLCB4LCB5LCBwb2ludGVySGVpZ2h0O1xuXG4gICAgICAgICAgICBpZiAodGV4dCAmJiB0YWcpIHtcbiAgICAgICAgICAgICAgICB3aWR0aCA9IHRleHQuZ2V0V2lkdGgoKTtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSB0ZXh0LmdldEhlaWdodCgpO1xuICAgICAgICAgICAgICAgIHBvaW50ZXJEaXJlY3Rpb24gPSB0YWcuZ2V0UG9pbnRlckRpcmVjdGlvbigpO1xuICAgICAgICAgICAgICAgIHBvaW50ZXJXaWR0aCA9IHRhZy5nZXRQb2ludGVyV2lkdGgoKTtcbiAgICAgICAgICAgICAgICBwb2ludGVySGVpZ2h0ID0gdGFnLmdldFBvaW50ZXJIZWlnaHQoKTtcbiAgICAgICAgICAgICAgICB4ID0gMDtcbiAgICAgICAgICAgICAgICB5ID0gMDtcblxuICAgICAgICAgICAgICAgIHN3aXRjaChwb2ludGVyRGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVVA6XG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gd2lkdGggLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IC0xICogcG9pbnRlckhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFJJR0hUOlxuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IHdpZHRoICsgcG9pbnRlcldpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBET1dOOlxuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IHdpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBoZWlnaHQgKyBwb2ludGVySGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTEVGVDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSAtMSAqIHBvaW50ZXJXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBoZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGFnLnNldEF0dHJzKHtcbiAgICAgICAgICAgICAgICAgICAgeDogLTEgKiB4LFxuICAgICAgICAgICAgICAgICAgICB5OiAtMSAqIHksXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRleHQuc2V0QXR0cnMoe1xuICAgICAgICAgICAgICAgICAgICB4OiAtMSAqIHgsXG4gICAgICAgICAgICAgICAgICAgIHk6IC0xICogeVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5MYWJlbCwgS2luZXRpYy5Hcm91cCk7XG5cbiAgICBLaW5ldGljLkNvbGxlY3Rpb24ubWFwTWV0aG9kcyhLaW5ldGljLkxhYmVsKTtcblxuICAgIC8qKlxuICAgICAqIFRhZyBjb25zdHJ1Y3Rvci4mbmJzcDsgQSBUYWcgY2FuIGJlIGNvbmZpZ3VyZWRcbiAgICAgKiAgdG8gaGF2ZSBhIHBvaW50ZXIgZWxlbWVudCB0aGF0IHBvaW50cyB1cCwgcmlnaHQsIGRvd24sIG9yIGxlZnRcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5wb2ludGVyRGlyZWN0aW9uXSBjYW4gYmUgdXAsIHJpZ2h0LCBkb3duLCBsZWZ0LCBvciBub25lOyB0aGUgZGVmYXVsdFxuICAgICAqICBpcyBub25lLiAgV2hlbiBhIHBvaW50ZXIgaXMgcHJlc2VudCwgdGhlIHBvc2l0aW9uaW5nIG9mIHRoZSBsYWJlbCBpcyByZWxhdGl2ZSB0byB0aGUgdGlwIG9mIHRoZSBwb2ludGVyLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnBvaW50ZXJXaWR0aF1cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5wb2ludGVySGVpZ2h0XVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmNvcm5lclJhZGl1c11cbiAgICAgKi9cbiAgICBLaW5ldGljLlRhZyA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB0aGlzLl9fX2luaXQoY29uZmlnKTtcbiAgICB9O1xuXG4gICAgS2luZXRpYy5UYWcucHJvdG90eXBlID0ge1xuICAgICAgICBfX19pbml0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIEtpbmV0aWMuU2hhcGUuY2FsbCh0aGlzLCBjb25maWcpO1xuICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSAnVGFnJztcbiAgICAgICAgICAgIHRoaXMuc2NlbmVGdW5jKHRoaXMuX3NjZW5lRnVuYyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zY2VuZUZ1bmM6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IHRoaXMuZ2V0V2lkdGgoKSxcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLmdldEhlaWdodCgpLFxuICAgICAgICAgICAgICAgIHBvaW50ZXJEaXJlY3Rpb24gPSB0aGlzLmdldFBvaW50ZXJEaXJlY3Rpb24oKSxcbiAgICAgICAgICAgICAgICBwb2ludGVyV2lkdGggPSB0aGlzLmdldFBvaW50ZXJXaWR0aCgpLFxuICAgICAgICAgICAgICAgIHBvaW50ZXJIZWlnaHQgPSB0aGlzLmdldFBvaW50ZXJIZWlnaHQoKSxcbiAgICAgICAgICAgICAgICBjb3JuZXJSYWRpdXMgPSB0aGlzLmdldENvcm5lclJhZGl1cygpO1xuXG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oMCwwKTtcblxuICAgICAgICAgICAgaWYgKHBvaW50ZXJEaXJlY3Rpb24gPT09IFVQKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oKHdpZHRoIC0gcG9pbnRlcldpZHRoKS8yLCAwKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyh3aWR0aC8yLCAtMSAqIHBvaW50ZXJIZWlnaHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKCh3aWR0aCArIHBvaW50ZXJXaWR0aCkvMiwgMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCFjb3JuZXJSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyh3aWR0aCwgMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHdpZHRoIC0gY29ybmVyUmFkaXVzLCAwKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmFyYyh3aWR0aCAtIGNvcm5lclJhZGl1cywgY29ybmVyUmFkaXVzLCBjb3JuZXJSYWRpdXMsIE1hdGguUEkgKiAzIC8gMiwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAocG9pbnRlckRpcmVjdGlvbiA9PT0gUklHSFQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyh3aWR0aCwgKGhlaWdodCAtIHBvaW50ZXJIZWlnaHQpLzIpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHdpZHRoICsgcG9pbnRlcldpZHRoLCBoZWlnaHQvMik7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8od2lkdGgsIChoZWlnaHQgKyBwb2ludGVySGVpZ2h0KS8yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoIWNvcm5lclJhZGl1cykge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyh3aWR0aCwgaGVpZ2h0IC0gY29ybmVyUmFkaXVzKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmFyYyh3aWR0aCAtIGNvcm5lclJhZGl1cywgaGVpZ2h0IC0gY29ybmVyUmFkaXVzLCBjb3JuZXJSYWRpdXMsIDAsIE1hdGguUEkgLyAyLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwb2ludGVyRGlyZWN0aW9uID09PSBET1dOKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oKHdpZHRoICsgcG9pbnRlcldpZHRoKS8yLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHdpZHRoLzIsIGhlaWdodCArIHBvaW50ZXJIZWlnaHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKCh3aWR0aCAtIHBvaW50ZXJXaWR0aCkvMiwgaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoIWNvcm5lclJhZGl1cykge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKDAsIGhlaWdodCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGNvcm5lclJhZGl1cywgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmFyYyhjb3JuZXJSYWRpdXMsIGhlaWdodCAtIGNvcm5lclJhZGl1cywgY29ybmVyUmFkaXVzLCBNYXRoLlBJIC8gMiwgTWF0aC5QSSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocG9pbnRlckRpcmVjdGlvbiA9PT0gTEVGVCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKDAsIChoZWlnaHQgKyBwb2ludGVySGVpZ2h0KS8yKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbygtMSAqIHBvaW50ZXJXaWR0aCwgaGVpZ2h0LzIpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKDAsIChoZWlnaHQgLSBwb2ludGVySGVpZ2h0KS8yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoY29ybmVyUmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oMCwgY29ybmVyUmFkaXVzKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmFyYyhjb3JuZXJSYWRpdXMsIGNvcm5lclJhZGl1cywgY29ybmVyUmFkaXVzLCBNYXRoLlBJLCBNYXRoLlBJICogMyAvIDIsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0cm9rZVNoYXBlKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIEtpbmV0aWMuVXRpbC5leHRlbmQoS2luZXRpYy5UYWcsIEtpbmV0aWMuU2hhcGUpO1xuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5UYWcsICdwb2ludGVyRGlyZWN0aW9uJywgTk9ORSk7XG5cbiAgICAvKipcbiAgICAgKiBzZXQgcG9pbnRlciBEaXJlY3Rpb25cbiAgICAgKiBAbmFtZSBzZXRQb2ludGVyRGlyZWN0aW9uXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRhZy5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcG9pbnRlckRpcmVjdGlvbiBjYW4gYmUgdXAsIHJpZ2h0LCBkb3duLCBsZWZ0LCBvciBub25lLiAgVGhlXG4gICAgICogIGRlZmF1bHQgaXMgbm9uZVxuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAqIGdldCBwb2ludGVyIERpcmVjdGlvblxuICAgICAqIEBuYW1lIGdldFBvaW50ZXJEaXJlY3Rpb25cbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGFnLnByb3RvdHlwZVxuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLlRhZywgJ3BvaW50ZXJXaWR0aCcsIDApO1xuXG4gICAgLyoqXG4gICAgICogc2V0IHBvaW50ZXIgd2lkdGhcbiAgICAgKiBAbmFtZSBzZXRQb2ludGVyV2lkdGhcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGFnLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb2ludGVyV2lkdGhcbiAgICAgKi9cblxuICAgICAvKipcbiAgICAgKiBnZXQgcG9pbnRlciB3aWR0aFxuICAgICAqIEBuYW1lIGdldFBvaW50ZXJXaWR0aFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UYWcucHJvdG90eXBlXG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuVGFnLCAncG9pbnRlckhlaWdodCcsIDApO1xuXG4gICAgLyoqXG4gICAgICogc2V0IHBvaW50ZXIgaGVpZ2h0XG4gICAgICogQG5hbWUgc2V0UG9pbnRlckhlaWdodFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5UYWcucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvaW50ZXJIZWlnaHRcbiAgICAgKi9cblxuICAgICAvKipcbiAgICAgKiBnZXQgcG9pbnRlciBoZWlnaHRcbiAgICAgKiBAbmFtZSBnZXRQb2ludGVySGVpZ2h0XG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRhZy5wcm90b3R5cGVcbiAgICAgKi9cblxuICAgIEtpbmV0aWMuRmFjdG9yeS5hZGRHZXR0ZXJTZXR0ZXIoS2luZXRpYy5UYWcsICdjb3JuZXJSYWRpdXMnLCAwKTtcblxuICAgIC8qKlxuICAgICAqIHNldCBjb3JuZXIgcmFkaXVzXG4gICAgICogQG5hbWUgc2V0Q29ybmVyUmFkaXVzXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBtZW1iZXJvZiBLaW5ldGljLlRhZy5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29ybmVyIHJhZGl1c1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogZ2V0IGNvcm5lciByYWRpdXNcbiAgICAgKiBAbmFtZSBnZXRDb3JuZXJSYWRpdXNcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuVGFnLnByb3RvdHlwZVxuICAgICAqL1xuXG4gICAgS2luZXRpYy5Db2xsZWN0aW9uLm1hcE1ldGhvZHMoS2luZXRpYy5UYWcpO1xufSkoKTtcbjsoZnVuY3Rpb24oKSB7XG4gICAgLyoqXG4gICAgICogQXJyb3cgY29uc3RydWN0b3JcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpY1xuICAgICAqIEBhdWdtZW50cyBLaW5ldGljLlNoYXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvbmZpZy5wb2ludHNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy50ZW5zaW9uXSBIaWdoZXIgdmFsdWVzIHdpbGwgcmVzdWx0IGluIGEgbW9yZSBjdXJ2eSBsaW5lLiAgQSB2YWx1ZSBvZiAwIHdpbGwgcmVzdWx0IGluIG5vIGludGVycG9sYXRpb24uXG4gICAgICogICBUaGUgZGVmYXVsdCBpcyAwXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbmZpZy5wb2ludGVyTGVuZ3RoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbmZpZy5wb2ludGVyV2lkdGhcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5maWxsXSBmaWxsIGNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbFJlZF0gc2V0IGZpbGwgcmVkIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLmZpbGxHcmVlbl0gc2V0IGZpbGwgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEJsdWVdIHNldCBmaWxsIGJsdWUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuZmlsbEFscGhhXSBzZXQgZmlsbCBhbHBoYSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7SW1hZ2V9IFtjb25maWcuZmlsbFBhdHRlcm5JbWFnZV0gZmlsbCBwYXR0ZXJuIGltYWdlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblldXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuT2Zmc2V0WF0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVybk9mZnNldFldIFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZV0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxQYXR0ZXJuU2NhbGVYXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFBhdHRlcm5TY2FsZVldXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUGF0dGVyblJvdGF0aW9uXVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFBhdHRlcm5SZXBlYXRdIGNhbiBiZSBcInJlcGVhdFwiLCBcInJlcGVhdC14XCIsIFwicmVwZWF0LXlcIiwgb3IgXCJuby1yZXBlYXRcIi4gIFRoZSBkZWZhdWx0IGlzIFwibm8tcmVwZWF0XCJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRTdGFydFBvaW50WF1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudFN0YXJ0UG9pbnRZXVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcuZmlsbExpbmVhckdyYWRpZW50RW5kUG9pbnRdIG9iamVjdCB3aXRoIHggYW5kIHkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsTGluZWFyR3JhZGllbnRFbmRQb2ludFldXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmZpbGxMaW5lYXJHcmFkaWVudENvbG9yU3RvcHNdIGFycmF5IG9mIGNvbG9yIHN0b3BzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50U3RhcnRQb2ludFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFBvaW50WV1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50XSBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50RW5kUG9pbnRYXSBcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFBvaW50WV0gXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5maWxsUmFkaWFsR3JhZGllbnRTdGFydFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmZpbGxSYWRpYWxHcmFkaWVudEVuZFJhZGl1c11cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb25maWcuZmlsbFJhZGlhbEdyYWRpZW50Q29sb3JTdG9wc10gYXJyYXkgb2YgY29sb3Igc3RvcHNcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5maWxsRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBmaWxsLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjb25maWcuZmlsbFByaW9yaXR5XSBjYW4gYmUgY29sb3IsIGxpbmVhci1ncmFkaWVudCwgcmFkaWFsLWdyYWlkZW50LCBvciBwYXR0ZXJuLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgY29sb3IuICBUaGUgZmlsbFByaW9yaXR5IHByb3BlcnR5IG1ha2VzIGl0IHJlYWxseSBlYXN5IHRvIHRvZ2dsZSBiZXR3ZWVuIGRpZmZlcmVudCBmaWxsIHR5cGVzLiAgRm9yIGV4YW1wbGUsIGlmIHlvdSB3YW50IHRvIHRvZ2dsZSBiZXR3ZWVuIGEgZmlsbCBjb2xvciBzdHlsZSBhbmQgYSBmaWxsIHBhdHRlcm4gc3R5bGUsIHNpbXBseSBzZXQgdGhlIGZpbGwgcHJvcGVydHkgYW5kIHRoZSBmaWxsUGF0dGVybiBwcm9wZXJ0aWVzLCBhbmQgdGhlbiB1c2Ugc2V0RmlsbFByaW9yaXR5KCdjb2xvcicpIHRvIHJlbmRlciB0aGUgc2hhcGUgd2l0aCBhIGNvbG9yIGZpbGwsIG9yIHVzZSBzZXRGaWxsUHJpb3JpdHkoJ3BhdHRlcm4nKSB0byByZW5kZXIgdGhlIHNoYXBlIHdpdGggdGhlIHBhdHRlcm4gZmlsbCBjb25maWd1cmF0aW9uXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5zdHJva2VdIHN0cm9rZSBjb2xvclxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZVJlZF0gc2V0IHN0cm9rZSByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlR3JlZW5dIHNldCBzdHJva2UgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc3Ryb2tlQmx1ZV0gc2V0IHN0cm9rZSBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnN0cm9rZUFscGhhXSBzZXQgc3Ryb2tlIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc3Ryb2tlV2lkdGhdIHN0cm9rZSB3aWR0aFxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLnN0cm9rZVNjYWxlRW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHN0cm9rZSBzY2FsZS4gIFRoZSBkZWZhdWx0IGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5zdHJva2VFbmFibGVkXSBmbGFnIHdoaWNoIGVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHN0cm9rZS4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVKb2luXSBjYW4gYmUgbWl0ZXIsIHJvdW5kLCBvciBiZXZlbC4gIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgaXMgbWl0ZXJcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmxpbmVDYXBdIGNhbiBiZSBidXR0LCByb3VuZCwgb3Igc3FhcmUuICBUaGUgZGVmYXVsdFxyXG4gICAgICogIGlzIGJ1dHRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLnNoYWRvd0NvbG9yXVxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd1JlZF0gc2V0IHNoYWRvdyBjb2xvciByZWQgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93R3JlZW5dIHNldCBzaGFkb3cgY29sb3IgZ3JlZW4gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IFtjb25maWcuc2hhZG93Qmx1ZV0gc2V0IHNoYWRvdyBjb2xvciBibHVlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBbY29uZmlnLnNoYWRvd0FscGhhXSBzZXQgc2hhZG93IGNvbG9yIGFscGhhIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93Qmx1cl1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLnNoYWRvd09mZnNldF0gb2JqZWN0IHdpdGggeCBhbmQgeSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnNoYWRvd09mZnNldFhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zaGFkb3dPZmZzZXRZXVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcuc2hhZG93T3BhY2l0eV0gc2hhZG93IG9wYWNpdHkuICBDYW4gYmUgYW55IHJlYWwgbnVtYmVyXHJcbiAgICAgKiAgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuc2hhZG93RW5hYmxlZF0gZmxhZyB3aGljaCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzaGFkb3cuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29uZmlnLmRhc2hdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcuZGFzaEVuYWJsZWRdIGZsYWcgd2hpY2ggZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZGFzaEFycmF5LiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLnhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy55XVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25maWcud2lkdGhdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5oZWlnaHRdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWcudmlzaWJsZV1cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5saXN0ZW5pbmddIHdoZXRoZXIgb3Igbm90IHRoZSBub2RlIGlzIGxpc3RlbmluZyBmb3IgZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5pZF0gdW5pcXVlIGlkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbmZpZy5uYW1lXSBub24tdW5pcXVlIG5hbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9wYWNpdHldIGRldGVybWluZXMgbm9kZSBvcGFjaXR5LiAgQ2FuIGJlIGFueSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZy5zY2FsZV0gc2V0IHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVhdIHNldCBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5zY2FsZVldIHNldCBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5yb3RhdGlvbl0gcm90YXRpb24gaW4gZGVncmVlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWcub2Zmc2V0XSBvZmZzZXQgZnJvbSBjZW50ZXIgcG9pbnQgYW5kIHJvdGF0aW9uIHBvaW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmZpZy5vZmZzZXRYXSBzZXQgb2Zmc2V0IHhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLm9mZnNldFldIHNldCBvZmZzZXQgeVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmRyYWdnYWJsZV0gbWFrZXMgdGhlIG5vZGUgZHJhZ2dhYmxlLiAgV2hlbiBzdGFnZXMgYXJlIGRyYWdnYWJsZSwgeW91IGNhbiBkcmFnIGFuZCBkcm9wXHJcbiAgICAgKiAgdGhlIGVudGlyZSBzdGFnZSBieSBkcmFnZ2luZyBhbnkgcG9ydGlvbiBvZiB0aGUgc3RhZ2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uZmlnLmRyYWdEaXN0YW5jZV1cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb25maWcuZHJhZ0JvdW5kRnVuY11cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBsaW5lID0gbmV3IEtpbmV0aWMuTGluZSh7XG4gICAgICogICBwb2ludHM6IFs3MywgNzAsIDM0MCwgMjMsIDQ1MCwgNjAsIDUwMCwgMjBdLFxuICAgICAqICAgc3Ryb2tlOiAncmVkJyxcbiAgICAgKiAgIHRlbnNpb246IDEsXG4gICAgICogICBwb2ludGVyTGVuZ3RoIDogMTAsXG4gICAgICogICBwb2ludGVyV2lkdGggOiAxMlxuICAgICAqIH0pO1xuICAgICAqL1xuICAgIEtpbmV0aWMuQXJyb3cgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdGhpcy5fX19faW5pdChjb25maWcpO1xuICAgIH07XG5cbiAgICBLaW5ldGljLkFycm93LnByb3RvdHlwZSA9IHtcbiAgICAgICAgX19fX2luaXQgOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIC8vIGNhbGwgc3VwZXIgY29uc3RydWN0b3JcbiAgICAgICAgICAgIEtpbmV0aWMuTGluZS5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9ICdBcnJvdyc7XG4gICAgICAgIH0sXG4gICAgICAgIF9zY2VuZUZ1bmMgOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgICAgICAgIHZhciBQSTIgPSBNYXRoLlBJICogMjtcbiAgICAgICAgICAgIHZhciBwb2ludHMgPSB0aGlzLnBvaW50cygpO1xuICAgICAgICAgICAgdmFyIG4gPSBwb2ludHMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGR4ID0gcG9pbnRzW24tMl0gLSBwb2ludHNbbi00XTtcbiAgICAgICAgICAgIHZhciBkeSA9IHBvaW50c1tuLTFdIC0gcG9pbnRzW24tM107XG4gICAgICAgICAgICB2YXIgcmFkaWFucyA9IChNYXRoLmF0YW4yKGR5LCBkeCkgKyBQSTIpICUgUEkyO1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHRoaXMucG9pbnRlckxlbmd0aCgpO1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5wb2ludGVyV2lkdGgoKTtcblxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGN0eC50cmFuc2xhdGUocG9pbnRzW24tMl0sIHBvaW50c1tuLTFdKTtcbiAgICAgICAgICAgIGN0eC5yb3RhdGUocmFkaWFucyk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKDAsIDApO1xuICAgICAgICAgICAgY3R4LmxpbmVUbygtbGVuZ3RoLCB3aWR0aCAvIDIpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbygtbGVuZ3RoLCAtd2lkdGggLyAyKTtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnBvaW50ZXJBdEJlZ2lubmluZygpKSB7XG4gICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKHBvaW50c1swXSwgcG9pbnRzWzFdKTtcbiAgICAgICAgICAgICAgICBkeCA9IHBvaW50c1syXSAtIHBvaW50c1swXTtcbiAgICAgICAgICAgICAgICBkeSA9IHBvaW50c1szXSAtIHBvaW50c1sxXTtcbiAgICAgICAgICAgICAgICBjdHgucm90YXRlKChNYXRoLmF0YW4yKC1keSwgLWR4KSArIFBJMikgJSBQSTIpO1xuICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8oMCwgMCk7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVUbygtMTAsIDYpO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lVG8oLTEwLCAtNik7XG4gICAgICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN0eC5maWxsU3Ryb2tlU2hhcGUodGhpcyk7XG4gICAgICAgICAgICBLaW5ldGljLkxpbmUucHJvdG90eXBlLl9zY2VuZUZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBLaW5ldGljLlV0aWwuZXh0ZW5kKEtpbmV0aWMuQXJyb3csIEtpbmV0aWMuTGluZSk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBwb2ludGVyTGVuZ3RoXG4gICAgICogQG5hbWUgcG9pbnRlckxlbmd0aFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5BcnJvdy5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gTGVuZ3RoIG9mIHBvaW50ZXIgb2YgYXJyb3cuXG4gICAgICogICBUaGUgZGVmYXVsdCBpcyAxMC5cbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHRlbnNpb25cbiAgICAgKiB2YXIgcG9pbnRlckxlbmd0aCA9IGxpbmUucG9pbnRlckxlbmd0aCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHRlbnNpb25cbiAgICAgKiBsaW5lLnBvaW50ZXJMZW5ndGgoMTUpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkFycm93LCAncG9pbnRlckxlbmd0aCcsIDEwKTtcbiAgICAvKipcbiAgICAgKiBnZXQvc2V0IHBvaW50ZXJXaWR0aFxuICAgICAqIEBuYW1lIHBvaW50ZXJXaWR0aFxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbWVtYmVyb2YgS2luZXRpYy5BcnJvdy5wcm90b3R5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gV2lkdGggb2YgcG9pbnRlciBvZiBhcnJvdy5cbiAgICAgKiAgIFRoZSBkZWZhdWx0IGlzIDEwLlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgdGVuc2lvblxuICAgICAqIHZhciBwb2ludGVyV2lkdGggPSBsaW5lLnBvaW50ZXJXaWR0aCgpO1xuICAgICAqXG4gICAgICogLy8gc2V0IHRlbnNpb25cbiAgICAgKiBsaW5lLnBvaW50ZXJXaWR0aCgxNSk7XG4gICAgICovXG5cbiAgICBLaW5ldGljLkZhY3RvcnkuYWRkR2V0dGVyU2V0dGVyKEtpbmV0aWMuQXJyb3csICdwb2ludGVyV2lkdGgnLCAxMCk7XG4gICAgLyoqXG4gICAgICogZ2V0L3NldCBwb2ludGVyQXRCZWdpbm5pbmdcbiAgICAgKiBAbmFtZSBwb2ludGVyQXRCZWdpbm5pbmdcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG1lbWJlcm9mIEtpbmV0aWMuQXJyb3cucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFNob3VsZCBwb2ludGVyIGRpc3BsYXllZCBhdCBiZWdpbm5pbmcgb2YgYXJyb3cuXG4gICAgICogICBUaGUgZGVmYXVsdCBpcyBmYWxzZS5cbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCB0ZW5zaW9uXG4gICAgICogdmFyIHBvaW50ZXJBdEJlZ2lubmluZyA9IGxpbmUucG9pbnRlckF0QmVnaW5uaW5nKCk7XG4gICAgICpcbiAgICAgKiAvLyBzZXQgdGVuc2lvblxuICAgICAqIGxpbmUucG9pbnRlckF0QmVnaW5uaW5nKHRydWUpO1xuICAgICAqL1xuXG4gICAgS2luZXRpYy5GYWN0b3J5LmFkZEdldHRlclNldHRlcihLaW5ldGljLkFycm93LCAncG9pbnRlckF0QmVnaW5uaW5nJywgZmFsc2UpO1xuICAgIEtpbmV0aWMuQ29sbGVjdGlvbi5tYXBNZXRob2RzKEtpbmV0aWMuQXJyb3cpO1xuXG59KSgpO1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGtpbmV0aWMgPSByZXF1aXJlKCdraW5ldGljJyk7XG5cbmNsYXNzIEJsb2NrIHtcblxuXHRjb25zdHJ1Y3Rvcihyb3csIGNvbHVtbiwgZ2VuZXJhdGVLZXksIHNwYWNlLCBibG9ja1NpemUpIHtcblx0XHR0aGlzLnJvdyA9IHJvdztcblx0XHR0aGlzLmNvbHVtbiA9IGNvbHVtbjtcblx0XHR0aGlzLmdlbmVyYXRlS2V5ID0gZ2VuZXJhdGVLZXk7XG5cdFx0dGhpcy5zcGFjZSA9IHNwYWNlO1xuXHRcdHRoaXMuYmxvY2tTaXplID0gYmxvY2tTaXplO1xuXG5cdFx0dGhpcy54ID0gdGhpcy5yb3cgKiAodGhpcy5zcGFjZSAqIDIgKyB0aGlzLmJsb2NrU2l6ZSkgKyB0aGlzLnNwYWNlO1xuXHRcdHRoaXMueSA9IHRoaXMuY29sdW1uICogKHRoaXMuc3BhY2UgKiAyICsgdGhpcy5ibG9ja1NpemUpICsgdGhpcy5zcGFjZTtcblx0XHR0aGlzLnVwID0gZmFsc2U7XG5cdFx0dGhpcy5sZWZ0ID0gZmFsc2U7XG5cdFx0dGhpcy5kb3duID0gZmFsc2U7XG5cdFx0dGhpcy5yaWdodCA9IGZhbHNlO1xuXHRcdHRoaXMua2V5ID0gdGhpcy5nZW5lcmF0ZUtleTtcblx0XHR0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuXHRcdHRoaXMucm90YXRpb24gPSAwO1xuXHRcdHRoaXMuYW5pbWF0aW9uSXNSdW5uaW5nID0gZmFsc2U7XG5cdH1cblxuXHRpbml0KG9uQ2xpY2tFdmVudCwgYm94QW5pbWF0aW9uLCB3aWR0aCwgcm93cykge1xuXHRcdHRoaXMuYm94ID0gbmV3IGtpbmV0aWMuR3JvdXAoe1xuXHRcdFx0eDogdGhpcy54ICsgdGhpcy5ibG9ja1NpemUgLyAyICsgKHdpZHRoIC0gdGhpcy5ibG9ja1NpemUgKiByb3dzKSAvIDIgLSB0aGlzLmJsb2NrU2l6ZSAvIDIsXG5cdFx0XHR5OiB0aGlzLnkgKyB0aGlzLmJsb2NrU2l6ZSAvIDIsXG5cdFx0XHR3aWR0aDogdGhpcy5ibG9ja1NpemUsXG5cdFx0XHRoZWlnaHQ6IHRoaXMuYmxvY2tTaXplLFxuXHRcdFx0b2Zmc2V0OiB7XG5cdFx0XHRcdHg6IHRoaXMuYmxvY2tTaXplIC8gMixcblx0XHRcdFx0eTogdGhpcy5ibG9ja1NpemUgLyAyXG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLnBpcGVzID0gbmV3IGtpbmV0aWMuR3JvdXAoe1xuXHRcdFx0eDogMCxcblx0XHRcdHk6IDBcblx0XHR9KTtcblxuXHRcdHRoaXMuc2hhcGUgPSBuZXcga2luZXRpYy5SZWN0KHtcblx0XHRcdHg6IDAsXG5cdFx0XHR5OiAwLFxuXHRcdFx0d2lkdGg6IHRoaXMuYmxvY2tTaXplLFxuXHRcdFx0aGVpZ2h0OiB0aGlzLmJsb2NrU2l6ZSxcblx0XHRcdG5hbWU6IHRoaXMueCArICctJyArIHRoaXMueSxcblx0XHRcdGZpbGw6ICdncmV5Jyxcblx0XHRcdHN0cm9rZTogJ2JsYWNrJyxcblx0XHRcdHN0cm9rZVdpZHRoOiB0aGlzLnNwYWNlXG5cdFx0fSk7XG5cblx0XHR2YXIgcGlwZVVwID0gbmV3IGtpbmV0aWMuTGluZSh7XG5cdFx0XHRwb2ludHM6IFsgdGhpcy5ibG9ja1NpemUgLyAyLCAwLCB0aGlzLmJsb2NrU2l6ZSAvIDIsIHRoaXMuYmxvY2tTaXplIC8gMiBdLFxuXHRcdFx0c3Ryb2tlOiAncmVkJyxcblx0XHRcdHN0cm9rZVdpZHRoOiAxMyxcblx0XHRcdGxpbmVDYXA6ICdyb3VuZCcsXG5cdFx0XHRuYW1lOiAncGlwZVVwJ1xuXHRcdH0pO1xuXG5cdFx0dmFyIHBpcGVMZWZ0ID0gbmV3IGtpbmV0aWMuTGluZSh7XG5cdFx0XHRwb2ludHM6IFsgMCwgdGhpcy5ibG9ja1NpemUgLyAyLCB0aGlzLmJsb2NrU2l6ZSAvIDIsIHRoaXMuYmxvY2tTaXplIC8gMiBdLFxuXHRcdFx0c3Ryb2tlOiAncmVkJyxcblx0XHRcdHN0cm9rZVdpZHRoOiAxMyxcblx0XHRcdGxpbmVDYXA6ICdyb3VuZCcsXG5cdFx0XHRuYW1lOiAncGlwZUxlZnQnXG5cdFx0fSk7XG5cblx0XHR2YXIgcGlwZURvd24gPSBuZXcga2luZXRpYy5MaW5lKHtcblx0XHRcdHBvaW50czogWyB0aGlzLmJsb2NrU2l6ZSAvIDIsIHRoaXMuYmxvY2tTaXplLCB0aGlzLmJsb2NrU2l6ZSAvIDIsIHRoaXMuYmxvY2tTaXplIC8gMiBdLFxuXHRcdFx0c3Ryb2tlOiAncmVkJyxcblx0XHRcdHN0cm9rZVdpZHRoOiAxMyxcblx0XHRcdGxpbmVDYXA6ICdyb3VuZCcsXG5cdFx0XHRuYW1lOiAncGlwZURvd24nXG5cdFx0fSk7XG5cblx0XHR2YXIgcGlwZVJpZ2h0ID0gbmV3IGtpbmV0aWMuTGluZSh7XG5cdFx0XHRwb2ludHM6IFsgdGhpcy5ibG9ja1NpemUsIHRoaXMuYmxvY2tTaXplIC8gMiwgdGhpcy5ibG9ja1NpemUgLyAyLCB0aGlzLmJsb2NrU2l6ZSAvIDIgXSxcblx0XHRcdHN0cm9rZTogJ3JlZCcsXG5cdFx0XHRzdHJva2VXaWR0aDogMTMsXG5cdFx0XHRsaW5lQ2FwOiAncm91bmQnLFxuXHRcdFx0bmFtZTogJ3BpcGVSaWdodCdcblx0XHR9KTtcblxuXHRcdC8vIFBsYWNpbmcgcGlwZXNcblx0XHRpZiAodGhpcy51cCkge1xuXHRcdFx0dGhpcy5waXBlcy5hZGQocGlwZVVwKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5sZWZ0KSB7XG5cdFx0XHR0aGlzLnBpcGVzLmFkZChwaXBlTGVmdCk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuZG93bikge1xuXHRcdFx0dGhpcy5waXBlcy5hZGQocGlwZURvd24pO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnJpZ2h0KSB7XG5cdFx0XHR0aGlzLnBpcGVzLmFkZChwaXBlUmlnaHQpO1xuXHRcdH1cblxuXHRcdHRoaXMuYm94Lm9uKCdjbGljaycsICgpID0+IG9uQ2xpY2tFdmVudCh0aGlzKSk7XG5cdFx0dGhpcy5tb3VzZUNsaWNrID0gYm94QW5pbWF0aW9uKHRoaXMpO1xuXG5cdFx0dGhpcy5ib3guYWRkKHRoaXMuc2hhcGUpO1xuXHRcdHRoaXMuYm94LmFkZCh0aGlzLnBpcGVzKTtcblx0fVxuXG5cdGNvbm5lY3Rpb25IYW5kbGVyKGNvbm5lY3RlZCkge1xuXHRcdGlmIChjb25uZWN0ZWQpIHtcblx0XHRcdHRoaXMucGlwZXMuZmluZCgnLnBpcGVVcCcpLnN0cm9rZSgnZ3JlZW4nKTtcblx0XHRcdHRoaXMucGlwZXMuZmluZCgnLnBpcGVMZWZ0Jykuc3Ryb2tlKCdncmVlbicpO1xuXHRcdFx0dGhpcy5waXBlcy5maW5kKCcucGlwZURvd24nKS5zdHJva2UoJ2dyZWVuJyk7XG5cdFx0XHR0aGlzLnBpcGVzLmZpbmQoJy5waXBlUmlnaHQnKS5zdHJva2UoJ2dyZWVuJyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucGlwZXMuZmluZCgnLnBpcGVVcCcpLnN0cm9rZSgncmVkJyk7XG5cdFx0XHR0aGlzLnBpcGVzLmZpbmQoJy5waXBlTGVmdCcpLnN0cm9rZSgncmVkJyk7XG5cdFx0XHR0aGlzLnBpcGVzLmZpbmQoJy5waXBlRG93bicpLnN0cm9rZSgncmVkJyk7XG5cdFx0XHR0aGlzLnBpcGVzLmZpbmQoJy5waXBlUmlnaHQnKS5zdHJva2UoJ3JlZCcpO1xuXHRcdH1cblx0fVxuXG5cdHNodWZmbGVJdCgpIHtcblx0XHRmb3IgKHZhciBrID0gMDsgayA8IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDMpOyBrKyspIHtcblx0XHRcdGlmIChNYXRoLnJhbmRvbSgpIDwgMC41KSB7XG5cdFx0XHRcdHRoaXMucm90YXRlUmlnaHQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucm90YXRlTGVmdCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJvdGF0ZVJpZ2h0KCkge1xuXHRcdGxldCB0ZW1wID0gdGhpcy51cDtcblxuXHRcdHRoaXMudXAgPSB0aGlzLmxlZnQ7XG5cdFx0dGhpcy5sZWZ0ID0gdGhpcy5kb3duO1xuXHRcdHRoaXMuZG93biA9IHRoaXMucmlnaHQ7XG5cdFx0dGhpcy5yaWdodCA9IHRlbXA7XG5cdH1cblxuXHRyb3RhdGVMZWZ0KCkge1xuXHRcdGxldCB0ZW1wID0gdGhpcy51cDtcblxuXHRcdHRoaXMudXAgPSB0aGlzLnJpZ2h0O1xuXHRcdHRoaXMucmlnaHQgPSB0aGlzLmRvd247XG5cdFx0dGhpcy5kb3duID0gdGhpcy5sZWZ0O1xuXHRcdHRoaXMubGVmdCA9IHRlbXA7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCbG9jazsiLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGF0dHJTZXBhcmF0b3IgPSAnOyc7XG5jb25zdCBrZXlWYWx1ZVNlcGFyYXRvciA9ICc9JztcblxuY29uc3QgZXhwaXJlc0tleSA9ICdleHBpcmVzJztcbmNvbnN0IHBhdGhLZXkgPSAncGF0aCc7XG5cbmZ1bmN0aW9uIGdldChrZXksIGRlZmF1bHRWYWx1ZSA9IG51bGwpIHtcblx0bGV0IG5hbWUgPSBrZXkgKyBrZXlWYWx1ZVNlcGFyYXRvcixcblx0XHRkZWNvZGVkQ29va2llU3RyaW5nID0gZGVjb2RlVVJJQ29tcG9uZW50KGRvY3VtZW50LmNvb2tpZSksXG5cdFx0Y29va2llcyA9IGRlY29kZWRDb29raWVTdHJpbmcuc3BsaXQoJzsnKTtcblxuXHRmb3IgKGxldCBjb29raWUgb2YgY29va2llcykge1xuXHRcdGNvb2tpZSA9IGNvb2tpZS50cmltKCk7XG5cblx0XHRpZiAoY29va2llLmluZGV4T2YobmFtZSkgPT09IDApIHtcblx0XHRcdHJldHVybiBjb29raWUuc3Vic3RyaW5nKG5hbWUubGVuZ3RoLCBjb29raWUubGVuZ3RoKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZGVmYXVsdFZhbHVlO1xufVxuXG5mdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSwgZXhwaXJlcyA9IDM2NSwgcGF0aCA9ICcvJykge1xuXHRsZXQgZCA9IG5ldyBEYXRlKCk7XG5cblx0ZC5zZXRUaW1lKGQuZ2V0VGltZSgpICsgZXhwaXJlcyAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuXG5cdGxldCBjb29raWVBdHRyID0ga2V5ICsga2V5VmFsdWVTZXBhcmF0b3IgKyB2YWx1ZSxcblx0XHRleHBpcmVzQXR0ciA9IGV4cGlyZXNLZXkgKyBrZXlWYWx1ZVNlcGFyYXRvciArIGQudG9VVENTdHJpbmcoKSxcblx0XHRwYXRoQXR0ciA9IHBhdGhLZXkgKyBrZXlWYWx1ZVNlcGFyYXRvciArIHBhdGg7XG5cblx0ZG9jdW1lbnQuY29va2llID0gY29va2llQXR0ciArIGF0dHJTZXBhcmF0b3IgKyBleHBpcmVzQXR0ciArIGF0dHJTZXBhcmF0b3IgKyBwYXRoQXR0cjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGdldDogZ2V0LFxuXHRzZXQ6IHNldFxufTsiLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEtpbmV0aWMgPSByZXF1aXJlKCdraW5ldGljJyk7XG5cbmNvbnN0IGNvb2tpZSAgPSByZXF1aXJlKCcuL21vZHVsZS9jb29raWUnKTtcbmNvbnN0IEJsb2NrICAgPSByZXF1aXJlKCcuL21vZGVsL2Jsb2NrJyk7XG5cbmxldCB3aWR0aCA9IDEyODAsXG5cdGhlaWdodCA9IDcyMCxcblx0cm93cyA9IDEwLFxuXHRjb2x1bW5zID0gMTAsXG5cdHNwYWNlID0gNSxcblx0bGF5ZXJTaXplID0gNSxcblx0bGV2ZWwgPSAwLFxuXHRibG9ja1NpemUgPSBNYXRoLm1pbih3aWR0aCwgaGVpZ2h0KSAvIE1hdGgubWF4KHJvd3MsIGNvbHVtbnMpIC0gc3BhY2UgKiAyLFxuXHRzdGFydGluZ1BvaW50WCA9IE1hdGguZmxvb3Iocm93cyAvIDIpLFxuXHRzdGFydGluZ1BvaW50WSA9IE1hdGguZmxvb3IoY29sdW1ucyAvIDIpO1xuXG5sZXQgc3RhZ2UsIGdhbWVUeXBlLCBnYW1lRGlmZmljdWx0eSwgbGF5ZXJSb3dzLCBsYXllckNvbHVtbnMsIHRhYmxlLCB0aW1lciwgaW5mb3JtYXRpb24sXG5cdG1lbnVMYXllciwgZGlmZmljdWx0eUxheWVyLCB0aW1lVHJpYWxHYW1lTGF5ZXIsIHNjb3JlQm9hcmRNZW51TGF5ZXIsIGluZm9ybWF0aW9uTWVudUxheWVyLFxuXHRnYW1lTGF5ZXJzLCBibG9ja3M7XG5cbmZ1bmN0aW9uIGxvYWRBcHBsaWNhdGlvbigpIHtcblx0d2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcblx0aGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC0gMjAwO1xuXG5cdHN0YWdlID0gbmV3IEtpbmV0aWMuU3RhZ2Uoe1xuXHRcdGNvbnRhaW5lcjogJ3RhYmxlJyxcblx0XHR3aWR0aDogd2lkdGgsXG5cdFx0aGVpZ2h0OiBoZWlnaHRcblx0fSk7XG5cblx0bWFpbk1lbnUoKTtcbn1cblxuZnVuY3Rpb24gc3RhcnROZXdDbGFzc2ljR2FtZSgpIHtcblxuXHRpZiAoc3RhZ2UuaGFzQ2hpbGRyZW4oKSkge1xuXHRcdHN0YWdlLmRlc3Ryb3lDaGlsZHJlbigpO1xuXHR9XG5cblx0Z2FtZVR5cGUgPSAnY2xhc3NpYyc7XG5cblx0c3dpdGNoIChnYW1lRGlmZmljdWx0eSkge1xuXHRcdGNhc2UgJ2Vhc3knOlxuXHRcdFx0cm93cyA9IDU7XG5cdFx0XHRjb2x1bW5zID0gNTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ21lZGl1bSc6XG5cdFx0XHRyb3dzID0gMTA7XG5cdFx0XHRjb2x1bW5zID0gMTA7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdoYXJkJzpcblx0XHRcdHJvd3MgPSAxNTtcblx0XHRcdGNvbHVtbnMgPSAxNTtcblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRicmVhaztcblx0fVxuXG5cdHN0YXJ0aW5nUG9pbnRYID0gTWF0aC5mbG9vcihyb3dzIC8gMik7XG5cdHN0YXJ0aW5nUG9pbnRZID0gTWF0aC5mbG9vcihjb2x1bW5zIC8gMik7XG5cdGxheWVyUm93cyA9IE1hdGguZmxvb3Iocm93cyAvIGxheWVyU2l6ZSkgKyAxO1xuXHRsYXllckNvbHVtbnMgPSBNYXRoLmZsb29yKGNvbHVtbnMgLyBsYXllclNpemUpICsgMTtcblx0YmxvY2tTaXplID0gTWF0aC5taW4od2lkdGgsIGhlaWdodCkgLyBNYXRoLm1heChyb3dzLCBjb2x1bW5zKSAtIHNwYWNlICogMjtcblxuXHR0YWJsZSA9IG5ldyBHYW1lVGFibGUoKTtcblx0dGFibGUuZ2VuZXJhdGVGaWVsZHMoKTtcblx0dGFibGUuc2h1ZmZsZSgpO1xuXHR0YWJsZS5kcmF3R2FtZSgpO1xuXG5cdHRpbWVyID0gbmV3IEdhbWVUaW1lcigpO1xuXHRpbmZvcm1hdGlvbiA9IG5ldyBJbmZvcm1hdGlvblBhbmVsKCk7XG5cblx0dGltZXIuc2V0SW5jKHRydWUpO1xuXHR0aW1lci5zdGFydCgpO1xuXG5cdGluZm9ybWF0aW9uLmluaXRQYW5lbCgpO1xuXHRpbmZvcm1hdGlvbi51cGRhdGVTY29yZShjb29raWUuZ2V0KCdjbGFzc2ljX2hpZ2hfc2NvcmVfJyArIGdhbWVEaWZmaWN1bHR5LCAnLS0vLS0nKSk7XG5cdGluZm9ybWF0aW9uLmhpZGVMZXZlbCgpO1xufVxuXG5mdW5jdGlvbiBzdGFydE5ld1RpbWVUcmlhbEdhbWUoKSB7XG5cdGlmIChzdGFnZS5oYXNDaGlsZHJlbigpKSB7XG5cdFx0c3RhZ2UuZGVzdHJveUNoaWxkcmVuKCk7XG5cdH1cblxuXHRnYW1lVHlwZSA9ICd0aW1lLXRyaWFsJztcblxuXHRsZXZlbCsrO1xuXG5cdHJvd3MgPSA0ICsgbGV2ZWw7XG5cdGNvbHVtbnMgPSA0ICsgbGV2ZWw7XG5cblx0c3RhcnRpbmdQb2ludFggPSBNYXRoLmZsb29yKHJvd3MgLyAyKTtcblx0c3RhcnRpbmdQb2ludFkgPSBNYXRoLmZsb29yKGNvbHVtbnMgLyAyKTtcblx0bGF5ZXJSb3dzID0gTWF0aC5mbG9vcihyb3dzIC8gbGF5ZXJTaXplKSArIDE7XG5cdGxheWVyQ29sdW1ucyA9IE1hdGguZmxvb3IoY29sdW1ucyAvIGxheWVyU2l6ZSkgKyAxO1xuXHRibG9ja1NpemUgPSBNYXRoLm1pbih3aWR0aCwgaGVpZ2h0KSAvIE1hdGgubWF4KHJvd3MsIGNvbHVtbnMpIC0gc3BhY2UgKiAyO1xuXG5cdHRhYmxlID0gbmV3IEdhbWVUYWJsZSgpO1xuXHR0YWJsZS5nZW5lcmF0ZUZpZWxkcygpO1xuXHR0YWJsZS5zaHVmZmxlKCk7XG5cdHRhYmxlLmRyYXdHYW1lKCk7XG5cblx0aWYgKHR5cGVvZiB0aW1lciA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHR0aW1lciA9IG5ldyBHYW1lVGltZXIoKTtcblx0fVxuXHR0aW1lci5zZXRJbmMoZmFsc2UpO1xuXHR0aW1lci5zZXRDdXJyZW50VGltZSgodGltZXIuZ2V0Q3VycmVudFRpbWUoKSA9PT0gMCA/IDgwIDogdGltZXIuZ2V0Q3VycmVudFRpbWUoKSkgKyAzMCArIGxldmVsICogMTApO1xuXHR0aW1lci5zdGFydCgpO1xuXG5cdGluZm9ybWF0aW9uID0gbmV3IEluZm9ybWF0aW9uUGFuZWwoKTtcblx0aW5mb3JtYXRpb24uaW5pdFBhbmVsKCk7XG5cdGluZm9ybWF0aW9uLnVwZGF0ZVNjb3JlKGNvb2tpZS5nZXQoJ3RpbWVfdHJpYWxfc2NvcmUnLCAnLScpKTtcblx0aW5mb3JtYXRpb24udXBkYXRlVGltZXIodGltZXIuZ2V0TWluKCkgKyAnOicgKyB0aW1lci5nZXRTZWMoKSk7XG5cdGluZm9ybWF0aW9uLnVwZGF0ZUxldmVsKGxldmVsKTtcbn1cblxuZnVuY3Rpb24gR2FtZVRpbWVyKCkge1xuXHQvLyBPcHRpb25zXG5cdHZhciBpbmMgPSB0cnVlO1xuXHR2YXIgdGltZXJPYmogPSBudWxsO1xuXG5cdC8vIFN0YXRlc1xuXHR2YXIgY3VycmVudFRpbWUgPSAwO1xuXHR2YXIgY3VycmVudFNlYyA9IDA7XG5cdHZhciBjdXJyZW50TWluID0gMDtcblxuXHR0aGlzLnNldEluYyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0aW5jID0gdmFsdWU7XG5cdH07XG5cblx0dGhpcy5nZXRDdXJyZW50VGltZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBjdXJyZW50VGltZTtcblx0fTtcblxuXHR0aGlzLnNldEN1cnJlbnRUaW1lID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRjdXJyZW50VGltZSA9IHZhbHVlO1xuXHRcdHVwZGF0ZU1pbkFuZFNlYygpO1xuXHR9O1xuXG5cdHRoaXMuc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoaW5jKSB7XG5cdFx0XHR0aW1lck9iaiA9IHNldEludGVydmFsKHJlZnJlc2hJbmNUaW1lciwgMTAwMCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRpbWVyT2JqID0gc2V0SW50ZXJ2YWwocmVmcmVzaERlY1RpbWVyLCAxMDAwKTtcblx0XHR9XG5cdH07XG5cblx0dGhpcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0Y2xlYXJJbnRlcnZhbCh0aW1lck9iaik7XG5cdH07XG5cblx0dGhpcy5yZXNldCA9IGZ1bmN0aW9uKCkge1xuXHRcdGN1cnJlbnRUaW1lID0gMDtcblx0XHRjdXJyZW50U2VjID0gMDtcblx0XHRjdXJyZW50TWluID0gMDtcblx0fTtcblxuXHR0aGlzLmdldFNlYyA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBjdXJyZW50U2VjO1xuXHR9O1xuXG5cdHRoaXMuZ2V0TWluID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGN1cnJlbnRNaW47XG5cdH07XG5cblx0ZnVuY3Rpb24gcmVmcmVzaEluY1RpbWVyKCkge1xuXHRcdGN1cnJlbnRUaW1lKys7XG5cdFx0dXBkYXRlTWluQW5kU2VjKCk7XG5cdFx0aW5mb3JtYXRpb24udXBkYXRlVGltZXIoY3VycmVudE1pbiArICc6JyArIGN1cnJlbnRTZWMpO1xuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaERlY1RpbWVyKCkge1xuXHRcdGN1cnJlbnRUaW1lLS07XG5cdFx0dXBkYXRlTWluQW5kU2VjKCk7XG5cdFx0aW5mb3JtYXRpb24udXBkYXRlVGltZXIoY3VycmVudE1pbiArICc6JyArIGN1cnJlbnRTZWMpO1xuXG5cdFx0aWYgKGN1cnJlbnRUaW1lID09PSAwKSB7XG5cdFx0XHR0aW1lVHJpYWxHYW1lVGltZVVwKCk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlTWluQW5kU2VjKCkge1xuXHRcdGN1cnJlbnRNaW4gPSBNYXRoLmZsb29yKGN1cnJlbnRUaW1lIC8gNjApO1xuXHRcdGN1cnJlbnRNaW4gPSBjdXJyZW50TWluIDwgMTAgPyAnMCcgKyBjdXJyZW50TWluIDogY3VycmVudE1pbjtcblx0XHRjdXJyZW50U2VjID0gY3VycmVudFRpbWUgJSA2MDtcblx0XHRjdXJyZW50U2VjID0gY3VycmVudFNlYyA8IDEwID8gJzAnICsgY3VycmVudFNlYyA6IGN1cnJlbnRTZWM7XG5cdH1cbn1cblxuZnVuY3Rpb24gbWFpbk1lbnUoKSB7XG5cblx0aWYgKHN0YWdlLmhhc0NoaWxkcmVuKCkpIHtcblx0XHRzdGFnZS5kZXN0cm95Q2hpbGRyZW4oKTtcblx0fVxuXG5cdHZhciBjbGFzc2ljR2FtZVRleHQgPSBuZXcgS2luZXRpYy5UZXh0KHtcblx0XHR4OiB3aWR0aCAvIDIsXG5cdFx0eTogaGVpZ2h0IC8gMyAtIDEwMCxcblx0XHR0ZXh0OiAnQ2xhc3NpYyBnYW1lJyxcblx0XHRmb250U2l6ZTogMzIsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHRjbGFzc2ljR2FtZVRleHQuc2V0T2Zmc2V0KHtcblx0XHR4OiBjbGFzc2ljR2FtZVRleHQuZ2V0V2lkdGgoKSAvIDJcblx0fSk7XG5cblx0dmFyIHRpbWVUcmlhbEdhbWVUZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogd2lkdGggLyAyLFxuXHRcdHk6IGhlaWdodCAvIDMsXG5cdFx0dGV4dDogJ1RpbWUgdHJpYWwnLFxuXHRcdGZvbnRTaXplOiAzMixcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdHRpbWVUcmlhbEdhbWVUZXh0LnNldE9mZnNldCh7XG5cdFx0eDogdGltZVRyaWFsR2FtZVRleHQuZ2V0V2lkdGgoKSAvIDJcblx0fSk7XG5cblx0dmFyIHNjb3JlQm9hcmRUZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogd2lkdGggLyAyLFxuXHRcdHk6IGhlaWdodCAvIDMgKyAxMDAsXG5cdFx0dGV4dDogJ1Njb3JlYm9hcmQnLFxuXHRcdGZvbnRTaXplOiAzMixcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdHNjb3JlQm9hcmRUZXh0LnNldE9mZnNldCh7XG5cdFx0eDogc2NvcmVCb2FyZFRleHQuZ2V0V2lkdGgoKSAvIDJcblx0fSk7XG5cblx0dmFyIGluZm9ybWF0aW9uVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IHdpZHRoIC8gMixcblx0XHR5OiBoZWlnaHQgLyAzICsgMjAwLFxuXHRcdHRleHQ6ICdJbmZvcm1hdGlvbicsXG5cdFx0Zm9udFNpemU6IDMyLFxuXHRcdGZvbnRGYW1pbHk6ICdDYWxpYnJpJyxcblx0XHRmaWxsOiAnZ3JleSdcblx0fSk7XG5cblx0aW5mb3JtYXRpb25UZXh0LnNldE9mZnNldCh7XG5cdFx0eDogaW5mb3JtYXRpb25UZXh0LmdldFdpZHRoKCkgLyAyXG5cdH0pO1xuXG5cdG1lbnVMYXllciA9IG5ldyBLaW5ldGljLkxheWVyKCk7XG5cdG1lbnVMYXllci5uYW1lID0gJ2dhbWVNZW51Jztcblx0bWVudUxheWVyLmFkZChjbGFzc2ljR2FtZVRleHQpO1xuXHRtZW51TGF5ZXIuYWRkKHRpbWVUcmlhbEdhbWVUZXh0KTtcblx0bWVudUxheWVyLmFkZChzY29yZUJvYXJkVGV4dCk7XG5cdG1lbnVMYXllci5hZGQoaW5mb3JtYXRpb25UZXh0KTtcblx0c3RhZ2UuYWRkKG1lbnVMYXllcik7XG5cblx0Ly8gRXZlbnQgbGlzdGVuZXJzXG5cdHZhciBjbGFzc2ljR2FtZVRleHRNb3VzZU92ZXIgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0Y2xhc3NpY0dhbWVUZXh0LmZpbGwoJ2JsYWNrJyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIG1lbnVMYXllcik7XG5cblx0dmFyIGNsYXNzaWNHYW1lVGV4dE1vdXNlT3V0ID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdGNsYXNzaWNHYW1lVGV4dC5maWxsKCdncmV5Jyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIG1lbnVMYXllcik7XG5cblx0Y2xhc3NpY0dhbWVUZXh0Lm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcblx0XHRjbGFzc2ljR2FtZVRleHRNb3VzZU92ZXIuc3RhcnQoKTtcblx0fSk7XG5cblx0Y2xhc3NpY0dhbWVUZXh0Lm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkge1xuXHRcdGNsYXNzaWNHYW1lVGV4dE1vdXNlT3V0LnN0YXJ0KCk7XG5cdH0pO1xuXG5cdGNsYXNzaWNHYW1lVGV4dC5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcblx0XHRjbGFzc2ljRGlmZmljdWx0eVNlbGVjdE1lbnUoKTtcblx0fSk7XG5cblx0dmFyIHRpbWVUcmlhbEdhbWVUZXh0TW91c2VPdmVyID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdHRpbWVUcmlhbEdhbWVUZXh0LmZpbGwoJ2JsYWNrJyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIG1lbnVMYXllcik7XG5cblx0dmFyIHRpbWVUcmlhbEdhbWVUZXh0TW91c2VPdXQgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0dGltZVRyaWFsR2FtZVRleHQuZmlsbCgnZ3JleScpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBtZW51TGF5ZXIpO1xuXG5cdHRpbWVUcmlhbEdhbWVUZXh0Lm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcblx0XHR0aW1lVHJpYWxHYW1lVGV4dE1vdXNlT3Zlci5zdGFydCgpO1xuXHR9KTtcblxuXHR0aW1lVHJpYWxHYW1lVGV4dC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcblx0XHR0aW1lVHJpYWxHYW1lVGV4dE1vdXNlT3V0LnN0YXJ0KCk7XG5cdH0pO1xuXG5cdHRpbWVUcmlhbEdhbWVUZXh0Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuXHRcdHRpbWVUcmlhbEdhbWVNZW51KCk7XG5cdH0pO1xuXG5cdHZhciBzY29yZUJvYXJkVGV4dE1vdXNlT3ZlciA9IG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcblx0XHRzY29yZUJvYXJkVGV4dC5maWxsKCdibGFjaycpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBtZW51TGF5ZXIpO1xuXG5cdHZhciBzY29yZUJvYXJkVGV4dE1vdXNlT3V0ID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdHNjb3JlQm9hcmRUZXh0LmZpbGwoJ2dyZXknKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgbWVudUxheWVyKTtcblxuXHRzY29yZUJvYXJkVGV4dC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oKSB7XG5cdFx0c2NvcmVCb2FyZFRleHRNb3VzZU92ZXIuc3RhcnQoKTtcblx0fSk7XG5cblx0c2NvcmVCb2FyZFRleHQub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XG5cdFx0c2NvcmVCb2FyZFRleHRNb3VzZU91dC5zdGFydCgpO1xuXHR9KTtcblxuXHRzY29yZUJvYXJkVGV4dC5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcblx0XHRzY29yZUJvYXJkTWVudSgpO1xuXHR9KTtcblxuXHR2YXIgaW5mb3JtYXRpb25UZXh0TW91c2VPdmVyID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdGluZm9ybWF0aW9uVGV4dC5maWxsKCdibGFjaycpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBtZW51TGF5ZXIpO1xuXG5cdHZhciBpbmZvcm1hdGlvblRleHRNb3VzZU91dCA9IG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcblx0XHRpbmZvcm1hdGlvblRleHQuZmlsbCgnZ3JleScpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBtZW51TGF5ZXIpO1xuXG5cdGluZm9ybWF0aW9uVGV4dC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oKSB7XG5cdFx0aW5mb3JtYXRpb25UZXh0TW91c2VPdmVyLnN0YXJ0KCk7XG5cdH0pO1xuXG5cdGluZm9ybWF0aW9uVGV4dC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcblx0XHRpbmZvcm1hdGlvblRleHRNb3VzZU91dC5zdGFydCgpO1xuXHR9KTtcblxuXHRpbmZvcm1hdGlvblRleHQub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cdFx0aW5mb3JtYXRpb25NZW51KCk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2ljRGlmZmljdWx0eVNlbGVjdE1lbnUoKSB7XG5cblx0aWYgKHN0YWdlLmhhc0NoaWxkcmVuKCkpIHtcblx0XHRzdGFnZS5kZXN0cm95Q2hpbGRyZW4oKTtcblx0fVxuXG5cdHZhciBlYXN5VGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IHdpZHRoIC8gMixcblx0XHR5OiBoZWlnaHQgLyAzIC0gMTAwLFxuXHRcdHRleHQ6ICdFYXN5ICg1eDUpJyxcblx0XHRmb250U2l6ZTogMzIsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHRlYXN5VGV4dC5zZXRPZmZzZXQoe1xuXHRcdHg6IGVhc3lUZXh0LmdldFdpZHRoKCkgLyAyXG5cdH0pO1xuXG5cdHZhciBtZWRpdW1UZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogd2lkdGggLyAyLFxuXHRcdHk6IGhlaWdodCAvIDMsXG5cdFx0dGV4dDogJ01lZGl1bSAoMTB4MTApJyxcblx0XHRmb250U2l6ZTogMzIsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHRtZWRpdW1UZXh0LnNldE9mZnNldCh7XG5cdFx0eDogbWVkaXVtVGV4dC5nZXRXaWR0aCgpIC8gMlxuXHR9KTtcblxuXHR2YXIgaGFyZFRleHQgPSBuZXcgS2luZXRpYy5UZXh0KHtcblx0XHR4OiB3aWR0aCAvIDIsXG5cdFx0eTogaGVpZ2h0IC8gMyArIDEwMCxcblx0XHR0ZXh0OiAnSGFyZCAoMTV4MTUpJyxcblx0XHRmb250U2l6ZTogMzIsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHRoYXJkVGV4dC5zZXRPZmZzZXQoe1xuXHRcdHg6IGhhcmRUZXh0LmdldFdpZHRoKCkgLyAyXG5cdH0pO1xuXG5cdHZhciBiYWNrVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IHdpZHRoIC8gMixcblx0XHR5OiBoZWlnaHQgLyAzICsgMjAwLFxuXHRcdHRleHQ6ICdCYWNrIHRvIHRoZSBtZW51Jyxcblx0XHRmb250U2l6ZTogMzIsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHRiYWNrVGV4dC5zZXRPZmZzZXQoe1xuXHRcdHg6IGJhY2tUZXh0LmdldFdpZHRoKCkgLyAyXG5cdH0pO1xuXG5cdC8vIExheWVyIHNldHVwXG5cdGRpZmZpY3VsdHlMYXllciA9IG5ldyBLaW5ldGljLkxheWVyKCk7XG5cdGRpZmZpY3VsdHlMYXllci5uYW1lID0gJ2RpZmZpY3VsdHlTZWxlY3RNZW51Jztcblx0ZGlmZmljdWx0eUxheWVyLmFkZChlYXN5VGV4dCk7XG5cdGRpZmZpY3VsdHlMYXllci5hZGQobWVkaXVtVGV4dCk7XG5cdGRpZmZpY3VsdHlMYXllci5hZGQoaGFyZFRleHQpO1xuXHRkaWZmaWN1bHR5TGF5ZXIuYWRkKGJhY2tUZXh0KTtcblx0c3RhZ2UuYWRkKGRpZmZpY3VsdHlMYXllcik7XG5cblx0Ly8gRWFzeSBtZW51XG5cdHZhciBlYXN5VGV4dE1vdXNlT3ZlciA9IG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcblx0XHRlYXN5VGV4dC5maWxsKCdibGFjaycpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBkaWZmaWN1bHR5TGF5ZXIpO1xuXG5cdHZhciBlYXN5VGV4dE1vdXNlT3V0ID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdGVhc3lUZXh0LmZpbGwoJ2dyZXknKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgZGlmZmljdWx0eUxheWVyKTtcblxuXHRlYXN5VGV4dC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oKSB7XG5cdFx0ZWFzeVRleHRNb3VzZU92ZXIuc3RhcnQoKTtcblx0fSk7XG5cblx0ZWFzeVRleHQub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XG5cdFx0ZWFzeVRleHRNb3VzZU91dC5zdGFydCgpO1xuXHR9KTtcblxuXHRlYXN5VGV4dC5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcblx0XHRnYW1lRGlmZmljdWx0eSA9ICdlYXN5Jztcblx0XHRzdGFydE5ld0NsYXNzaWNHYW1lKCk7XG5cdH0pO1xuXG5cdC8vIE1lZGl1bSBtZW51XG5cdHZhciBtZWRpdW1UZXh0TW91c2VPdmVyID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdG1lZGl1bVRleHQuZmlsbCgnYmxhY2snKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgZGlmZmljdWx0eUxheWVyKTtcblxuXHR2YXIgbWVkaXVtVGV4dE1vdXNlT3V0ID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdG1lZGl1bVRleHQuZmlsbCgnZ3JleScpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBkaWZmaWN1bHR5TGF5ZXIpO1xuXG5cdG1lZGl1bVRleHQub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCkge1xuXHRcdG1lZGl1bVRleHRNb3VzZU92ZXIuc3RhcnQoKTtcblx0fSk7XG5cblx0bWVkaXVtVGV4dC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcblx0XHRtZWRpdW1UZXh0TW91c2VPdXQuc3RhcnQoKTtcblx0fSk7XG5cblx0bWVkaXVtVGV4dC5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcblx0XHRnYW1lRGlmZmljdWx0eSA9ICdtZWRpdW0nO1xuXHRcdHN0YXJ0TmV3Q2xhc3NpY0dhbWUoKTtcblx0fSk7XG5cblx0Ly8gSGFyZCBtZW51XG5cdHZhciBoYXJkVGV4dE1vdXNlT3ZlciA9IG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcblx0XHRoYXJkVGV4dC5maWxsKCdibGFjaycpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBkaWZmaWN1bHR5TGF5ZXIpO1xuXG5cdHZhciBoYXJkVGV4dE1vdXNlT3V0ID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdGhhcmRUZXh0LmZpbGwoJ2dyZXknKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgZGlmZmljdWx0eUxheWVyKTtcblxuXHRoYXJkVGV4dC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oKSB7XG5cdFx0aGFyZFRleHRNb3VzZU92ZXIuc3RhcnQoKTtcblx0fSk7XG5cblx0aGFyZFRleHQub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XG5cdFx0aGFyZFRleHRNb3VzZU91dC5zdGFydCgpO1xuXHR9KTtcblxuXHRoYXJkVGV4dC5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcblx0XHRnYW1lRGlmZmljdWx0eSA9ICdoYXJkJztcblx0XHRzdGFydE5ld0NsYXNzaWNHYW1lKCk7XG5cdH0pO1xuXG5cdC8vIEJhY2sgbWVudVxuXHR2YXIgYmFja1RleHRNb3VzZU92ZXIgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0YmFja1RleHQuZmlsbCgnYmxhY2snKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgZGlmZmljdWx0eUxheWVyKTtcblxuXHR2YXIgYmFja1RleHRNb3VzZU91dCA9IG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcblx0XHRiYWNrVGV4dC5maWxsKCdncmV5Jyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIGRpZmZpY3VsdHlMYXllcik7XG5cblx0YmFja1RleHQub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0TW91c2VPdmVyLnN0YXJ0KCk7XG5cdH0pO1xuXG5cdGJhY2tUZXh0Lm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0TW91c2VPdXQuc3RhcnQoKTtcblx0fSk7XG5cblx0YmFja1RleHQub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cdFx0bWFpbk1lbnUoKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIHRpbWVUcmlhbEdhbWVNZW51KCkge1xuXG5cdGlmIChzdGFnZS5oYXNDaGlsZHJlbigpKSB7XG5cdFx0c3RhZ2UuZGVzdHJveUNoaWxkcmVuKCk7XG5cdH1cblxuXHR2YXIgdGltZVRyaWFsVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IHdpZHRoIC8gMixcblx0XHR5OiBoZWlnaHQgLyAzLFxuXHRcdHRleHQ6ICdTdGFydGluZyB0aW1lIHRyaWFsJyxcblx0XHRmb250U2l6ZTogMzIsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHR0aW1lVHJpYWxUZXh0LnNldE9mZnNldCh7XG5cdFx0eDogdGltZVRyaWFsVGV4dC5nZXRXaWR0aCgpIC8gMlxuXHR9KTtcblxuXHR2YXIgYmFja1RleHQgPSBuZXcgS2luZXRpYy5UZXh0KHtcblx0XHR4OiB3aWR0aCAvIDIsXG5cdFx0eTogaGVpZ2h0IC8gMyArIDIwMCxcblx0XHR0ZXh0OiAnQmFjayB0byB0aGUgbWVudScsXG5cdFx0Zm9udFNpemU6IDMyLFxuXHRcdGZvbnRGYW1pbHk6ICdDYWxpYnJpJyxcblx0XHRmaWxsOiAnZ3JleSdcblx0fSk7XG5cblx0YmFja1RleHQuc2V0T2Zmc2V0KHtcblx0XHR4OiBiYWNrVGV4dC5nZXRXaWR0aCgpIC8gMlxuXHR9KTtcblxuXHQvLyBMYXllciBzZXR1cFxuXHR0aW1lVHJpYWxHYW1lTGF5ZXIgPSBuZXcgS2luZXRpYy5MYXllcigpO1xuXHR0aW1lVHJpYWxHYW1lTGF5ZXIubmFtZSA9ICd0aW1lVHJpYWxHYW1lTGF5ZXInO1xuXHR0aW1lVHJpYWxHYW1lTGF5ZXIuYWRkKHRpbWVUcmlhbFRleHQpO1xuXHR0aW1lVHJpYWxHYW1lTGF5ZXIuYWRkKGJhY2tUZXh0KTtcblx0c3RhZ2UuYWRkKHRpbWVUcmlhbEdhbWVMYXllcik7XG5cblx0Ly8gVGltZSBUcmlhbCBtZW51XG5cdHZhciB0aW1lVHJpYWxUZXh0TW91c2VPdmVyID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdHRpbWVUcmlhbFRleHQuZmlsbCgnYmxhY2snKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgdGltZVRyaWFsR2FtZUxheWVyKTtcblxuXHR2YXIgdGltZVRyaWFsVGV4dE1vdXNlT3V0ID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdHRpbWVUcmlhbFRleHQuZmlsbCgnZ3JleScpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCB0aW1lVHJpYWxHYW1lTGF5ZXIpO1xuXG5cdHRpbWVUcmlhbFRleHQub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCkge1xuXHRcdHRpbWVUcmlhbFRleHRNb3VzZU92ZXIuc3RhcnQoKTtcblx0fSk7XG5cblx0dGltZVRyaWFsVGV4dC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcblx0XHR0aW1lVHJpYWxUZXh0TW91c2VPdXQuc3RhcnQoKTtcblx0fSk7XG5cblx0dGltZVRyaWFsVGV4dC5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcblx0XHRzdGFydE5ld1RpbWVUcmlhbEdhbWUoKTtcblx0fSk7XG5cblx0Ly8gQmFjayBtZW51XG5cdHZhciBiYWNrVGV4dE1vdXNlT3ZlciA9IG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcblx0XHRiYWNrVGV4dC5maWxsKCdibGFjaycpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCB0aW1lVHJpYWxHYW1lTGF5ZXIpO1xuXG5cdHZhciBiYWNrVGV4dE1vdXNlT3V0ID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0LmZpbGwoJ2dyZXknKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgdGltZVRyaWFsR2FtZUxheWVyKTtcblxuXHRiYWNrVGV4dC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oKSB7XG5cdFx0YmFja1RleHRNb3VzZU92ZXIuc3RhcnQoKTtcblx0fSk7XG5cblx0YmFja1RleHQub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XG5cdFx0YmFja1RleHRNb3VzZU91dC5zdGFydCgpO1xuXHR9KTtcblxuXHRiYWNrVGV4dC5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcblx0XHRtYWluTWVudSgpO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gc2NvcmVCb2FyZE1lbnUoKSB7XG5cdGlmIChzdGFnZS5oYXNDaGlsZHJlbigpKSB7XG5cdFx0c3RhZ2UuZGVzdHJveUNoaWxkcmVuKCk7XG5cdH1cblxuXHR2YXIgY2xhc3NpY1RleHQgPSBuZXcgS2luZXRpYy5UZXh0KHtcblx0XHR4OiB3aWR0aCAvIDIsXG5cdFx0eTogaGVpZ2h0IC8gMyAtIDEwMCxcblx0XHR0ZXh0OiAnQ2xhc3NpYyBnYW1lJyxcblx0XHRmb250U2l6ZTogMzIsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHRjbGFzc2ljVGV4dC5zZXRPZmZzZXQoe1xuXHRcdHg6IGNsYXNzaWNUZXh0LmdldFdpZHRoKCkgLyAyXG5cdH0pO1xuXG5cdHZhciBlYXN5VGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IHdpZHRoIC8gMiAtIDEyMCxcblx0XHR5OiBoZWlnaHQgLyAzIC0gNDAsXG5cdFx0dGV4dDogJ0Vhc3lcXG4nICsgY29va2llLmdldCgnY2xhc3NpY19oaWdoX3Njb3JlX2Vhc3knLCAnOTk6OTknKSxcblx0XHRmb250U2l6ZTogMTgsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHRlYXN5VGV4dC5zZXRPZmZzZXQoe1xuXHRcdHg6IGVhc3lUZXh0LmdldFdpZHRoKCkgLyAyXG5cdH0pO1xuXG5cdHZhciBtZWRpdW1UZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogd2lkdGggLyAyLFxuXHRcdHk6IGhlaWdodCAvIDMgLSA0MCxcblx0XHR0ZXh0OiAnTWVkaXVtXFxuJyArIGNvb2tpZS5nZXQoJ2NsYXNzaWNfaGlnaF9zY29yZV9tZWRpdW0nLCAnOTk6OTknKSxcblx0XHRmb250U2l6ZTogMTgsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHRtZWRpdW1UZXh0LnNldE9mZnNldCh7XG5cdFx0eDogbWVkaXVtVGV4dC5nZXRXaWR0aCgpIC8gMlxuXHR9KTtcblxuXHR2YXIgaGFyZFRleHQgPSBuZXcgS2luZXRpYy5UZXh0KHtcblx0XHR4OiB3aWR0aCAvIDIgKyAxMjAsXG5cdFx0eTogaGVpZ2h0IC8gMyAtIDQwLFxuXHRcdHRleHQ6ICdIYXJkXFxuJyArIGNvb2tpZS5nZXQoJ2NsYXNzaWNfaGlnaF9zY29yZV9oYXJkJywgJzk5Ojk5JyksXG5cdFx0Zm9udFNpemU6IDE4LFxuXHRcdGZvbnRGYW1pbHk6ICdDYWxpYnJpJyxcblx0XHRmaWxsOiAnZ3JleSdcblx0fSk7XG5cblx0aGFyZFRleHQuc2V0T2Zmc2V0KHtcblx0XHR4OiBoYXJkVGV4dC5nZXRXaWR0aCgpIC8gMlxuXHR9KTtcblxuXHR2YXIgdGltZVRyaWFsVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IHdpZHRoIC8gMixcblx0XHR5OiBoZWlnaHQgLyAzICsgNDAsXG5cdFx0dGV4dDogJ1RpbWUgdHJpYWwnLFxuXHRcdGZvbnRTaXplOiAzMixcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdHRpbWVUcmlhbFRleHQuc2V0T2Zmc2V0KHtcblx0XHR4OiB0aW1lVHJpYWxUZXh0LmdldFdpZHRoKCkgLyAyXG5cdH0pO1xuXG5cdHZhciBsZXZlbFRleHQgPSBuZXcgS2luZXRpYy5UZXh0KHtcblx0XHR4OiB3aWR0aCAvIDIsXG5cdFx0eTogaGVpZ2h0IC8gMyArIDEwMCxcblx0XHR0ZXh0OiBjb29raWUuZ2V0KCd0aW1lX3RyaWFsX3Njb3JlJywgJzAnKSArICcuIGxldmVsJyxcblx0XHRmb250U2l6ZTogMTgsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHRsZXZlbFRleHQuc2V0T2Zmc2V0KHtcblx0XHR4OiBsZXZlbFRleHQuZ2V0V2lkdGgoKSAvIDJcblx0fSk7XG5cblx0dmFyIGJhY2tUZXh0ID0gbmV3IEtpbmV0aWMuVGV4dCh7XG5cdFx0eDogd2lkdGggLyAyLFxuXHRcdHk6IGhlaWdodCAvIDMgKyAyMDAsXG5cdFx0dGV4dDogJ0JhY2sgdG8gdGhlIG1lbnUnLFxuXHRcdGZvbnRTaXplOiAzMixcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdGJhY2tUZXh0LnNldE9mZnNldCh7XG5cdFx0eDogYmFja1RleHQuZ2V0V2lkdGgoKSAvIDJcblx0fSk7XG5cblx0Ly8gTGF5ZXIgc2V0dXBcblx0c2NvcmVCb2FyZE1lbnVMYXllciA9IG5ldyBLaW5ldGljLkxheWVyKCk7XG5cdHNjb3JlQm9hcmRNZW51TGF5ZXIubmFtZSA9ICdzY29yZUJvYXJkTWVudUxheWVyJztcblx0c2NvcmVCb2FyZE1lbnVMYXllci5hZGQoY2xhc3NpY1RleHQpO1xuXHRzY29yZUJvYXJkTWVudUxheWVyLmFkZChlYXN5VGV4dCk7XG5cdHNjb3JlQm9hcmRNZW51TGF5ZXIuYWRkKG1lZGl1bVRleHQpO1xuXHRzY29yZUJvYXJkTWVudUxheWVyLmFkZChoYXJkVGV4dCk7XG5cdHNjb3JlQm9hcmRNZW51TGF5ZXIuYWRkKHRpbWVUcmlhbFRleHQpO1xuXHRzY29yZUJvYXJkTWVudUxheWVyLmFkZChsZXZlbFRleHQpO1xuXHRzY29yZUJvYXJkTWVudUxheWVyLmFkZChiYWNrVGV4dCk7XG5cdHN0YWdlLmFkZChzY29yZUJvYXJkTWVudUxheWVyKTtcblxuXHQvLyBCYWNrIG1lbnVcblx0dmFyIGJhY2tUZXh0TW91c2VPdmVyID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0LmZpbGwoJ2JsYWNrJyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIHNjb3JlQm9hcmRNZW51TGF5ZXIpO1xuXG5cdHZhciBiYWNrVGV4dE1vdXNlT3V0ID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0LmZpbGwoJ2dyZXknKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgc2NvcmVCb2FyZE1lbnVMYXllcik7XG5cblx0YmFja1RleHQub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0TW91c2VPdmVyLnN0YXJ0KCk7XG5cdH0pO1xuXG5cdGJhY2tUZXh0Lm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0TW91c2VPdXQuc3RhcnQoKTtcblx0fSk7XG5cblx0YmFja1RleHQub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cdFx0bWFpbk1lbnUoKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGluZm9ybWF0aW9uTWVudSgpIHtcblxuXHRpZiAoc3RhZ2UuaGFzQ2hpbGRyZW4oKSkge1xuXHRcdHN0YWdlLmRlc3Ryb3lDaGlsZHJlbigpO1xuXHR9XG5cblx0dmFyIGluZm9ybWF0aW9uVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IHdpZHRoIC8gMixcblx0XHR5OiBoZWlnaHQgLyAzIC0gMTAwLFxuXHRcdHRleHQ6ICcnLFxuXHRcdGZvbnRTaXplOiAxOCxcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdGxldCBpbmZvVGV4dCA9ICdHYW1lIGdvYWw6XFxuVHVybiBhbGwgdGhlIHBpcGVzIGludG8gdGhlIGNvcnJlY3QgcG9zaXRpb24sIHNvIGV2ZXJ5IHBpcGUgY29ubmVjdGVkIHRvIGVhY2ggb3RoZXIhXFxuJztcblxuXHRpbmZvVGV4dCArPSAnSW4gY2xhc3NpYyBnYW1lIHlvdSBjYW4gY2hvb3NlIGJldHdlZW4gdGhyZWUgZGlmZmVyZW50IGRpZmZpY3VsdHksIHdoaWxlIGluIHRpbWUgdHJpYWwgdGhlIGRpZmZpY3VsdHkgaXMgaW5jcmVtZW50YWx5IGluY3JlYXNpbmcuXFxuJztcblx0aW5mb1RleHQgKz0gJ1RpbWUgaXMga2V5LCBzbyBkb25cXCd0IGhlc2l0YXRlIHRvbyBtdWNoIVxcbic7XG5cdGluZm9UZXh0ICs9ICdZb3UgY2FuIGNoZWNrIHlvdXIgcmFuayBhdCB0aGUgc2NvcmVib2FyZCFcXG5cXG5NYWRlIGJ5OiBXaGl0ZSBSYWJiaXQgKFRhbcOhcyBSdXN6a2EpIChDKSAyMDE0LFxcbk1haWw6IHJ1c3prYSBkb3QgdGFtYXMgYXQgZ21haWwgZG90IGNvbSc7XG5cblx0aW5mb3JtYXRpb25UZXh0LnNldFRleHQoaW5mb1RleHQpO1xuXG5cdGluZm9ybWF0aW9uVGV4dC5zZXRPZmZzZXQoe1xuXHRcdHg6IGluZm9ybWF0aW9uVGV4dC5nZXRXaWR0aCgpIC8gMiA+IDAgPyBpbmZvcm1hdGlvblRleHQuZ2V0V2lkdGgoKSAvIDIgOiAwXG5cdH0pO1xuXG5cdHZhciBiYWNrVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IHdpZHRoIC8gMixcblx0XHR5OiBoZWlnaHQgLyAzICsgMjAwLFxuXHRcdHRleHQ6ICdCYWNrIHRvIHRoZSBtZW51Jyxcblx0XHRmb250U2l6ZTogMzIsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHRiYWNrVGV4dC5zZXRPZmZzZXQoe1xuXHRcdHg6IGJhY2tUZXh0LmdldFdpZHRoKCkgLyAyXG5cdH0pO1xuXG5cdC8vIExheWVyIHNldHVwXG5cdGluZm9ybWF0aW9uTWVudUxheWVyID0gbmV3IEtpbmV0aWMuTGF5ZXIoKTtcblx0aW5mb3JtYXRpb25NZW51TGF5ZXIubmFtZSA9ICdpbmZvcm1hdGlvbk1lbnVMYXllcic7XG5cdGluZm9ybWF0aW9uTWVudUxheWVyLmFkZChpbmZvcm1hdGlvblRleHQpO1xuXHRpbmZvcm1hdGlvbk1lbnVMYXllci5hZGQoYmFja1RleHQpO1xuXHRzdGFnZS5hZGQoaW5mb3JtYXRpb25NZW51TGF5ZXIpO1xuXG5cdC8vIEJhY2sgbWVudVxuXHR2YXIgYmFja1RleHRNb3VzZU92ZXIgPSBuZXcgS2luZXRpYy5BbmltYXRpb24oZnVuY3Rpb24oKSB7XG5cdFx0YmFja1RleHQuZmlsbCgnYmxhY2snKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgaW5mb3JtYXRpb25NZW51TGF5ZXIpO1xuXG5cdHZhciBiYWNrVGV4dE1vdXNlT3V0ID0gbmV3IEtpbmV0aWMuQW5pbWF0aW9uKGZ1bmN0aW9uKCkge1xuXHRcdGJhY2tUZXh0LmZpbGwoJ2dyZXknKTtcblx0XHR0aGlzLnN0b3AoKTtcblx0fSwgaW5mb3JtYXRpb25NZW51TGF5ZXIpO1xuXG5cdGJhY2tUZXh0Lm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcblx0XHRiYWNrVGV4dE1vdXNlT3Zlci5zdGFydCgpO1xuXHR9KTtcblxuXHRiYWNrVGV4dC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcblx0XHRiYWNrVGV4dE1vdXNlT3V0LnN0YXJ0KCk7XG5cdH0pO1xuXG5cdGJhY2tUZXh0Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuXHRcdG1haW5NZW51KCk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBHYW1lVGFibGUoKSB7XG5cdGdhbWVMYXllcnMgPSBbXTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGxheWVyUm93czsgaSsrKSB7XG5cdFx0Z2FtZUxheWVyc1tpXSA9IG5ldyBBcnJheShsYXllckNvbHVtbnMpO1xuXHRcdGZvciAobGV0IGogPSAwOyBqIDwgbGF5ZXJDb2x1bW5zOyBqKyspIHtcblx0XHRcdGdhbWVMYXllcnNbaV1bal0gPSBuZXcgS2luZXRpYy5MYXllcigpO1xuXHRcdH1cblx0fVxuXG5cdGJsb2NrcyA9IFtdO1xuXG5cdHRoaXMuZ2VuZXJhdGVGaWVsZHMgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZ3JlYXRlciA9IDA7XG5cdFx0dmFyIHNtYWxsZXIgPSAwO1xuXG5cdFx0dmFyIGdlbmVyYXRlSXQgPSB0cnVlO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcblx0XHRcdGJsb2Nrc1tpXSA9IG5ldyBBcnJheShjb2x1bW5zKTtcblx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XG5cdFx0XHRcdGJsb2Nrc1tpXVtqXSA9IG5ldyBCbG9jayhpLCBqLCBpICogY29sdW1ucyArIGosIHNwYWNlLCBibG9ja1NpemUpO1xuXHRcdFx0XHQvLyBibG9ja3NbaV1bal0uaW5pdChvbkNsaWNrQmxvY2ssIGJveEFuaW1hdGlvbik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0d2hpbGUgKGdlbmVyYXRlSXQpIHtcblx0XHRcdGxldCB4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcm93cyksXG5cdFx0XHRcdHkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjb2x1bW5zKSxcblx0XHRcdFx0Y3VycmVudEJsb2NrID0gYmxvY2tzW3hdW3ldO1xuXG5cdFx0XHRnZW5lcmF0ZUl0ID0gZmFsc2U7XG5cblx0XHRcdGlmIChjdXJyZW50QmxvY2sua2V5ICE9PSAwKSB7XG5cdFx0XHRcdHZhciBkaXJlY3Rpb24gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0ICsgMCk7XG5cblx0XHRcdFx0c3dpdGNoIChkaXJlY3Rpb24pIHtcblx0XHRcdFx0XHRjYXNlIDA6XG5cdFx0XHRcdFx0XHRpZiAoeCAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRsZXQgbGVmdEJsb2NrID0gYmxvY2tzW3ggLSAxXVt5XTtcblxuXHRcdFx0XHRcdFx0XHQvLyBMZWZ0XG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgbGVmdEJsb2NrICE9ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGN1cnJlbnRCbG9jay5rZXkgIT09IGxlZnRCbG9jay5rZXkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRCbG9jay5sZWZ0ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRcdGxlZnRCbG9jay5yaWdodCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0XHRncmVhdGVyID0gY3VycmVudEJsb2NrLmtleSA+IGxlZnRCbG9jay5rZXkgPyBjdXJyZW50QmxvY2sua2V5IDogbGVmdEJsb2NrLmtleTtcblx0XHRcdFx0XHRcdFx0XHRcdHNtYWxsZXIgPSBjdXJyZW50QmxvY2sua2V5IDwgbGVmdEJsb2NrLmtleSA/IGN1cnJlbnRCbG9jay5rZXkgOiBsZWZ0QmxvY2sua2V5O1xuXHRcdFx0XHRcdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBjb2x1bW5zOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoY3VycmVudEJsb2NrLmtleSA9PT0gZ3JlYXRlcikge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudEJsb2NrLmtleSA9IHNtYWxsZXI7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0XHRpZiAoeSAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRsZXQgdXBCbG9jayA9IGJsb2Nrc1t4XVt5IC0gMV07XG5cblx0XHRcdFx0XHRcdFx0Ly8gVXBcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiB1cEJsb2NrICE9ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGN1cnJlbnRCbG9jay5rZXkgIT09IHVwQmxvY2sua2V5KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50QmxvY2sudXAgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdFx0dXBCbG9jay5kb3duID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRcdGdyZWF0ZXIgPSBjdXJyZW50QmxvY2sua2V5ID4gdXBCbG9jay5rZXkgPyBjdXJyZW50QmxvY2sua2V5IDogdXBCbG9jay5rZXk7XG5cdFx0XHRcdFx0XHRcdFx0XHRzbWFsbGVyID0gY3VycmVudEJsb2NrLmtleSA8IHVwQmxvY2sua2V5ID8gY3VycmVudEJsb2NrLmtleSA6IHVwQmxvY2sua2V5O1xuXHRcdFx0XHRcdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBjb2x1bW5zOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoYmxvY2tzW2ldW2pdLmtleSA9PT0gZ3JlYXRlcikge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YmxvY2tzW2ldW2pdLmtleSA9IHNtYWxsZXI7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRpZiAoeCAhPT0gY29sdW1ucyAtIDEpIHtcblx0XHRcdFx0XHRcdFx0bGV0IHJpZ2h0QmxvY2sgPSBibG9ja3NbeCArIDFdW3ldO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJpZ2h0XG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgcmlnaHRCbG9jayAhPSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChjdXJyZW50QmxvY2sua2V5ICE9PSByaWdodEJsb2NrLmtleSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudEJsb2NrLnJpZ2h0ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRcdHJpZ2h0QmxvY2subGVmdCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0XHRncmVhdGVyID0gY3VycmVudEJsb2NrLmtleSA+IHJpZ2h0QmxvY2sua2V5ID8gY3VycmVudEJsb2NrLmtleSA6IHJpZ2h0QmxvY2sua2V5O1xuXHRcdFx0XHRcdFx0XHRcdFx0c21hbGxlciA9IGN1cnJlbnRCbG9jay5rZXkgPCByaWdodEJsb2NrLmtleSA/IGN1cnJlbnRCbG9jay5rZXkgOiByaWdodEJsb2NrLmtleTtcblx0XHRcdFx0XHRcdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKGJsb2Nrc1tpXVtqXS5rZXkgPT09IGdyZWF0ZXIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJsb2Nrc1tpXVtqXS5rZXkgPSBzbWFsbGVyO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0aWYgKHkgIT09IHJvd3MgLSAxKSB7XG5cdFx0XHRcdFx0XHRcdGxldCBkb3duQmxvY2sgPSBibG9ja3NbeF1beSArIDFdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIERvd25cblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBkb3duQmxvY2sgIT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY3VycmVudEJsb2NrLmtleSAhPT0gZG93bkJsb2NrLmtleSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudEJsb2NrLmRvd24gPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZG93bkJsb2NrLnVwID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRcdGdyZWF0ZXIgPSBjdXJyZW50QmxvY2sua2V5ID4gZG93bkJsb2NrLmtleSA/IGN1cnJlbnRCbG9jay5rZXkgOiBkb3duQmxvY2sua2V5O1xuXHRcdFx0XHRcdFx0XHRcdFx0c21hbGxlciA9IGN1cnJlbnRCbG9jay5rZXkgPCBkb3duQmxvY2sua2V5ID8gY3VycmVudEJsb2NrLmtleSA6IGRvd25CbG9jay5rZXk7XG5cdFx0XHRcdFx0XHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGNvbHVtbnM7IGorKykge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChibG9ja3NbaV1bal0ua2V5ID09PSBncmVhdGVyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRibG9ja3NbaV1bal0ua2V5ID0gc21hbGxlcjtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcblx0XHRcdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBjb2x1bW5zOyBqKyspIHtcblx0XHRcdFx0XHRpZiAoYmxvY2tzW2ldW2pdLmtleSA+IDApIHtcblx0XHRcdFx0XHRcdGdlbmVyYXRlSXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBibG9ja3Nbc3RhcnRpbmdQb2ludFhdW3N0YXJ0aW5nUG9pbnRZXS5jb25uZWN0ZWQgPSB0cnVlO1xuXHRcdC8vIGJsb2Nrc1tzdGFydGluZ1BvaW50WF1bc3RhcnRpbmdQb2ludFldLmNvbm5lY3Rpb25IYW5kbGVyKHRydWUpO1xuXHR9O1xuXG5cdHRoaXMuc2h1ZmZsZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNvbHVtbnM7IGorKykge1xuXHRcdFx0XHRibG9ja3NbaV1bal0uc2h1ZmZsZUl0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdHRoaXMuZHJhd0dhbWUgPSBmdW5jdGlvbigpIHtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG5cdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGNvbHVtbnM7IGorKykge1xuXHRcdFx0XHRibG9ja3NbaV1bal0uaW5pdChvbkNsaWNrQmxvY2ssIGJveEFuaW1hdGlvbiwgd2lkdGgsIHJvd3MpO1xuXG5cdFx0XHRcdGdhbWVMYXllcnNbTWF0aC5mbG9vcihpIC8gbGF5ZXJTaXplKV1bTWF0aC5mbG9vcihqIC8gbGF5ZXJTaXplKV0uYWRkKGJsb2Nrc1tpXVtqXS5ib3gpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGJsb2Nrc1tzdGFydGluZ1BvaW50WF1bc3RhcnRpbmdQb2ludFldLmNvbm5lY3RlZCA9IHRydWU7XG5cdFx0YmxvY2tzW3N0YXJ0aW5nUG9pbnRYXVtzdGFydGluZ1BvaW50WV0uY29ubmVjdGlvbkhhbmRsZXIodHJ1ZSk7XG5cblx0XHR0aGlzLmNoZWNrUGlwZUNvbm5lY3Rpb25zKCk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsYXllclJvd3M7IGkrKykge1xuXHRcdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBsYXllckNvbHVtbnM7IGorKykge1xuXHRcdFx0XHRzdGFnZS5hZGQoZ2FtZUxheWVyc1tpXVtqXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdHRoaXMuY2hlY2tQaXBlQ29ubmVjdGlvbnMgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgaSA9IDA7XG5cdFx0dmFyIGogPSAwO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuXHRcdFx0Zm9yIChqID0gMDsgaiA8IGNvbHVtbnM7IGorKykge1xuXHRcdFx0XHRibG9ja3NbaV1bal0uY29ubmVjdGVkID0gZmFsc2U7XG5cdFx0XHRcdGJsb2Nrc1tpXVtqXS5jb25uZWN0aW9uSGFuZGxlcihmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGJsb2Nrc1tzdGFydGluZ1BvaW50WF1bc3RhcnRpbmdQb2ludFldLmNvbm5lY3RlZCA9IHRydWU7XG5cdFx0YmxvY2tzW3N0YXJ0aW5nUG9pbnRYXVtzdGFydGluZ1BvaW50WV0uY29ubmVjdGlvbkhhbmRsZXIodHJ1ZSk7XG5cblx0XHQvLyBJdGVyYXRlIHRocm91Z2h0IHRoZSBtYXRyaXhcblx0XHRmb3IgKGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XG5cdFx0XHRcdC8vIElmIGN1cnJlbnQgZWxlbWVudCBpcyBjb25uZWN0aW5nXG5cdFx0XHRcdGlmIChibG9ja3NbaV1bal0uY29ubmVjdGVkKSB7XG5cdFx0XHRcdFx0dmFyIHVwZGF0ZWQgPSBmYWxzZTtcblx0XHRcdFx0XHQvLyBMZWZ0XG5cblx0XHRcdFx0XHRpZiAoaSAhPT0gMCAmJiAhdXBkYXRlZCkge1xuXHRcdFx0XHRcdFx0aWYgKGJsb2Nrc1tpXVtqXS5sZWZ0ICYmIGJsb2Nrc1tpIC0gMV1bal0ucmlnaHQpIHtcblx0XHRcdFx0XHRcdFx0aWYgKCFibG9ja3NbaSAtIDFdW2pdLmNvbm5lY3RlZCkge1xuXHRcdFx0XHRcdFx0XHRcdGJsb2Nrc1tpIC0gMV1bal0uY29ubmVjdGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRibG9ja3NbaSAtIDFdW2pdLmNvbm5lY3Rpb25IYW5kbGVyKHRydWUpO1xuXHRcdFx0XHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdFx0XHRcdGogPSAtMTtcblx0XHRcdFx0XHRcdFx0XHR1cGRhdGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBSaWdodFxuXHRcdFx0XHRcdGlmIChpICE9PSByb3dzIC0gMSAmJiAhdXBkYXRlZCkge1xuXHRcdFx0XHRcdFx0aWYgKGJsb2Nrc1tpXVtqXS5yaWdodCAmJiBibG9ja3NbaSArIDFdW2pdLmxlZnQpIHtcblx0XHRcdFx0XHRcdFx0aWYgKCFibG9ja3NbaSArIDFdW2pdLmNvbm5lY3RlZCkge1xuXHRcdFx0XHRcdFx0XHRcdGJsb2Nrc1tpICsgMV1bal0uY29ubmVjdGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRibG9ja3NbaSArIDFdW2pdLmNvbm5lY3Rpb25IYW5kbGVyKHRydWUpO1xuXHRcdFx0XHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdFx0XHRcdGogPSAtMTtcblx0XHRcdFx0XHRcdFx0XHR1cGRhdGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBVcFxuXHRcdFx0XHRcdGlmIChqICE9PSAwICYmICF1cGRhdGVkKSB7XG5cdFx0XHRcdFx0XHRpZiAoYmxvY2tzW2ldW2pdLnVwICYmIGJsb2Nrc1tpXVtqIC0gMV0uZG93bikge1xuXHRcdFx0XHRcdFx0XHRpZiAoIWJsb2Nrc1tpXVtqIC0gMV0uY29ubmVjdGVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0YmxvY2tzW2ldW2ogLSAxXS5jb25uZWN0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdGJsb2Nrc1tpXVtqIC0gMV0uY29ubmVjdGlvbkhhbmRsZXIodHJ1ZSk7XG5cdFx0XHRcdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0aiA9IC0xO1xuXHRcdFx0XHRcdFx0XHRcdHVwZGF0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIERvd25cblx0XHRcdFx0XHRpZiAoaiAhPT0gY29sdW1ucyAtIDEgJiYgIXVwZGF0ZWQpIHtcblx0XHRcdFx0XHRcdGlmIChibG9ja3NbaV1bal0uZG93biAmJiBibG9ja3NbaV1baiArIDFdLnVwKSB7XG5cdFx0XHRcdFx0XHRcdGlmICghYmxvY2tzW2ldW2ogKyAxXS5jb25uZWN0ZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRibG9ja3NbaV1baiArIDFdLmNvbm5lY3RlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0YmxvY2tzW2ldW2ogKyAxXS5jb25uZWN0aW9uSGFuZGxlcih0cnVlKTtcblx0XHRcdFx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHRcdFx0XHRqID0gLTE7XG5cdFx0XHRcdFx0XHRcdFx0dXBkYXRlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIEluZm9ybWF0aW9uUGFuZWwoKSB7XG5cblx0dmFyIHggPSB3aWR0aCAvIDIgKyByb3dzICogYmxvY2tTaXplIC8gMiArIHJvd3MgKiAoc3BhY2UgKiAyKTtcblx0dmFyIHkgPSAwO1xuXHR2YXIgcGFuZWxXaWR0aCA9IHdpZHRoIC0gKHggKyByb3dzICogc3BhY2UgKiAyKTtcblx0dmFyIHBhbmVsSGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdHZhciBpbmZvcm1hdGlvbkxheWVyID0gbmV3IEtpbmV0aWMuTGF5ZXIoKTtcblxuXHR2YXIgcGFuZWwgPSBuZXcgS2luZXRpYy5Hcm91cCh7XG5cdFx0eDogeCxcblx0XHR5OiB5LFxuXHRcdHdpZHRoOiBwYW5lbFdpZHRoLFxuXHRcdGhlaWdodDogcGFuZWxIZWlnaHRcblx0fSk7XG5cblx0dmFyIHRpbWVyR3JvdXAgPSBuZXcgS2luZXRpYy5Hcm91cCh7XG5cdFx0eDogMCxcblx0XHR5OiAwLFxuXHRcdHdpZHRoOiB4IC0gd2lkdGgsXG5cdFx0aGVpZ2h0OiBoZWlnaHRcblx0fSk7XG5cblx0dmFyIHNjb3JlID0gbmV3IEtpbmV0aWMuR3JvdXAoe1xuXHRcdHg6IDAsXG5cdFx0eTogMCxcblx0XHR3aWR0aDogeCAtIHdpZHRoLFxuXHRcdGhlaWdodDogaGVpZ2h0XG5cdH0pO1xuXG5cdHZhciBsZXZlbEdyb3VwID0gbmV3IEtpbmV0aWMuR3JvdXAoe1xuXHRcdHg6IDAsXG5cdFx0eTogMCxcblx0XHR3aWR0aDogeCAtIHdpZHRoLFxuXHRcdGhlaWdodDogaGVpZ2h0XG5cdH0pO1xuXG5cdHZhciBiYWNrVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IDIwMCxcblx0XHR5OiAyMDAsXG5cdFx0dGV4dDogJ0JhY2snLFxuXHRcdGZvbnRTaXplOiA0OCxcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdHZhciB0aW1lclRpdGxlVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IDMwLFxuXHRcdHk6IDUwLFxuXHRcdHRleHQ6ICdUaW1lOicsXG5cdFx0Zm9udFNpemU6IDMyLFxuXHRcdGZvbnRGYW1pbHk6ICdDYWxpYnJpJyxcblx0XHRmaWxsOiAnZ3JleSdcblx0fSk7XG5cblx0dmFyIHRpbWVyVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IDMwLFxuXHRcdHk6IDEwMCxcblx0XHR0ZXh0OiAnMDA6MDAnLFxuXHRcdGZvbnRTaXplOiA0OCxcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdHZhciBzY29yZVRpdGxlVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IDIwMCxcblx0XHR5OiA1MCxcblx0XHR0ZXh0OiAnUHJldmlvdXMgcmVjb3JkOicsXG5cdFx0Zm9udFNpemU6IDMyLFxuXHRcdGZvbnRGYW1pbHk6ICdDYWxpYnJpJyxcblx0XHRmaWxsOiAnZ3JleSdcblx0fSk7XG5cblx0dmFyIHNjb3JlVGV4dCA9IG5ldyBLaW5ldGljLlRleHQoe1xuXHRcdHg6IDIwMCxcblx0XHR5OiAxMDAsXG5cdFx0dGV4dDogJzAwOjAwJyxcblx0XHRmb250U2l6ZTogNDgsXG5cdFx0Zm9udEZhbWlseTogJ0NhbGlicmknLFxuXHRcdGZpbGw6ICdncmV5J1xuXHR9KTtcblxuXHR2YXIgbGV2ZWxUaXRsZVRleHQgPSBuZXcgS2luZXRpYy5UZXh0KHtcblx0XHR4OiAzMCxcblx0XHR5OiAyMDAsXG5cdFx0dGV4dDogJ0FjdHVhbCBsZXZlbDonLFxuXHRcdGZvbnRTaXplOiAzMixcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdHZhciBsZXZlbFRleHQgPSBuZXcgS2luZXRpYy5UZXh0KHtcblx0XHR4OiAzMCxcblx0XHR5OiAyNTAsXG5cdFx0dGV4dDogJzEnLFxuXHRcdGZvbnRTaXplOiA2NCxcblx0XHRmb250RmFtaWx5OiAnQ2FsaWJyaScsXG5cdFx0ZmlsbDogJ2dyZXknXG5cdH0pO1xuXG5cdHRoaXMuaW5pdFBhbmVsID0gZnVuY3Rpb24oKSB7XG5cdFx0dGltZXJHcm91cC5hZGQodGltZXJUaXRsZVRleHQpO1xuXHRcdHRpbWVyR3JvdXAuYWRkKHRpbWVyVGV4dCk7XG5cdFx0c2NvcmUuYWRkKHNjb3JlVGl0bGVUZXh0KTtcblx0XHRzY29yZS5hZGQoc2NvcmVUZXh0KTtcblx0XHRzY29yZS5hZGQoYmFja1RleHQpO1xuXHRcdGxldmVsR3JvdXAuYWRkKGxldmVsVGl0bGVUZXh0KTtcblx0XHRsZXZlbEdyb3VwLmFkZChsZXZlbFRleHQpO1xuXHRcdHBhbmVsLmFkZCh0aW1lckdyb3VwKTtcblx0XHRwYW5lbC5hZGQoc2NvcmUpO1xuXHRcdHBhbmVsLmFkZChsZXZlbEdyb3VwKTtcblx0XHRpbmZvcm1hdGlvbkxheWVyLmFkZChwYW5lbCk7XG5cdFx0c3RhZ2UuYWRkKGluZm9ybWF0aW9uTGF5ZXIpO1xuXHR9O1xuXG5cdHRoaXMuc2hvd1RpbWVyID0gZnVuY3Rpb24oKSB7XG5cdFx0dGltZXJHcm91cC5zaG93KCk7XG5cdFx0aW5mb3JtYXRpb25MYXllci5kcmF3KCk7XG5cdH07XG5cblx0dGhpcy5oaWRlVGltZXIgPSBmdW5jdGlvbigpIHtcblx0XHR0aW1lckdyb3VwLmhpZGUoKTtcblx0XHRpbmZvcm1hdGlvbkxheWVyLmRyYXcoKTtcblx0fTtcblxuXHR0aGlzLnNob3dTY29yZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHNjb3JlLnNob3coKTtcblx0XHRpbmZvcm1hdGlvbkxheWVyLmRyYXcoKTtcblx0fTtcblxuXHR0aGlzLnNjb3JlVGltZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzY29yZS5oaWRlKCk7XG5cdFx0aW5mb3JtYXRpb25MYXllci5kcmF3KCk7XG5cdH07XG5cblx0dGhpcy5zaG93TGV2ZWwgPSBmdW5jdGlvbigpIHtcblx0XHRsZXZlbEdyb3VwLnNob3coKTtcblx0XHRpbmZvcm1hdGlvbkxheWVyLmRyYXcoKTtcblx0fTtcblxuXHR0aGlzLmhpZGVMZXZlbCA9IGZ1bmN0aW9uKCkge1xuXHRcdGxldmVsR3JvdXAuaGlkZSgpO1xuXHRcdGluZm9ybWF0aW9uTGF5ZXIuZHJhdygpO1xuXHR9O1xuXG5cdHRoaXMudXBkYXRlVGltZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHRpbWVyVGV4dC5zZXRUZXh0KHZhbHVlKTtcblx0XHRpbmZvcm1hdGlvbkxheWVyLmRyYXcoKTtcblx0fTtcblxuXHR0aGlzLnVwZGF0ZVNjb3JlID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRzY29yZVRleHQuc2V0VGV4dCh2YWx1ZSk7XG5cdFx0aW5mb3JtYXRpb25MYXllci5kcmF3KCk7XG5cdH07XG5cblx0dGhpcy51cGRhdGVMZXZlbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0bGV2ZWxUZXh0LnNldFRleHQodmFsdWUpO1xuXHRcdGluZm9ybWF0aW9uTGF5ZXIuZHJhdygpO1xuXHR9O1xuXG5cdHZhciBiYWNrVGV4dE1vdXNlT3ZlciA9IG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcblx0XHRiYWNrVGV4dC5maWxsKCdibGFjaycpO1xuXHRcdHRoaXMuc3RvcCgpO1xuXHR9LCBpbmZvcm1hdGlvbkxheWVyKTtcblxuXHR2YXIgYmFja1RleHRNb3VzZU91dCA9IG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcblx0XHRiYWNrVGV4dC5maWxsKCdncmV5Jyk7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdH0sIGluZm9ybWF0aW9uTGF5ZXIpO1xuXG5cdGJhY2tUZXh0Lm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcblx0XHRiYWNrVGV4dE1vdXNlT3Zlci5zdGFydCgpO1xuXHR9KTtcblxuXHRiYWNrVGV4dC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcblx0XHRiYWNrVGV4dE1vdXNlT3V0LnN0YXJ0KCk7XG5cdH0pO1xuXG5cdGJhY2tUZXh0Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuXHRcdG1haW5NZW51KCk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2ljR2FtZUZpbmlzaGVkKCkge1xuXHR0aW1lci5zdG9wKCk7XG5cblx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuXHRcdHZhciBuZXdSZWNvcmQgPSBmYWxzZTtcblxuXHRcdGlmIChjb29raWUuZ2V0KCdjbGFzc2ljX2hpZ2hfc2NvcmVfJyArIGdhbWVEaWZmaWN1bHR5KSA9PT0gbnVsbCkge1xuXHRcdFx0bmV3UmVjb3JkID0gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKGNvb2tpZS5nZXQoJ2NsYXNzaWNfaGlnaF9zY29yZV8nICsgZ2FtZURpZmZpY3VsdHkpID4gdGltZXIuZ2V0TWluKCkgKyAnIDogJyArIHRpbWVyLmdldFNlYygpKSB7XG5cdFx0XHRuZXdSZWNvcmQgPSB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hbGVydFxuXHRcdGFsZXJ0KCdDb25ncmF0dWxhdGlvbiwgeW91IHNvbHZlZCB0aGUgbGV2ZWwhIFxcbllvdXIgdGltZTogJyArIHRpbWVyLmdldE1pbigpICsgJyA6ICcgKyB0aW1lci5nZXRTZWMoKSArIChuZXdSZWNvcmQgPyAnXFxuTmV3IHJlY29yZCEnIDogJycpKTtcblx0XHRpZiAobmV3UmVjb3JkKSB7XG5cdFx0XHRjb29raWUuc2V0KCdjbGFzc2ljX2hpZ2hfc2NvcmVfJyArIGdhbWVEaWZmaWN1bHR5LCB0aW1lci5nZXRNaW4oKSArICcgOiAnICsgdGltZXIuZ2V0U2VjKCkpO1xuXHRcdH1cblxuXHRcdG1haW5NZW51KCk7XG5cblx0fSwgMzAwKTtcbn1cblxuZnVuY3Rpb24gdGltZVRyaWFsR2FtZUZpbmlzaGVkKCkge1xuXHR0aW1lci5zdG9wKCk7XG5cblx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRzdGFydE5ld1RpbWVUcmlhbEdhbWUoKTtcblx0fSwgMzAwKTtcbn1cblxuZnVuY3Rpb24gdGltZVRyaWFsR2FtZVRpbWVVcCgpIHtcblx0dGltZXIuc3RvcCgpO1xuXG5cdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld1JlY29yZCA9IGZhbHNlO1xuXG5cdFx0aWYgKGNvb2tpZS5nZXQoJ3RpbWVfdHJpYWxfc2NvcmUnKSA9PT0gbnVsbCkge1xuXHRcdFx0bmV3UmVjb3JkID0gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKGNvb2tpZS5nZXQoJ3RpbWVfdHJpYWxfc2NvcmUnKSA8IGxldmVsKSB7XG5cdFx0XHRuZXdSZWNvcmQgPSB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hbGVydFxuXHRcdGFsZXJ0KCdDb25ncmF0dWxhdGlvbiEgXFxuWW91ciBsZXZlbDogJyArIGxldmVsICsgKG5ld1JlY29yZCA/ICdcXG5OZXcgcmVjb3JkIScgOiAnJykpO1xuXG5cdFx0aWYgKG5ld1JlY29yZCkge1xuXHRcdFx0Y29va2llLnNldCgndGltZV90cmlhbF9zY29yZScsIGxldmVsKTtcblx0XHR9XG5cblx0XHRtYWluTWVudSgpO1xuXG5cdH0sIDMwMCk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrR2FtZVN0YXR1cygpIHtcblx0dmFyIGZpbmlzaGVkID0gdHJ1ZTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuXHRcdGZvciAobGV0IGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XG5cdFx0XHRpZiAoIWJsb2Nrc1tpXVtqXS5jb25uZWN0ZWQpIHtcblx0XHRcdFx0ZmluaXNoZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoZmluaXNoZWQpIHtcblx0XHRpZiAoZ2FtZVR5cGUgPT09ICdjbGFzc2ljJykge1xuXHRcdFx0Y2xhc3NpY0dhbWVGaW5pc2hlZCgpO1xuXHRcdH0gZWxzZSBpZiAoZ2FtZVR5cGUgPT09ICd0aW1lLXRyaWFsJykge1xuXHRcdFx0dGltZVRyaWFsR2FtZUZpbmlzaGVkKCk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXJSb3dzOyBpKyspIHtcblx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgbGF5ZXJDb2x1bW5zOyBqKyspIHtcblx0XHRcdFx0Z2FtZUxheWVyc1tpXVtqXS5kcmF3KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIG9uQ2xpY2tCbG9jayhpbnN0YW5jZSkge1xuXHRpZiAoIWluc3RhbmNlLm1vdXNlQ2xpY2suaXNSdW5uaW5nKCkgJiYgIWluc3RhbmNlLmFuaW1hdGlvbklzUnVubmluZykge1xuXHRcdGluc3RhbmNlLnJvdGF0ZVJpZ2h0KCk7XG5cdFx0aW5zdGFuY2UubW91c2VDbGljay5zdGFydCgpO1xuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHR0YWJsZS5jaGVja1BpcGVDb25uZWN0aW9ucygpO1xuXHRcdFx0Y2hlY2tHYW1lU3RhdHVzKCk7XG5cdFx0fSwgMTAwKTtcblx0fVxufVxuXG5mdW5jdGlvbiBib3hBbmltYXRpb24oaW5zdGFuY2UpIHtcblx0cmV0dXJuIG5ldyBLaW5ldGljLkFuaW1hdGlvbihmdW5jdGlvbigpIHtcblx0XHRpbnN0YW5jZS5hbmltYXRpb25Jc1J1bm5pbmcgPSB0cnVlO1xuXHRcdGluc3RhbmNlLmJveC5yb3RhdGUoNSk7XG5cdFx0aWYgKGluc3RhbmNlLmJveC5yb3RhdGlvbigpID49IGluc3RhbmNlLnJvdGF0aW9uICsgOTApIHtcblx0XHRcdGluc3RhbmNlLmJveC5yb3RhdGlvbihpbnN0YW5jZS5yb3RhdGlvbiArIDkwKTtcblx0XHRcdGluc3RhbmNlLnJvdGF0aW9uID0gaW5zdGFuY2UuYm94LnJvdGF0aW9uKCk7XG5cblx0XHRcdHZhciBmaW5pc2hlZCA9IHRydWU7XG5cblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG5cdFx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XG5cdFx0XHRcdFx0aWYgKCFibG9ja3NbaV1bal0uY29ubmVjdGVkKSB7XG5cdFx0XHRcdFx0XHRmaW5pc2hlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5zdG9wKCk7XG5cdFx0XHRpbnN0YW5jZS5hbmltYXRpb25Jc1J1bm5pbmcgPSBmYWxzZTtcblx0XHRcdGlmIChmaW5pc2hlZCkge1xuXHRcdFx0XHRpZiAoZ2FtZVR5cGUgPT09ICdjbGFzc2ljJykge1xuXHRcdFx0XHRcdGNsYXNzaWNHYW1lRmluaXNoZWQoKTtcblx0XHRcdFx0fSBlbHNlIGlmIChnYW1lVHlwZSA9PT0gJ3RpbWUtdHJpYWwnKSB7XG5cdFx0XHRcdFx0dGltZVRyaWFsR2FtZUZpbmlzaGVkKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXJSb3dzOyBpKyspIHtcblx0XHRcdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGxheWVyQ29sdW1uczsgaisrKSB7XG5cdFx0XHRcdFx0XHRnYW1lTGF5ZXJzW2ldW2pdLmRyYXcoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sIGdhbWVMYXllcnNbTWF0aC5mbG9vcihpbnN0YW5jZS5yb3cgLyBsYXllclNpemUpXVtNYXRoLmZsb29yKGluc3RhbmNlLmNvbHVtbiAvIGxheWVyU2l6ZSldKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGxvYWRBcHBsaWNhdGlvbjogbG9hZEFwcGxpY2F0aW9uXG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHBpcGUgPSByZXF1aXJlKCcuL2pzL3BpcGUnKTtcblxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXHRwaXBlLmxvYWRBcHBsaWNhdGlvbigpO1xufTsiXX0=
