!function r(a,s,c){function l(t,e){if(!s[t]){if(!a[t]){var i="function"==typeof require&&require;if(!e&&i)return i(t,!0);if(f)return f(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var o=s[t]={exports:{}};a[t][0].call(o.exports,function(e){return l(a[t][1][e]||e)},o,o.exports,r,a,s,c)}return s[t].exports}for(var f="function"==typeof require&&require,e=0;e<c.length;e++)l(c[e]);return l}({1:[function(e,t,n){function h(){switch(stage.hasChildren()&&stage.destroyChildren(),gameType="classic",gameDifficulty){case"easy":rows=5,columns=5;break;case"medium":rows=10,columns=10;break;case"hard":rows=15,columns=15}startingPointX=Math.floor(rows/2),startingPointY=Math.floor(columns/2),layerRows=Math.floor(rows/layerSize)+1,layerColumns=Math.floor(columns/layerSize)+1,blockSize=Math.min(width,height)/Math.max(rows,columns)-2*space,table=new r,table.generateFields(),table.shuffle(),table.drawGame(),timer=new o,information=new a,timer.setInc(!0),timer.start(),information.initPanel(),information.updateScore(void 0===K.cookie("classic_high_score_"+gameDifficulty)?"--/--":K.cookie("classic_high_score_"+gameDifficulty)),information.hideLevel()}function b(){stage.hasChildren()&&stage.destroyChildren(),gameType="time-trial",level++,rows=4+level,columns=4+level,startingPointX=Math.floor(rows/2),startingPointY=Math.floor(columns/2),layerRows=Math.floor(rows/layerSize)+1,layerColumns=Math.floor(columns/layerSize)+1,blockSize=Math.min(width,height)/Math.max(rows,columns)-2*space,table=new r,table.generateFields(),table.shuffle(),table.drawGame(),"undefined"==typeof timer&&(timer=new o),timer.setInc(!1),timer.setCurrentTime((0===timer.getCurrentTime()?80:timer.getCurrentTime())+30+10*level),timer.start(),information=new a,information.initPanel(),information.updateScore(void 0===K.cookie("time_trial_score")?"-":K.cookie("time_trial_score")),information.updateTimer(timer.getMin()+":"+timer.getSec()),information.updateLevel(level)}function o(){var t=!0,e=null,i=0,n=0,o=0;function r(){i++,s(),information.updateTimer(o+":"+n)}function a(){i--,s(),information.updateTimer(o+":"+n),0===i&&(timer.stop(),setTimeout(function(){var e=!1;void 0===K.cookie("time_trial_score")?e=!0:K.cookie("time_trial_score")<level&&(e=!0),alert("Congratulation! \nYour level: "+level+(e?"\nNew record!":"")),e&&K.cookie("time_trial_score",level,{expires:365,path:"/"}),p()},300))}function s(){o=(o=Math.floor(i/60))<10?"0"+o:o,n=(n=i%60)<10?"0"+n:n}this.setInc=function(e){t=e},this.getCurrentTime=function(){return i},this.setCurrentTime=function(e){i=e,s()},this.start=function(){e=t?setInterval(r,1e3):setInterval(a,1e3)},this.stop=function(){clearInterval(e)},this.reset=function(){o=n=i=0},this.getSec=function(){return n},this.getMin=function(){return o}}function p(){stage.hasChildren()&&stage.destroyChildren();var t=new Kinetic.Text({x:width/2,y:height/3-100,text:"Classic game",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var i=new Kinetic.Text({x:width/2,y:height/3,text:"Time trial",fontSize:32,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2});var n=new Kinetic.Text({x:width/2,y:height/3+100,text:"Scoreboard",fontSize:32,fontFamily:"Calibri",fill:"grey"});n.setOffset({x:n.getWidth()/2});var o=new Kinetic.Text({x:width/2,y:height/3+200,text:"Information",fontSize:32,fontFamily:"Calibri",fill:"grey"});o.setOffset({x:o.getWidth()/2}),menuLayer=new Kinetic.Layer,menuLayer.name="gameMenu",menuLayer.add(t),menuLayer.add(i),menuLayer.add(n),menuLayer.add(o),stage.add(menuLayer);var e=new Kinetic.Animation(function(e){t.fill("black"),this.stop()},menuLayer),r=new Kinetic.Animation(function(e){t.fill("grey"),this.stop()},menuLayer);t.on("mouseover",function(){e.start()}),t.on("mouseout",function(){r.start()}),t.on("click",function(){!function(){stage.hasChildren()&&stage.destroyChildren();var t=new Kinetic.Text({x:width/2,y:height/3-100,text:"Easy (5x5)",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var i=new Kinetic.Text({x:width/2,y:height/3,text:"Medium (10x10)",fontSize:32,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2});var n=new Kinetic.Text({x:width/2,y:height/3+100,text:"Hard (15x15)",fontSize:32,fontFamily:"Calibri",fill:"grey"});n.setOffset({x:n.getWidth()/2});var o=new Kinetic.Text({x:width/2,y:height/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});o.setOffset({x:o.getWidth()/2}),difficultyLayer=new Kinetic.Layer,difficultyLayer.name="difficultySelectMenu",difficultyLayer.add(t),difficultyLayer.add(i),difficultyLayer.add(n),difficultyLayer.add(o),stage.add(difficultyLayer);var e=new Kinetic.Animation(function(e){t.fill("black"),this.stop()},difficultyLayer),r=new Kinetic.Animation(function(e){t.fill("grey"),this.stop()},difficultyLayer);t.on("mouseover",function(){e.start()}),t.on("mouseout",function(){r.start()}),t.on("click",function(){gameDifficulty="easy",h()});var a=new Kinetic.Animation(function(e){i.fill("black"),this.stop()},difficultyLayer),s=new Kinetic.Animation(function(e){i.fill("grey"),this.stop()},difficultyLayer);i.on("mouseover",function(){a.start()}),i.on("mouseout",function(){s.start()}),i.on("click",function(){gameDifficulty="medium",h()});var c=new Kinetic.Animation(function(e){n.fill("black"),this.stop()},difficultyLayer),l=new Kinetic.Animation(function(e){n.fill("grey"),this.stop()},difficultyLayer);n.on("mouseover",function(){c.start()}),n.on("mouseout",function(){l.start()}),n.on("click",function(){gameDifficulty="hard",h()});var f=new Kinetic.Animation(function(e){o.fill("black"),this.stop()},difficultyLayer),u=new Kinetic.Animation(function(e){o.fill("grey"),this.stop()},difficultyLayer);o.on("mouseover",function(){f.start()}),o.on("mouseout",function(){u.start()}),o.on("click",function(){p()})}()});var a=new Kinetic.Animation(function(e){i.fill("black"),this.stop()},menuLayer),s=new Kinetic.Animation(function(e){i.fill("grey"),this.stop()},menuLayer);i.on("mouseover",function(){a.start()}),i.on("mouseout",function(){s.start()}),i.on("click",function(){!function(){stage.hasChildren()&&stage.destroyChildren();var t=new Kinetic.Text({x:width/2,y:height/3,text:"Starting time trial",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var i=new Kinetic.Text({x:width/2,y:height/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2}),timeTrialGameLayer=new Kinetic.Layer,timeTrialGameLayer.name="timeTrialGameLayer",timeTrialGameLayer.add(t),timeTrialGameLayer.add(i),stage.add(timeTrialGameLayer);var e=new Kinetic.Animation(function(e){t.fill("black"),this.stop()},timeTrialGameLayer),n=new Kinetic.Animation(function(e){t.fill("grey"),this.stop()},timeTrialGameLayer);t.on("mouseover",function(){e.start()}),t.on("mouseout",function(){n.start()}),t.on("click",function(){b()});var o=new Kinetic.Animation(function(e){i.fill("black"),this.stop()},timeTrialGameLayer),r=new Kinetic.Animation(function(e){i.fill("grey"),this.stop()},timeTrialGameLayer);i.on("mouseover",function(){o.start()}),i.on("mouseout",function(){r.start()}),i.on("click",function(){p()})}()});var c=new Kinetic.Animation(function(e){n.fill("black"),this.stop()},menuLayer),l=new Kinetic.Animation(function(e){n.fill("grey"),this.stop()},menuLayer);n.on("mouseover",function(){c.start()}),n.on("mouseout",function(){l.start()}),n.on("click",function(){!function(){stage.hasChildren()&&stage.destroyChildren();var e=new Kinetic.Text({x:width/2,y:height/3-100,text:"Classic game",fontSize:32,fontFamily:"Calibri",fill:"grey"});e.setOffset({x:e.getWidth()/2});var t=new Kinetic.Text({x:width/2-120,y:height/3-40,text:"Easy\n"+(void 0===K.cookie("classic_high_score_easy")?"99:99":K.cookie("classic_high_score_easy")),fontSize:18,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var i=new Kinetic.Text({x:width/2,y:height/3-40,text:"Medium\n"+(void 0===K.cookie("classic_high_score_medium")?"99:99":K.cookie("classic_high_score_medium")),fontSize:18,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2});var n=new Kinetic.Text({x:width/2+120,y:height/3-40,text:"Hard\n"+(void 0===K.cookie("classic_high_score_hard")?"99:99":K.cookie("classic_high_score_hard")),fontSize:18,fontFamily:"Calibri",fill:"grey"});n.setOffset({x:n.getWidth()/2});var o=new Kinetic.Text({x:width/2,y:height/3+40,text:"Time trial",fontSize:32,fontFamily:"Calibri",fill:"grey"});o.setOffset({x:o.getWidth()/2});var r=new Kinetic.Text({x:width/2,y:height/3+100,text:(void 0===K.cookie("time_trial_score")?"0":K.cookie("time_trial_score"))+". szint",fontSize:18,fontFamily:"Calibri",fill:"grey"});r.setOffset({x:r.getWidth()/2});var a=new Kinetic.Text({x:width/2,y:height/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});a.setOffset({x:a.getWidth()/2}),scoreBoardMenuLayer=new Kinetic.Layer,scoreBoardMenuLayer.name="scoreBoardMenuLayer",scoreBoardMenuLayer.add(e),scoreBoardMenuLayer.add(t),scoreBoardMenuLayer.add(i),scoreBoardMenuLayer.add(n),scoreBoardMenuLayer.add(o),scoreBoardMenuLayer.add(r),scoreBoardMenuLayer.add(a),stage.add(scoreBoardMenuLayer);var s=new Kinetic.Animation(function(e){a.fill("black"),this.stop()},scoreBoardMenuLayer),c=new Kinetic.Animation(function(e){a.fill("grey"),this.stop()},scoreBoardMenuLayer);a.on("mouseover",function(){s.start()}),a.on("mouseout",function(){c.start()}),a.on("click",function(){p()})}()});var f=new Kinetic.Animation(function(e){o.fill("black"),this.stop()},menuLayer),u=new Kinetic.Animation(function(e){o.fill("grey"),this.stop()},menuLayer);o.on("mouseover",function(){f.start()}),o.on("mouseout",function(){u.start()}),o.on("click",function(){!function(){stage.hasChildren()&&stage.destroyChildren();var e=new Kinetic.Text({x:width/2,y:height/3-100,text:"",fontSize:18,fontFamily:"Calibri",fill:"grey"});"In classic game you can choose between three different difficulty, while in time trial the difficulty is incrementaly increasing.\n","Time is key, so don't hesitate too much!\n","You can check your rank at the scoreboard!\n\nMade by: White Rabbit (Tamás Ruszka) (C) 2014,\nMail: ruszka dot tamas at gmail dot com",e.setText("Game goal:\nTurn all the pipes into the correct position, so every pipe connected to each other!\nIn classic game you can choose between three different difficulty, while in time trial the difficulty is incrementaly increasing.\nTime is key, so don't hesitate too much!\nYou can check your rank at the scoreboard!\n\nMade by: White Rabbit (Tamás Ruszka) (C) 2014,\nMail: ruszka dot tamas at gmail dot com"),e.setOffset({x:0<e.getWidth()/2?e.getWidth()/2:0});var t=new Kinetic.Text({x:width/2,y:height/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2}),informationMenuLayer=new Kinetic.Layer,informationMenuLayer.name="informationMenuLayer",informationMenuLayer.add(e),informationMenuLayer.add(t),stage.add(informationMenuLayer);var i=new Kinetic.Animation(function(e){t.fill("black"),this.stop()},informationMenuLayer),n=new Kinetic.Animation(function(e){t.fill("grey"),this.stop()},informationMenuLayer);t.on("mouseover",function(){i.start()}),t.on("mouseout",function(){n.start()}),t.on("click",function(){p()})}()})}function r(){var e=0,t=0;for(gameLayers=[],e=0;e<layerRows;e++)for(gameLayers[e]=new Array(layerColumns),t=0;t<layerColumns;t++)gameLayers[e][t]=new Kinetic.Layer;blocks=[],this.generateFields=function(){var e=0,t=0,i=0,n=0,o=!0;for(e=0;e<rows;e++)for(blocks[e]=new Array(columns),t=0;t<columns;t++)blocks[e][t]=new s(e,t,e*columns+t);for(;o;){o=!1;var r=Math.floor(Math.random()*rows),a=Math.floor(Math.random()*columns);if(0!==blocks[r][a].getKey())switch(Math.floor(4*Math.random()+0)){case 0:if(0!==r&&void 0!==blocks[r-1][a]&&blocks[r][a].getKey()!=blocks[r-1][a].getKey())for(blocks[r][a].setLeft(!0),blocks[r-1][a].setRight(!0),i=blocks[r][a].getKey()>blocks[r-1][a].getKey()?blocks[r][a].getKey():blocks[r-1][a].getKey(),n=blocks[r][a].getKey()<blocks[r-1][a].getKey()?blocks[r][a].getKey():blocks[r-1][a].getKey(),e=0;e<rows;e++)for(t=0;t<columns;t++)blocks[e][t].getKey()==i&&blocks[e][t].setKey(n);break;case 1:if(0!==a&&void 0!==blocks[r][a-1]&&blocks[r][a].getKey()!=blocks[r][a-1].getKey())for(blocks[r][a].setUp(!0),blocks[r][a-1].setDown(!0),i=blocks[r][a].getKey()>blocks[r][a-1].getKey()?blocks[r][a].getKey():blocks[r][a-1].getKey(),n=blocks[r][a].getKey()<blocks[r][a-1].getKey()?blocks[r][a].getKey():blocks[r][a-1].getKey(),e=0;e<rows;e++)for(t=0;t<columns;t++)blocks[e][t].getKey()==i&&blocks[e][t].setKey(n);break;case 2:if(r!=columns-1&&void 0!==blocks[r+1][a]&&blocks[r][a].getKey()!=blocks[r+1][a].getKey())for(blocks[r][a].setRight(!0),blocks[r+1][a].setLeft(!0),i=blocks[r][a].getKey()>blocks[r+1][a].getKey()?blocks[r][a].getKey():blocks[r+1][a].getKey(),n=blocks[r][a].getKey()<blocks[r+1][a].getKey()?blocks[r][a].getKey():blocks[r+1][a].getKey(),e=0;e<rows;e++)for(t=0;t<columns;t++)blocks[e][t].getKey()==i&&blocks[e][t].setKey(n);break;case 3:if(a!=rows-1&&void 0!==blocks[r][a+1]&&blocks[r][a].getKey()!=blocks[r][a+1].getKey())for(blocks[r][a].setDown(!0),blocks[r][a+1].setUp(!0),i=blocks[r][a].getKey()>blocks[r][a+1].getKey()?blocks[r][a].getKey():blocks[r][a+1].getKey(),n=blocks[r][a].getKey()<blocks[r][a+1].getKey()?blocks[r][a].getKey():blocks[r][a+1].getKey(),e=0;e<rows;e++)for(t=0;t<columns;t++)blocks[e][t].getKey()==i&&blocks[e][t].setKey(n)}for(e=0;e<rows;e++)for(t=0;t<columns;t++)0<blocks[e][t].getKey()&&(o=!0)}blocks[startingPointX][startingPointY].setConnected(!0),blocks[startingPointX][startingPointY].connectionHandler(!0)},this.shuffle=function(){for(var e=0;e<rows;e++)for(var t=0;t<columns;t++)blocks[e][t].shuffleIt()},this.drawGame=function(){for(e=0;e<rows;e++)for(t=0;t<columns;t++)blocks[e][t].init(),gameLayers[Math.floor(e/layerSize)][Math.floor(t/layerSize)].add(blocks[e][t].getBox());for(this.checkPipeConnections(),e=0;e<layerRows;e++)for(t=0;t<layerColumns;t++)stage.add(gameLayers[e][t])},this.checkPipeConnections=function(){var e=0,t=0;for(e=0;e<rows;e++)for(t=0;t<columns;t++)blocks[e][t].setConnected(!1),blocks[e][t].connectionHandler(!1);for(blocks[startingPointX][startingPointY].setConnected(!0),blocks[startingPointX][startingPointY].connectionHandler(!0),e=0;e<rows;e++)for(t=0;t<columns;t++)if(blocks[e][t].getConnected()){var i=!1;0===e||i||blocks[e][t].getLeft()&&blocks[e-1][t].getRight()&&(blocks[e-1][t].getConnected()||(blocks[e-1][t].setConnected(!0),blocks[e-1][t].connectionHandler(!0),t=-1,i=!(e=0))),e==rows-1||i||blocks[e][t].getRight()&&blocks[e+1][t].getLeft()&&(blocks[e+1][t].getConnected()||(blocks[e+1][t].setConnected(!0),blocks[e+1][t].connectionHandler(!0),t=-1,i=!(e=0))),0===t||i||blocks[e][t].getUp()&&blocks[e][t-1].getDown()&&(blocks[e][t-1].getConnected()||(blocks[e][t-1].setConnected(!0),blocks[e][t-1].connectionHandler(!0),t=-1,i=!(e=0))),t==columns-1||i||blocks[e][t].getDown()&&blocks[e][t+1].getUp()&&(blocks[e][t+1].getConnected()||(blocks[e][t+1].setConnected(!0),blocks[e][t+1].connectionHandler(!0),t=-1,i=!(e=0)))}}}function a(){var e=width/2+rows*blockSize/2+rows*(2*space),t=width-(e+rows*space*2),i=height,n=new Kinetic.Layer,o=new Kinetic.Group({x:e,y:0,width:t,height:i}),r=new Kinetic.Group({x:0,y:0,width:e-width,height:height}),a=new Kinetic.Group({x:0,y:0,width:e-width,height:height}),s=new Kinetic.Group({x:0,y:0,width:e-width,height:height}),c=new Kinetic.Text({x:200,y:200,text:"Back",fontSize:48,fontFamily:"Calibri",fill:"grey"}),l=new Kinetic.Text({x:30,y:50,text:"Time:",fontSize:32,fontFamily:"Calibri",fill:"grey"}),f=new Kinetic.Text({x:30,y:100,text:"00:00",fontSize:48,fontFamily:"Calibri",fill:"grey"}),u=new Kinetic.Text({x:200,y:50,text:"Previous record:",fontSize:32,fontFamily:"Calibri",fill:"grey"}),h=new Kinetic.Text({x:200,y:100,text:"00:00",fontSize:48,fontFamily:"Calibri",fill:"grey"}),d=new Kinetic.Text({x:30,y:200,text:"Actual level:",fontSize:32,fontFamily:"Calibri",fill:"grey"}),y=new Kinetic.Text({x:30,y:250,text:"1",fontSize:64,fontFamily:"Calibri",fill:"grey"});this.initPanel=function(){r.add(l),r.add(f),a.add(u),a.add(h),a.add(c),s.add(d),s.add(y),o.add(r),o.add(a),o.add(s),n.add(o),stage.add(n)},this.showTimer=function(){r.show(),n.draw()},this.hideTimer=function(){r.hide(),n.draw()},this.showScore=function(){a.show(),n.draw()},this.scoreTimer=function(){a.hide(),n.draw()},this.showLevel=function(){s.show(),n.draw()},this.hideLevel=function(){s.hide(),n.draw()},this.updateTimer=function(e){f.setText(e),n.draw()},this.updateScore=function(e){h.setText(e),n.draw()},this.updateLevel=function(e){y.setText(e),n.draw()};var m=new Kinetic.Animation(function(e){c.fill("black"),this.stop()},n),g=new Kinetic.Animation(function(e){c.fill("grey"),this.stop()},n);c.on("mouseover",function(){m.start()}),c.on("mouseout",function(){g.start()}),c.on("click",function(){p()})}function s(e,t,n){var o=e*(2*space+blockSize)+space,r=t*(2*space+blockSize)+space,a=!1,s=!1,c=!1,l=!1,f=n,u=!1,h=0,d=new Kinetic.Group({x:o+blockSize/2+(width-blockSize*rows)/2-blockSize/2,y:r+blockSize/2,width:blockSize,height:blockSize,offset:{x:blockSize/2,y:blockSize/2}}),y=new Kinetic.Group({x:0,y:0}),m=new Kinetic.Rect({x:0,y:0,width:blockSize,height:blockSize,name:o+"-"+r,fill:"grey",stroke:"black",strokeWidth:space});function g(){var e=a;a=s,s=c,c=l,l=e}function k(){var e=a;a=l,l=c,c=s,s=e}this.getConnected=function(){return u},this.setConnected=function(e){u=e},this.getKey=function(){return f},this.setKey=function(e){f=e},this.getRotation=function(){return h},this.setLeft=function(e){s=e},this.getLeft=function(){return s},this.setDown=function(e){c=e},this.getDown=function(){return c},this.setRight=function(e){l=e},this.getRight=function(){return l},this.setUp=function(e){a=e},this.getUp=function(){return a},this.getBox=function(){return d},this.setParentLayer=function(e){parentLayer=e},this.connectionHandler=function(e){e?(y.find(".pipeUp").stroke("green"),y.find(".pipeLeft").stroke("green"),y.find(".pipeDown").stroke("green"),y.find(".pipeRight").stroke("green")):(y.find(".pipeUp").stroke("red"),y.find(".pipeLeft").stroke("red"),y.find(".pipeDown").stroke("red"),y.find(".pipeRight").stroke("red"))},this.shuffleIt=function(){for(var e=0;e<Math.floor(3*Math.random()+0);e++)Math.random()<.5?g():k()};var w=new Kinetic.Animation(function(e){if(animationIsRunning=!0,d.rotate(5),d.rotation()>=h+90){d.rotation(h+90),h=d.rotation();var t=!0;for(i=0;i<rows;i++)for(j=0;j<columns;j++)blocks[i][j].getConnected()||(t=!1);if(this.stop(),animationIsRunning=!1,t)"classic"==gameType?(timer.stop(),setTimeout(function(){var e=!1;void 0===K.cookie("classic_high_score_"+gameDifficulty)?e=!0:K.cookie("classic_high_score_"+gameDifficulty)>timer.getMin()+" : "+timer.getSec()&&(e=!0),alert("Congratulation, you solved the level! \nYour time: "+timer.getMin()+" : "+timer.getSec()+(e?"\nNew record!":"")),e&&K.cookie("classic_high_score_"+gameDifficulty,timer.getMin()+" : "+timer.getSec(),{expires:365,path:"/"}),p()},300)):"time-trial"==gameType&&(timer.stop(),setTimeout(function(){b()},300));else for(i=0;i<layerRows;i++)for(j=0;j<layerColumns;j++)gameLayers[i][j].draw()}},gameLayers[Math.floor(e/layerSize)][Math.floor(t/layerSize)]);this.init=function(){var e=new Kinetic.Line({points:[blockSize/2,0,blockSize/2,blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeUp"}),t=new Kinetic.Line({points:[0,blockSize/2,blockSize/2,blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeLeft"}),i=new Kinetic.Line({points:[blockSize/2,blockSize,blockSize/2,blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeDown"}),n=new Kinetic.Line({points:[blockSize,blockSize/2,blockSize/2,blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeRight"});a&&y.add(e),s&&y.add(t),c&&y.add(i),l&&y.add(n),d.on("click",function(){w.isRunning()||animationIsRunning||(g(),w.start(),setTimeout(function(){table.checkPipeConnections()},100))}),d.add(m),d.add(y)}}var K;K=jQuery,width=1280,height=720,rows=10,columns=10,space=5,layerSize=5,level=0,animationIsRunning=!1,blockSize=Math.min(width,height)/Math.max(rows,columns)-2*space,startingPointX=Math.floor(rows/2),startingPointY=Math.floor(columns/2),K(document).on("ready",function(){width=K(window).width(),height=K(window).height()-200,stage=new Kinetic.Stage({container:"table",width:width,height:height}),p()})},{}],2:[function(e,t,i){"use strict";var n=e("./js/pipe");window.onload=function(){this.console.log("Yey",n)}},{"./js/pipe":1}]},{},[2]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
