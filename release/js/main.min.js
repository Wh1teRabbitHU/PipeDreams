!function(){return function t(e,i,n){function a(s,o){if(!i[s]){if(!e[s]){var h="function"==typeof require&&require;if(!o&&h)return h(s,!0);if(r)return r(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var l=i[s]={exports:{}};e[s][0].call(l.exports,function(t){return a(e[s][1][t]||t)},l,l.exports,t,e,i,n)}return i[s].exports}for(var r="function"==typeof require&&require,s=0;s<n.length;s++)a(n[s]);return a}}()({1:[function(t,e,i){},{}],2:[function(t,e,i){(function(n){var a,r,s,o,h,c,l,d,u,f,g,p,v,m,y={};a=this,r=Math.PI/180,(y={version:"5.2.0",stages:[],idCounter:0,ids:{},names:{},shapes:{},listenClickTap:!1,inDblClickWindow:!1,enableTrace:!1,traceArrMax:100,dblClickWindow:400,pixelRatio:void 0,dragDistance:0,angleDeg:!0,showWarnings:!0,Filters:{},Node:function(t){this._init(t)},Shape:function(t){this.__init(t)},Container:function(t){this.__init(t)},Stage:function(t){this.___init(t)},BaseLayer:function(t){this.___init(t)},Layer:function(t){this.____init(t)},FastLayer:function(t){this.____init(t)},Group:function(t){this.___init(t)},isDragging:function(){var t=y.DD;return!!t&&t.isDragging},isDragReady:function(){var t=y.DD;return!!t&&!!t.node},_addId:function(t,e){void 0!==e&&(this.ids[e]=t)},_removeId:function(t){void 0!==t&&delete this.ids[t]},_addName:function(t,e){if(void 0!==e)for(var i=e.split(/\s/g),n=0;n<i.length;n++){var a=i[n];a&&(void 0===this.names[a]&&(this.names[a]=[]),this.names[a].push(t))}},_removeName:function(t,e){if(void 0!==t){var i=this.names[t];if(void 0!==i){for(var n=0;n<i.length;n++)i[n]._id===e&&i.splice(n,1);0===i.length&&delete this.names[t]}}},getAngle:function(t){return this.angleDeg?t*r:t},_parseUA:function(t){var e=t.toLowerCase(),i=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||e.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[],n=!!t.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i),a=!!t.match(/IEMobile/i);return{browser:i[1]||"",version:i[2]||"0",mobile:n,ieMobile:a}},UA:void 0}).UA=y._parseUA(a.navigator&&a.navigator.userAgent||""),function(a,r){if("object"==typeof i){var s=r();if(n.window===n)y.document=n.document,y.window=n;else{var o=t("canvas"),h=t("jsdom").jsdom;y.document=h("<!DOCTYPE html><html><head></head><body></body></html>"),y.window=y.document.createWindow(),y.window.Image=o.Image,y._nodeCanvas=o}return y.root=a,void(e.exports=s)}"function"==typeof define&&define.amd&&define(r),y.document=document,y.window=window,y.root=a}(this,function(){return y}),function(){y.Collection=function(){var t=[].slice.call(arguments),e=t.length,i=0;for(this.length=e;i<e;i++)this[i]=t[i];return this},y.Collection.prototype=[],y.Collection.prototype.each=function(t){for(var e=0;e<this.length;e++)t(this[e],e)},y.Collection.prototype.toArray=function(){var t,e=[],i=this.length;for(t=0;t<i;t++)e.push(this[t]);return e},y.Collection.toCollection=function(t){var e,i=new y.Collection,n=t.length;for(e=0;e<n;e++)i.push(t[e]);return i},y.Collection._mapMethod=function(t){y.Collection.prototype[t]=function(){var e,i=this.length,n=[].slice.call(arguments);for(e=0;e<i;e++)this[e][t].apply(this[e],n);return this}},y.Collection.mapMethods=function(t){var e=t.prototype;for(var i in e)y.Collection._mapMethod(i)},y.Transform=function(t){this.m=t&&t.slice()||[1,0,0,1,0,0]},y.Transform.prototype={copy:function(){return new y.Transform(this.m)},point:function(t){var e=this.m;return{x:e[0]*t.x+e[2]*t.y+e[4],y:e[1]*t.x+e[3]*t.y+e[5]}},translate:function(t,e){return this.m[4]+=this.m[0]*t+this.m[2]*e,this.m[5]+=this.m[1]*t+this.m[3]*e,this},scale:function(t,e){return this.m[0]*=t,this.m[1]*=t,this.m[2]*=e,this.m[3]*=e,this},rotate:function(t){var e=Math.cos(t),i=Math.sin(t),n=this.m[0]*e+this.m[2]*i,a=this.m[1]*e+this.m[3]*i,r=this.m[0]*-i+this.m[2]*e,s=this.m[1]*-i+this.m[3]*e;return this.m[0]=n,this.m[1]=a,this.m[2]=r,this.m[3]=s,this},getTranslation:function(){return{x:this.m[4],y:this.m[5]}},skew:function(t,e){var i=this.m[0]+this.m[2]*e,n=this.m[1]+this.m[3]*e,a=this.m[2]+this.m[0]*t,r=this.m[3]+this.m[1]*t;return this.m[0]=i,this.m[1]=n,this.m[2]=a,this.m[3]=r,this},multiply:function(t){var e=this.m[0]*t.m[0]+this.m[2]*t.m[1],i=this.m[1]*t.m[0]+this.m[3]*t.m[1],n=this.m[0]*t.m[2]+this.m[2]*t.m[3],a=this.m[1]*t.m[2]+this.m[3]*t.m[3],r=this.m[0]*t.m[4]+this.m[2]*t.m[5]+this.m[4],s=this.m[1]*t.m[4]+this.m[3]*t.m[5]+this.m[5];return this.m[0]=e,this.m[1]=i,this.m[2]=n,this.m[3]=a,this.m[4]=r,this.m[5]=s,this},invert:function(){var t=1/(this.m[0]*this.m[3]-this.m[1]*this.m[2]),e=this.m[3]*t,i=-this.m[1]*t,n=-this.m[2]*t,a=this.m[0]*t,r=t*(this.m[2]*this.m[5]-this.m[3]*this.m[4]),s=t*(this.m[1]*this.m[4]-this.m[0]*this.m[5]);return this.m[0]=e,this.m[1]=i,this.m[2]=n,this.m[3]=a,this.m[4]=r,this.m[5]=s,this},getMatrix:function(){return this.m},setAbsolutePosition:function(t,e){var i=this.m[0],n=this.m[1],a=this.m[2],r=this.m[3],s=this.m[4],o=(i*(e-this.m[5])-n*(t-s))/(i*r-n*a),h=(t-s-a*o)/i;return this.translate(h,o)}};var t=Math.PI/180,e=180/Math.PI,n={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},a=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/;y.Util={_isElement:function(t){return!(!t||1!=t.nodeType)},_isFunction:function(t){return!!(t&&t.constructor&&t.call&&t.apply)},_isObject:function(t){return!!t&&t.constructor==Object},_isArray:function(t){return"[object Array]"==Object.prototype.toString.call(t)},_isNumber:function(t){return"[object Number]"==Object.prototype.toString.call(t)},_isString:function(t){return"[object String]"==Object.prototype.toString.call(t)},_throttle:function(t,e,i){var n,a,r,s=null,o=0,h=i||{},c=function(){o=!1===h.leading?0:(new Date).getTime(),s=null,r=t.apply(n,a),n=a=null};return function(){var i=(new Date).getTime();o||!1!==h.leading||(o=i);var l=e-(i-o);return n=this,a=arguments,l<=0?(clearTimeout(s),s=null,o=i,r=t.apply(n,a),n=a=null):s||!1===h.trailing||(s=setTimeout(c,l)),r}},_hasMethods:function(t){var e,i=[];for(e in t)this._isFunction(t[e])&&i.push(e);return i.length>0},createCanvasElement:function(){var t=y.document.createElement("canvas");try{t.style=t.style||{}}catch(t){}return t},isBrowser:function(){return"object"!=typeof i},_isInDocument:function(t){for(;t=t.parentNode;)if(t==y.document)return!0;return!1},_simplifyArray:function(t){var e,i,n=[],a=t.length,r=y.Util;for(e=0;e<a;e++)i=t[e],r._isNumber(i)?i=Math.round(1e3*i)/1e3:r._isString(i)||(i=i.toString()),n.push(i);return n},_getImage:function(t,e){var i,n;if(t)if(this._isElement(t))e(t);else if(this._isString(t))(i=new y.window.Image).onload=function(){e(i)},i.src=t;else if(t.data){(n=y.Util.createCanvasElement()).width=t.width,n.height=t.height,n.getContext("2d").putImageData(t,0,0),this._getImage(n.toDataURL(),e)}else e(null);else e(null)},_getRGBAString:function(t){return["rgba(",t.red||0,",",t.green||0,",",t.blue||0,",",t.alpha||1,")"].join("")},_rgbToHex:function(t,e,i){return((1<<24)+(t<<16)+(e<<8)+i).toString(16).slice(1)},_hexToRgb:function(t){t=t.replace("#","");var e=parseInt(t,16);return{r:e>>16&255,g:e>>8&255,b:255&e}},getRandomColor:function(){for(var t=(16777215*Math.random()<<0).toString(16);t.length<6;)t="0"+t;return"#"+t},get:function(t,e){return void 0===t?e:t},getRGB:function(t){var e;return t in n?{r:(e=n[t])[0],g:e[1],b:e[2]}:"#"===t[0]?this._hexToRgb(t.substring(1)):"rgb("===t.substr(0,4)?(e=a.exec(t.replace(/ /g,"")),{r:parseInt(e[1],10),g:parseInt(e[2],10),b:parseInt(e[3],10)}):{r:0,g:0,b:0}},_merge:function(t,e){var i=this._clone(e);for(var n in t)this._isObject(t[n])?i[n]=this._merge(t[n],i[n]):i[n]=t[n];return i},cloneObject:function(t){var e={};for(var i in t)this._isObject(t[i])?e[i]=this.cloneObject(t[i]):this._isArray(t[i])?e[i]=this.cloneArray(t[i]):e[i]=t[i];return e},cloneArray:function(t){return t.slice(0)},_degToRad:function(e){return e*t},_radToDeg:function(t){return t*e},_capitalize:function(t){return t.charAt(0).toUpperCase()+t.slice(1)},error:function(t){throw new Error("Kinetic error: "+t)},warn:function(t){y.root.console&&console.warn&&y.showWarnings&&console.warn("Kinetic warning: "+t)},extend:function(t,e){function i(){this.constructor=t}i.prototype=e.prototype;var n=t.prototype;for(var a in t.prototype=new i,n)n.hasOwnProperty(a)&&(t.prototype[a]=n[a]);t.__super__=e.prototype},addMethods:function(t,e){var i;for(i in e)t.prototype[i]=e[i]},_getControlPoints:function(t,e,i,n,a,r,s){var o=Math.sqrt(Math.pow(i-t,2)+Math.pow(n-e,2)),h=Math.sqrt(Math.pow(a-i,2)+Math.pow(r-n,2)),c=s*o/(o+h),l=s*h/(o+h);return[i-c*(a-t),n-c*(r-e),i+l*(a-t),n+l*(r-e)]},_expandPoints:function(t,e){var i,n,a=t.length,r=[];for(i=2;i<a-2;i+=2)n=y.Util._getControlPoints(t[i-2],t[i-1],t[i],t[i+1],t[i+2],t[i+3],e),r.push(n[0]),r.push(n[1]),r.push(t[i]),r.push(t[i+1]),r.push(n[2]),r.push(n[3]);return r},_removeLastLetter:function(t){return t.substring(0,t.length-1)}}}(),s=y.Util.createCanvasElement().getContext("2d"),o=y.UA.mobile?(window.devicePixelRatio||1)/(s.webkitBackingStorePixelRatio||s.mozBackingStorePixelRatio||s.msBackingStorePixelRatio||s.oBackingStorePixelRatio||s.backingStorePixelRatio||1):1,y.Canvas=function(t){this.init(t)},y.Canvas.prototype={init:function(t){var e=(t||{}).pixelRatio||y.pixelRatio||o;this.pixelRatio=e,this._canvas=y.Util.createCanvasElement(),this._canvas.style.padding=0,this._canvas.style.margin=0,this._canvas.style.border=0,this._canvas.style.background="transparent",this._canvas.style.position="absolute",this._canvas.style.top=0,this._canvas.style.left=0},getContext:function(){return this.context},getPixelRatio:function(){return this.pixelRatio},setPixelRatio:function(t){this.pixelRatio=t,this.setSize(this.getWidth(),this.getHeight())},setWidth:function(t){this.width=this._canvas.width=t*this.pixelRatio,this._canvas.style.width=t+"px"},setHeight:function(t){this.height=this._canvas.height=t*this.pixelRatio,this._canvas.style.height=t+"px"},getWidth:function(){return this.width},getHeight:function(){return this.height},setSize:function(t,e){this.setWidth(t),this.setHeight(e)},toDataURL:function(t,e){try{return this._canvas.toDataURL(t,e)}catch(t){try{return this._canvas.toDataURL()}catch(t){return y.Util.warn("Unable to get data URL. "+t.message),""}}}},y.SceneCanvas=function(t){var e=t||{},i=e.width||0,n=e.height||0;y.Canvas.call(this,e),this.context=new y.SceneContext(this),this.setSize(i,n)},y.SceneCanvas.prototype={setWidth:function(t){var e=this.pixelRatio,i=this.getContext()._context;y.Canvas.prototype.setWidth.call(this,t),i.scale(e,e)},setHeight:function(t){var e=this.pixelRatio,i=this.getContext()._context;y.Canvas.prototype.setHeight.call(this,t),i.scale(e,e)}},y.Util.extend(y.SceneCanvas,y.Canvas),y.HitCanvas=function(t){var e=t||{},i=e.width||0,n=e.height||0;y.Canvas.call(this,e),this.context=new y.HitContext(this),this.setSize(i,n),this.hitCanvas=!0},y.Util.extend(y.HitCanvas,y.Canvas),h=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","createLinearGradient","createPattern","createRadialGradient","drawImage","fill","fillText","getImageData","createImageData","lineTo","moveTo","putImageData","quadraticCurveTo","rect","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeText","transform","translate"],y.Context=function(t){this.init(t)},y.Context.prototype={init:function(t){this.canvas=t,this._context=t._canvas.getContext("2d"),y.enableTrace&&(this.traceArr=[],this._enableTrace())},fillShape:function(t){t.getFillEnabled()&&this._fill(t)},strokeShape:function(t){t.getStrokeEnabled()&&this._stroke(t)},fillStrokeShape:function(t){t.getFillEnabled()&&this._fill(t),t.getStrokeEnabled()&&this._stroke(t)},getTrace:function(t){var e,i,n,a,r=this.traceArr,s=r.length,o="";for(e=0;e<s;e++)(n=(i=r[e]).method)?(a=i.args,o+=n,t?o+="()":y.Util._isArray(a[0])?o+="(["+a.join(",")+"])":o+="("+a.join(",")+")"):(o+=i.property,t||(o+="="+i.val)),o+=";";return o},clearTrace:function(){this.traceArr=[]},_trace:function(t){var e=this.traceArr;e.push(t),e.length>=y.traceArrMax&&e.shift()},reset:function(){var t=this.getCanvas().getPixelRatio();this.setTransform(1*t,0,0,1*t,0,0)},getCanvas:function(){return this.canvas},clear:function(t){var e=this.getCanvas();t?this.clearRect(t.x||0,t.y||0,t.width||0,t.height||0):this.clearRect(0,0,e.getWidth(),e.getHeight())},_applyLineCap:function(t){var e=t.getLineCap();e&&this.setAttr("lineCap",e)},_applyOpacity:function(t){var e=t.getAbsoluteOpacity();1!==e&&this.setAttr("globalAlpha",e)},_applyLineJoin:function(t){var e=t.getLineJoin();e&&this.setAttr("lineJoin",e)},setAttr:function(t,e){this._context[t]=e},arc:function(){var t=arguments;this._context.arc(t[0],t[1],t[2],t[3],t[4],t[5])},beginPath:function(){this._context.beginPath()},bezierCurveTo:function(){var t=arguments;this._context.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5])},clearRect:function(){var t=arguments;this._context.clearRect(t[0],t[1],t[2],t[3])},clip:function(){this._context.clip()},closePath:function(){this._context.closePath()},createImageData:function(){var t=arguments;return 2===t.length?this._context.createImageData(t[0],t[1]):1===t.length?this._context.createImageData(t[0]):void 0},createLinearGradient:function(){var t=arguments;return this._context.createLinearGradient(t[0],t[1],t[2],t[3])},createPattern:function(){var t=arguments;return this._context.createPattern(t[0],t[1])},createRadialGradient:function(){var t=arguments;return this._context.createRadialGradient(t[0],t[1],t[2],t[3],t[4],t[5])},drawImage:function(){var t=arguments,e=this._context;3===t.length?e.drawImage(t[0],t[1],t[2]):5===t.length?e.drawImage(t[0],t[1],t[2],t[3],t[4]):9===t.length&&e.drawImage(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},fill:function(){this._context.fill()},fillText:function(){var t=arguments;this._context.fillText(t[0],t[1],t[2])},getImageData:function(){var t=arguments;return this._context.getImageData(t[0],t[1],t[2],t[3])},lineTo:function(){var t=arguments;this._context.lineTo(t[0],t[1])},moveTo:function(){var t=arguments;this._context.moveTo(t[0],t[1])},rect:function(){var t=arguments;this._context.rect(t[0],t[1],t[2],t[3])},putImageData:function(){var t=arguments;this._context.putImageData(t[0],t[1],t[2])},quadraticCurveTo:function(){var t=arguments;this._context.quadraticCurveTo(t[0],t[1],t[2],t[3])},restore:function(){this._context.restore()},rotate:function(){var t=arguments;this._context.rotate(t[0])},save:function(){this._context.save()},scale:function(){var t=arguments;this._context.scale(t[0],t[1])},setLineDash:function(){var t=arguments,e=this._context;this._context.setLineDash?e.setLineDash(t[0]):"mozDash"in e?e.mozDash=t[0]:"webkitLineDash"in e&&(e.webkitLineDash=t[0])},setTransform:function(){var t=arguments;this._context.setTransform(t[0],t[1],t[2],t[3],t[4],t[5])},stroke:function(){this._context.stroke()},strokeText:function(){var t=arguments;this._context.strokeText(t[0],t[1],t[2])},transform:function(){var t=arguments;this._context.transform(t[0],t[1],t[2],t[3],t[4],t[5])},translate:function(){var t=arguments;this._context.translate(t[0],t[1])},_enableTrace:function(){var t,e,i=this,n=h.length,a=y.Util._simplifyArray,r=this.setAttr,s=function(t){var n,r=i[t];i[t]=function(){return e=a(Array.prototype.slice.call(arguments,0)),n=r.apply(i,arguments),i._trace({method:t,args:e}),n}};for(t=0;t<n;t++)s(h[t]);i.setAttr=function(){r.apply(i,arguments),i._trace({property:arguments[0],val:arguments[1]})}}},y.SceneContext=function(t){y.Context.call(this,t)},y.SceneContext.prototype={_fillColor:function(t){var e=t.fill()||y.Util._getRGBAString({red:t.fillRed(),green:t.fillGreen(),blue:t.fillBlue(),alpha:t.fillAlpha()});this.setAttr("fillStyle",e),t._fillFunc(this)},_fillPattern:function(t){var e=t.getFillPatternImage(),i=t.getFillPatternX(),n=t.getFillPatternY(),a=t.getFillPatternScale(),r=y.getAngle(t.getFillPatternRotation()),s=t.getFillPatternOffset(),o=t.getFillPatternRepeat();(i||n)&&this.translate(i||0,n||0),r&&this.rotate(r),a&&this.scale(a.x,a.y),s&&this.translate(-1*s.x,-1*s.y),this.setAttr("fillStyle",this.createPattern(e,o||"repeat")),this.fill()},_fillLinearGradient:function(t){var e=t.getFillLinearGradientStartPoint(),i=t.getFillLinearGradientEndPoint(),n=t.getFillLinearGradientColorStops(),a=this.createLinearGradient(e.x,e.y,i.x,i.y);if(n){for(var r=0;r<n.length;r+=2)a.addColorStop(n[r],n[r+1]);this.setAttr("fillStyle",a),this.fill()}},_fillRadialGradient:function(t){for(var e=t.getFillRadialGradientStartPoint(),i=t.getFillRadialGradientEndPoint(),n=t.getFillRadialGradientStartRadius(),a=t.getFillRadialGradientEndRadius(),r=t.getFillRadialGradientColorStops(),s=this.createRadialGradient(e.x,e.y,n,i.x,i.y,a),o=0;o<r.length;o+=2)s.addColorStop(r[o],r[o+1]);this.setAttr("fillStyle",s),this.fill()},_fill:function(t){var e=t.fill()||t.fillRed()||t.fillGreen()||t.fillBlue(),i=t.getFillPatternImage(),n=t.getFillLinearGradientColorStops(),a=t.getFillRadialGradientColorStops(),r=t.getFillPriority();e&&"color"===r?this._fillColor(t):i&&"pattern"===r?this._fillPattern(t):n&&"linear-gradient"===r?this._fillLinearGradient(t):a&&"radial-gradient"===r?this._fillRadialGradient(t):e?this._fillColor(t):i?this._fillPattern(t):n?this._fillLinearGradient(t):a&&this._fillRadialGradient(t)},_stroke:function(t){var e=t.dash(),i=t.getStrokeScaleEnabled();t.hasStroke()&&(i||(this.save(),this.setTransform(1,0,0,1,0,0)),this._applyLineCap(t),e&&t.dashEnabled()&&this.setLineDash(e),this.setAttr("lineWidth",t.strokeWidth()),this.setAttr("strokeStyle",t.stroke()||y.Util._getRGBAString({red:t.strokeRed(),green:t.strokeGreen(),blue:t.strokeBlue(),alpha:t.strokeAlpha()})),t._strokeFunc(this),i||this.restore())},_applyShadow:function(t){var e=y.Util,i=t.getAbsoluteOpacity(),n=e.get(t.getShadowColor(),"black"),a=e.get(t.getShadowBlur(),5),r=e.get(t.getShadowOpacity(),1),s=e.get(t.getShadowOffset(),{x:0,y:0});r&&this.setAttr("globalAlpha",r*i),this.setAttr("shadowColor",n),this.setAttr("shadowBlur",a),this.setAttr("shadowOffsetX",s.x),this.setAttr("shadowOffsetY",s.y)}},y.Util.extend(y.SceneContext,y.Context),y.HitContext=function(t){y.Context.call(this,t)},y.HitContext.prototype={_fill:function(t){this.save(),this.setAttr("fillStyle",t.colorKey),t._fillFuncHit(this),this.restore()},_stroke:function(t){t.hasStroke()&&(this._applyLineCap(t),this.setAttr("lineWidth",t.strokeWidth()),this.setAttr("strokeStyle",t.colorKey),t._strokeFuncHit(this))}},y.Util.extend(y.HitContext,y.Context),y.Factory={addGetterSetter:function(t,e,i,n,a){this.addGetter(t,e,i),this.addSetter(t,e,n,a),this.addOverloadedGetterSetter(t,e)},addGetter:function(t,e,i){var n="get"+y.Util._capitalize(e);t.prototype[n]=function(){var t=this.attrs[e];return void 0===t?i:t}},addSetter:function(t,e,i,n){var a="set"+y.Util._capitalize(e);t.prototype[a]=function(t){return i&&(t=i.call(this,t)),this._setAttr(e,t),n&&n.call(this),this}},addComponentsGetterSetter:function(t,e,i,n,a){var r,s,o=i.length,h=y.Util._capitalize,c="get"+h(e),l="set"+h(e);t.prototype[c]=function(){var t={};for(r=0;r<o;r++)t[s=i[r]]=this.getAttr(e+h(s));return t},t.prototype[l]=function(t){var i,r=this.attrs[e];for(i in n&&(t=n.call(this,t)),t)this._setAttr(e+h(i),t[i]);return this._fireChangeEvent(e,r,t),a&&a.call(this),this},this.addOverloadedGetterSetter(t,e)},addOverloadedGetterSetter:function(t,e){var i=y.Util._capitalize(e),n="set"+i,a="get"+i;t.prototype[e]=function(){return arguments.length?(this[n](arguments[0]),this):this[a]()}},backCompat:function(t,e){var i;for(i in e)t.prototype[i]=t.prototype[e[i]]},afterSetFilter:function(){this._filterUpToDate=!1}},y.Validators={RGBComponent:function(t){return t>255?255:t<0?0:Math.round(t)},alphaComponent:function(t){return t>1?1:t<1e-4?1e-4:t}},c="Shape",l=["id"],d=["xChange.kinetic","yChange.kinetic","scaleXChange.kinetic","scaleYChange.kinetic","skewXChange.kinetic","skewYChange.kinetic","rotationChange.kinetic","offsetXChange.kinetic","offsetYChange.kinetic","transformsEnabledChange.kinetic"].join(" "),y.Util.addMethods(y.Node,{_init:function(t){var e=this;this._id=y.idCounter++,this.eventListeners={},this.attrs={},this._cache={},this._filterUpToDate=!1,this.setAttrs(t),this.on(d,function(){this._clearCache("transform"),e._clearSelfAndDescendantCache("absoluteTransform")}),this.on("visibleChange.kinetic",function(){e._clearSelfAndDescendantCache("visible")}),this.on("listeningChange.kinetic",function(){e._clearSelfAndDescendantCache("listening")}),this.on("opacityChange.kinetic",function(){e._clearSelfAndDescendantCache("absoluteOpacity")})},_clearCache:function(t){t?delete this._cache[t]:this._cache={}},_getCache:function(t,e){return void 0===this._cache[t]&&(this._cache[t]=e.call(this)),this._cache[t]},_clearSelfAndDescendantCache:function(t){this._clearCache(t),this.children&&this.getChildren().each(function(e){e._clearSelfAndDescendantCache(t)})},clearCache:function(){return delete this._cache.canvas,this._filterUpToDate=!1,this},cache:function(t){var e=t||{},i=e.x||0,n=e.y||0,a=e.width||this.width(),r=e.height||this.height(),s=e.drawBorder||!1;if(0!==a&&0!==r){var o=new y.SceneCanvas({pixelRatio:1,width:a,height:r}),h=new y.SceneCanvas({pixelRatio:1,width:a,height:r}),c=new y.HitCanvas({width:a,height:r}),l=o.getContext(),d=c.getContext();return c.isCache=!0,this.clearCache(),l.save(),d.save(),s&&(l.save(),l.beginPath(),l.rect(0,0,a,r),l.closePath(),l.setAttr("strokeStyle","red"),l.setAttr("lineWidth",5),l.stroke(),l.restore()),l.translate(-1*i,-1*n),d.translate(-1*i,-1*n),"Shape"===this.nodeType&&(l.translate(-1*this.x(),-1*this.y()),d.translate(-1*this.x(),-1*this.y())),this.drawScene(o,this),this.drawHit(c,this),l.restore(),d.restore(),this._cache.canvas={scene:o,filter:h,hit:c},this}y.Util.warn("Width or height of caching configuration equals 0. Cache is ignored.")},_drawCachedSceneCanvas:function(t){t.save(),this.getLayer()._applyTransform(this,t),t._applyOpacity(this),t.drawImage(this._getCachedSceneCanvas()._canvas,0,0),t.restore()},_getCachedSceneCanvas:function(){var t,e,i,n=this.filters(),a=this._cache.canvas,r=a.scene,s=a.filter,o=s.getContext();if(n){if(!this._filterUpToDate){try{for(t=n.length,o.clear(),o.drawImage(r._canvas,0,0),e=o.getImageData(0,0,s.getWidth(),s.getHeight()),i=0;i<t;i++)n[i].call(this,e),o.putImageData(e,0,0)}catch(t){y.Util.warn("Unable to apply filter. "+t.message)}this._filterUpToDate=!0}return s}return r},_drawCachedHitCanvas:function(t){var e=this._cache.canvas.hit;t.save(),this.getLayer()._applyTransform(this,t),t.drawImage(e._canvas,0,0),t.restore()},on:function(t,e){var i,n,a,r,s=t.split(" "),o=s.length;for(i=0;i<o;i++)a=(n=s[i].split("."))[0],r=n[1]||"",this.eventListeners[a]||(this.eventListeners[a]=[]),this.eventListeners[a].push({name:r,handler:e});return this},off:function(t){var e,i,n,a,r,s=(t||"").split(" "),o=s.length;if(!t)for(i in this.eventListeners)this._off(i);for(e=0;e<o;e++)if(a=(n=s[e].split("."))[0],r=n[1],a)this.eventListeners[a]&&this._off(a,r);else for(i in this.eventListeners)this._off(i,r);return this},dispatchEvent:function(t){var e={target:this,type:t.type,evt:t};this.fire(t.type,e)},addEventListener:function(t,e){this.on(t,function(t){e.call(this,t.evt)})},removeEventListener:function(t){this.off(t)},remove:function(){var t=this.getParent();return t&&t.children&&(t.children.splice(this.index,1),t._setChildrenIndices(),delete this.parent),this._clearSelfAndDescendantCache("stage"),this._clearSelfAndDescendantCache("absoluteTransform"),this._clearSelfAndDescendantCache("visible"),this._clearSelfAndDescendantCache("listening"),this._clearSelfAndDescendantCache("absoluteOpacity"),this},destroy:function(){y._removeId(this.getId()),y._removeName(this.getName(),this._id),this.remove()},getAttr:function(t){var e="get"+y.Util._capitalize(t);return y.Util._isFunction(this[e])?this[e]():this.attrs[t]},getAncestors:function(){for(var t=this.getParent(),e=new y.Collection;t;)e.push(t),t=t.getParent();return e},getAttrs:function(){return this.attrs||{}},setAttrs:function(t){var e,i;if(t)for(e in t)"children"===e||t[e]instanceof y.Node||(i="set"+y.Util._capitalize(e),y.Util._isFunction(this[i])?this[i](t[e]):this._setAttr(e,t[e]));return this},isListening:function(){return this._getCache("listening",this._isListening)},_isListening:function(){var t=this.getListening(),e=this.getParent();return"inherit"===t?!e||e.isListening():t},isVisible:function(){return this._getCache("visible",this._isVisible)},_isVisible:function(){var t=this.getVisible(),e=this.getParent();return"inherit"===t?!e||e.isVisible():t},shouldDrawHit:function(t){var e=this.getLayer();return t&&t.isCache||e&&e.hitGraphEnabled()&&this.isListening()&&this.isVisible()},show:function(){return this.setVisible(!0),this},hide:function(){return this.setVisible(!1),this},getZIndex:function(){return this.index||0},getAbsoluteZIndex:function(){var t,e,i,n,a=this.getDepth(),r=this,s=0;return"Stage"!==r.nodeType&&function o(h){for(t=[],e=h.length,i=0;i<e;i++)n=h[i],s++,n.nodeType!==c&&(t=t.concat(n.getChildren().toArray())),n._id===r._id&&(i=e);t.length>0&&t[0].getDepth()<=a&&o(t)}(r.getStage().getChildren()),s},getDepth:function(){for(var t=0,e=this.parent;e;)t++,e=e.parent;return t},setPosition:function(t){return this.setX(t.x),this.setY(t.y),this},getPosition:function(){return{x:this.getX(),y:this.getY()}},getAbsolutePosition:function(){var t=this.getAbsoluteTransform().getMatrix(),e=new y.Transform,i=this.offset();return e.m=t.slice(),e.translate(i.x,i.y),e.getTranslation()},setAbsolutePosition:function(t){var e,i=this._clearTransform();return this.attrs.x=i.x,this.attrs.y=i.y,delete i.x,delete i.y,(e=this.getAbsoluteTransform()).invert(),e.translate(t.x,t.y),t={x:this.attrs.x+e.getTranslation().x,y:this.attrs.y+e.getTranslation().y},this.setPosition({x:t.x,y:t.y}),this._setTransform(i),this},_setTransform:function(t){var e;for(e in t)this.attrs[e]=t[e];this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")},_clearTransform:function(){var t={x:this.getX(),y:this.getY(),rotation:this.getRotation(),scaleX:this.getScaleX(),scaleY:this.getScaleY(),offsetX:this.getOffsetX(),offsetY:this.getOffsetY(),skewX:this.getSkewX(),skewY:this.getSkewY()};return this.attrs.x=0,this.attrs.y=0,this.attrs.rotation=0,this.attrs.scaleX=1,this.attrs.scaleY=1,this.attrs.offsetX=0,this.attrs.offsetY=0,this.attrs.skewX=0,this.attrs.skewY=0,this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform"),t},move:function(t){var e=t.x,i=t.y,n=this.getX(),a=this.getY();return void 0!==e&&(n+=e),void 0!==i&&(a+=i),this.setPosition({x:n,y:a}),this},_eachAncestorReverse:function(t,e){var i,n,a=[],r=this.getParent();if(e&&e._id===this._id)return t(this),!0;for(a.unshift(this);r&&(!e||r._id!==e._id);)a.unshift(r),r=r.parent;for(i=a.length,n=0;n<i;n++)t(a[n])},rotate:function(t){return this.setRotation(this.getRotation()+t),this},moveToTop:function(){if(this.parent){var t=this.index;return this.parent.children.splice(t,1),this.parent.children.push(this),this.parent._setChildrenIndices(),!0}y.Util.warn("Node has no parent. moveToTop function is ignored.")},moveUp:function(){if(this.parent){var t=this.index;return t<this.parent.getChildren().length-1&&(this.parent.children.splice(t,1),this.parent.children.splice(t+1,0,this),this.parent._setChildrenIndices(),!0)}y.Util.warn("Node has no parent. moveUp function is ignored.")},moveDown:function(){if(this.parent){var t=this.index;return t>0&&(this.parent.children.splice(t,1),this.parent.children.splice(t-1,0,this),this.parent._setChildrenIndices(),!0)}y.Util.warn("Node has no parent. moveDown function is ignored.")},moveToBottom:function(){if(this.parent){var t=this.index;return t>0&&(this.parent.children.splice(t,1),this.parent.children.unshift(this),this.parent._setChildrenIndices(),!0)}y.Util.warn("Node has no parent. moveToBottom function is ignored.")},setZIndex:function(t){if(this.parent){var e=this.index;return this.parent.children.splice(e,1),this.parent.children.splice(t,0,this),this.parent._setChildrenIndices(),this}y.Util.warn("Node has no parent. zIndex parameter is ignored.")},getAbsoluteOpacity:function(){return this._getCache("absoluteOpacity",this._getAbsoluteOpacity)},_getAbsoluteOpacity:function(){var t=this.getOpacity();return this.getParent()&&(t*=this.getParent().getAbsoluteOpacity()),t},moveTo:function(t){return this.getParent()!==t&&(this.remove(),t.add(this)),this},toObject:function(){var t,e,i,n,a=y.Util,r={},s=this.getAttrs();for(t in r.attrs={},s)e=s[t],a._isFunction(e)||a._isElement(e)||a._isObject(e)&&a._hasMethods(e)||(i=this[t],delete s[t],n=i?i.call(this):null,s[t]=e,n!==e&&(r.attrs[t]=e));return r.className=this.getClassName(),r},toJSON:function(){return JSON.stringify(this.toObject())},getParent:function(){return this.parent},getLayer:function(){var t=this.getParent();return t?t.getLayer():null},getStage:function(){return this._getCache("stage",this._getStage)},_getStage:function(){var t=this.getParent();return t?t.getStage():void 0},fire:function(t,e,i){return i?this._fireAndBubble(t,e||{}):this._fire(t,e||{}),this},getAbsoluteTransform:function(t){return t?this._getAbsoluteTransform(t):this._getCache("absoluteTransform",this._getAbsoluteTransform)},_getAbsoluteTransform:function(t){var e,i,n=new y.Transform;return this._eachAncestorReverse(function(t){e=t.transformsEnabled(),i=t.getTransform(),"all"===e?n.multiply(i):"position"===e&&n.translate(t.x(),t.y())},t),n},getTransform:function(){return this._getCache("transform",this._getTransform)},_getTransform:function(){var t=new y.Transform,e=this.getX(),i=this.getY(),n=y.getAngle(this.getRotation()),a=this.getScaleX(),r=this.getScaleY(),s=this.getSkewX(),o=this.getSkewY(),h=this.getOffsetX(),c=this.getOffsetY();return 0===e&&0===i||t.translate(e,i),0!==n&&t.rotate(n),0===s&&0===o||t.skew(s,o),1===a&&1===r||t.scale(a,r),0===h&&0===c||t.translate(-1*h,-1*c),t},clone:function(t){var e,i,n,a,r,s=this.getClassName(),o=y.Util.cloneObject(this.attrs);for(var h in l)delete o[l[h]];for(e in t)o[e]=t[e];var c=new y[s](o);for(e in this.eventListeners)for(n=(i=this.eventListeners[e]).length,a=0;a<n;a++)(r=i[a]).name.indexOf("kinetic")<0&&(c.eventListeners[e]||(c.eventListeners[e]=[]),c.eventListeners[e].push(r));return c},toDataURL:function(t){var e=(t=t||{}).mimeType||null,i=t.quality||null,n=this.getStage(),a=t.x||0,r=t.y||0,s=new y.SceneCanvas({width:t.width||this.getWidth()||(n?n.getWidth():0),height:t.height||this.getHeight()||(n?n.getHeight():0),pixelRatio:1}),o=s.getContext();return o.save(),(a||r)&&o.translate(-1*a,-1*r),this.drawScene(s),o.restore(),s.toDataURL(e,i)},toImage:function(t){y.Util._getImage(this.toDataURL(t),function(e){t.callback(e)})},setSize:function(t){return this.setWidth(t.width),this.setHeight(t.height),this},getSize:function(){return{width:this.getWidth(),height:this.getHeight()}},getWidth:function(){return this.attrs.width||0},getHeight:function(){return this.attrs.height||0},getClassName:function(){return this.className||this.nodeType},getType:function(){return this.nodeType},getDragDistance:function(){return void 0!==this.attrs.dragDistance?this.attrs.dragDistance:this.parent?this.parent.getDragDistance():y.dragDistance},_get:function(t){return this.className===t||this.nodeType===t?[this]:[]},_off:function(t,e){var i,n,a=this.eventListeners[t];for(i=0;i<a.length;i++)if(!("kinetic"===(n=a[i].name)&&"kinetic"!==e||e&&n!==e)){if(a.splice(i,1),0===a.length){delete this.eventListeners[t];break}i--}},_fireChangeEvent:function(t,e,i){this._fire(t+"Change",{oldVal:e,newVal:i})},setId:function(t){var e=this.getId();return y._removeId(e),y._addId(this,t),this._setAttr("id",t),this},setName:function(t){var e=this.getName();return y._removeName(e,this._id),y._addName(this,t),this._setAttr("name",t),this},setAttr:function(t,e){var i=this["set"+y.Util._capitalize(t)];return y.Util._isFunction(i)?i.call(this,e):this._setAttr(t,e),this},_setAttr:function(t,e){var i;void 0!==e&&(i=this.attrs[t],this.attrs[t]=e,this._fireChangeEvent(t,i,e))},_setComponentAttr:function(t,e,i){var n;void 0!==i&&((n=this.attrs[t])||(this.attrs[t]=this.getAttr(t)),this.attrs[t][e]=i,this._fireChangeEvent(t,n,i))},_fireAndBubble:function(t,e,i){var n=!0;if(e&&this.nodeType===c&&(e.target=this),"mouseenter"===t&&i&&(this._id===i._id||this.isAncestorOf&&this.isAncestorOf(i))?n=!1:"mouseleave"===t&&i&&(this._id===i._id||this.isAncestorOf&&this.isAncestorOf(i))&&(n=!1),n){this._fire(t,e);var a=("mouseenter"===t||"mouseleave"===t)&&(i&&i.isAncestorOf&&i.isAncestorOf(this)||!(!i||!i.isAncestorOf));e&&!e.cancelBubble&&this.parent&&this.parent.isListening()&&!a&&(i&&i.parent?this._fireAndBubble.call(this.parent,t,e,i.parent):this._fireAndBubble.call(this.parent,t,e))}},_fire:function(t,e){var i,n=this.eventListeners[t];if(e.type=t,n)for(i=0;i<n.length;i++)n[i].handler.call(this,e)},draw:function(){return this.drawScene(),this.drawHit(),this}}),y.Node.create=function(t,e){return this._createNode(JSON.parse(t),e)},y.Node._createNode=function(t,e){var i,n,a,r=y.Node.prototype.getClassName.call(t),s=t.children;if(e&&(t.attrs.container=e),i=new y[r](t.attrs),s)for(n=s.length,a=0;a<n;a++)i.add(this._createNode(s[a]));return i},y.Factory.addOverloadedGetterSetter(y.Node,"position"),y.Factory.addGetterSetter(y.Node,"x",0),y.Factory.addGetterSetter(y.Node,"y",0),y.Factory.addGetterSetter(y.Node,"opacity",1),y.Factory.addGetter(y.Node,"name"),y.Factory.addOverloadedGetterSetter(y.Node,"name"),y.Factory.addGetter(y.Node,"id"),y.Factory.addOverloadedGetterSetter(y.Node,"id"),y.Factory.addGetterSetter(y.Node,"rotation",0),y.Factory.addComponentsGetterSetter(y.Node,"scale",["x","y"]),y.Factory.addGetterSetter(y.Node,"scaleX",1),y.Factory.addGetterSetter(y.Node,"scaleY",1),y.Factory.addComponentsGetterSetter(y.Node,"skew",["x","y"]),y.Factory.addGetterSetter(y.Node,"skewX",0),y.Factory.addGetterSetter(y.Node,"skewY",0),y.Factory.addComponentsGetterSetter(y.Node,"offset",["x","y"]),y.Factory.addGetterSetter(y.Node,"offsetX",0),y.Factory.addGetterSetter(y.Node,"offsetY",0),y.Factory.addSetter(y.Node,"dragDistance"),y.Factory.addOverloadedGetterSetter(y.Node,"dragDistance"),y.Factory.addSetter(y.Node,"width",0),y.Factory.addOverloadedGetterSetter(y.Node,"width"),y.Factory.addSetter(y.Node,"height",0),y.Factory.addOverloadedGetterSetter(y.Node,"height"),y.Factory.addGetterSetter(y.Node,"listening","inherit"),y.Factory.addGetterSetter(y.Node,"filters",void 0,function(t){return this._filterUpToDate=!1,t}),y.Factory.addGetterSetter(y.Node,"visible","inherit"),y.Factory.addGetterSetter(y.Node,"transformsEnabled","all"),y.Factory.addOverloadedGetterSetter(y.Node,"size"),y.Factory.backCompat(y.Node,{rotateDeg:"rotate",setRotationDeg:"setRotation",getRotationDeg:"getRotation"}),y.Collection.mapMethods(y.Node),y.Filters.Grayscale=function(t){var e,i,n=t.data,a=n.length;for(e=0;e<a;e+=4)i=.34*n[e]+.5*n[e+1]+.16*n[e+2],n[e]=i,n[e+1]=i,n[e+2]=i},y.Filters.Brighten=function(t){var e,i=255*this.brightness(),n=t.data,a=n.length;for(e=0;e<a;e+=4)n[e]+=i,n[e+1]+=i,n[e+2]+=i},y.Factory.addGetterSetter(y.Node,"brightness",0,null,y.Factory.afterSetFilter),y.Filters.Invert=function(t){var e,i=t.data,n=i.length;for(e=0;e<n;e+=4)i[e]=255-i[e],i[e+1]=255-i[e+1],i[e+2]=255-i[e+2]},function(){function t(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}var e=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],i=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];y.Filters.Blur=function(n){var a=Math.round(this.blurRadius());a>0&&function(n,a){var r,s,o,h,c,l,d,u,f,g,p,v,m,y,_,S,C,x,w,b,F,k,T,P,A=n.data,M=n.width,D=n.height,G=a+a+1,L=M-1,R=D-1,I=a+1,N=I*(I+1)/2,O=new t,U=null,B=O,z=null,H=null,E=e[a],W=i[a];for(o=1;o<G;o++)B=B.next=new t,o==I&&(U=B);for(B.next=O,d=l=0,s=0;s<D;s++){for(S=C=x=w=u=f=g=p=0,v=I*(b=A[l]),m=I*(F=A[l+1]),y=I*(k=A[l+2]),_=I*(T=A[l+3]),u+=N*b,f+=N*F,g+=N*k,p+=N*T,B=O,o=0;o<I;o++)B.r=b,B.g=F,B.b=k,B.a=T,B=B.next;for(o=1;o<I;o++)h=l+((L<o?L:o)<<2),u+=(B.r=b=A[h])*(P=I-o),f+=(B.g=F=A[h+1])*P,g+=(B.b=k=A[h+2])*P,p+=(B.a=T=A[h+3])*P,S+=b,C+=F,x+=k,w+=T,B=B.next;for(z=O,H=U,r=0;r<M;r++)A[l+3]=T=p*E>>W,0!==T?(T=255/T,A[l]=(u*E>>W)*T,A[l+1]=(f*E>>W)*T,A[l+2]=(g*E>>W)*T):A[l]=A[l+1]=A[l+2]=0,u-=v,f-=m,g-=y,p-=_,v-=z.r,m-=z.g,y-=z.b,_-=z.a,h=d+((h=r+a+1)<L?h:L)<<2,u+=S+=z.r=A[h],f+=C+=z.g=A[h+1],g+=x+=z.b=A[h+2],p+=w+=z.a=A[h+3],z=z.next,v+=b=H.r,m+=F=H.g,y+=k=H.b,_+=T=H.a,S-=b,C-=F,x-=k,w-=T,H=H.next,l+=4;d+=M}for(r=0;r<M;r++){for(C=x=w=S=f=g=p=u=0,v=I*(b=A[l=r<<2]),m=I*(F=A[l+1]),y=I*(k=A[l+2]),_=I*(T=A[l+3]),u+=N*b,f+=N*F,g+=N*k,p+=N*T,B=O,o=0;o<I;o++)B.r=b,B.g=F,B.b=k,B.a=T,B=B.next;for(c=M,o=1;o<=a;o++)l=c+r<<2,u+=(B.r=b=A[l])*(P=I-o),f+=(B.g=F=A[l+1])*P,g+=(B.b=k=A[l+2])*P,p+=(B.a=T=A[l+3])*P,S+=b,C+=F,x+=k,w+=T,B=B.next,o<R&&(c+=M);for(l=r,z=O,H=U,s=0;s<D;s++)A[3+(h=l<<2)]=T=p*E>>W,T>0?(T=255/T,A[h]=(u*E>>W)*T,A[h+1]=(f*E>>W)*T,A[h+2]=(g*E>>W)*T):A[h]=A[h+1]=A[h+2]=0,u-=v,f-=m,g-=y,p-=_,v-=z.r,m-=z.g,y-=z.b,_-=z.a,h=r+((h=s+I)<R?h:R)*M<<2,u+=S+=z.r=A[h],f+=C+=z.g=A[h+1],g+=x+=z.b=A[h+2],p+=w+=z.a=A[h+3],z=z.next,v+=b=H.r,m+=F=H.g,y+=k=H.b,_+=T=H.a,S-=b,C-=F,x-=k,w-=T,H=H.next,l+=M}}(n,a)},y.Factory.addGetterSetter(y.Node,"blurRadius",0,null,y.Factory.afterSetFilter)}(),function(){function t(t,e,i){var n=4*(i*t.width+e),a=[];return a.push(t.data[n++],t.data[n++],t.data[n++],t.data[n++]),a}function e(t,e){return Math.sqrt(Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)+Math.pow(t[2]-e[2],2))}y.Filters.Mask=function(i){var n=function(i,n){var a=t(i,0,0),r=t(i,i.width-1,0),s=t(i,0,i.height-1),o=t(i,i.width-1,i.height-1),h=n||10;if(e(a,r)<h&&e(r,o)<h&&e(o,s)<h&&e(s,a)<h){for(var c=function(t){for(var e=[0,0,0],i=0;i<t.length;i++)e[0]+=t[i][0],e[1]+=t[i][1],e[2]+=t[i][2];return e[0]/=t.length,e[1]/=t.length,e[2]/=t.length,e}([r,a,o,s]),l=[],d=0;d<i.width*i.height;d++){var u=e(c,[i.data[4*d],i.data[4*d+1],i.data[4*d+2]]);l[d]=u<h?0:255}return l}}(i,this.threshold());return n&&function(t,e){for(var i=0;i<t.width*t.height;i++)t.data[4*i+3]=e[i]}(i,n=function(t,e,i){for(var n=[1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9],a=Math.round(Math.sqrt(n.length)),r=Math.floor(a/2),s=[],o=0;o<i;o++)for(var h=0;h<e;h++){for(var c=o*e+h,l=0,d=0;d<a;d++)for(var u=0;u<a;u++){var f=o+d-r,g=h+u-r;if(f>=0&&f<i&&g>=0&&g<e){var p=n[d*a+u];l+=t[f*e+g]*p}}s[c]=l}return s}(n=function(t,e,i){for(var n=[1,1,1,1,1,1,1,1,1],a=Math.round(Math.sqrt(n.length)),r=Math.floor(a/2),s=[],o=0;o<i;o++)for(var h=0;h<e;h++){for(var c=o*e+h,l=0,d=0;d<a;d++)for(var u=0;u<a;u++){var f=o+d-r,g=h+u-r;if(f>=0&&f<i&&g>=0&&g<e){var p=n[d*a+u];l+=t[f*e+g]*p}}s[c]=l>=1020?255:0}return s}(n=function(t,e,i){for(var n=[1,1,1,1,0,1,1,1,1],a=Math.round(Math.sqrt(n.length)),r=Math.floor(a/2),s=[],o=0;o<i;o++)for(var h=0;h<e;h++){for(var c=o*e+h,l=0,d=0;d<a;d++)for(var u=0;u<a;u++){var f=o+d-r,g=h+u-r;if(f>=0&&f<i&&g>=0&&g<e){var p=n[d*a+u];l+=t[f*e+g]*p}}s[c]=2040===l?255:0}return s}(n,i.width,i.height),i.width,i.height),i.width,i.height)),i},y.Factory.addGetterSetter(y.Node,"threshold",0,null,y.Factory.afterSetFilter)}(),y.Filters.RGB=function(t){var e,i,n=t.data,a=n.length,r=this.red(),s=this.green(),o=this.blue();for(e=0;e<a;e+=4)i=(.34*n[e]+.5*n[e+1]+.16*n[e+2])/255,n[e]=i*r,n[e+1]=i*s,n[e+2]=i*o,n[e+3]=n[e+3]},y.Factory.addGetterSetter(y.Node,"red",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),y.Factory.addGetterSetter(y.Node,"green",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),y.Factory.addGetterSetter(y.Node,"blue",0,y.Validators.RGBComponent,y.Factory.afterSetFilter),y.Filters.HSV=function(t){var e,i,n,a,r,s=t.data,o=s.length,h=Math.pow(2,this.value()),c=Math.pow(2,this.saturation()),l=Math.abs(this.hue()+360)%360,d=h*c*Math.cos(l*Math.PI/180),u=h*c*Math.sin(l*Math.PI/180),f=.299*h+.701*d+.167*u,g=.587*h-.587*d+.33*u,p=.114*h-.114*d-.497*u,v=.299*h-.299*d-.328*u,m=.587*h+.413*d+.035*u,y=.114*h-.114*d+.293*u,_=.299*h-.3*d+1.25*u,S=.587*h-.586*d-1.05*u,C=.114*h+.886*d-.2*u;for(e=0;e<o;e+=4)i=s[e+0],n=s[e+1],a=s[e+2],r=s[e+3],s[e+0]=f*i+g*n+p*a,s[e+1]=v*i+m*n+y*a,s[e+2]=_*i+S*n+C*a,s[e+3]=r},y.Factory.addGetterSetter(y.Node,"hue",0,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"saturation",0,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"value",0,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"hue",0,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"saturation",0,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"luminance",0,null,y.Factory.afterSetFilter),y.Filters.HSL=function(t){var e,i,n,a,r,s=t.data,o=s.length,h=Math.pow(2,this.saturation()),c=Math.abs(this.hue()+360)%360,l=127*this.luminance(),d=1*h*Math.cos(c*Math.PI/180),u=1*h*Math.sin(c*Math.PI/180),f=.299+.701*d+.167*u,g=.587-.587*d+.33*u,p=.114-.114*d-.497*u,v=.299-.299*d-.328*u,m=.587+.413*d+.035*u,y=.114-.114*d+.293*u,_=.299-.3*d+1.25*u,S=.587-.586*d-1.05*u,C=.114+.886*d-.2*u;for(e=0;e<o;e+=4)i=s[e+0],n=s[e+1],a=s[e+2],r=s[e+3],s[e+0]=f*i+g*n+p*a+l,s[e+1]=v*i+m*n+y*a+l,s[e+2]=_*i+S*n+C*a+l,s[e+3]=r},y.Filters.Emboss=function(t){var e=10*this.embossStrength(),i=255*this.embossWhiteLevel(),n=this.embossDirection(),a=this.embossBlend(),r=0,s=0,o=t.data,h=t.width,c=t.height,l=4*h,d=c;switch(n){case"top-left":r=-1,s=-1;break;case"top":r=-1,s=0;break;case"top-right":r=-1,s=1;break;case"right":r=0,s=1;break;case"bottom-right":r=1,s=1;break;case"bottom":r=1,s=0;break;case"bottom-left":r=1,s=-1;break;case"left":r=0,s=-1}do{var u=(d-1)*l,f=r;d+f<1&&(f=0),d+f>c&&(f=0);var g=(d-1+f)*h*4,p=h;do{var v=u+4*(p-1),m=s;p+m<1&&(m=0),p+m>h&&(m=0);var y=g+4*(p-1+m),_=o[v]-o[y],S=o[v+1]-o[y+1],C=o[v+2]-o[y+2],x=_,w=x>0?x:-x;if((S>0?S:-S)>w&&(x=S),(C>0?C:-C)>w&&(x=C),x*=e,a){var b=o[v]+x,F=o[v+1]+x,k=o[v+2]+x;o[v]=b>255?255:b<0?0:b,o[v+1]=F>255?255:F<0?0:F,o[v+2]=k>255?255:k<0?0:k}else{var T=i-x;T<0?T=0:T>255&&(T=255),o[v]=o[v+1]=o[v+2]=T}}while(--p)}while(--d)},y.Factory.addGetterSetter(y.Node,"embossStrength",.5,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"embossWhiteLevel",.5,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"embossDirection","top-left",null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"embossBlend",!1,null,y.Factory.afterSetFilter),function(){function t(t,e,i,n,a){var r=i-e,s=a-n;return 0===r?n+s/2:0===s?n:s*((t-e)/r)+n}y.Filters.Enhance=function(e){var i,n,a,r,s=e.data,o=s.length,h=s[0],c=h,l=s[1],d=l,u=s[2],f=u,g=this.enhance();if(0!==g){for(r=0;r<o;r+=4)(i=s[r+0])<h?h=i:i>c&&(c=i),(n=s[r+1])<l?l=n:n>d&&(d=n),(a=s[r+2])<u?u=a:a>f&&(f=a);var p,v,m,y,_,S,C,x,w;for(c===h&&(c=255,h=0),d===l&&(d=255,l=0),f===u&&(f=255,u=0),g>0?(v=c+g*(255-c),m=h-g*(h-0),_=d+g*(255-d),S=l-g*(l-0),x=f+g*(255-f),w=u-g*(u-0)):(v=c+g*(c-(p=.5*(c+h))),m=h+g*(h-p),_=d+g*(d-(y=.5*(d+l))),S=l+g*(l-y),x=f+g*(f-(C=.5*(f+u))),w=u+g*(u-C)),r=0;r<o;r+=4)s[r+0]=t(s[r+0],h,c,m,v),s[r+1]=t(s[r+1],l,d,S,_),s[r+2]=t(s[r+2],u,f,w,x)}},y.Factory.addGetterSetter(y.Node,"enhance",0,null,y.Factory.afterSetFilter)}(),y.Filters.Posterize=function(t){var e,i=Math.round(254*this.levels())+1,n=t.data,a=n.length,r=255/i;for(e=0;e<a;e+=1)n[e]=Math.floor(n[e]/r)*r},y.Factory.addGetterSetter(y.Node,"levels",.5,null,y.Factory.afterSetFilter),y.Filters.Noise=function(t){var e,i=255*this.noise(),n=t.data,a=n.length,r=i/2;for(e=0;e<a;e+=4)n[e+0]+=r-2*r*Math.random(),n[e+1]+=r-2*r*Math.random(),n[e+2]+=r-2*r*Math.random()},y.Factory.addGetterSetter(y.Node,"noise",.2,null,y.Factory.afterSetFilter),y.Filters.Pixelate=function(t){var e,i,n,a,r,s,o,h,c,l,d,u,f,g,p=Math.ceil(this.pixelSize()),v=t.width,m=t.height,y=Math.ceil(v/p),_=Math.ceil(m/p);for(t=t.data,u=0;u<y;u+=1)for(f=0;f<_;f+=1){for(a=0,r=0,s=0,o=0,c=(h=u*p)+p,d=(l=f*p)+p,g=0,e=h;e<c;e+=1)if(!(e>=v))for(i=l;i<d;i+=1)i>=m||(a+=t[0+(n=4*(v*i+e))],r+=t[n+1],s+=t[n+2],o+=t[n+3],g+=1);for(a/=g,r/=g,s/=g,e=h;e<c;e+=1)if(!(e>=v))for(i=l;i<d;i+=1)i>=m||(t[0+(n=4*(v*i+e))]=a,t[n+1]=r,t[n+2]=s,t[n+3]=o)}},y.Factory.addGetterSetter(y.Node,"pixelSize",8,null,y.Factory.afterSetFilter),y.Filters.Threshold=function(t){var e,i=255*this.threshold(),n=t.data,a=n.length;for(e=0;e<a;e+=1)n[e]=n[e]<i?0:255},y.Factory.addGetterSetter(y.Node,"threshold",.5,null,y.Factory.afterSetFilter),y.Filters.Sepia=function(t){var e,i,n,a,r,s,o,h,c,l=t.data,d=t.width,u=t.height,f=4*d;do{e=(u-1)*f,i=d;do{o=.393*(a=l[n=e+4*(i-1)])+.769*(r=l[n+1])+.189*(s=l[n+2]),h=.349*a+.686*r+.168*s,c=.272*a+.534*r+.131*s,l[n]=o>255?255:o,l[n+1]=h>255?255:h,l[n+2]=c>255?255:c,l[n+3]=l[n+3]}while(--i)}while(--u)},y.Filters.Solarize=function(t){var e=t.data,i=t.width,n=4*i,a=t.height;do{var r=(a-1)*n,s=i;do{var o=r+4*(s-1),h=e[o],c=e[o+1],l=e[o+2];h>127&&(h=255-h),c>127&&(c=255-c),l>127&&(l=255-l),e[o]=h,e[o+1]=c,e[o+2]=l}while(--s)}while(--a)},u=y.Util.createCanvasElement(),y.Filters.Kaleidoscope=function(t){var e,i,n,a,r,s,o,h,c,l=t.width,d=t.height,f=Math.round(this.kaleidoscopePower()),g=Math.round(this.kaleidoscopeAngle()),p=Math.floor(l*(g%360)/360);if(!(f<1)){u.width=l,u.height=d;var v=u.getContext("2d").getImageData(0,0,l,d);!function(t,e,i){var n,a,r,s,o=t.data,h=e.data,c=t.width,l=t.height,d=i.polarCenterX||c/2,u=i.polarCenterY||l/2,f=0,g=0,p=0,v=0,m=Math.sqrt(d*d+u*u);a=c-d,r=l-u,m=(s=Math.sqrt(a*a+r*r))>m?s:m;var y,_,S,C,x=l,w=c,b=360/w*Math.PI/180;for(_=0;_<w;_+=1)for(S=Math.sin(_*b),C=Math.cos(_*b),y=0;y<x;y+=1)a=Math.floor(d+m*y/x*C),f=o[0+(n=4*((r=Math.floor(u+m*y/x*S))*c+a))],g=o[n+1],p=o[n+2],v=o[n+3],h[0+(n=4*(_+y*c))]=f,h[n+1]=g,h[n+2]=p,h[n+3]=v}(t,v,{polarCenterX:l/2,polarCenterY:d/2});for(var m=l/Math.pow(2,f);m<=8;)m*=2,f-=1;var y=m=Math.ceil(m),_=0,S=y,C=1;for(p+m>l&&(_=y,S=0,C=-1),i=0;i<d;i+=1)for(e=_;e!==S;e+=C)h=4*(l*i+Math.round(e+p)%l),a=v.data[h+0],r=v.data[h+1],s=v.data[h+2],o=v.data[h+3],c=4*(l*i+e),v.data[c+0]=a,v.data[c+1]=r,v.data[c+2]=s,v.data[c+3]=o;for(i=0;i<d;i+=1)for(y=Math.floor(m),n=0;n<f;n+=1){for(e=0;e<y+1;e+=1)h=4*(l*i+e),a=v.data[h+0],r=v.data[h+1],s=v.data[h+2],o=v.data[h+3],c=4*(l*i+2*y-e-1),v.data[c+0]=a,v.data[c+1]=r,v.data[c+2]=s,v.data[c+3]=o;y*=2}!function(t,e,i){var n,a,r,s,o,h,c=t.data,l=e.data,d=t.width,u=t.height,f=i.polarCenterX||d/2,g=i.polarCenterY||u/2,p=0,v=0,m=0,y=0,_=Math.sqrt(f*f+g*g);a=d-f,r=u-g,_=(h=Math.sqrt(a*a+r*r))>_?h:_;var S,C,x,w=u,b=d,F=i.polarRotation||0;for(a=0;a<d;a+=1)for(r=0;r<u;r+=1)s=a-f,o=r-g,S=Math.sqrt(s*s+o*o)*w/_,C=(C=(180*Math.atan2(o,s)/Math.PI+360+F)%360)*b/360,x=Math.floor(C),p=c[0+(n=4*(Math.floor(S)*d+x))],v=c[n+1],m=c[n+2],y=c[n+3],l[0+(n=4*(r*d+a))]=p,l[n+1]=v,l[n+2]=m,l[n+3]=y}(v,t,{polarRotation:0})}},y.Factory.addGetterSetter(y.Node,"kaleidoscopePower",2,null,y.Factory.afterSetFilter),y.Factory.addGetterSetter(y.Node,"kaleidoscopeAngle",0,null,y.Factory.afterSetFilter),function(){var t=y.root.performance&&y.root.performance.now?function(){return y.root.performance.now()}:function(){return(new Date).getTime()},e=y.root.requestAnimationFrame||y.root.webkitRequestAnimationFrame||y.root.mozRequestAnimationFrame||y.root.oRequestAnimationFrame||y.root.msRequestAnimationFrame||i;function i(t){setTimeout(t,1e3/60)}y.Animation=function(e,i){var n=y.Animation;this.func=e,this.setLayers(i),this.id=n.animIdCounter++,this.frame={time:0,timeDiff:0,lastTime:t()}},y.Animation.prototype={setLayers:function(t){var e=[];e=t?t.length>0?t:[t]:[],this.layers=e},getLayers:function(){return this.layers},addLayer:function(t){var e,i,n=this.layers;if(n){for(e=n.length,i=0;i<e;i++)if(n[i]._id===t._id)return!1}else this.layers=[];return this.layers.push(t),!0},isRunning:function(){var t,e=y.Animation.animations,i=e.length;for(t=0;t<i;t++)if(e[t].id===this.id)return!0;return!1},start:function(){var e=y.Animation;this.stop(),this.frame.timeDiff=0,this.frame.lastTime=t(),e._addAnimation(this)},stop:function(){y.Animation._removeAnimation(this)},_updateFrameObject:function(t){this.frame.timeDiff=t-this.frame.lastTime,this.frame.lastTime=t,this.frame.time+=this.frame.timeDiff,this.frame.frameRate=1e3/this.frame.timeDiff}},y.Animation.animations=[],y.Animation.animIdCounter=0,y.Animation.animRunning=!1,y.Animation._addAnimation=function(t){this.animations.push(t),this._handleAnimation()},y.Animation._removeAnimation=function(t){var e,i=t.id,n=this.animations,a=n.length;for(e=0;e<a;e++)if(n[e].id===i){this.animations.splice(e,1);break}},y.Animation._runFrames=function(){var e,i,n,a,r,s,o,h,c={},l=this.animations;for(a=0;a<l.length;a++)if(i=(e=l[a]).layers,n=e.func,e._updateFrameObject(t()),s=i.length,!n||!1!==n.call(e,e.frame))for(r=0;r<s;r++)void 0!==(o=i[r])._id&&(c[o._id]=o);for(h in c)c[h].draw()},y.Animation._animationLoop=function(){var t=y.Animation;t.animations.length?(!function(){e.apply(y.root,arguments)}(t._animationLoop),t._runFrames()):t.animRunning=!1},y.Animation._handleAnimation=function(){this.animRunning||(this.animRunning=!0,this._animationLoop())};var n=y.Node.prototype.moveTo;y.Node.prototype.moveTo=function(t){n.call(this,t)},y.BaseLayer.prototype.batchDraw=function(){var e=this,i=y.Animation;this.batchAnim||(this.batchAnim=new i(function(){e.lastBatchDrawTime&&t()-e.lastBatchDrawTime>500&&e.batchAnim.stop()},this)),this.lastBatchDrawTime=t(),this.batchAnim.isRunning()||(this.draw(),this.batchAnim.start())},y.Stage.prototype.batchDraw=function(){this.getChildren().each(function(t){t.batchDraw()})}}(),function(){var t={node:1,duration:1,easing:1,onFinish:1,yoyo:1},e=0;y.Tween=function(n){var a,r,s=this,o=n.node,h=o._id,c=n.easing||y.Easings.Linear,l=!!n.yoyo;for(r in a=void 0===n.duration?1:0===n.duration?.001:n.duration,this.node=o,this._id=e++,this.anim=new y.Animation(function(){s.tween.onEnterFrame()},o.getLayer()||(o instanceof y.Stage?o.getLayers():null)),this.tween=new i(r,function(t){s._tweenFunc(t)},c,0,1,1e3*a,l),this._addListeners(),y.Tween.attrs[h]||(y.Tween.attrs[h]={}),y.Tween.attrs[h][this._id]||(y.Tween.attrs[h][this._id]={}),y.Tween.tweens[h]||(y.Tween.tweens[h]={}),n)void 0===t[r]&&this._addAttr(r,n[r]);this.reset(),this.onFinish=n.onFinish,this.onReset=n.onReset},y.Tween.attrs={},y.Tween.tweens={},y.Tween.prototype={_addAttr:function(t,e){var i,n,a,r,s,o=this.node,h=o._id;if((a=y.Tween.tweens[h][t])&&delete y.Tween.attrs[h][a][t],i=o.getAttr(t),y.Util._isArray(e))for(n=[],s=e.length,r=0;r<s;r++)n.push(e[r]-i[r]);else n=e-i;y.Tween.attrs[h][this._id][t]={start:i,diff:n},y.Tween.tweens[h][t]=this._id},_tweenFunc:function(t){var e,i,n,a,r,s,o,h=this.node,c=y.Tween.attrs[h._id][this._id];for(e in c){if(n=(i=c[e]).start,a=i.diff,y.Util._isArray(n))for(r=[],o=n.length,s=0;s<o;s++)r.push(n[s]+a[s]*t);else r=n+a*t;h.setAttr(e,r)}},_addListeners:function(){var t=this;this.tween.onPlay=function(){t.anim.start()},this.tween.onReverse=function(){t.anim.start()},this.tween.onPause=function(){t.anim.stop()},this.tween.onFinish=function(){t.onFinish&&t.onFinish()},this.tween.onReset=function(){t.onReset&&t.onReset()}},play:function(){return this.tween.play(),this},reverse:function(){return this.tween.reverse(),this},reset:function(){return this.tween.reset(),this},seek:function(t){return this.tween.seek(1e3*t),this},pause:function(){return this.tween.pause(),this},finish:function(){return this.tween.finish(),this},destroy:function(){var t,e=this.node._id,i=this._id,n=y.Tween.tweens[e];for(t in this.pause(),n)delete y.Tween.tweens[e][t];delete y.Tween.attrs[e][i]}};var i=function(t,e,i,n,a,r,s){this.prop=t,this.propFunc=e,this.begin=n,this._pos=n,this.duration=r,this._change=0,this.prevPos=0,this.yoyo=s,this._time=0,this._position=0,this._startTime=0,this._finish=0,this.func=i,this._change=a-this.begin,this.pause()};i.prototype={fire:function(t){var e=this[t];e&&e()},setTime:function(t){t>this.duration?this.yoyo?(this._time=this.duration,this.reverse()):this.finish():t<0?this.yoyo?(this._time=0,this.play()):this.reset():(this._time=t,this.update())},getTime:function(){return this._time},setPosition:function(t){this.prevPos=this._pos,this.propFunc(t),this._pos=t},getPosition:function(t){return void 0===t&&(t=this._time),this.func(t,this.begin,this._change,this.duration)},play:function(){this.state=2,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onPlay")},reverse:function(){this.state=3,this._time=this.duration-this._time,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onReverse")},seek:function(t){this.pause(),this._time=t,this.update(),this.fire("onSeek")},reset:function(){this.pause(),this._time=0,this.update(),this.fire("onReset")},finish:function(){this.pause(),this._time=this.duration,this.update(),this.fire("onFinish")},update:function(){this.setPosition(this.getPosition(this._time))},onEnterFrame:function(){var t=this.getTimer()-this._startTime;2===this.state?this.setTime(t):3===this.state&&this.setTime(this.duration-t)},pause:function(){this.state=1,this.fire("onPause")},getTimer:function(){return(new Date).getTime()}},y.Easings={BackEaseIn:function(t,e,i,n){var a=1.70158;return i*(t/=n)*t*((a+1)*t-a)+e},BackEaseOut:function(t,e,i,n){var a=1.70158;return i*((t=t/n-1)*t*((a+1)*t+a)+1)+e},BackEaseInOut:function(t,e,i,n){var a=1.70158;return(t/=n/2)<1?i/2*(t*t*((1+(a*=1.525))*t-a))+e:i/2*((t-=2)*t*((1+(a*=1.525))*t+a)+2)+e},ElasticEaseIn:function(t,e,i,n,a,r){var s=0;return 0===t?e:1==(t/=n)?e+i:(r||(r=.3*n),!a||a<Math.abs(i)?(a=i,s=r/4):s=r/(2*Math.PI)*Math.asin(i/a),-a*Math.pow(2,10*(t-=1))*Math.sin((t*n-s)*(2*Math.PI)/r)+e)},ElasticEaseOut:function(t,e,i,n,a,r){var s=0;return 0===t?e:1==(t/=n)?e+i:(r||(r=.3*n),!a||a<Math.abs(i)?(a=i,s=r/4):s=r/(2*Math.PI)*Math.asin(i/a),a*Math.pow(2,-10*t)*Math.sin((t*n-s)*(2*Math.PI)/r)+i+e)},ElasticEaseInOut:function(t,e,i,n,a,r){var s=0;return 0===t?e:2==(t/=n/2)?e+i:(r||(r=n*(.3*1.5)),!a||a<Math.abs(i)?(a=i,s=r/4):s=r/(2*Math.PI)*Math.asin(i/a),t<1?a*Math.pow(2,10*(t-=1))*Math.sin((t*n-s)*(2*Math.PI)/r)*-.5+e:a*Math.pow(2,-10*(t-=1))*Math.sin((t*n-s)*(2*Math.PI)/r)*.5+i+e)},BounceEaseOut:function(t,e,i,n){return(t/=n)<1/2.75?i*(7.5625*t*t)+e:t<2/2.75?i*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?i*(7.5625*(t-=2.25/2.75)*t+.9375)+e:i*(7.5625*(t-=2.625/2.75)*t+.984375)+e},BounceEaseIn:function(t,e,i,n){return i-y.Easings.BounceEaseOut(n-t,0,i,n)+e},BounceEaseInOut:function(t,e,i,n){return t<n/2?.5*y.Easings.BounceEaseIn(2*t,0,i,n)+e:.5*y.Easings.BounceEaseOut(2*t-n,0,i,n)+.5*i+e},EaseIn:function(t,e,i,n){return i*(t/=n)*t+e},EaseOut:function(t,e,i,n){return-i*(t/=n)*(t-2)+e},EaseInOut:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e},StrongEaseIn:function(t,e,i,n){return i*(t/=n)*t*t*t*t+e},StrongEaseOut:function(t,e,i,n){return i*((t=t/n-1)*t*t*t*t+1)+e},StrongEaseInOut:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t*t*t*t+e:i/2*((t-=2)*t*t*t*t+2)+e},Linear:function(t,e,i,n){return i*t/n+e}}}(),function(){y.DD={anim:new y.Animation(function(){var t=this.dirty;return this.dirty=!1,t}),isDragging:!1,justDragged:!1,offset:{x:0,y:0},node:null,_drag:function(t){var e=y.DD,i=e.node;if(i){if(!e.isDragging){var n=i.getStage().getPointerPosition(),a=i.dragDistance();if(Math.max(Math.abs(n.x-e.startPointerPos.x),Math.abs(n.y-e.startPointerPos.y))<a)return}i._setDragPosition(t),e.isDragging||(e.isDragging=!0,i.fire("dragstart",{type:"dragstart",target:i,evt:t},!0)),i.fire("dragmove",{type:"dragmove",target:i,evt:t},!0)}},_endDragBefore:function(t){var e,i=y.DD,n=i.node;n&&(n.nodeType,e=n.getLayer(),i.anim.stop(),i.isDragging&&(i.isDragging=!1,i.justDragged=!0,y.listenClickTap=!1,t&&(t.dragEndNode=n)),delete i.node,(e||n).draw())},_endDragAfter:function(t){var e=(t=t||{}).dragEndNode;t&&e&&e.fire("dragend",{type:"dragend",target:e,evt:t},!0)}},y.Node.prototype.startDrag=function(){var t=y.DD,e=this.getStage(),i=this.getLayer(),n=e.getPointerPosition(),a=this.getAbsolutePosition();n&&(t.node&&t.node.stopDrag(),t.node=this,t.startPointerPos=n,t.offset.x=n.x-a.x,t.offset.y=n.y-a.y,t.anim.setLayers(i||this.getLayers()),t.anim.start(),this._setDragPosition())},y.Node.prototype._setDragPosition=function(t){var e=y.DD,i=this.getStage().getPointerPosition(),n=this.getDragBoundFunc();if(i){var a={x:i.x-e.offset.x,y:i.y-e.offset.y};void 0!==n&&(a=n.call(this,a,t)),this.setAbsolutePosition(a),this._lastPos&&this._lastPos.x===a.x&&this._lastPos.y===a.y||(e.anim.dirty=!0),this._lastPos=a}},y.Node.prototype.stopDrag=function(){var t=y.DD,e={};t._endDragBefore(e),t._endDragAfter(e)},y.Node.prototype.setDraggable=function(t){this._setAttr("draggable",t),this._dragChange()};var t=y.Node.prototype.destroy;y.Node.prototype.destroy=function(){var e=y.DD;e.node&&e.node._id===this._id&&this.stopDrag(),t.call(this)},y.Node.prototype.isDragging=function(){var t=y.DD;return!(!t.node||t.node._id!==this._id||!t.isDragging)},y.Node.prototype._listenDrag=function(){var t=this;this._dragCleanup(),"Stage"===this.getClassName()?this.on("contentMousedown.kinetic contentTouchstart.kinetic",function(e){y.DD.node||t.startDrag(e)}):this.on("mousedown.kinetic touchstart.kinetic",function(e){1!==e.evt.button&&2!==e.evt.button&&(y.DD.node||t.startDrag(e))})},y.Node.prototype._dragChange=function(){if(this.attrs.draggable)this._listenDrag();else{this._dragCleanup();var t=this.getStage(),e=y.DD;t&&e.node&&e.node._id===this._id&&e.node.stopDrag()}},y.Node.prototype._dragCleanup=function(){"Stage"===this.getClassName()?(this.off("contentMousedown.kinetic"),this.off("contentTouchstart.kinetic")):(this.off("mousedown.kinetic"),this.off("touchstart.kinetic"))},y.Factory.addGetterSetter(y.Node,"dragBoundFunc"),y.Factory.addGetter(y.Node,"draggable",!1),y.Factory.addOverloadedGetterSetter(y.Node,"draggable");var e=y.document.documentElement;e.addEventListener("mouseup",y.DD._endDragBefore,!0),e.addEventListener("touchend",y.DD._endDragBefore,!0),e.addEventListener("mouseup",y.DD._endDragAfter,!1),e.addEventListener("touchend",y.DD._endDragAfter,!1)}(),y.Util.addMethods(y.Container,{__init:function(t){this.children=new y.Collection,y.Node.call(this,t)},getChildren:function(t){if(t){var e=new y.Collection;return this.children.each(function(i){t(i)&&e.push(i)}),e}return this.children},hasChildren:function(){return this.getChildren().length>0},removeChildren:function(){for(var t,e=y.Collection.toCollection(this.children),i=0;i<e.length;i++)delete(t=e[i]).parent,t.index=0,t.hasChildren()&&t.removeChildren(),t.remove();return e=null,this.children=new y.Collection,this},destroyChildren:function(){for(var t,e=y.Collection.toCollection(this.children),i=0;i<e.length;i++)delete(t=e[i]).parent,t.index=0,t.destroy();return e=null,this.children=new y.Collection,this},add:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}if(t.getParent())return t.moveTo(this),this;var i=this.children;return this._validateAdd(t),t.index=i.length,t.parent=this,i.push(t),this._fire("add",{child:t}),t.isDragging()&&y.DD.anim.setLayers(t.getLayer()),this},destroy:function(){this.hasChildren()&&this.destroyChildren(),y.Node.prototype.destroy.call(this)},find:function(t){var e,i,n,a,r,s,o,h=[],c=t.replace(/ /g,"").split(","),l=c.length;for(e=0;e<l;e++)if("#"===(n=c[e]).charAt(0))(r=this._getNodeById(n.slice(1)))&&h.push(r);else if("."===n.charAt(0))a=this._getNodesByName(n.slice(1)),h=h.concat(a);else for(o=(s=this.getChildren()).length,i=0;i<o;i++)h=h.concat(s[i]._get(n));return y.Collection.toCollection(h)},_getNodeById:function(t){var e=y.ids[t];return void 0!==e&&this.isAncestorOf(e)?e:null},_getNodesByName:function(t){var e=y.names[t]||[];return this._getDescendants(e)},_get:function(t){for(var e=y.Node.prototype._get.call(this,t),i=this.getChildren(),n=i.length,a=0;a<n;a++)e=e.concat(i[a]._get(t));return e},toObject:function(){var t=y.Node.prototype.toObject.call(this);t.children=[];for(var e=this.getChildren(),i=e.length,n=0;n<i;n++){var a=e[n];t.children.push(a.toObject())}return t},_getDescendants:function(t){for(var e=[],i=t.length,n=0;n<i;n++){var a=t[n];this.isAncestorOf(a)&&e.push(a)}return e},isAncestorOf:function(t){for(var e=t.getParent();e;){if(e._id===this._id)return!0;e=e.getParent()}return!1},clone:function(t){var e=y.Node.prototype.clone.call(this,t);return this.getChildren().each(function(t){e.add(t.clone())}),e},getAllIntersections:function(t){var e=[];return this.find("Shape").each(function(i){i.isVisible()&&i.intersects(t)&&e.push(i)}),e},_setChildrenIndices:function(){this.children.each(function(t,e){t.index=e})},drawScene:function(t,e){var i=this.getLayer(),n=t||i&&i.getCanvas(),a=n&&n.getContext(),r=this._cache.canvas,s=r&&r.scene;return this.isVisible()&&(s?this._drawCachedSceneCanvas(a):this._drawChildren(n,"drawScene",e)),this},drawHit:function(t,e){var i=this.getLayer(),n=t||i&&i.hitCanvas,a=n&&n.getContext(),r=this._cache.canvas,s=r&&r.hit;return this.shouldDrawHit(n)&&(i&&i.clearHitCache(),s?this._drawCachedHitCanvas(a):this._drawChildren(n,"drawHit",e)),this},_drawChildren:function(t,e,i){var n,a,r=this.getLayer(),s=t&&t.getContext(),o=this.getClipWidth(),h=this.getClipHeight(),c=o&&h;c&&r&&(n=this.getClipX(),a=this.getClipY(),s.save(),r._applyTransform(this,s),s.beginPath(),s.rect(n,a,o,h),s.clip(),s.reset()),this.children.each(function(n){n[e](t,i)}),c&&s.restore()},shouldDrawHit:function(t){var e=this.getLayer(),i=y.DD&&y.isDragging()&&-1!==y.DD.anim.getLayers().indexOf(e);return t&&t.isCache||e&&e.hitGraphEnabled()&&this.isVisible()&&!i}}),y.Util.extend(y.Container,y.Node),y.Container.prototype.get=y.Container.prototype.find,y.Factory.addComponentsGetterSetter(y.Container,"clip",["x","y","width","height"]),y.Factory.addGetterSetter(y.Container,"clipX"),y.Factory.addGetterSetter(y.Container,"clipY"),y.Factory.addGetterSetter(y.Container,"clipWidth"),y.Factory.addGetterSetter(y.Container,"clipHeight"),y.Collection.mapMethods(y.Container),function(){var t="hasShadow";function e(t){t.fill()}function i(t){t.stroke()}function n(t){t.fill()}function a(t){t.stroke()}function r(){this._clearCache(t)}y.Util.addMethods(y.Shape,{__init:function(t){this.nodeType="Shape",this._fillFunc=e,this._strokeFunc=i,this._fillFuncHit=n,this._strokeFuncHit=a;for(var s,o=y.shapes;!(s=y.Util.getRandomColor())||s in o;);this.colorKey=s,o[s]=this,y.Node.call(this,t),this.on("shadowColorChange.kinetic shadowBlurChange.kinetic shadowOffsetChange.kinetic shadowOpacityChange.kinetic shadowEnabledChange.kinetic",r)},hasChildren:function(){return!1},getChildren:function(){return[]},getContext:function(){return this.getLayer().getContext()},getCanvas:function(){return this.getLayer().getCanvas()},hasShadow:function(){return this._getCache(t,this._hasShadow)},_hasShadow:function(){return this.getShadowEnabled()&&0!==this.getShadowOpacity()&&!!(this.getShadowColor()||this.getShadowBlur()||this.getShadowOffsetX()||this.getShadowOffsetY())},hasFill:function(){return!!(this.getFill()||this.getFillPatternImage()||this.getFillLinearGradientColorStops()||this.getFillRadialGradientColorStops())},hasStroke:function(){return!!(this.stroke()||this.strokeRed()||this.strokeGreen()||this.strokeBlue())},intersects:function(t){var e=this.getStage().bufferHitCanvas;return e.getContext().clear(),this.drawScene(e),e.context.getImageData(Math.round(t.x),Math.round(t.y),1,1).data[3]>0},destroy:function(){y.Node.prototype.destroy.call(this),delete y.shapes[this.colorKey]},_useBufferCanvas:function(){return(this.hasShadow()||1!==this.getAbsoluteOpacity())&&this.hasFill()&&this.hasStroke()&&this.getStage()},drawScene:function(t,e){var i,n,a=this.getLayer(),r=t||a.getCanvas(),s=r.getContext(),o=this._cache.canvas,h=this.sceneFunc(),c=this.hasShadow();if(this.isVisible())if(o)this._drawCachedSceneCanvas(s);else if(h){if(s.save(),this._useBufferCanvas()){if((n=(i=this.getStage().bufferCanvas).getContext()).clear(),n.save(),n._applyLineJoin(this),a)a._applyTransform(this,n,e);else{var l=this.getAbsoluteTransform(e).getMatrix();s.transform(l[0],l[1],l[2],l[3],l[4],l[5])}h.call(this,n),n.restore(),c&&!r.hitCanvas&&(s.save(),s._applyShadow(this),s.drawImage(i._canvas,0,0),s.restore()),s._applyOpacity(this),s.drawImage(i._canvas,0,0)}else{if(s._applyLineJoin(this),a)a._applyTransform(this,s,e);else{var d=this.getAbsoluteTransform(e).getMatrix();s.transform(d[0],d[1],d[2],d[3],d[4],d[5])}c&&!r.hitCanvas&&(s.save(),s._applyShadow(this),h.call(this,s),s.restore()),s._applyOpacity(this),h.call(this,s)}s.restore()}return this},drawHit:function(t,e){var i=this.getLayer(),n=t||i.hitCanvas,a=n.getContext(),r=this.hitFunc()||this.sceneFunc(),s=this._cache.canvas,o=s&&s.hit;if(this.shouldDrawHit(n))if(i&&i.clearHitCache(),o)this._drawCachedHitCanvas(a);else if(r){if(a.save(),a._applyLineJoin(this),i)i._applyTransform(this,a,e);else{var h=this.getAbsoluteTransform(e).getMatrix();a.transform(h[0],h[1],h[2],h[3],h[4],h[5])}r.call(this,a),a.restore()}return this},drawHitFromCache:function(t){var e,i,n,a,r,s,o=t||0,h=this._cache.canvas,c=this._getCachedSceneCanvas(),l=c.getContext(),d=h.hit.getContext(),u=c.getWidth(),f=c.getHeight();d.clear();try{for(e=l.getImageData(0,0,u,f).data,n=(i=d.getImageData(0,0,u,f)).data,a=e.length,r=y.Util._hexToRgb(this.colorKey),s=0;s<a;s+=4)e[s+3]>o&&(n[s]=r.r,n[s+1]=r.g,n[s+2]=r.b,n[s+3]=255);d.putImageData(i,0,0)}catch(t){y.Util.warn("Unable to draw hit graph from cached scene canvas. "+t.message)}return this}}),y.Util.extend(y.Shape,y.Node),y.Factory.addGetterSetter(y.Shape,"stroke"),y.Factory.addGetterSetter(y.Shape,"strokeRed",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"strokeGreen",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"strokeBlue",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"strokeAlpha",1,y.Validators.alphaComponent),y.Factory.addGetterSetter(y.Shape,"strokeWidth",2),y.Factory.addGetterSetter(y.Shape,"lineJoin"),y.Factory.addGetterSetter(y.Shape,"lineCap"),y.Factory.addGetterSetter(y.Shape,"sceneFunc"),y.Factory.addGetterSetter(y.Shape,"hitFunc"),y.Factory.addGetterSetter(y.Shape,"dash"),y.Factory.addGetterSetter(y.Shape,"shadowColor"),y.Factory.addGetterSetter(y.Shape,"shadowRed",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"shadowGreen",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"shadowBlue",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"shadowAlpha",1,y.Validators.alphaComponent),y.Factory.addGetterSetter(y.Shape,"shadowBlur"),y.Factory.addGetterSetter(y.Shape,"shadowOpacity"),y.Factory.addComponentsGetterSetter(y.Shape,"shadowOffset",["x","y"]),y.Factory.addGetterSetter(y.Shape,"shadowOffsetX",0),y.Factory.addGetterSetter(y.Shape,"shadowOffsetY",0),y.Factory.addGetterSetter(y.Shape,"fillPatternImage"),y.Factory.addGetterSetter(y.Shape,"fill"),y.Factory.addGetterSetter(y.Shape,"fillRed",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"fillGreen",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"fillBlue",0,y.Validators.RGBComponent),y.Factory.addGetterSetter(y.Shape,"fillAlpha",1,y.Validators.alphaComponent),y.Factory.addGetterSetter(y.Shape,"fillPatternX",0),y.Factory.addGetterSetter(y.Shape,"fillPatternY",0),y.Factory.addGetterSetter(y.Shape,"fillLinearGradientColorStops"),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientStartRadius",0),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientEndRadius",0),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientColorStops"),y.Factory.addGetterSetter(y.Shape,"fillPatternRepeat","repeat"),y.Factory.addGetterSetter(y.Shape,"fillEnabled",!0),y.Factory.addGetterSetter(y.Shape,"strokeEnabled",!0),y.Factory.addGetterSetter(y.Shape,"shadowEnabled",!0),y.Factory.addGetterSetter(y.Shape,"dashEnabled",!0),y.Factory.addGetterSetter(y.Shape,"strokeScaleEnabled",!0),y.Factory.addGetterSetter(y.Shape,"fillPriority","color"),y.Factory.addComponentsGetterSetter(y.Shape,"fillPatternOffset",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillPatternOffsetX",0),y.Factory.addGetterSetter(y.Shape,"fillPatternOffsetY",0),y.Factory.addComponentsGetterSetter(y.Shape,"fillPatternScale",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillPatternScaleX",1),y.Factory.addGetterSetter(y.Shape,"fillPatternScaleY",1),y.Factory.addComponentsGetterSetter(y.Shape,"fillLinearGradientStartPoint",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillLinearGradientStartPointX",0),y.Factory.addGetterSetter(y.Shape,"fillLinearGradientStartPointY",0),y.Factory.addComponentsGetterSetter(y.Shape,"fillLinearGradientEndPoint",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillLinearGradientEndPointX",0),y.Factory.addGetterSetter(y.Shape,"fillLinearGradientEndPointY",0),y.Factory.addComponentsGetterSetter(y.Shape,"fillRadialGradientStartPoint",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientStartPointX",0),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientStartPointY",0),y.Factory.addComponentsGetterSetter(y.Shape,"fillRadialGradientEndPoint",["x","y"]),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientEndPointX",0),y.Factory.addGetterSetter(y.Shape,"fillRadialGradientEndPointY",0),y.Factory.addGetterSetter(y.Shape,"fillPatternRotation",0),y.Factory.backCompat(y.Shape,{dashArray:"dash",getDashArray:"getDash",setDashArray:"getDash",drawFunc:"sceneFunc",getDrawFunc:"getSceneFunc",setDrawFunc:"setSceneFunc",drawHitFunc:"hitFunc",getDrawHitFunc:"getHitFunc",setDrawHitFunc:"setHitFunc"}),y.Collection.mapMethods(y.Shape)}(),function(){var t="_",e=["mousedown","mousemove","mouseup","mouseout","touchstart","touchmove","touchend","mouseover","DOMMouseScroll","mousewheel","wheel"],i=e.length;function n(e,i){e.content.addEventListener(i,function(n){e[t+i](n)},!1)}y.Util.addMethods(y.Stage,{___init:function(t){this.nodeType="Stage",y.Container.call(this,t),this._id=y.idCounter++,this._buildDOM(),this._bindContentEvents(),this._enableNestedTransforms=!1,y.stages.push(this)},_validateAdd:function(t){"Layer"!==t.getType()&&y.Util.error("You may only add layers to the stage.")},setContainer:function(t){if("string"==typeof t){var e=t;if(!(t=y.document.getElementById(t)))throw"Can not find container in document with id "+e}return this._setAttr("container",t),this},shouldDrawHit:function(){return!0},draw:function(){return y.Node.prototype.draw.call(this),this},setHeight:function(t){return y.Node.prototype.setHeight.call(this,t),this._resizeDOM(),this},setWidth:function(t){return y.Node.prototype.setWidth.call(this,t),this._resizeDOM(),this},clear:function(){var t,e=this.children,i=e.length;for(t=0;t<i;t++)e[t].clear();return this},clone:function(t){return t||(t={}),t.container=y.document.createElement("div"),y.Container.prototype.clone.call(this,t)},destroy:function(){var t=this.content;y.Container.prototype.destroy.call(this),t&&y.Util._isInDocument(t)&&this.getContainer().removeChild(t);var e=y.stages.indexOf(this);e>-1&&y.stages.splice(e,1)},getPointerPosition:function(){return this.pointerPos},getStage:function(){return this},getContent:function(){return this.content},toDataURL:function(t){var e=(t=t||{}).mimeType||null,i=t.quality||null,n=t.x||0,a=t.y||0,r=new y.SceneCanvas({width:t.width||this.getWidth(),height:t.height||this.getHeight(),pixelRatio:1}),s=r.getContext()._context,o=this.children;(n||a)&&s.translate(-1*n,-1*a),function n(a){var h=o[a].toDataURL(),c=new y.window.Image;c.onload=function(){s.drawImage(c,0,0),a<o.length-1?n(a+1):t.callback(r.toDataURL(e,i))},c.src=h}(0)},toImage:function(t){var e=t.callback;t.callback=function(t){y.Util._getImage(t,function(t){e(t)})},this.toDataURL(t)},getIntersection:function(t){var e,i,n=this.getChildren();for(e=n.length-1;e>=0;e--)if(i=n[e].getIntersection(t))return i;return null},_resizeDOM:function(){if(this.content){var t,e,i=this.getWidth(),n=this.getHeight(),a=this.getChildren(),r=a.length;for(this.content.style.width=i+"px",this.content.style.height=n+"px",this.bufferCanvas.setSize(i,n),this.bufferHitCanvas.setSize(i,n),t=0;t<r;t++)(e=a[t]).setSize(i,n),e.draw()}},add:function(t){if(!(arguments.length>1))return y.Container.prototype.add.call(this,t),t._setCanvasSize(this.width(),this.height()),t.draw(),this.content.appendChild(t.canvas._canvas),this;for(var e=0;e<arguments.length;e++)this.add(arguments[e])},getParent:function(){return null},getLayer:function(){return null},getLayers:function(){return this.getChildren()},_bindContentEvents:function(){for(var t=0;t<i;t++)n(this,e[t])},_mouseover:function(t){y.UA.mobile||(this._setPointerPosition(t),this._fire("contentMouseover",{evt:t}))},_mouseout:function(t){if(!y.UA.mobile){this._setPointerPosition(t);var e=this.targetShape;e&&!y.isDragging()&&(e._fireAndBubble("mouseout",{evt:t}),e._fireAndBubble("mouseleave",{evt:t}),this.targetShape=null),this.pointerPos=void 0,this._fire("contentMouseout",{evt:t})}},_mousemove:function(t){if(y.UA.ieMobile)return this._touchmove(t);if((void 0===t.webkitMovementX&&void 0===t.webkitMovementY||0!==t.webkitMovementY||0!==t.webkitMovementX)&&!y.UA.mobile){this._setPointerPosition(t);var e,i=y.DD;y.isDragging()||((e=this.getIntersection(this.getPointerPosition()))&&e.isListening()?y.isDragging()||this.targetShape&&this.targetShape._id===e._id?e._fireAndBubble("mousemove",{evt:t}):(this.targetShape&&(this.targetShape._fireAndBubble("mouseout",{evt:t},e),this.targetShape._fireAndBubble("mouseleave",{evt:t},e)),e._fireAndBubble("mouseover",{evt:t},this.targetShape),e._fireAndBubble("mouseenter",{evt:t},this.targetShape),this.targetShape=e):this.targetShape&&!y.isDragging()&&(this.targetShape._fireAndBubble("mouseout",{evt:t}),this.targetShape._fireAndBubble("mouseleave",{evt:t}),this.targetShape=null),this._fire("contentMousemove",{evt:t})),i&&i._drag(t),t.preventDefault&&t.preventDefault()}},_mousedown:function(t){if(y.UA.ieMobile)return this._touchstart(t);if(!y.UA.mobile){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());y.listenClickTap=!0,e&&e.isListening()&&(this.clickStartShape=e,e._fireAndBubble("mousedown",{evt:t})),this._fire("contentMousedown",{evt:t})}t.preventDefault&&t.preventDefault()},_mouseup:function(t){if(y.UA.ieMobile)return this._touchend(t);if(!y.UA.mobile){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition()),i=this.clickStartShape,n=!1,a=y.DD;y.inDblClickWindow?(n=!0,y.inDblClickWindow=!1):a&&a.justDragged?a&&(a.justDragged=!1):y.inDblClickWindow=!0,setTimeout(function(){y.inDblClickWindow=!1},y.dblClickWindow),e&&e.isListening()&&(e._fireAndBubble("mouseup",{evt:t}),y.listenClickTap&&i&&i._id===e._id&&(e._fireAndBubble("click",{evt:t}),n&&e._fireAndBubble("dblclick",{evt:t}))),this._fire("contentMouseup",{evt:t}),y.listenClickTap&&(this._fire("contentClick",{evt:t}),n&&this._fire("contentDblclick",{evt:t})),y.listenClickTap=!1}t.preventDefault&&t.preventDefault()},_touchstart:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());y.listenClickTap=!0,e&&e.isListening()&&(this.tapStartShape=e,e._fireAndBubble("touchstart",{evt:t}),e.isListening()&&t.preventDefault&&t.preventDefault()),this._fire("contentTouchstart",{evt:t})},_touchend:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition()),i=!1;y.inDblClickWindow?(i=!0,y.inDblClickWindow=!1):y.inDblClickWindow=!0,setTimeout(function(){y.inDblClickWindow=!1},y.dblClickWindow),e&&e.isListening()&&(e._fireAndBubble("touchend",{evt:t}),y.listenClickTap&&e._id===this.tapStartShape._id&&(e._fireAndBubble("tap",{evt:t}),i&&e._fireAndBubble("dbltap",{evt:t})),e.isListening()&&t.preventDefault&&t.preventDefault()),y.listenClickTap&&(this._fire("contentTouchend",{evt:t}),i&&this._fire("contentDbltap",{evt:t})),y.listenClickTap=!1},_touchmove:function(t){this._setPointerPosition(t);var e,i=y.DD;y.isDragging()||((e=this.getIntersection(this.getPointerPosition()))&&e.isListening()&&(e._fireAndBubble("touchmove",{evt:t}),e.isListening()&&t.preventDefault&&t.preventDefault()),this._fire("contentTouchmove",{evt:t})),i&&(i._drag(t),y.isDragging()&&t.preventDefault())},_DOMMouseScroll:function(t){this._mousewheel(t)},_mousewheel:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()&&e._fireAndBubble("mousewheel",{evt:t})},_wheel:function(t){this._mousewheel(t)},_setPointerPosition:function(t){var e,i=this._getContentPosition(),n=t.offsetX,a=t.clientX,r=null,s=null;void 0!==(t=t||window.event).touches?t.touches.length>0&&(r=(e=t.touches[0]).clientX-i.left,s=e.clientY-i.top):void 0!==n?(r=n,s=t.offsetY):"mozilla"===y.UA.browser?(r=t.layerX,s=t.layerY):void 0!==a&&i&&(r=a-i.left,s=t.clientY-i.top),null!==r&&null!==s&&(this.pointerPos={x:r,y:s})},_getContentPosition:function(){var t=this.content.getBoundingClientRect?this.content.getBoundingClientRect():{top:0,left:0};return{top:t.top,left:t.left}},_buildDOM:function(){var t=this.getContainer();if(!t){if(y.Util.isBrowser())throw"Stage has no container. A container is required.";t=y.document.createElement("div")}t.innerHTML="",this.content=y.document.createElement("div"),this.content.style.position="relative",this.content.style.display="inline-block",this.content.className="kineticjs-content",this.content.setAttribute("role","presentation"),t.appendChild(this.content),this.bufferCanvas=new y.SceneCanvas({pixelRatio:1}),this.bufferHitCanvas=new y.HitCanvas,this._resizeDOM()},_onContent:function(t,e){var i,n,a=t.split(" "),r=a.length;for(i=0;i<r;i++)n=a[i],this.content.addEventListener(n,e,!1)},cache:function(){y.Util.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes.")},clearCache:function(){}}),y.Util.extend(y.Stage,y.Container),y.Factory.addGetter(y.Stage,"container"),y.Factory.addOverloadedGetterSetter(y.Stage,"container")}(),y.Util.addMethods(y.BaseLayer,{___init:function(t){this.nodeType="Layer",y.Container.call(this,t)},createPNGStream:function(){return this.canvas._canvas.createPNGStream()},getCanvas:function(){return this.canvas},getHitCanvas:function(){return this.hitCanvas},getContext:function(){return this.getCanvas().getContext()},clear:function(t){return this.getContext().clear(t),this.getHitCanvas().getContext().clear(t),this},clearHitCache:function(){this._hitImageData=void 0},setZIndex:function(t){y.Node.prototype.setZIndex.call(this,t);var e=this.getStage();return e&&(e.content.removeChild(this.getCanvas()._canvas),t<e.getChildren().length-1?e.content.insertBefore(this.getCanvas()._canvas,e.getChildren()[t+1].getCanvas()._canvas):e.content.appendChild(this.getCanvas()._canvas)),this},moveToTop:function(){y.Node.prototype.moveToTop.call(this);var t=this.getStage();t&&(t.content.removeChild(this.getCanvas()._canvas),t.content.appendChild(this.getCanvas()._canvas))},moveUp:function(){if(y.Node.prototype.moveUp.call(this)){var t=this.getStage();t&&(t.content.removeChild(this.getCanvas()._canvas),this.index<t.getChildren().length-1?t.content.insertBefore(this.getCanvas()._canvas,t.getChildren()[this.index+1].getCanvas()._canvas):t.content.appendChild(this.getCanvas()._canvas))}},moveDown:function(){if(y.Node.prototype.moveDown.call(this)){var t=this.getStage();if(t){var e=t.getChildren();t.content.removeChild(this.getCanvas()._canvas),t.content.insertBefore(this.getCanvas()._canvas,e[this.index+1].getCanvas()._canvas)}}},moveToBottom:function(){if(y.Node.prototype.moveToBottom.call(this)){var t=this.getStage();if(t){var e=t.getChildren();t.content.removeChild(this.getCanvas()._canvas),t.content.insertBefore(this.getCanvas()._canvas,e[1].getCanvas()._canvas)}}},getLayer:function(){return this},remove:function(){var t=this.getCanvas()._canvas;return y.Node.prototype.remove.call(this),t&&t.parentNode&&y.Util._isInDocument(t)&&t.parentNode.removeChild(t),this},getStage:function(){return this.parent},setSize:function(t,e){this.canvas.setSize(t,e)},getWidth:function(){if(this.parent)return this.parent.getWidth()},setWidth:function(){y.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.')},getHeight:function(){if(this.parent)return this.parent.getHeight()},setHeight:function(){y.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.')}}),y.Util.extend(y.BaseLayer,y.Container),y.Factory.addGetterSetter(y.BaseLayer,"clearBeforeDraw",!0),y.Collection.mapMethods(y.BaseLayer),g=(f=[{x:0,y:0},{x:-1,y:0},{x:-1,y:-1},{x:0,y:-1},{x:1,y:-1},{x:1,y:0},{x:1,y:1},{x:0,y:1},{x:-1,y:1}]).length,y.Util.addMethods(y.Layer,{____init:function(t){this.nodeType="Layer",this.canvas=new y.SceneCanvas,this.hitCanvas=new y.HitCanvas,y.BaseLayer.call(this,t)},_setCanvasSize:function(t,e){this.canvas.setSize(t,e),this.hitCanvas.setSize(t,e)},_validateAdd:function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&y.Util.error("You may only add groups and shapes to a layer.")},getIntersection:function(t){var e,i,n,a;if(!this.hitGraphEnabled()||!this.isVisible())return null;for(var r=1,s=!1;;){for(i=0;i<g;i++){if(n=f[i],a=(e=this._getIntersection({x:t.x+n.x*r,y:t.y+n.y*r})).shape)return a;e.antialiased&&(s=!0)}if(!s)return;r+=1}},_getImageData:function(t,e){var i=this.hitCanvas.width||1,n=this.hitCanvas.height||1,a=Math.round(e)*i+Math.round(t);return this._hitImageData||(this._hitImageData=this.hitCanvas.context.getImageData(0,0,i,n)),[this._hitImageData.data[4*a+0],this._hitImageData.data[4*a+1],this._hitImageData.data[4*a+2],this._hitImageData.data[4*a+3]]},_getIntersection:function(t){var e,i=this.hitCanvas.context.getImageData(t.x,t.y,1,1).data,n=i[3];return 255===n?(e=y.Util._rgbToHex(i[0],i[1],i[2]),{shape:y.shapes["#"+e]}):n>0?{antialiased:!0}:{}},drawScene:function(t,e){var i=this.getLayer(),n=t||i&&i.getCanvas();return this._fire("beforeDraw",{node:this}),this.getClearBeforeDraw()&&n.getContext().clear(),y.Container.prototype.drawScene.call(this,n,e),this._fire("draw",{node:this}),this},_applyTransform:function(t,e,i){var n=t.getAbsoluteTransform(i).getMatrix();e.transform(n[0],n[1],n[2],n[3],n[4],n[5])},drawHit:function(t,e){var i=this.getLayer(),n=t||i&&i.hitCanvas;return i&&i.getClearBeforeDraw()&&i.getHitCanvas().getContext().clear(),y.Container.prototype.drawHit.call(this,n,e),this.imageData=null,this},clear:function(t){return this.getContext().clear(t),this.getHitCanvas().getContext().clear(t),this.imageData=null,this},setVisible:function(t){return y.Node.prototype.setVisible.call(this,t),t?(this.getCanvas()._canvas.style.display="block",this.hitCanvas._canvas.style.display="block"):(this.getCanvas()._canvas.style.display="none",this.hitCanvas._canvas.style.display="none"),this},enableHitGraph:function(){return this.setHitGraphEnabled(!0),this},disableHitGraph:function(){return this.setHitGraphEnabled(!1),this},setSize:function(t,e){y.BaseLayer.prototype.setSize.call(this,t,e),this.hitCanvas.setSize(t,e)}}),y.Util.extend(y.Layer,y.BaseLayer),y.Factory.addGetterSetter(y.Layer,"hitGraphEnabled",!0),y.Collection.mapMethods(y.Layer),y.Util.addMethods(y.FastLayer,{____init:function(t){this.nodeType="Layer",this.canvas=new y.SceneCanvas,y.BaseLayer.call(this,t)},_validateAdd:function(t){"Shape"!==t.getType()&&y.Util.error("You may only add shapes to a fast layer.")},_setCanvasSize:function(t,e){this.canvas.setSize(t,e)},hitGraphEnabled:function(){return!1},getIntersection:function(){return null},drawScene:function(t){var e=this.getLayer(),i=t||e&&e.getCanvas();return this.getClearBeforeDraw()&&i.getContext().clear(),y.Container.prototype.drawScene.call(this,i),this},_applyTransform:function(t,e,i){if(!i||i._id!==this._id){var n=t.getTransform().getMatrix();e.transform(n[0],n[1],n[2],n[3],n[4],n[5])}},draw:function(){return this.drawScene(),this},clear:function(t){return this.getContext().clear(t),this},setVisible:function(t){return y.Node.prototype.setVisible.call(this,t),this.getCanvas()._canvas.style.display=t?"block":"none",this}}),y.Util.extend(y.FastLayer,y.BaseLayer),y.Collection.mapMethods(y.FastLayer),y.Util.addMethods(y.Group,{___init:function(t){this.nodeType="Group",y.Container.call(this,t)},_validateAdd:function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&y.Util.error("You may only add groups and shapes to groups.")}}),y.Util.extend(y.Group,y.Container),y.Collection.mapMethods(y.Group),y.Rect=function(t){this.___init(t)},y.Rect.prototype={___init:function(t){y.Shape.call(this,t),this.className="Rect",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.getCornerRadius(),i=this.getWidth(),n=this.getHeight();t.beginPath(),e?(t.moveTo(e,0),t.lineTo(i-e,0),t.arc(i-e,e,e,3*Math.PI/2,0,!1),t.lineTo(i,n-e),t.arc(i-e,n-e,e,0,Math.PI/2,!1),t.lineTo(e,n),t.arc(e,n-e,e,Math.PI/2,Math.PI,!1),t.lineTo(0,e),t.arc(e,e,e,Math.PI,3*Math.PI/2,!1)):t.rect(0,0,i,n),t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.Rect,y.Shape),y.Factory.addGetterSetter(y.Rect,"cornerRadius",0),y.Collection.mapMethods(y.Rect),p=2*Math.PI-1e-4,y.Circle=function(t){this.___init(t)},y.Circle.prototype={___init:function(t){y.Shape.call(this,t),this.className="Circle",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){t.beginPath(),t.arc(0,0,this.getRadius(),0,p,!1),t.closePath(),t.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadius()},getHeight:function(){return 2*this.getRadius()},setWidth:function(t){y.Node.prototype.setWidth.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)},setHeight:function(t){y.Node.prototype.setHeight.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)},setRadius:function(t){this._setAttr("radius",t),this.setWidth(2*t),this.setHeight(2*t)}},y.Util.extend(y.Circle,y.Shape),y.Factory.addGetter(y.Circle,"radius",0),y.Factory.addOverloadedGetterSetter(y.Circle,"radius"),y.Collection.mapMethods(y.Circle),function(){var t=2*Math.PI-1e-4;y.Ellipse=function(t){this.___init(t)},y.Ellipse.prototype={___init:function(t){y.Shape.call(this,t),this.className="Ellipse",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(e){var i=this.getRadiusX(),n=this.getRadiusY();e.beginPath(),e.save(),i!==n&&e.scale(1,n/i),e.arc(0,0,i,0,t,!1),e.restore(),e.closePath(),e.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadiusX()},getHeight:function(){return 2*this.getRadiusY()},setWidth:function(t){y.Node.prototype.setWidth.call(this,t),this.setRadius({x:t/2})},setHeight:function(t){y.Node.prototype.setHeight.call(this,t),this.setRadius({y:t/2})}},y.Util.extend(y.Ellipse,y.Shape),y.Factory.addComponentsGetterSetter(y.Ellipse,"radius",["x","y"]),y.Factory.addGetterSetter(y.Ellipse,"radiusX",0),y.Factory.addGetterSetter(y.Ellipse,"radiusY",0),y.Collection.mapMethods(y.Ellipse)}(),function(){var t=2*Math.PI-1e-4;y.Ring=function(t){this.___init(t)},y.Ring.prototype={___init:function(t){y.Shape.call(this,t),this.className="Ring",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(e){e.beginPath(),e.arc(0,0,this.getInnerRadius(),0,t,!1),e.moveTo(this.getOuterRadius(),0),e.arc(0,0,this.getOuterRadius(),t,0,!0),e.closePath(),e.fillStrokeShape(this)},getWidth:function(){return 2*this.getOuterRadius()},getHeight:function(){return 2*this.getOuterRadius()},setWidth:function(t){y.Node.prototype.setWidth.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)},setHeight:function(t){y.Node.prototype.setHeight.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)},setOuterRadius:function(t){this._setAttr("outerRadius",t),this.setWidth(2*t),this.setHeight(2*t)}},y.Util.extend(y.Ring,y.Shape),y.Factory.addGetterSetter(y.Ring,"innerRadius",0),y.Factory.addGetter(y.Ring,"outerRadius",0),y.Factory.addOverloadedGetterSetter(y.Ring,"outerRadius"),y.Collection.mapMethods(y.Ring)}(),y.Wedge=function(t){this.___init(t)},y.Wedge.prototype={___init:function(t){y.Shape.call(this,t),this.className="Wedge",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){t.beginPath(),t.arc(0,0,this.getRadius(),0,y.getAngle(this.getAngle()),this.getClockwise()),t.lineTo(0,0),t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.Wedge,y.Shape),y.Factory.addGetterSetter(y.Wedge,"radius",0),y.Factory.addGetterSetter(y.Wedge,"angle",0),y.Factory.addGetterSetter(y.Wedge,"clockwise",!1),y.Factory.backCompat(y.Wedge,{angleDeg:"angle",getAngleDeg:"getAngle",setAngleDeg:"setAngle"}),y.Collection.mapMethods(y.Wedge),y.Arc=function(t){this.___init(t)},y.Arc.prototype={___init:function(t){y.Shape.call(this,t),this.className="Arc",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=y.getAngle(this.angle()),i=this.clockwise();t.beginPath(),t.arc(0,0,this.getOuterRadius(),0,e,i),t.arc(0,0,this.getInnerRadius(),e,0,!i),t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.Arc,y.Shape),y.Factory.addGetterSetter(y.Arc,"innerRadius",0),y.Factory.addGetterSetter(y.Arc,"outerRadius",0),y.Factory.addGetterSetter(y.Arc,"angle",0),y.Factory.addGetterSetter(y.Arc,"clockwise",!1),y.Collection.mapMethods(y.Arc),y.Image=function(t){this.___init(t)},y.Image.prototype={___init:function(t){y.Shape.call(this,t),this.className="Image",this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_useBufferCanvas:function(){return(this.hasShadow()||1!==this.getAbsoluteOpacity())&&this.hasStroke()&&this.getStage()},_sceneFunc:function(t){var e,i,n,a=this.getWidth(),r=this.getHeight(),s=this.getImage();s&&(e=this.getCropWidth(),i=this.getCropHeight(),n=e&&i?[s,this.getCropX(),this.getCropY(),e,i,0,0,a,r]:[s,0,0,a,r]),(this.hasFill()||this.hasStroke()||this.hasShadow())&&(t.beginPath(),t.rect(0,0,a,r),t.closePath(),t.fillStrokeShape(this)),s&&t.drawImage.apply(t,n)},_hitFunc:function(t){var e=this.getWidth(),i=this.getHeight();t.beginPath(),t.rect(0,0,e,i),t.closePath(),t.fillStrokeShape(this)},getWidth:function(){var t=this.getImage();return this.attrs.width||(t?t.width:0)},getHeight:function(){var t=this.getImage();return this.attrs.height||(t?t.height:0)}},y.Util.extend(y.Image,y.Shape),y.Factory.addGetterSetter(y.Image,"image"),y.Factory.addComponentsGetterSetter(y.Image,"crop",["x","y","width","height"]),y.Factory.addGetterSetter(y.Image,"cropX",0),y.Factory.addGetterSetter(y.Image,"cropY",0),y.Factory.addGetterSetter(y.Image,"cropWidth",0),y.Factory.addGetterSetter(y.Image,"cropHeight",0),y.Collection.mapMethods(y.Image),function(){var t=["fontFamily","fontSize","fontStyle","fontVariant","padding","align","lineHeight","text","width","height","wrap"],e=t.length,i=y.Util.createCanvasElement().getContext("2d");function n(t){t.fillText(this.partialText,0,0)}function a(t){t.strokeText(this.partialText,0,0)}y.Text=function(t){this.___init(t)},y.Text.prototype={___init:function(i){(i=i||{}).fill=i.fill||"black",void 0===i.width&&(i.width="auto"),void 0===i.height&&(i.height="auto"),y.Shape.call(this,i),this._fillFunc=n,this._strokeFunc=a,this.className="Text";for(var r=0;r<e;r++)this.on(t[r]+"Change.kinetic",this._setTextData);this._setTextData(),this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_sceneFunc:function(t){var e,i=this.getPadding(),n=this.getTextHeight(),a=this.getLineHeight()*n,r=this.textArr,s=r.length,o=this.getWidth();for(t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline","middle"),t.setAttr("textAlign","left"),t.save(),t.translate(i,0),t.translate(0,i+n/2),e=0;e<s;e++){var h=r[e],c=h.text,l=h.width;t.save(),"right"===this.getAlign()?t.translate(o-l-2*i,0):"center"===this.getAlign()&&t.translate((o-l-2*i)/2,0),this.partialText=c,t.fillStrokeShape(this),t.restore(),t.translate(0,a)}t.restore()},_hitFunc:function(t){var e=this.getWidth(),i=this.getHeight();t.beginPath(),t.rect(0,0,e,i),t.closePath(),t.fillStrokeShape(this)},setText:function(t){var e=y.Util._isString(t)?t:t.toString();return this._setAttr("text",e),this},getWidth:function(){return"auto"===this.attrs.width?this.getTextWidth()+2*this.getPadding():this.attrs.width},getHeight:function(){return"auto"===this.attrs.height?this.getTextHeight()*this.textArr.length*this.getLineHeight()+2*this.getPadding():this.attrs.height},getTextWidth:function(){return this.textWidth},getTextHeight:function(){return this.textHeight},_getTextSize:function(t){var e,n=i,a=this.getFontSize();return n.save(),n.font=this._getContextFont(),e=n.measureText(t),n.restore(),{width:e.width,height:parseInt(a,10)}},_getContextFont:function(){return this.getFontStyle()+" "+this.getFontVariant()+" "+this.getFontSize()+"px "+this.getFontFamily()},_addTextLine:function(t,e){return this.textArr.push({text:t,width:e})},_getTextWidth:function(t){return i.measureText(t).width},_setTextData:function(){var t=this.getText().split("\n"),e=+this.getFontSize(),n=0,a=this.getLineHeight()*e,r=this.attrs.width,s=this.attrs.height,o="auto"!==r,h="auto"!==s,c=this.getPadding(),l=r-2*c,d=s-2*c,u=0,f=this.getWrap(),g="none"!==f,p="char"!==f&&g;this.textArr=[],i.save(),i.font=this._getContextFont();for(var v=0,m=t.length;v<m;++v){var y=t[v],_=this._getTextWidth(y);if(o&&_>l)for(;y.length>0;){for(var S=0,C=y.length,x="",w=0;S<C;){var b=S+C>>>1,F=y.slice(0,b+1),k=this._getTextWidth(F);k<=l?(S=b+1,x=F,w=k):C=b}if(!x)break;if(p){var T=Math.max(x.lastIndexOf(" "),x.lastIndexOf("-"))+1;T>0&&(S=T,x=x.slice(0,S),w=this._getTextWidth(x))}if(this._addTextLine(x,w),n=Math.max(n,w),u+=a,!g||h&&u+a>d)break;if((y=y.slice(S)).length>0&&(_=this._getTextWidth(y))<=l){this._addTextLine(y,_),u+=a,n=Math.max(n,_);break}}else this._addTextLine(y,_),u+=a,n=Math.max(n,_);if(h&&u+a>d)break}i.restore(),this.textHeight=e,this.textWidth=n}},y.Util.extend(y.Text,y.Shape),y.Factory.addGetterSetter(y.Text,"fontFamily","Arial"),y.Factory.addGetterSetter(y.Text,"fontSize",12),y.Factory.addGetterSetter(y.Text,"fontStyle","normal"),y.Factory.addGetterSetter(y.Text,"fontVariant","normal"),y.Factory.addGetterSetter(y.Text,"padding",0),y.Factory.addGetterSetter(y.Text,"align","left"),y.Factory.addGetterSetter(y.Text,"lineHeight",1),y.Factory.addGetterSetter(y.Text,"wrap","word"),y.Factory.addGetter(y.Text,"text",""),y.Factory.addOverloadedGetterSetter(y.Text,"text"),y.Collection.mapMethods(y.Text)}(),y.Line=function(t){this.___init(t)},y.Line.prototype={___init:function(t){y.Shape.call(this,t),this.className="Line",this.on("pointsChange.kinetic tensionChange.kinetic closedChange.kinetic",function(){this._clearCache("tensionPoints")}),this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e,i,n,a=this.getPoints(),r=a.length,s=this.getTension(),o=this.getClosed();if(r){if(t.beginPath(),t.moveTo(a[0],a[1]),0!==s&&r>4){for(i=(e=this.getTensionPoints()).length,n=o?0:4,o||t.quadraticCurveTo(e[0],e[1],e[2],e[3]);n<i-2;)t.bezierCurveTo(e[n++],e[n++],e[n++],e[n++],e[n++],e[n++]);o||t.quadraticCurveTo(e[i-2],e[i-1],a[r-2],a[r-1])}else for(n=2;n<r;n+=2)t.lineTo(a[n],a[n+1]);o?(t.closePath(),t.fillStrokeShape(this)):t.strokeShape(this)}},getTensionPoints:function(){return this._getCache("tensionPoints",this._getTensionPoints)},_getTensionPoints:function(){return this.getClosed()?this._getTensionPointsClosed():y.Util._expandPoints(this.getPoints(),this.getTension())},_getTensionPointsClosed:function(){var t=this.getPoints(),e=t.length,i=this.getTension(),n=y.Util,a=n._getControlPoints(t[e-2],t[e-1],t[0],t[1],t[2],t[3],i),r=n._getControlPoints(t[e-4],t[e-3],t[e-2],t[e-1],t[0],t[1],i),s=y.Util._expandPoints(t,i);return[a[2],a[3]].concat(s).concat([r[0],r[1],t[e-2],t[e-1],r[2],r[3],a[0],a[1],t[0],t[1]])}},y.Util.extend(y.Line,y.Shape),y.Factory.addGetterSetter(y.Line,"closed",!1),y.Factory.addGetterSetter(y.Line,"tension",0),y.Factory.addGetterSetter(y.Line,"points",[]),y.Collection.mapMethods(y.Line),y.Sprite=function(t){this.___init(t)},y.Sprite.prototype={___init:function(t){y.Shape.call(this,t),this.className="Sprite",this._updated=!0;var e=this;this.anim=new y.Animation(function(){var t=e._updated;return e._updated=!1,t}),this.on("animationChange.kinetic",function(){this.frameIndex(0)}),this.on("frameIndexChange.kinetic",function(){this._updated=!0}),this.on("frameRateChange.kinetic",function(){this.anim.isRunning()&&(clearInterval(this.interval),this._setInterval())}),this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_sceneFunc:function(t){var e=this.getAnimation(),i=this.frameIndex(),n=4*i,a=this.getAnimations()[e],r=this.frameOffsets(),s=a[n+0],o=a[n+1],h=a[n+2],c=a[n+3],l=this.getImage();if(l)if(r){var d=r[e],u=2*i;t.drawImage(l,s,o,h,c,d[u+0],d[u+1],h,c)}else t.drawImage(l,s,o,h,c,0,0,h,c)},_hitFunc:function(t){var e=this.getAnimation(),i=this.frameIndex(),n=4*i,a=this.getAnimations()[e],r=this.frameOffsets(),s=a[n+2],o=a[n+3];if(t.beginPath(),r){var h=r[e],c=2*i;t.rect(h[c+0],h[c+1],s,o)}else t.rect(0,0,s,o);t.closePath(),t.fillShape(this)},_useBufferCanvas:function(){return(this.hasShadow()||1!==this.getAbsoluteOpacity())&&this.hasStroke()},_setInterval:function(){var t=this;this.interval=setInterval(function(){t._updateIndex()},1e3/this.getFrameRate())},start:function(){var t=this.getLayer();this.anim.setLayers(t),this._setInterval(),this.anim.start()},stop:function(){this.anim.stop(),clearInterval(this.interval)},isRunning:function(){return this.anim.isRunning()},_updateIndex:function(){var t=this.frameIndex(),e=this.getAnimation();t<this.getAnimations()[e].length/4-1?this.frameIndex(t+1):this.frameIndex(0)}},y.Util.extend(y.Sprite,y.Shape),y.Factory.addGetterSetter(y.Sprite,"animation"),y.Factory.addGetterSetter(y.Sprite,"animations"),y.Factory.addGetterSetter(y.Sprite,"frameOffsets"),y.Factory.addGetterSetter(y.Sprite,"image"),y.Factory.addGetterSetter(y.Sprite,"frameIndex",0),y.Factory.addGetterSetter(y.Sprite,"frameRate",17),y.Factory.backCompat(y.Sprite,{index:"frameIndex",getIndex:"getFrameIndex",setIndex:"setFrameIndex"}),y.Collection.mapMethods(y.Sprite),y.Path=function(t){this.___init(t)},y.Path.prototype={___init:function(t){this.dataArray=[];var e=this;y.Shape.call(this,t),this.className="Path",this.dataArray=y.Path.parsePathData(this.getData()),this.on("dataChange.kinetic",function(){e.dataArray=y.Path.parsePathData(this.getData())}),this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.dataArray,i=!1;t.beginPath();for(var n=0;n<e.length;n++){var a=e[n].command,r=e[n].points;switch(a){case"L":t.lineTo(r[0],r[1]);break;case"M":t.moveTo(r[0],r[1]);break;case"C":t.bezierCurveTo(r[0],r[1],r[2],r[3],r[4],r[5]);break;case"Q":t.quadraticCurveTo(r[0],r[1],r[2],r[3]);break;case"A":var s=r[0],o=r[1],h=r[2],c=r[3],l=r[4],d=r[5],u=r[6],f=r[7],g=h>c?h:c,p=h>c?1:h/c,v=h>c?c/h:1;t.translate(s,o),t.rotate(u),t.scale(p,v),t.arc(0,0,g,l,l+d,1-f),t.scale(1/p,1/v),t.rotate(-u),t.translate(-s,-o);break;case"z":t.closePath(),i=!0}}i?t.fillStrokeShape(this):t.strokeShape(this)}},y.Util.extend(y.Path,y.Shape),y.Path.getLineLength=function(t,e,i,n){return Math.sqrt((i-t)*(i-t)+(n-e)*(n-e))},y.Path.getPointOnLine=function(t,e,i,n,a,r,s){void 0===r&&(r=e),void 0===s&&(s=i);var o=(a-i)/(n-e+1e-8),h=Math.sqrt(t*t/(1+o*o));n<e&&(h*=-1);var c,l=o*h;if(n===e)c={x:r,y:s+l};else if((s-i)/(r-e+1e-8)===o)c={x:r+h,y:s+l};else{var d,u,f=this.getLineLength(e,i,n,a);if(f<1e-8)return;var g=(r-e)*(n-e)+(s-i)*(a-i);d=e+(g/=f*f)*(n-e),u=i+g*(a-i);var p=this.getLineLength(r,s,d,u),v=Math.sqrt(t*t-p*p);h=Math.sqrt(v*v/(1+o*o)),n<e&&(h*=-1),c={x:d+h,y:u+(l=o*h)}}return c},y.Path.getPointOnCubicBezier=function(t,e,i,n,a,r,s,o,h){function c(t){return t*t*t}function l(t){return 3*t*t*(1-t)}function d(t){return 3*t*(1-t)*(1-t)}function u(t){return(1-t)*(1-t)*(1-t)}return{x:o*c(t)+r*l(t)+n*d(t)+e*u(t),y:h*c(t)+s*l(t)+a*d(t)+i*u(t)}},y.Path.getPointOnQuadraticBezier=function(t,e,i,n,a,r,s){function o(t){return t*t}function h(t){return 2*t*(1-t)}function c(t){return(1-t)*(1-t)}return{x:r*o(t)+n*h(t)+e*c(t),y:s*o(t)+a*h(t)+i*c(t)}},y.Path.getPointOnEllipticalArc=function(t,e,i,n,a,r){var s=Math.cos(r),o=Math.sin(r),h=i*Math.cos(a),c=n*Math.sin(a);return{x:t+(h*s-c*o),y:e+(h*o+c*s)}},y.Path.parsePathData=function(t){if(!t)return[];var e=t,i=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];e=e.replace(new RegExp(" ","g"),",");for(var n=0;n<i.length;n++)e=e.replace(new RegExp(i[n],"g"),"|"+i[n]);var a=e.split("|"),r=[],s=0,o=0;for(n=1;n<a.length;n++){var h=a[n],c=h.charAt(0),l=(h=(h=(h=(h=h.slice(1)).replace(new RegExp(",-","g"),"-")).replace(new RegExp("-","g"),",-")).replace(new RegExp("e,-","g"),"e-")).split(",");l.length>0&&""===l[0]&&l.shift();for(var d=0;d<l.length;d++)l[d]=parseFloat(l[d]);for(;l.length>0&&!isNaN(l[0]);){var u,f,g,p,v,m,y,_,S,C,x=null,w=[],b=s,F=o;switch(c){case"l":s+=l.shift(),o+=l.shift(),x="L",w.push(s,o);break;case"L":s=l.shift(),o=l.shift(),w.push(s,o);break;case"m":var k=l.shift(),T=l.shift();if(s+=k,o+=T,x="M",r.length>2&&"z"===r[r.length-1].command)for(var P=r.length-2;P>=0;P--)if("M"===r[P].command){s=r[P].points[0]+k,o=r[P].points[1]+T;break}w.push(s,o),c="l";break;case"M":s=l.shift(),o=l.shift(),x="M",w.push(s,o),c="L";break;case"h":s+=l.shift(),x="L",w.push(s,o);break;case"H":s=l.shift(),x="L",w.push(s,o);break;case"v":o+=l.shift(),x="L",w.push(s,o);break;case"V":o=l.shift(),x="L",w.push(s,o);break;case"C":w.push(l.shift(),l.shift(),l.shift(),l.shift()),s=l.shift(),o=l.shift(),w.push(s,o);break;case"c":w.push(s+l.shift(),o+l.shift(),s+l.shift(),o+l.shift()),s+=l.shift(),o+=l.shift(),x="C",w.push(s,o);break;case"S":f=s,g=o,"C"===(u=r[r.length-1]).command&&(f=s+(s-u.points[2]),g=o+(o-u.points[3])),w.push(f,g,l.shift(),l.shift()),s=l.shift(),o=l.shift(),x="C",w.push(s,o);break;case"s":f=s,g=o,"C"===(u=r[r.length-1]).command&&(f=s+(s-u.points[2]),g=o+(o-u.points[3])),w.push(f,g,s+l.shift(),o+l.shift()),s+=l.shift(),o+=l.shift(),x="C",w.push(s,o);break;case"Q":w.push(l.shift(),l.shift()),s=l.shift(),o=l.shift(),w.push(s,o);break;case"q":w.push(s+l.shift(),o+l.shift()),s+=l.shift(),o+=l.shift(),x="Q",w.push(s,o);break;case"T":f=s,g=o,"Q"===(u=r[r.length-1]).command&&(f=s+(s-u.points[0]),g=o+(o-u.points[1])),s=l.shift(),o=l.shift(),x="Q",w.push(f,g,s,o);break;case"t":f=s,g=o,"Q"===(u=r[r.length-1]).command&&(f=s+(s-u.points[0]),g=o+(o-u.points[1])),s+=l.shift(),o+=l.shift(),x="Q",w.push(f,g,s,o);break;case"A":p=l.shift(),v=l.shift(),m=l.shift(),y=l.shift(),_=l.shift(),S=s,C=o,s=l.shift(),o=l.shift(),x="A",w=this.convertEndpointToCenterParameterization(S,C,s,o,y,_,p,v,m);break;case"a":p=l.shift(),v=l.shift(),m=l.shift(),y=l.shift(),_=l.shift(),S=s,C=o,s+=l.shift(),o+=l.shift(),x="A",w=this.convertEndpointToCenterParameterization(S,C,s,o,y,_,p,v,m)}r.push({command:x||c,points:w,start:{x:b,y:F},pathLength:this.calcLength(b,F,x||c,w)})}"z"!==c&&"Z"!==c||r.push({command:"z",points:[],start:void 0,pathLength:0})}return r},y.Path.calcLength=function(t,e,i,n){var a,r,s,o,h=y.Path;switch(i){case"L":return h.getLineLength(t,e,n[0],n[1]);case"C":for(a=0,r=h.getPointOnCubicBezier(0,t,e,n[0],n[1],n[2],n[3],n[4],n[5]),o=.01;o<=1;o+=.01)s=h.getPointOnCubicBezier(o,t,e,n[0],n[1],n[2],n[3],n[4],n[5]),a+=h.getLineLength(r.x,r.y,s.x,s.y),r=s;return a;case"Q":for(a=0,r=h.getPointOnQuadraticBezier(0,t,e,n[0],n[1],n[2],n[3]),o=.01;o<=1;o+=.01)s=h.getPointOnQuadraticBezier(o,t,e,n[0],n[1],n[2],n[3]),a+=h.getLineLength(r.x,r.y,s.x,s.y),r=s;return a;case"A":a=0;var c=n[4],l=n[5],d=n[4]+l,u=Math.PI/180;if(Math.abs(c-d)<u&&(u=Math.abs(c-d)),r=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],c,0),l<0)for(o=c-u;o>d;o-=u)s=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],o,0),a+=h.getLineLength(r.x,r.y,s.x,s.y),r=s;else for(o=c+u;o<d;o+=u)s=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],o,0),a+=h.getLineLength(r.x,r.y,s.x,s.y),r=s;return s=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],d,0),a+=h.getLineLength(r.x,r.y,s.x,s.y)}return 0},y.Path.convertEndpointToCenterParameterization=function(t,e,i,n,a,r,s,o,h){var c=h*(Math.PI/180),l=Math.cos(c)*(t-i)/2+Math.sin(c)*(e-n)/2,d=-1*Math.sin(c)*(t-i)/2+Math.cos(c)*(e-n)/2,u=l*l/(s*s)+d*d/(o*o);u>1&&(s*=Math.sqrt(u),o*=Math.sqrt(u));var f=Math.sqrt((s*s*(o*o)-s*s*(d*d)-o*o*(l*l))/(s*s*(d*d)+o*o*(l*l)));a===r&&(f*=-1),isNaN(f)&&(f=0);var g=f*s*d/o,p=f*-o*l/s,v=(t+i)/2+Math.cos(c)*g-Math.sin(c)*p,m=(e+n)/2+Math.sin(c)*g+Math.cos(c)*p,y=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},_=function(t,e){return(t[0]*e[0]+t[1]*e[1])/(y(t)*y(e))},S=function(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(_(t,e))},C=S([1,0],[(l-g)/s,(d-p)/o]),x=[(l-g)/s,(d-p)/o],w=[(-1*l-g)/s,(-1*d-p)/o],b=S(x,w);return _(x,w)<=-1&&(b=Math.PI),_(x,w)>=1&&(b=0),0===r&&b>0&&(b-=2*Math.PI),1===r&&b<0&&(b+=2*Math.PI),[v,m,s,o,C,b,c,r]},y.Factory.addGetterSetter(y.Path,"data"),y.Collection.mapMethods(y.Path),function(){function t(t){t.fillText(this.partialText,0,0)}function e(t){t.strokeText(this.partialText,0,0)}y.TextPath=function(t){this.___init(t)},y.TextPath.prototype={___init:function(i){var n=this;this.dummyCanvas=y.Util.createCanvasElement(),this.dataArray=[],y.Shape.call(this,i),this._fillFunc=t,this._strokeFunc=e,this._fillFuncHit=t,this._strokeFuncHit=e,this.className="TextPath",this.dataArray=y.Path.parsePathData(this.attrs.data),this.on("dataChange.kinetic",function(){n.dataArray=y.Path.parsePathData(this.attrs.data)}),this.on("textChange.kinetic textStroke.kinetic textStrokeWidth.kinetic",n._setTextData),n._setTextData(),this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline","middle"),t.setAttr("textAlign","left"),t.save();for(var e=this.glyphInfo,i=0;i<e.length;i++){t.save();var n=e[i].p0;t.translate(n.x,n.y),t.rotate(e[i].rotation),this.partialText=e[i].text,t.fillStrokeShape(this),t.restore()}t.restore()},getTextWidth:function(){return this.textWidth},getTextHeight:function(){return this.textHeight},setText:function(t){y.Text.prototype.setText.call(this,t)},_getTextSize:function(t){var e=this.dummyCanvas.getContext("2d");e.save(),e.font=this._getContextFont();var i=e.measureText(t);return e.restore(),{width:i.width,height:parseInt(this.attrs.fontSize,10)}},_setTextData:function(){var t=this,e=this._getTextSize(this.attrs.text);this.textWidth=e.width,this.textHeight=e.height,this.glyphInfo=[];for(var i,n,a,r=this.attrs.text.split(""),s=-1,o=0,h=function(){o=0;for(var e=t.dataArray,n=s+1;n<e.length;n++){if(e[n].pathLength>0)return s=n,e[n];"M"==e[n].command&&(i={x:e[n].points[0],y:e[n].points[1]})}return{}},c=function(e){var r=t._getTextSize(e).width,s=0,c=0;for(n=void 0;Math.abs(r-s)/r>.01&&c<25;){c++;for(var l=s;void 0===a;)(a=h())&&l+a.pathLength<r&&(l+=a.pathLength,a=void 0);if(a==={}||void 0===i)return;var d=!1;switch(a.command){case"L":y.Path.getLineLength(i.x,i.y,a.points[0],a.points[1])>r?n=y.Path.getPointOnLine(r,i.x,i.y,a.points[0],a.points[1],i.x,i.y):a=void 0;break;case"A":var u=a.points[4],f=a.points[5],g=a.points[4]+f;0===o?o=u+1e-8:r>s?o+=Math.PI/180*f/Math.abs(f):o-=Math.PI/360*f/Math.abs(f),(f<0&&o<g||f>=0&&o>g)&&(o=g,d=!0),n=y.Path.getPointOnEllipticalArc(a.points[0],a.points[1],a.points[2],a.points[3],o,a.points[6]);break;case"C":0===o?o=r>a.pathLength?1e-8:r/a.pathLength:r>s?o+=(r-s)/a.pathLength:o-=(s-r)/a.pathLength,o>1&&(o=1,d=!0),n=y.Path.getPointOnCubicBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3],a.points[4],a.points[5]);break;case"Q":0===o?o=r/a.pathLength:r>s?o+=(r-s)/a.pathLength:o-=(s-r)/a.pathLength,o>1&&(o=1,d=!0),n=y.Path.getPointOnQuadraticBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3])}void 0!==n&&(s=y.Path.getLineLength(i.x,i.y,n.x,n.y)),d&&(d=!1,a=void 0)}},l=0;l<r.length&&(c(r[l]),void 0!==i&&void 0!==n);l++){var d=y.Path.getLineLength(i.x,i.y,n.x,n.y),u=y.Path.getPointOnLine(0+d/2,i.x,i.y,n.x,n.y),f=Math.atan2(n.y-i.y,n.x-i.x);this.glyphInfo.push({transposeX:u.x,transposeY:u.y,text:r[l],rotation:f,p0:i,p1:n}),i=n}}},y.TextPath.prototype._getContextFont=y.Text.prototype._getContextFont,y.Util.extend(y.TextPath,y.Shape),y.Factory.addGetterSetter(y.TextPath,"fontFamily","Arial"),y.Factory.addGetterSetter(y.TextPath,"fontSize",12),y.Factory.addGetterSetter(y.TextPath,"fontStyle","normal"),y.Factory.addGetterSetter(y.TextPath,"fontVariant","normal"),y.Factory.addGetter(y.TextPath,"text",""),y.Collection.mapMethods(y.TextPath)}(),y.RegularPolygon=function(t){this.___init(t)},y.RegularPolygon.prototype={___init:function(t){y.Shape.call(this,t),this.className="RegularPolygon",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e,i,n,a=this.attrs.sides,r=this.attrs.radius;for(t.beginPath(),t.moveTo(0,0-r),e=1;e<a;e++)i=r*Math.sin(2*e*Math.PI/a),n=-1*r*Math.cos(2*e*Math.PI/a),t.lineTo(i,n);t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.RegularPolygon,y.Shape),y.Factory.addGetterSetter(y.RegularPolygon,"radius",0),y.Factory.addGetterSetter(y.RegularPolygon,"sides",0),y.Collection.mapMethods(y.RegularPolygon),y.Star=function(t){this.___init(t)},y.Star.prototype={___init:function(t){y.Shape.call(this,t),this.className="Star",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.innerRadius(),i=this.outerRadius(),n=this.numPoints();t.beginPath(),t.moveTo(0,0-i);for(var a=1;a<2*n;a++){var r=a%2==0?i:e,s=r*Math.sin(a*Math.PI/n),o=-1*r*Math.cos(a*Math.PI/n);t.lineTo(s,o)}t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.Star,y.Shape),y.Factory.addGetterSetter(y.Star,"numPoints",5),y.Factory.addGetterSetter(y.Star,"innerRadius",0),y.Factory.addGetterSetter(y.Star,"outerRadius",0),y.Collection.mapMethods(y.Star),m=(v=["fontFamily","fontSize","fontStyle","padding","lineHeight","text"]).length,y.Label=function(t){this.____init(t)},y.Label.prototype={____init:function(t){var e=this;y.Group.call(this,t),this.className="Label",this.on("add.kinetic",function(t){e._addListeners(t.child),e._sync()})},getText:function(){return this.find("Text")[0]},getTag:function(){return this.find("Tag")[0]},_addListeners:function(t){var e,i=this,n=function(){i._sync()};for(e=0;e<m;e++)t.on(v[e]+"Change.kinetic",n)},getWidth:function(){return this.getText().getWidth()},getHeight:function(){return this.getText().getHeight()},_sync:function(){var t,e,i,n,a,r,s,o=this.getText(),h=this.getTag();if(o&&h){switch(t=o.getWidth(),e=o.getHeight(),i=h.getPointerDirection(),n=h.getPointerWidth(),s=h.getPointerHeight(),a=0,r=0,i){case"up":a=t/2,r=-1*s;break;case"right":a=t+n,r=e/2;break;case"down":a=t/2,r=e+s;break;case"left":a=-1*n,r=e/2}h.setAttrs({x:-1*a,y:-1*r,width:t,height:e}),o.setAttrs({x:-1*a,y:-1*r})}}},y.Util.extend(y.Label,y.Group),y.Collection.mapMethods(y.Label),y.Tag=function(t){this.___init(t)},y.Tag.prototype={___init:function(t){y.Shape.call(this,t),this.className="Tag",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.getWidth(),i=this.getHeight(),n=this.getPointerDirection(),a=this.getPointerWidth(),r=this.getPointerHeight(),s=this.getCornerRadius();t.beginPath(),t.moveTo(0,0),"up"===n&&(t.lineTo((e-a)/2,0),t.lineTo(e/2,-1*r),t.lineTo((e+a)/2,0)),s?(t.lineTo(e-s,0),t.arc(e-s,s,s,3*Math.PI/2,0,!1)):t.lineTo(e,0),"right"===n&&(t.lineTo(e,(i-r)/2),t.lineTo(e+a,i/2),t.lineTo(e,(i+r)/2)),s?(t.lineTo(e,i-s),t.arc(e-s,i-s,s,0,Math.PI/2,!1)):t.lineTo(e,i),"down"===n&&(t.lineTo((e+a)/2,i),t.lineTo(e/2,i+r),t.lineTo((e-a)/2,i)),s?(t.lineTo(s,i),t.arc(s,i-s,s,Math.PI/2,Math.PI,!1)):t.lineTo(0,i),"left"===n&&(t.lineTo(0,(i+r)/2),t.lineTo(-1*a,i/2),t.lineTo(0,(i-r)/2)),s&&(t.lineTo(0,s),t.arc(s,s,s,Math.PI,3*Math.PI/2,!1)),t.closePath(),t.fillStrokeShape(this)}},y.Util.extend(y.Tag,y.Shape),y.Factory.addGetterSetter(y.Tag,"pointerDirection","none"),y.Factory.addGetterSetter(y.Tag,"pointerWidth",0),y.Factory.addGetterSetter(y.Tag,"pointerHeight",0),y.Factory.addGetterSetter(y.Tag,"cornerRadius",0),y.Collection.mapMethods(y.Tag),y.Arrow=function(t){this.____init(t)},y.Arrow.prototype={____init:function(t){y.Line.call(this,t),this.className="Arrow"},_sceneFunc:function(t){var e=2*Math.PI,i=this.points(),n=i.length,a=i[n-2]-i[n-4],r=i[n-1]-i[n-3],s=(Math.atan2(r,a)+e)%e,o=this.pointerLength(),h=this.pointerWidth();t.save(),t.beginPath(),t.translate(i[n-2],i[n-1]),t.rotate(s),t.moveTo(0,0),t.lineTo(-o,h/2),t.lineTo(-o,-h/2),t.closePath(),t.restore(),this.pointerAtBeginning()&&(t.save(),t.translate(i[0],i[1]),a=i[2]-i[0],r=i[3]-i[1],t.rotate((Math.atan2(-r,-a)+e)%e),t.moveTo(0,0),t.lineTo(-10,6),t.lineTo(-10,-6),t.closePath(),t.restore()),t.fillStrokeShape(this),y.Line.prototype._sceneFunc.apply(this,arguments)}},y.Util.extend(y.Arrow,y.Line),y.Factory.addGetterSetter(y.Arrow,"pointerLength",10),y.Factory.addGetterSetter(y.Arrow,"pointerWidth",10),y.Factory.addGetterSetter(y.Arrow,"pointerAtBeginning",!1),y.Collection.mapMethods(y.Arrow)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{canvas:1,jsdom:1}],3:[function(t,e,i){"use strict";const n=t("kinetic");e.exports=class{constructor(t,e,i,n,a){this.row=t,this.column=e,this.generateKey=i,this.space=n,this.blockSize=a,this.x=this.row*(2*this.space+this.blockSize)+this.space,this.y=this.column*(2*this.space+this.blockSize)+this.space,this.up=!1,this.left=!1,this.down=!1,this.right=!1,this.key=this.generateKey,this.connected=!1,this.rotation=0,this.animationIsRunning=!1}init(t,e,i,a){this.box=new n.Group({x:this.x+this.blockSize/2+(i-this.blockSize*a)/2-this.blockSize/2,y:this.y+this.blockSize/2,width:this.blockSize,height:this.blockSize,offset:{x:this.blockSize/2,y:this.blockSize/2}}),this.pipes=new n.Group({x:0,y:0}),this.shape=new n.Rect({x:0,y:0,width:this.blockSize,height:this.blockSize,name:this.x+"-"+this.y,fill:"grey",stroke:"black",strokeWidth:this.space});var r=new n.Line({points:[this.blockSize/2,0,this.blockSize/2,this.blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeUp"}),s=new n.Line({points:[0,this.blockSize/2,this.blockSize/2,this.blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeLeft"}),o=new n.Line({points:[this.blockSize/2,this.blockSize,this.blockSize/2,this.blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeDown"}),h=new n.Line({points:[this.blockSize,this.blockSize/2,this.blockSize/2,this.blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeRight"});this.up&&this.pipes.add(r),this.left&&this.pipes.add(s),this.down&&this.pipes.add(o),this.right&&this.pipes.add(h),this.box.on("click",()=>t(this)),this.mouseClick=e(this),this.box.add(this.shape),this.box.add(this.pipes)}connectionHandler(t){t?(this.pipes.find(".pipeUp").stroke("green"),this.pipes.find(".pipeLeft").stroke("green"),this.pipes.find(".pipeDown").stroke("green"),this.pipes.find(".pipeRight").stroke("green")):(this.pipes.find(".pipeUp").stroke("red"),this.pipes.find(".pipeLeft").stroke("red"),this.pipes.find(".pipeDown").stroke("red"),this.pipes.find(".pipeRight").stroke("red"))}shuffleIt(){for(var t=0;t<Math.floor(3*Math.random());t++)Math.random()<.5?this.rotateRight():this.rotateLeft()}rotateRight(){let t=this.up;this.up=this.left,this.left=this.down,this.down=this.right,this.right=t}rotateLeft(){let t=this.up;this.up=this.right,this.right=this.down,this.down=this.left,this.left=t}}},{kinetic:2}],4:[function(t,e,i){"use strict";const n=";",a="=",r="expires",s="path";e.exports={get:function(t,e=null){let i=t+a,n=decodeURIComponent(document.cookie).split(";");for(let t of n)if(0===(t=t.trim()).indexOf(i))return t.substring(i.length,t.length);return e},set:function(t,e,i=365,o="/"){let h=new Date;h.setTime(h.getTime()+24*i*60*60*1e3);let c=t+a+e,l=r+a+h.toUTCString(),d=s+a+o;document.cookie=c+n+l+n+d}}},{}],5:[function(t,e,i){"use strict";const n=t("kinetic"),a=t("./module/cookie"),r=t("./model/block");let s,o,h,c,l,d,u,f,g,p,v,m,y,_,S,C=1280,x=720,w=10,b=10,F=5,k=5,T=0,P=Math.min(C,x)/Math.max(w,b)-2*F,A=Math.floor(w/2),M=Math.floor(b/2);function D(){switch(s.hasChildren()&&s.destroyChildren(),o="classic",h){case"easy":w=5,b=5;break;case"medium":w=10,b=10;break;case"hard":w=15,b=15}A=Math.floor(w/2),M=Math.floor(b/2),c=Math.floor(w/k)+1,l=Math.floor(b/k)+1,P=Math.min(C,x)/Math.max(w,b)-2*F,(d=new I).generateFields(),d.shuffle(),d.drawGame(),u=new L,f=new N,u.setInc(!0),u.start(),f.initPanel(),f.updateScore(a.get("classic_high_score_"+h,"--/--")),f.hideLevel()}function G(){s.hasChildren()&&s.destroyChildren(),o="time-trial",w=4+ ++T,b=4+T,A=Math.floor(w/2),M=Math.floor(b/2),c=Math.floor(w/k)+1,l=Math.floor(b/k)+1,P=Math.min(C,x)/Math.max(w,b)-2*F,(d=new I).generateFields(),d.shuffle(),d.drawGame(),void 0===u&&(u=new L),u.setInc(!1),u.setCurrentTime((0===u.getCurrentTime()?80:u.getCurrentTime())+30+10*T),u.start(),(f=new N).initPanel(),f.updateScore(a.get("time_trial_score","-")),f.updateTimer(u.getMin()+":"+u.getSec()),f.updateLevel(T)}function L(){var t=!0,e=null,i=0,n=0,r=0;function s(){i++,h(),f.updateTimer(r+":"+n)}function o(){i--,h(),f.updateTimer(r+":"+n),0===i&&(u.stop(),setTimeout(function(){var t=!1;null===a.get("time_trial_score")?t=!0:a.get("time_trial_score")<T&&(t=!0),alert("Congratulation! \nYour level: "+T+(t?"\nNew record!":"")),t&&a.set("time_trial_score",T),R()},300))}function h(){r=(r=Math.floor(i/60))<10?"0"+r:r,n=(n=i%60)<10?"0"+n:n}this.setInc=function(e){t=e},this.getCurrentTime=function(){return i},this.setCurrentTime=function(t){i=t,h()},this.start=function(){e=t?setInterval(s,1e3):setInterval(o,1e3)},this.stop=function(){clearInterval(e)},this.reset=function(){i=0,n=0,r=0},this.getSec=function(){return n},this.getMin=function(){return r}}function R(){s.hasChildren()&&s.destroyChildren();var t=new n.Text({x:C/2,y:x/3-100,text:"Classic game",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var e=new n.Text({x:C/2,y:x/3,text:"Time trial",fontSize:32,fontFamily:"Calibri",fill:"grey"});e.setOffset({x:e.getWidth()/2});var i=new n.Text({x:C/2,y:x/3+100,text:"Scoreboard",fontSize:32,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2});var r=new n.Text({x:C/2,y:x/3+200,text:"Information",fontSize:32,fontFamily:"Calibri",fill:"grey"});r.setOffset({x:r.getWidth()/2}),(g=new n.Layer).name="gameMenu",g.add(t),g.add(e),g.add(i),g.add(r),s.add(g);var o=new n.Animation(function(){t.fill("black"),this.stop()},g),c=new n.Animation(function(){t.fill("grey"),this.stop()},g);t.on("mouseover",function(){o.start()}),t.on("mouseout",function(){c.start()}),t.on("click",function(){!function(){s.hasChildren()&&s.destroyChildren();var t=new n.Text({x:C/2,y:x/3-100,text:"Easy (5x5)",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var e=new n.Text({x:C/2,y:x/3,text:"Medium (10x10)",fontSize:32,fontFamily:"Calibri",fill:"grey"});e.setOffset({x:e.getWidth()/2});var i=new n.Text({x:C/2,y:x/3+100,text:"Hard (15x15)",fontSize:32,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2});var a=new n.Text({x:C/2,y:x/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});a.setOffset({x:a.getWidth()/2}),(p=new n.Layer).name="difficultySelectMenu",p.add(t),p.add(e),p.add(i),p.add(a),s.add(p);var r=new n.Animation(function(){t.fill("black"),this.stop()},p),o=new n.Animation(function(){t.fill("grey"),this.stop()},p);t.on("mouseover",function(){r.start()}),t.on("mouseout",function(){o.start()}),t.on("click",function(){h="easy",D()});var c=new n.Animation(function(){e.fill("black"),this.stop()},p),l=new n.Animation(function(){e.fill("grey"),this.stop()},p);e.on("mouseover",function(){c.start()}),e.on("mouseout",function(){l.start()}),e.on("click",function(){h="medium",D()});var d=new n.Animation(function(){i.fill("black"),this.stop()},p),u=new n.Animation(function(){i.fill("grey"),this.stop()},p);i.on("mouseover",function(){d.start()}),i.on("mouseout",function(){u.start()}),i.on("click",function(){h="hard",D()});var f=new n.Animation(function(){a.fill("black"),this.stop()},p),g=new n.Animation(function(){a.fill("grey"),this.stop()},p);a.on("mouseover",function(){f.start()}),a.on("mouseout",function(){g.start()}),a.on("click",function(){R()})}()});var l=new n.Animation(function(){e.fill("black"),this.stop()},g),d=new n.Animation(function(){e.fill("grey"),this.stop()},g);e.on("mouseover",function(){l.start()}),e.on("mouseout",function(){d.start()}),e.on("click",function(){!function(){s.hasChildren()&&s.destroyChildren();var t=new n.Text({x:C/2,y:x/3,text:"Starting time trial",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var e=new n.Text({x:C/2,y:x/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});e.setOffset({x:e.getWidth()/2}),(v=new n.Layer).name="timeTrialGameLayer",v.add(t),v.add(e),s.add(v);var i=new n.Animation(function(){t.fill("black"),this.stop()},v),a=new n.Animation(function(){t.fill("grey"),this.stop()},v);t.on("mouseover",function(){i.start()}),t.on("mouseout",function(){a.start()}),t.on("click",function(){G()});var r=new n.Animation(function(){e.fill("black"),this.stop()},v),o=new n.Animation(function(){e.fill("grey"),this.stop()},v);e.on("mouseover",function(){r.start()}),e.on("mouseout",function(){o.start()}),e.on("click",function(){R()})}()});var u=new n.Animation(function(){i.fill("black"),this.stop()},g),f=new n.Animation(function(){i.fill("grey"),this.stop()},g);i.on("mouseover",function(){u.start()}),i.on("mouseout",function(){f.start()}),i.on("click",function(){!function(){s.hasChildren()&&s.destroyChildren();var t=new n.Text({x:C/2,y:x/3-100,text:"Classic game",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var e=new n.Text({x:C/2-120,y:x/3-40,text:"Easy\n"+a.get("classic_high_score_easy","99:99"),fontSize:18,fontFamily:"Calibri",fill:"grey"});e.setOffset({x:e.getWidth()/2});var i=new n.Text({x:C/2,y:x/3-40,text:"Medium\n"+a.get("classic_high_score_medium","99:99"),fontSize:18,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2});var r=new n.Text({x:C/2+120,y:x/3-40,text:"Hard\n"+a.get("classic_high_score_hard","99:99"),fontSize:18,fontFamily:"Calibri",fill:"grey"});r.setOffset({x:r.getWidth()/2});var o=new n.Text({x:C/2,y:x/3+40,text:"Time trial",fontSize:32,fontFamily:"Calibri",fill:"grey"});o.setOffset({x:o.getWidth()/2});var h=new n.Text({x:C/2,y:x/3+100,text:a.get("time_trial_score","0")+". level",fontSize:18,fontFamily:"Calibri",fill:"grey"});h.setOffset({x:h.getWidth()/2});var c=new n.Text({x:C/2,y:x/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});c.setOffset({x:c.getWidth()/2}),(m=new n.Layer).name="scoreBoardMenuLayer",m.add(t),m.add(e),m.add(i),m.add(r),m.add(o),m.add(h),m.add(c),s.add(m);var l=new n.Animation(function(){c.fill("black"),this.stop()},m),d=new n.Animation(function(){c.fill("grey"),this.stop()},m);c.on("mouseover",function(){l.start()}),c.on("mouseout",function(){d.start()}),c.on("click",function(){R()})}()});var _=new n.Animation(function(){r.fill("black"),this.stop()},g),S=new n.Animation(function(){r.fill("grey"),this.stop()},g);r.on("mouseover",function(){_.start()}),r.on("mouseout",function(){S.start()}),r.on("click",function(){!function(){s.hasChildren()&&s.destroyChildren();var t=new n.Text({x:C/2,y:x/3-100,text:"",fontSize:18,fontFamily:"Calibri",fill:"grey"});let e="Game goal:\nTurn all the pipes into the correct position, so every pipe connected to each other!\n";e+="In classic game you can choose between three different difficulty, while in time trial the difficulty is incrementaly increasing.\n",e+="Time is key, so don't hesitate too much!\n",e+="You can check your rank at the scoreboard!\n\nMade by: White Rabbit (Tamás Ruszka) (C) 2014,\nMail: ruszka dot tamas at gmail dot com",t.setText(e),t.setOffset({x:t.getWidth()/2>0?t.getWidth()/2:0});var i=new n.Text({x:C/2,y:x/3+200,text:"Back to the menu",fontSize:32,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2}),(y=new n.Layer).name="informationMenuLayer",y.add(t),y.add(i),s.add(y);var a=new n.Animation(function(){i.fill("black"),this.stop()},y),r=new n.Animation(function(){i.fill("grey"),this.stop()},y);i.on("mouseover",function(){a.start()}),i.on("mouseout",function(){r.start()}),i.on("click",function(){R()})}()})}function I(){_=[];for(let t=0;t<c;t++){_[t]=new Array(l);for(let e=0;e<l;e++)_[t][e]=new n.Layer}S=[],this.generateFields=function(){var t=0,e=0,i=!0;for(let t=0;t<w;t++){S[t]=new Array(b);for(let e=0;e<b;e++)S[t][e]=new r(t,e,t*b+e,F,P)}for(;i;){let n=Math.floor(Math.random()*w),a=Math.floor(Math.random()*b),r=S[n][a];if(i=!1,0!==r.key)switch(Math.floor(4*Math.random()+0)){case 0:if(0!==n){let i=S[n-1][a];if(void 0!==i&&r.key!==i.key){r.left=!0,i.right=!0,t=r.key>i.key?r.key:i.key,e=r.key<i.key?r.key:i.key;for(let i=0;i<w;i++)for(let i=0;i<b;i++)r.key===t&&(r.key=e)}}break;case 1:if(0!==a){let i=S[n][a-1];if(void 0!==i&&r.key!==i.key){r.up=!0,i.down=!0,t=r.key>i.key?r.key:i.key,e=r.key<i.key?r.key:i.key;for(let i=0;i<w;i++)for(let n=0;n<b;n++)S[i][n].key===t&&(S[i][n].key=e)}}break;case 2:if(n!==b-1){let i=S[n+1][a];if(void 0!==i&&r.key!==i.key){r.right=!0,i.left=!0,t=r.key>i.key?r.key:i.key,e=r.key<i.key?r.key:i.key;for(let i=0;i<w;i++)for(let n=0;n<b;n++)S[i][n].key===t&&(S[i][n].key=e)}}break;case 3:if(a!==w-1){let i=S[n][a+1];if(void 0!==i&&r.key!==i.key){r.down=!0,i.up=!0,t=r.key>i.key?r.key:i.key,e=r.key<i.key?r.key:i.key;for(let i=0;i<w;i++)for(let n=0;n<b;n++)S[i][n].key===t&&(S[i][n].key=e)}}}for(let t=0;t<w;t++)for(let e=0;e<b;e++)S[t][e].key>0&&(i=!0)}},this.shuffle=function(){for(var t=0;t<w;t++)for(var e=0;e<b;e++)S[t][e].shuffleIt()},this.drawGame=function(){for(let t=0;t<w;t++)for(let e=0;e<b;e++)S[t][e].init(B,z,C,w),_[Math.floor(t/k)][Math.floor(e/k)].add(S[t][e].box);S[A][M].connected=!0,S[A][M].connectionHandler(!0),this.checkPipeConnections();for(let t=0;t<c;t++)for(let e=0;e<l;e++)s.add(_[t][e])},this.checkPipeConnections=function(){var t=0,e=0;for(t=0;t<w;t++)for(e=0;e<b;e++)S[t][e].connected=!1,S[t][e].connectionHandler(!1);for(S[A][M].connected=!0,S[A][M].connectionHandler(!0),t=0;t<w;t++)for(e=0;e<b;e++)if(S[t][e].connected){var i=!1;0===t||i||S[t][e].left&&S[t-1][e].right&&(S[t-1][e].connected||(S[t-1][e].connected=!0,S[t-1][e].connectionHandler(!0),t=0,e=-1,i=!0)),t===w-1||i||S[t][e].right&&S[t+1][e].left&&(S[t+1][e].connected||(S[t+1][e].connected=!0,S[t+1][e].connectionHandler(!0),t=0,e=-1,i=!0)),0===e||i||S[t][e].up&&S[t][e-1].down&&(S[t][e-1].connected||(S[t][e-1].connected=!0,S[t][e-1].connectionHandler(!0),t=0,e=-1,i=!0)),e===b-1||i||S[t][e].down&&S[t][e+1].up&&(S[t][e+1].connected||(S[t][e+1].connected=!0,S[t][e+1].connectionHandler(!0),t=0,e=-1,i=!0))}}}function N(){var t=C/2+w*P/2+w*(2*F),e=C-(t+w*F*2),i=x,a=new n.Layer,r=new n.Group({x:t,y:0,width:e,height:i}),o=new n.Group({x:0,y:0,width:t-C,height:x}),h=new n.Group({x:0,y:0,width:t-C,height:x}),c=new n.Group({x:0,y:0,width:t-C,height:x}),l=new n.Text({x:200,y:200,text:"Back",fontSize:48,fontFamily:"Calibri",fill:"grey"}),d=new n.Text({x:30,y:50,text:"Time:",fontSize:32,fontFamily:"Calibri",fill:"grey"}),u=new n.Text({x:30,y:100,text:"00:00",fontSize:48,fontFamily:"Calibri",fill:"grey"}),f=new n.Text({x:200,y:50,text:"Previous record:",fontSize:32,fontFamily:"Calibri",fill:"grey"}),g=new n.Text({x:200,y:100,text:"00:00",fontSize:48,fontFamily:"Calibri",fill:"grey"}),p=new n.Text({x:30,y:200,text:"Actual level:",fontSize:32,fontFamily:"Calibri",fill:"grey"}),v=new n.Text({x:30,y:250,text:"1",fontSize:64,fontFamily:"Calibri",fill:"grey"});this.initPanel=function(){o.add(d),o.add(u),h.add(f),h.add(g),h.add(l),c.add(p),c.add(v),r.add(o),r.add(h),r.add(c),a.add(r),s.add(a)},this.showTimer=function(){o.show(),a.draw()},this.hideTimer=function(){o.hide(),a.draw()},this.showScore=function(){h.show(),a.draw()},this.scoreTimer=function(){h.hide(),a.draw()},this.showLevel=function(){c.show(),a.draw()},this.hideLevel=function(){c.hide(),a.draw()},this.updateTimer=function(t){u.setText(t),a.draw()},this.updateScore=function(t){g.setText(t),a.draw()},this.updateLevel=function(t){v.setText(t),a.draw()};var m=new n.Animation(function(){l.fill("black"),this.stop()},a),y=new n.Animation(function(){l.fill("grey"),this.stop()},a);l.on("mouseover",function(){m.start()}),l.on("mouseout",function(){y.start()}),l.on("click",function(){R()})}function O(){u.stop(),setTimeout(function(){var t=!1;null===a.get("classic_high_score_"+h)?t=!0:a.get("classic_high_score_"+h)>u.getMin()+" : "+u.getSec()&&(t=!0),alert("Congratulation, you solved the level! \nYour time: "+u.getMin()+" : "+u.getSec()+(t?"\nNew record!":"")),t&&a.set("classic_high_score_"+h,u.getMin()+" : "+u.getSec()),R()},300)}function U(){u.stop(),setTimeout(function(){G()},300)}function B(t){t.mouseClick.isRunning()||t.animationIsRunning||(t.rotateRight(),t.mouseClick.start(),setTimeout(function(){d.checkPipeConnections(),function(){var t=!0;for(let e=0;e<w;e++)for(let i=0;i<b;i++)S[e][i].connected||(t=!1);if(t)"classic"===o?O():"time-trial"===o&&U();else for(let t=0;t<c;t++)for(let e=0;e<l;e++)_[t][e].draw()}()},100))}function z(t){return new n.Animation(function(){if(t.animationIsRunning=!0,t.box.rotate(5),t.box.rotation()>=t.rotation+90){t.box.rotation(t.rotation+90),t.rotation=t.box.rotation();var e=!0;for(let t=0;t<w;t++)for(let i=0;i<b;i++)S[t][i].connected||(e=!1);if(this.stop(),t.animationIsRunning=!1,e)"classic"===o?O():"time-trial"===o&&U();else for(let t=0;t<c;t++)for(let e=0;e<l;e++)_[t][e].draw()}},_[Math.floor(t.row/k)][Math.floor(t.column/k)])}e.exports={loadApplication:function(){C=window.innerWidth,x=window.innerHeight-200,s=new n.Stage({container:"table",width:C,height:x}),R()}}},{"./model/block":3,"./module/cookie":4,kinetic:2}],6:[function(t,e,i){"use strict";var n=t("./js/pipe");window.onload=function(){n.loadApplication()}},{"./js/pipe":5}]},{},[6]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
