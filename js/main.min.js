!function a(r,s,c){function l(t,e){if(!s[t]){if(!r[t]){var i="function"==typeof require&&require;if(!e&&i)return i(t,!0);if(f)return f(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var o=s[t]={exports:{}};r[t][0].call(o.exports,function(e){return l(r[t][1][e]||e)},o,o.exports,a,r,s,c)}return s[t].exports}for(var f="function"==typeof require&&require,e=0;e<c.length;e++)l(c[e]);return l}({1:[function(e,t,n){function d(){switch(stage.hasChildren()&&stage.destroyChildren(),gameType="classic",gameDifficulty){case"easy":rows=5,columns=5;break;case"medium":rows=10,columns=10;break;case"hard":rows=15,columns=15}startingPointX=Math.floor(rows/2),startingPointY=Math.floor(columns/2),layerRows=Math.floor(rows/layerSize)+1,layerColumns=Math.floor(columns/layerSize)+1,blockSize=Math.min(width,height)/Math.max(rows,columns)-2*space,table=new a,table.generateFields(),table.shuffle(),table.drawGame(),timer=new o,information=new r,timer.setInc(!0),timer.start(),information.initPanel(),information.updateScore(void 0===p.cookie("classic_high_score_"+gameDifficulty)?"--/--":p.cookie("classic_high_score_"+gameDifficulty)),information.hideLevel()}function w(){stage.hasChildren()&&stage.destroyChildren(),gameType="time-trial",level++,rows=4+level,columns=4+level,startingPointX=Math.floor(rows/2),startingPointY=Math.floor(columns/2),layerRows=Math.floor(rows/layerSize)+1,layerColumns=Math.floor(columns/layerSize)+1,blockSize=Math.min(width,height)/Math.max(rows,columns)-2*space,table=new a,table.generateFields(),table.shuffle(),table.drawGame(),"undefined"==typeof timer&&(timer=new o),timer.setInc(!1),timer.setCurrentTime((0===timer.getCurrentTime()?80:timer.getCurrentTime())+30+10*level),timer.start(),information=new r,information.initPanel(),information.updateScore(void 0===p.cookie("time_trial_score")?"-":p.cookie("time_trial_score")),information.updateTimer(timer.getMin()+":"+timer.getSec()),information.updateLevel(level)}function o(){var t=!0,e=null,i=0,n=0,o=0;function a(){i++,s(),information.updateTimer(o+":"+n)}function r(){i--,s(),information.updateTimer(o+":"+n),0===i&&(timer.stop(),setTimeout(function(){var e=!1;void 0===p.cookie("time_trial_score")?e=!0:p.cookie("time_trial_score")<level&&(e=!0),alert("Gratulálok a teljesítményedhez! \nAz elért szinted: "+level+(e?"\nÚj rekord!":"")),e&&p.cookie("time_trial_score",level,{expires:365,path:"/"}),K()},300))}function s(){o=(o=Math.floor(i/60))<10?"0"+o:o,n=(n=i%60)<10?"0"+n:n}this.setInc=function(e){t=e},this.getCurrentTime=function(){return i},this.setCurrentTime=function(e){i=e,s()},this.start=function(){e=t?setInterval(a,1e3):setInterval(r,1e3)},this.stop=function(){clearInterval(e)},this.reset=function(){o=n=i=0},this.getSec=function(){return n},this.getMin=function(){return o}}function K(){stage.hasChildren()&&stage.destroyChildren();var t=new Kinetic.Text({x:width/2,y:height/3-100,text:"Klasszikus játék",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var i=new Kinetic.Text({x:width/2,y:height/3,text:"Időfutam játék",fontSize:32,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2});var n=new Kinetic.Text({x:width/2,y:height/3+100,text:"Eredménytábla",fontSize:32,fontFamily:"Calibri",fill:"grey"});n.setOffset({x:n.getWidth()/2});var o=new Kinetic.Text({x:width/2,y:height/3+200,text:"Információ",fontSize:32,fontFamily:"Calibri",fill:"grey"});o.setOffset({x:o.getWidth()/2}),menuLayer=new Kinetic.Layer,menuLayer.name="gameMenu",menuLayer.add(t),menuLayer.add(i),menuLayer.add(n),menuLayer.add(o),stage.add(menuLayer);var e=new Kinetic.Animation(function(e){t.fill("black"),this.stop()},menuLayer),a=new Kinetic.Animation(function(e){t.fill("grey"),this.stop()},menuLayer);t.on("mouseover",function(){e.start()}),t.on("mouseout",function(){a.start()}),t.on("click",function(){!function(){stage.hasChildren()&&stage.destroyChildren();var t=new Kinetic.Text({x:width/2,y:height/3-100,text:"Könnyű (5x5)",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var i=new Kinetic.Text({x:width/2,y:height/3,text:"Közepes (10x10)",fontSize:32,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2});var n=new Kinetic.Text({x:width/2,y:height/3+100,text:"Nehéz (15x15)",fontSize:32,fontFamily:"Calibri",fill:"grey"});n.setOffset({x:n.getWidth()/2});var o=new Kinetic.Text({x:width/2,y:height/3+200,text:"Vissza a főmenübe",fontSize:32,fontFamily:"Calibri",fill:"grey"});o.setOffset({x:o.getWidth()/2}),difficultyLayer=new Kinetic.Layer,difficultyLayer.name="difficultySelectMenu",difficultyLayer.add(t),difficultyLayer.add(i),difficultyLayer.add(n),difficultyLayer.add(o),stage.add(difficultyLayer);var e=new Kinetic.Animation(function(e){t.fill("black"),this.stop()},difficultyLayer),a=new Kinetic.Animation(function(e){t.fill("grey"),this.stop()},difficultyLayer);t.on("mouseover",function(){e.start()}),t.on("mouseout",function(){a.start()}),t.on("click",function(){gameDifficulty="easy",d()});var r=new Kinetic.Animation(function(e){i.fill("black"),this.stop()},difficultyLayer),s=new Kinetic.Animation(function(e){i.fill("grey"),this.stop()},difficultyLayer);i.on("mouseover",function(){r.start()}),i.on("mouseout",function(){s.start()}),i.on("click",function(){gameDifficulty="medium",d()});var c=new Kinetic.Animation(function(e){n.fill("black"),this.stop()},difficultyLayer),l=new Kinetic.Animation(function(e){n.fill("grey"),this.stop()},difficultyLayer);n.on("mouseover",function(){c.start()}),n.on("mouseout",function(){l.start()}),n.on("click",function(){gameDifficulty="hard",d()});var f=new Kinetic.Animation(function(e){o.fill("black"),this.stop()},difficultyLayer),u=new Kinetic.Animation(function(e){o.fill("grey"),this.stop()},difficultyLayer);o.on("mouseover",function(){f.start()}),o.on("mouseout",function(){u.start()}),o.on("click",function(){K()})}()});var r=new Kinetic.Animation(function(e){i.fill("black"),this.stop()},menuLayer),s=new Kinetic.Animation(function(e){i.fill("grey"),this.stop()},menuLayer);i.on("mouseover",function(){r.start()}),i.on("mouseout",function(){s.start()}),i.on("click",function(){!function(){stage.hasChildren()&&stage.destroyChildren();var t=new Kinetic.Text({x:width/2,y:height/3,text:"Időfutam játék indítása",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var i=new Kinetic.Text({x:width/2,y:height/3+200,text:"Vissza a főmenübe",fontSize:32,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2}),timeTrialGameLayer=new Kinetic.Layer,timeTrialGameLayer.name="timeTrialGameLayer",timeTrialGameLayer.add(t),timeTrialGameLayer.add(i),stage.add(timeTrialGameLayer);var e=new Kinetic.Animation(function(e){t.fill("black"),this.stop()},timeTrialGameLayer),n=new Kinetic.Animation(function(e){t.fill("grey"),this.stop()},timeTrialGameLayer);t.on("mouseover",function(){e.start()}),t.on("mouseout",function(){n.start()}),t.on("click",function(){w()});var o=new Kinetic.Animation(function(e){i.fill("black"),this.stop()},timeTrialGameLayer),a=new Kinetic.Animation(function(e){i.fill("grey"),this.stop()},timeTrialGameLayer);i.on("mouseover",function(){o.start()}),i.on("mouseout",function(){a.start()}),i.on("click",function(){K()})}()});var c=new Kinetic.Animation(function(e){n.fill("black"),this.stop()},menuLayer),l=new Kinetic.Animation(function(e){n.fill("grey"),this.stop()},menuLayer);n.on("mouseover",function(){c.start()}),n.on("mouseout",function(){l.start()}),n.on("click",function(){!function(){stage.hasChildren()&&stage.destroyChildren();var e=new Kinetic.Text({x:width/2,y:height/3-100,text:"Klasszikus játékmód",fontSize:32,fontFamily:"Calibri",fill:"grey"});e.setOffset({x:e.getWidth()/2});var t=new Kinetic.Text({x:width/2-120,y:height/3-40,text:"Könnyű\n"+(void 0===p.cookie("classic_high_score_easy")?"99:99":p.cookie("classic_high_score_easy")),fontSize:18,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2});var i=new Kinetic.Text({x:width/2,y:height/3-40,text:"Közepes\n"+(void 0===p.cookie("classic_high_score_medium")?"99:99":p.cookie("classic_high_score_medium")),fontSize:18,fontFamily:"Calibri",fill:"grey"});i.setOffset({x:i.getWidth()/2});var n=new Kinetic.Text({x:width/2+120,y:height/3-40,text:"Nehéz\n"+(void 0===p.cookie("classic_high_score_hard")?"99:99":p.cookie("classic_high_score_hard")),fontSize:18,fontFamily:"Calibri",fill:"grey"});n.setOffset({x:n.getWidth()/2});var o=new Kinetic.Text({x:width/2,y:height/3+40,text:"Időfutam játékmód",fontSize:32,fontFamily:"Calibri",fill:"grey"});o.setOffset({x:o.getWidth()/2});var a=new Kinetic.Text({x:width/2,y:height/3+100,text:(void 0===p.cookie("time_trial_score")?"0":p.cookie("time_trial_score"))+". szint",fontSize:18,fontFamily:"Calibri",fill:"grey"});a.setOffset({x:a.getWidth()/2});var r=new Kinetic.Text({x:width/2,y:height/3+200,text:"Vissza a főmenübe",fontSize:32,fontFamily:"Calibri",fill:"grey"});r.setOffset({x:r.getWidth()/2}),scoreBoardMenuLayer=new Kinetic.Layer,scoreBoardMenuLayer.name="scoreBoardMenuLayer",scoreBoardMenuLayer.add(e),scoreBoardMenuLayer.add(t),scoreBoardMenuLayer.add(i),scoreBoardMenuLayer.add(n),scoreBoardMenuLayer.add(o),scoreBoardMenuLayer.add(a),scoreBoardMenuLayer.add(r),stage.add(scoreBoardMenuLayer);var s=new Kinetic.Animation(function(e){r.fill("black"),this.stop()},scoreBoardMenuLayer),c=new Kinetic.Animation(function(e){r.fill("grey"),this.stop()},scoreBoardMenuLayer);r.on("mouseover",function(){s.start()}),r.on("mouseout",function(){c.start()}),r.on("click",function(){K()})}()});var f=new Kinetic.Animation(function(e){o.fill("black"),this.stop()},menuLayer),u=new Kinetic.Animation(function(e){o.fill("grey"),this.stop()},menuLayer);o.on("mouseover",function(){f.start()}),o.on("mouseout",function(){u.start()}),o.on("click",function(){!function(){stage.hasChildren()&&stage.destroyChildren();var e=new Kinetic.Text({x:width/2,y:height/3-100,text:"",fontSize:18,fontFamily:"Calibri",fill:"grey"});"A klasszikus módban 3 nehézség közül választhatsz, míg az időfutamnál folyamatosan fognak nehezedni a pályák.\n","Játékmódtól függetlenül fontos szerepe lesz az időnek is, úgyhogy ne hezitálj túl sokat!\n","Az elért eredményeidet az eredménytábla menüpontban tekintheted meg!\n\nKészítette: White Rabbit (Ruszka Tamás) (C) 2014,\nE-mail: ruszka dot tamas at gmail dot com",e.setText("A játék célja:\nForgasd úgy a csöveket, hogy a végén az összes összeköttetésben legyenek a kiindulási ponttal!\nA klasszikus módban 3 nehézség közül választhatsz, míg az időfutamnál folyamatosan fognak nehezedni a pályák.\nJátékmódtól függetlenül fontos szerepe lesz az időnek is, úgyhogy ne hezitálj túl sokat!\nAz elért eredményeidet az eredménytábla menüpontban tekintheted meg!\n\nKészítette: White Rabbit (Ruszka Tamás) (C) 2014,\nE-mail: ruszka dot tamas at gmail dot com"),e.setOffset({x:0<e.getWidth()/2?e.getWidth()/2:0});var t=new Kinetic.Text({x:width/2,y:height/3+200,text:"Vissza a főmenübe",fontSize:32,fontFamily:"Calibri",fill:"grey"});t.setOffset({x:t.getWidth()/2}),informationMenuLayer=new Kinetic.Layer,informationMenuLayer.name="informationMenuLayer",informationMenuLayer.add(e),informationMenuLayer.add(t),stage.add(informationMenuLayer);var i=new Kinetic.Animation(function(e){t.fill("black"),this.stop()},informationMenuLayer),n=new Kinetic.Animation(function(e){t.fill("grey"),this.stop()},informationMenuLayer);t.on("mouseover",function(){i.start()}),t.on("mouseout",function(){n.start()}),t.on("click",function(){K()})}()})}function a(){var e=0,t=0;for(gameLayers=[],e=0;e<layerRows;e++)for(gameLayers[e]=new Array(layerColumns),t=0;t<layerColumns;t++)gameLayers[e][t]=new Kinetic.Layer;blocks=[],this.generateFields=function(){var e=0,t=0,i=0,n=0,o=!0;for(e=0;e<rows;e++)for(blocks[e]=new Array(columns),t=0;t<columns;t++)blocks[e][t]=new s(e,t,e*columns+t);for(;o;){o=!1;var a=Math.floor(Math.random()*rows),r=Math.floor(Math.random()*columns);if(0!==blocks[a][r].getKey())switch(Math.floor(4*Math.random()+0)){case 0:if(0!==a&&void 0!==blocks[a-1][r]&&blocks[a][r].getKey()!=blocks[a-1][r].getKey())for(blocks[a][r].setLeft(!0),blocks[a-1][r].setRight(!0),i=blocks[a][r].getKey()>blocks[a-1][r].getKey()?blocks[a][r].getKey():blocks[a-1][r].getKey(),n=blocks[a][r].getKey()<blocks[a-1][r].getKey()?blocks[a][r].getKey():blocks[a-1][r].getKey(),e=0;e<rows;e++)for(t=0;t<columns;t++)blocks[e][t].getKey()==i&&blocks[e][t].setKey(n);break;case 1:if(0!==r&&void 0!==blocks[a][r-1]&&blocks[a][r].getKey()!=blocks[a][r-1].getKey())for(blocks[a][r].setUp(!0),blocks[a][r-1].setDown(!0),i=blocks[a][r].getKey()>blocks[a][r-1].getKey()?blocks[a][r].getKey():blocks[a][r-1].getKey(),n=blocks[a][r].getKey()<blocks[a][r-1].getKey()?blocks[a][r].getKey():blocks[a][r-1].getKey(),e=0;e<rows;e++)for(t=0;t<columns;t++)blocks[e][t].getKey()==i&&blocks[e][t].setKey(n);break;case 2:if(a!=columns-1&&void 0!==blocks[a+1][r]&&blocks[a][r].getKey()!=blocks[a+1][r].getKey())for(blocks[a][r].setRight(!0),blocks[a+1][r].setLeft(!0),i=blocks[a][r].getKey()>blocks[a+1][r].getKey()?blocks[a][r].getKey():blocks[a+1][r].getKey(),n=blocks[a][r].getKey()<blocks[a+1][r].getKey()?blocks[a][r].getKey():blocks[a+1][r].getKey(),e=0;e<rows;e++)for(t=0;t<columns;t++)blocks[e][t].getKey()==i&&blocks[e][t].setKey(n);break;case 3:if(r!=rows-1&&void 0!==blocks[a][r+1]&&blocks[a][r].getKey()!=blocks[a][r+1].getKey())for(blocks[a][r].setDown(!0),blocks[a][r+1].setUp(!0),i=blocks[a][r].getKey()>blocks[a][r+1].getKey()?blocks[a][r].getKey():blocks[a][r+1].getKey(),n=blocks[a][r].getKey()<blocks[a][r+1].getKey()?blocks[a][r].getKey():blocks[a][r+1].getKey(),e=0;e<rows;e++)for(t=0;t<columns;t++)blocks[e][t].getKey()==i&&blocks[e][t].setKey(n)}for(e=0;e<rows;e++)for(t=0;t<columns;t++)0<blocks[e][t].getKey()&&(o=!0)}blocks[startingPointX][startingPointY].setConnected(!0),blocks[startingPointX][startingPointY].connectionHandler(!0)},this.shuffle=function(){for(var e=0;e<rows;e++)for(var t=0;t<columns;t++)blocks[e][t].shuffleIt()},this.drawGame=function(){for(e=0;e<rows;e++)for(t=0;t<columns;t++)blocks[e][t].init(),gameLayers[Math.floor(e/layerSize)][Math.floor(t/layerSize)].add(blocks[e][t].getBox());for(this.checkPipeConnections(),e=0;e<layerRows;e++)for(t=0;t<layerColumns;t++)stage.add(gameLayers[e][t])},this.checkPipeConnections=function(){var e=0,t=0;for(e=0;e<rows;e++)for(t=0;t<columns;t++)blocks[e][t].setConnected(!1),blocks[e][t].connectionHandler(!1);for(blocks[startingPointX][startingPointY].setConnected(!0),blocks[startingPointX][startingPointY].connectionHandler(!0),e=0;e<rows;e++)for(t=0;t<columns;t++)if(blocks[e][t].getConnected()){var i=!1;0===e||i||blocks[e][t].getLeft()&&blocks[e-1][t].getRight()&&(blocks[e-1][t].getConnected()||(blocks[e-1][t].setConnected(!0),blocks[e-1][t].connectionHandler(!0),t=-1,i=!(e=0))),e==rows-1||i||blocks[e][t].getRight()&&blocks[e+1][t].getLeft()&&(blocks[e+1][t].getConnected()||(blocks[e+1][t].setConnected(!0),blocks[e+1][t].connectionHandler(!0),t=-1,i=!(e=0))),0===t||i||blocks[e][t].getUp()&&blocks[e][t-1].getDown()&&(blocks[e][t-1].getConnected()||(blocks[e][t-1].setConnected(!0),blocks[e][t-1].connectionHandler(!0),t=-1,i=!(e=0))),t==columns-1||i||blocks[e][t].getDown()&&blocks[e][t+1].getUp()&&(blocks[e][t+1].getConnected()||(blocks[e][t+1].setConnected(!0),blocks[e][t+1].connectionHandler(!0),t=-1,i=!(e=0)))}}}function r(){var e=width/2+rows*blockSize/2+rows*(2*space),t=width-(e+rows*space*2),i=height,n=new Kinetic.Layer,o=new Kinetic.Group({x:e,y:0,width:t,height:i}),a=new Kinetic.Group({x:0,y:0,width:e-width,height:height}),r=new Kinetic.Group({x:0,y:0,width:e-width,height:height}),s=new Kinetic.Group({x:0,y:0,width:e-width,height:height}),c=new Kinetic.Text({x:200,y:200,text:"Vissza",fontSize:48,fontFamily:"Calibri",fill:"grey"}),l=new Kinetic.Text({x:30,y:50,text:"Idő:",fontSize:32,fontFamily:"Calibri",fill:"grey"}),f=new Kinetic.Text({x:30,y:100,text:"00:00",fontSize:48,fontFamily:"Calibri",fill:"grey"}),u=new Kinetic.Text({x:200,y:50,text:"Előző rekord:",fontSize:32,fontFamily:"Calibri",fill:"grey"}),d=new Kinetic.Text({x:200,y:100,text:"00:00",fontSize:48,fontFamily:"Calibri",fill:"grey"}),h=new Kinetic.Text({x:30,y:200,text:"Aktuális szint:",fontSize:32,fontFamily:"Calibri",fill:"grey"}),y=new Kinetic.Text({x:30,y:250,text:"1",fontSize:64,fontFamily:"Calibri",fill:"grey"});this.initPanel=function(){a.add(l),a.add(f),r.add(u),r.add(d),r.add(c),s.add(h),s.add(y),o.add(a),o.add(r),o.add(s),n.add(o),stage.add(n)},this.showTimer=function(){a.show(),n.draw()},this.hideTimer=function(){a.hide(),n.draw()},this.showScore=function(){r.show(),n.draw()},this.scoreTimer=function(){r.hide(),n.draw()},this.showLevel=function(){s.show(),n.draw()},this.hideLevel=function(){s.hide(),n.draw()},this.updateTimer=function(e){f.setText(e),n.draw()},this.updateScore=function(e){d.setText(e),n.draw()},this.updateLevel=function(e){y.setText(e),n.draw()};var m=new Kinetic.Animation(function(e){c.fill("black"),this.stop()},n),g=new Kinetic.Animation(function(e){c.fill("grey"),this.stop()},n);c.on("mouseover",function(){m.start()}),c.on("mouseout",function(){g.start()}),c.on("click",function(){K()})}function s(e,t,n){var o=e*(2*space+blockSize)+space,a=t*(2*space+blockSize)+space,r=!1,s=!1,c=!1,l=!1,f=n,u=!1,d=0,h=new Kinetic.Group({x:o+blockSize/2+(width-blockSize*rows)/2-blockSize/2,y:a+blockSize/2,width:blockSize,height:blockSize,offset:{x:blockSize/2,y:blockSize/2}}),y=new Kinetic.Group({x:0,y:0}),m=new Kinetic.Rect({x:0,y:0,width:blockSize,height:blockSize,name:o+"-"+a,fill:"grey",stroke:"black",strokeWidth:space});function g(){var e=r;r=s,s=c,c=l,l=e}function k(){var e=r;r=l,l=c,c=s,s=e}this.getConnected=function(){return u},this.setConnected=function(e){u=e},this.getKey=function(){return f},this.setKey=function(e){f=e},this.getRotation=function(){return d},this.setLeft=function(e){s=e},this.getLeft=function(){return s},this.setDown=function(e){c=e},this.getDown=function(){return c},this.setRight=function(e){l=e},this.getRight=function(){return l},this.setUp=function(e){r=e},this.getUp=function(){return r},this.getBox=function(){return h},this.setParentLayer=function(e){parentLayer=e},this.connectionHandler=function(e){e?(y.find(".pipeUp").stroke("green"),y.find(".pipeLeft").stroke("green"),y.find(".pipeDown").stroke("green"),y.find(".pipeRight").stroke("green")):(y.find(".pipeUp").stroke("red"),y.find(".pipeLeft").stroke("red"),y.find(".pipeDown").stroke("red"),y.find(".pipeRight").stroke("red"))},this.shuffleIt=function(){for(var e=0;e<Math.floor(3*Math.random()+0);e++)Math.random()<.5?g():k()};var b=new Kinetic.Animation(function(e){if(animationIsRunning=!0,h.rotate(5),h.rotation()>=d+90){h.rotation(d+90),d=h.rotation();var t=!0;for(i=0;i<rows;i++)for(j=0;j<columns;j++)blocks[i][j].getConnected()||(t=!1);if(this.stop(),animationIsRunning=!1,t)"classic"==gameType?(timer.stop(),setTimeout(function(){var e=!1;void 0===p.cookie("classic_high_score_"+gameDifficulty)?e=!0:p.cookie("classic_high_score_"+gameDifficulty)>timer.getMin()+" : "+timer.getSec()&&(e=!0),alert("Gratulálok, sikeresen kiraktad a pályát! \nAz időd: "+timer.getMin()+" : "+timer.getSec()+(e?"\nÚj rekord!":"")),e&&p.cookie("classic_high_score_"+gameDifficulty,timer.getMin()+" : "+timer.getSec(),{expires:365,path:"/"}),K()},300)):"time-trial"==gameType&&(timer.stop(),setTimeout(function(){w()},300));else for(i=0;i<layerRows;i++)for(j=0;j<layerColumns;j++)gameLayers[i][j].draw()}},gameLayers[Math.floor(e/layerSize)][Math.floor(t/layerSize)]);this.init=function(){var e=new Kinetic.Line({points:[blockSize/2,0,blockSize/2,blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeUp"}),t=new Kinetic.Line({points:[0,blockSize/2,blockSize/2,blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeLeft"}),i=new Kinetic.Line({points:[blockSize/2,blockSize,blockSize/2,blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeDown"}),n=new Kinetic.Line({points:[blockSize,blockSize/2,blockSize/2,blockSize/2],stroke:"red",strokeWidth:13,lineCap:"round",name:"pipeRight"});r&&y.add(e),s&&y.add(t),c&&y.add(i),l&&y.add(n),h.on("click",function(){b.isRunning()||animationIsRunning||(g(),b.start(),setTimeout(function(){table.checkPipeConnections()},100))}),h.add(m),h.add(y)}}var p;p=jQuery,width=1280,height=720,rows=10,columns=10,space=5,layerSize=5,level=0,animationIsRunning=!1,blockSize=Math.min(width,height)/Math.max(rows,columns)-2*space,startingPointX=Math.floor(rows/2),startingPointY=Math.floor(columns/2),p(document).on("ready",function(){width=p(window).width(),height=p(window).height()-200,stage=new Kinetic.Stage({container:"table",width:width,height:height}),K()})},{}],2:[function(e,t,i){"use strict";var n=e("./js/pipe");window.onload=function(){this.console.log("Yey",n)}},{"./js/pipe":1}]},{},[2]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
